/*
    ---------------------------------------------------------------------------
     Lithuanian Role Play - 2015 m.
    ---------------------------------------------------------------------------
    
    Gamemode sukurtas 2009m.
    Gamemode kurëjas: Gedaas (Warrior).
    Legalus gamemode savininkas: Nova.
    
    ---------------------------------------------------------------------------
     
    This script is copyrighted to Gedas, Nova.
    It may be edited, hosted, renamed, redistributed, etc. as long as credit is given to him.
     
    ---------------------------------------------------------------------------
    
    Skripto autorinës teisës priklauso kurëjui Gedas, Nova.
    Skriptas gali bûti redaguojamas, naudojamas ar kitaip keièiamas jei tik nebus paþeidþiamos ðios teisës.


*/



#define VERSION                         2.0.8
#define BUILD_DATE                      2015-04.04

#include <a_samp>
native IsValidVehicle(vehicleid);
native WP_Hash(buffer[], len, const str[]);
#include <mSelection>
//#define  TIMER_FIX_TIMER_SLOTS          512
//#include <timerfix>
//#include <a_http>
#include <foreach>
#include <a_mysql>
#include <audio>
#include <sscanf2>
#include <streamer>
#include <lookup>
#include <zcmd>
#include <airbreak>
#include <GameTextS7.inc>
#include <fader>
#include <OnPlayerFirstSpawn>
#include <mapandreas>
#include <crashdetect>
#include <filemanager>
#include <YSI\y_malloc>
#include <YSI\y_hooks>
#include <YSI\y_timers>



/*#if !defined abs 
    #define abs(%0) ((%0 > 0)?(%0):(-%0))
#endif
*/

stock abs(value)
    return (value > 0) ? (value) : (-value);

forward Float:GetPlayerMaxHealth(playerid);
forward OnPlayerLoginEx(playerid, sqlid);


#pragma dynamic 108920
#define DEBUG

#define BENZO_KAINA 5
#define AC_MAX_CHECKS           (2)         // Kiek kartø patikrinama, prieð imantis veiksmø
#define AC_MAX_SPEED            (230)       // Didþiausias veikëjo / maðinos judëjimo greitis
#define AC_SPEED(%0,%1,%2,%3,%4) floatround(floatsqroot(%4?(%0*%0+%1*%1+%2*%2):(%0*%0+%1*%1))*%3*1.6)


#undef  MAX_PLAYERS
#define MAX_PLAYERS 256


#include "ErrorLog"
#include "Config/mysql"

#include "Tabula/Zonos.pwn"
#include "Tabula/liftas.pwn"

#undef  MAX_VEHICLES
#define MAX_VEHICLES 500

#undef  INVALID_TEXT_DRAW
#define INVALID_TEXT_DRAW   Text:0xFFFF

#undef  INVALID_MENU
#define INVALID_MENU        Menu:0xFF

#undef INVALID_3DTEXT_ID
#define INVALID_3DTEXT_ID   Text3D:0xFFFF

#define INTERIORMENU 4337
#define INTERIORMENU2 5337

#define PlayerToPoint(%1,%2,%3,%4,%5) IsPlayerInRangeOfPoint(%2,%1,%3,%4,%5)
#define FactionMySQLID(%1) fInfo[ %1 ][ fID ]
#define FUNKCIJA:%1(%2)     \
            forward %1(%2); \
            public %1(%2)
// Spalvos
#define COLOR_GREY 0xC8C8C8C8
#define COLOR_TEAL 0x67AAB1FF
#define COLOR_YELLOW 0xFFFF00AA
#define COLOR_LIGHTRED 0xFF6347AA
#define COLOR_NEWS 0xFFA500FF
#define GRAD 0xDCDCDCDD
#define COLOR_GRAD                      GRAD
#define GRAD2 0xDCDCDC99
#define COLOR_PURPLE 0xC2A2DAAA
#define COLOR_FADE1 0xE6E6E6E6
#define COLOR_FADE2 0xC8C8C8C8
#define COLOR_FADE3 0xAAAAAAAA
#define COLOR_FADE4 0x8C8C8C8C
#define COLOR_FADE5 0x6E6E6E6E
#define COLOR_RED 0xFE2E2EFF
#define COLOR_GREEN 0x16961AFF
#define COLOR_AD 0x00D900FF
#define COLOR_GREEN2 0x00D900CC
#define COLOR_WHITE 0xFFFFFFFF
#define COLOR_BLUE 0x2641FEAA
#define COLOR_ADM 0xE0C183FF
#define COLOR_OOC 0xB1C8FBAA
#define TEAM_HIT_COLOR 0xFFFFFF00
#define COLOR_LIGHTRED2 0xF5DEB3AA
#define COLOR_BLUE2 0x01FCFFC8
#define COLOR_GREEN_NEW 0x00FF6611
#define TEAM_TESTER_COLOR 0xFF003300
#define TEAM_ADMIN_COLOR 0x33CC0000
#define COLOR_CYAN 0x00FFFFFF
#define COLOR_POLICE 0x35A5CAFF
#define COLOR_FCHAT 0x31B5AEFF
#define COLOR_POLICEM 0x4261CCFF
#define COLOR_MODERATOR 0xA4DE63FF

// MAX Nustatymai
#define MAX_ROADBLOCKS 50
#define MAX_HOUSES 300
#define MAX_BIZNES 200
#define MAX_GARAGES                     100
#define MAX_FACTION_RANKS  14
#define MAX_FIRE  10
#define MAX_FISH_IN_BAG                 350
#define MAX_BUSINESS_PRODUCTS           2000
#define MAX_TRUCKER_CARGO_NAME          32
#define MAX_PHONEBOOK_ENTRIES           10
#define MAX_DROPPED_WEAPONS            50
#define MAX_FISHING_SPOTS               20

// Yra tik 13 slotø GTA SA. Todël uþsidëti daugiau ginklø þaidëjas negali.
#define MAX_PLAYER_ATTACHED_WEAPONS     13



// Procentas ant kiek laivas pirks prekes pigiau nei industriju vidurkis. ARBA kiek daugiau jei prekes niekas neperka.
#define SHIP_BUY_PRICE_MARGIN           10 

/// Visokiu dalyku positions 
#define FISH_SHOP_LAND_POS_X                 2414.6655
#define FISH_SHOP_LAND_POS_Y                 -1426.3036
#define FISH_SHOP_LAND_POS_Z                 23.9858

#define FISH_SHOP_WATER_POS_X                 2926.8704
#define FISH_SHOP_WATER_POS_Y                 -2040.7826
#define FISH_SHOP_WATER_POS_Z                 -0.2065

// Darbø ID
#define JOB_NONE      0
#define JOB_MECHANIC  1
#define JOB_SWEEPER   2
//#define JOB_BOXER     3
#define JOB_TRASH     3
#define JOB_DRUGS     4
#define JOB_GUN       5
#define JOB_TRUCKER   6
#define JOB_JACKER    7

// Daugiausiai ginklø turimø rankose
#define MAX_SAVED_WEAPONS 2
#define MAX_SAVED_WARES 10

// Checkpointai
#define CHECKPOINT_NONE  0
#define CHECKPOINT_CAR   1
#define CHECKPOINT_LIC   2
#define CHECKPOINT_TLC   3
#define CHECKPOINT_FISH  4
#define CHECKPOINT_BACKUP 5
#define CHECKPOINT_TRASH                6
#define CHECKPOINT_TRASH_DROPOFF        7
#define CHECKPOINT_SHIP					8

// Kiti nustatymai
#define MAX_WEED_SEEDS  200 // Kiek daugiausiai þolës seeds gali laikyti þmogus
#define MAX_TRUNK_SLOTS 12 // Maðinos bagaþinës vietos

// Namo inventoriaus vietø kiekis

// Dëmesio. Pakeitus ðá skaièiø reikia keisti ir LoadHouseInv
#define MAX_HOUSETRUNK_SLOTS 30 
#define MAX_GARAGETRUNK_SLOTS 10 // Garaþo inventoriaus vietø kiekis

// Meniu ID
#define MENU_INV        1
#define MENU_INV2       2

// Inventoriaus nustatymai
#define INVENTORY_SLOTS 8 // Inventoriaus vietos
#define iID             0
#define iAmmount        1


// Modinimo id'ai
#define MOD_URANUS1  1
#define MOD_URANUS2  2
#define MOD_JESTER   3
#define MOD_JESTER2  4
#define MOD_SULTAN   5
#define MOD_SULTAN2  6
#define MOD_STRATUM  7
#define MOD_STRATUM2 8
#define MOD_ELEGY    9
#define MOD_ELEGY2   10
#define MOD_FLASH    11
#define MOD_FLASH2   12
#define MOD_BLADE1   13
#define MOD_BLADE2   14
#define MOD_BROADWAY1 15
#define MOD_BROADWAY2 16
#define MOD_REMINGTON1 17
#define MOD_REMINGTON2 18
#define MOD_SAVANA1    19
#define MOD_SAVANA2    20
#define MOD_SLAMVAN1   21
#define MOD_SLAMVAN2   22
#define MOD_TORNADO1   23
#define MOD_TORNADO2   24

// GUI lenteliu ID.
#define DIALOG_SENTER_INPUT_ID          5463
#define DIALOG_SENTER_CHANGE_MODEL      5464
#define DIALOG_HOUSE_INPUT_NEW_MODEL    5465
#define DIALOG_HOUSE_INPUT_ID           5466
#define DIALOG_BUSINES_INPUT_NEW_MODEL  5467
#define DIALOG_BUSINESS_INPUT_ID        5468
#define DIALOG_TPDA_INDUSTRY            5500
#define DIALOG_TPDA_BUSINESS            5501
#define DIALOG_VEHICLE_CARGO_LIST       5502
#define DIALOG_INDUSTRY_INFO            5503
#define DIALOG_SOLD_COMMODITY_LIST      5504
#define DIALOG_COMMODITY_SELL			5505
#define DIALOG_TPDA_MAIN				5506
#define DIALOG_SHIP_INFO				5507 
#define DIALOG_VEHICLE_SHOPS_LIST       63
#define DIALOG_VEHICLE_SHOPS_DELETE_CON 5508
#define DIALOG_VEHICLE_SHOPS_NEW_NAME   5509
#define DIALOG_VEHICLE_SHOPS_MENU       5510    
#define DIALOG_VEHICLE_SHOPS_VEH_LIST   5511
#define DIALOG_VEHICLE_SHOPS_VEH_MAIN   5512   
#define DIALOG_VEHICLE_SHOPS_VEH_PRICE  5513
#define DIALOG_VEHICLE_SHOPS_VEH_NEW    5514
#define DIALOG_VEHICLE_SHOP_NEW         5515
#define DIALOG_VEHICLE_SHOP             5516
#define DIALOG_SECRET_QUESTION          5517
#define DIALOG_SECRET_QUESTION_SET      5518
#define DIALOG_SECRET_ANSWER_SET        5519

#define DEFAULT_SENTER_PICKUP_MODEL     1239
#define DEFAULT_HOUSE_PICKUP_MODEL      1273
#define DEFAULT_BIZ_PICKUP_MODEL        1239


// Mygtukø nustatymai
#define HOLDING(%0) \
    ((newkeys & (%0)) == (%0))
#define PRESSED(%0) \
    (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define RELEASED(%0) \
    (((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))


// UnixTimestamp kada buvo ájungtas serveris.
new ServerStartTimestamp;

enum radioInfo
{
    rName [ 28 ],
    rType [ 20 ],
    rUrl  [ 62 ]
};

#define STATIONS 18

#define MAX_RADIO_STATION_URL           64
new
    RadioStations [ STATIONS ] [ radioInfo ] =
{
    { "SKY FM", "Classic Rock", "http://www.sky.fm/mp3/classicrock.pls" },
    { "SKY.FM", "Classic Rap", "http://www.sky.fm/aacplus/classicrap.pls" },
    { "SKY.FM", "60's Rock", "http://www.sky.fm/aacplus/60srock.pls" },
    { "SKY.FM","80's Dance","http://www.sky.fm/aacplus/80sdance.pls" },
    { "SKY FM","80s Rock Hits","http://www.sky.fm/aacplus/80srock.pls" },
    { "SKY FM", "90's Hits", "http://www.sky.fm/aacplus/hit90s.pls" },
    { "SKY.FM", "90's R&B", "http://www.sky.fm/aacplus/90srnb.pls" },
    { "SKY.FM", "New Age", "http://www.sky.fm/aacplus/newage.pls" },
    { "SKY.FM","Russian Pop","http://www.sky.fm/aacplus/russianpop.pls" },
    { "SKY FM","Top Hits","http://www.sky.fm/aacplus/tophits.pls" },
    { "Chanson Radio","Russian","http://icecast.chanson.cdnvideo.ru:8000/chanson_64_bu.ogg" },
    { "Pulse Radio", "Variety", "http://cast9.directhostingcenter.com:2199/tunein/ulzgmqis.pls" },
    { "BassProject", "Electro", "http://bassproject.net/radio/listen256mp3.pls" },
    { "Dubbase  FM", "Dubstep", "http://player.listenlive.co/26151" },
    { "BestNetRadio","90s Alternative","http://107.155.126.42:7070/listen.pls" },
    { "BestNetRadio","90s Pop Rock","http://107.155.126.42:7080/listen.pls" },
    { "West Coast Classic", "Rap", "http://streaming.radionomy.com/WestCoastClassics"},
    { "Radio Salsa", "Rap", "http://streaming.radionomy.com/Radio-Salsa---Clasicos"}
};

new GunObjects[47] = {
    0,331,333,334,335,336,337,338,339,341,321,322,323,324,325,326,342,343,344,
    0,0,0,346,347,348,349,350,351,352,353,355,356,372,357,358,359,360,361,362,
    363,364,365,366,367,368,368,371
};

new PlayerFading = true;


// Trucker system
#define MAX_INDUSTRIES                  40
#define MAX_TRUCKER_CARGO               40
#define MAX_TRUCKER_CARGO_OBJECTS       40 // kiek daugiausiai objektu bus
#define MAX_COMMODITIES                 MAX_INDUSTRIES*MAX_TRUCKER_CARGO
#define MAX_BOXES                       60
#define MAX_INDUSTRY_NAME               64

// LS dokai. 2808.9011,-2438.3188,13.6285
#define SHIP_POS_X						2808.9011
#define SHIP_POS_Y						-2438.3188
#define SHIP_POS_Z						13.6285


enum E_CARGO_BOX_DATA
{
    CargoId,
    ObjectId,
    Float:PosX,
    Float:PosY,
    Float:PosZ,
    DissapearTimer,
    bool:CanBePickedUp // Visikai useless but nesvarbu...
};
new CargoBox[ MAX_BOXES ][ E_CARGO_BOX_DATA ];


enum E_INDUSTRIES_DATA {
    Id,
    Name[ MAX_INDUSTRY_NAME ],
    Float:PosX,
    Float:PosY,
    Float:PosZ,
    Text3D:Label,
	Pickup,
    bool:IsBuyingCargo
};

new Industries[ MAX_INDUSTRIES ][ E_INDUSTRIES_DATA ];


enum E_CARGO_DATA {
    Id,
    Name[ MAX_TRUCKER_CARGO_NAME ],
    Limit,
    Production,
    Consumption,
    Slot,
    Type
};

new TruckerCargo[ MAX_TRUCKER_CARGO ][ E_CARGO_DATA ];


enum E_COMMODITY_SELL_BUY_STATUS {
    Buying,
    Selling
};

enum E_COMMODITY_DATA {
    IndustryId,
    CargoId,
    E_COMMODITY_SELL_BUY_STATUS:SellBuyStatus,
    CurrentStock,
    bool:IsBusinessCommodity,
    Price
};

new Commodities[ MAX_COMMODITIES ][ E_COMMODITY_DATA ];

enum E_VEHICLE_CARGO {
    CargoId,
    Amount
};

enum E_SHIP_STATUS {
	Docked, // Stovi uoste, priema krovinius
	Moving, // Iðplaukia
    Arriving // Atplaukia. Rodomi judantys objektai.
};

#define CARGOSHIP_DOCKED_INTERVAL       40*60*1000
#define CARGOSHIP_MOVING_INTERVAL       5*60*1000


enum E_SHIP_DATA {
	E_SHIP_STATUS:Status,
	LastDepartureTimestamp,
    LastArrivalTimestamp,
	CurrentStock, // Skaièiuojamas cargo slotais, ne vienetais. 
    ObjectIDs[ 11 ] // Hard-coded nes tai yra CreateDynamicObject skaièius.
};

new ShipInfo[ E_SHIP_DATA ];

enum E_CARGOSHIP_OBJECT_DATA {
    ObjectModel,
    Float:PosX,
    Float:PosY,
    Float:PosZ,
    Float:RotX,
    Float:RotY,
    Float:RotZ  
};

new const CargoShipObjectPositions[ ][ E_CARGOSHIP_OBJECT_DATA ] = 
{
    {5160, 2829.95313, -2479.57031, 5.26560,   0.00000, 0.00000, 270.00000},
    {5156, 2838.03906, -2423.88281, 10.96090,   0.00000, 0.00000, 270.00000},
    {3724, 2838.19067, -2407.12109, 29.31250,   0.00000, 0.00000, 270.00000},
    {5167, 2838.03125, -2371.95313, 7.29690,   0.00000, 0.00000, 270.00000},
    {5166, 2829.95313, -2479.57031, 5.26560,   0.00000, 0.00000, 270.00000},
    {3724, 2838.21411, -2489.00000, 29.31250,   0.00000, 0.00000, 90.00000},
    {5155, 2838.02344, -2358.47656, 21.31250,   0.00000, 0.00000, 270.00000},
    {5158, 2837.77344, -2334.47656, 11.99220,   0.00000, 0.00000, 0.00000},
    {5154, 2838.14063, -2447.84375, 15.75000,   0.00000, 0.00000, 270.00000},
    {5157, 2838.03906, -2532.77344, 17.02340,   0.00000, 0.00000, 270.00000},
    {5165, 2838.03125, -2520.18750, 18.41406,   0.00000, 0.00000, 0.00000}
};

new VehicleCargo[ MAX_VEHICLES ][ MAX_TRUCKER_CARGO ][ E_VEHICLE_CARGO ],
    IsVehicleLoaded[ MAX_VEHICLES ],
    VehicleLoadTimer[ MAX_PLAYERS ] = {-1, ...},
	VehicleLoadTime[ MAX_PLAYERS ];

new Iterator:IndustryIterator<MAX_INDUSTRIES>;
new Iterator:TruckerCargoIterator<MAX_TRUCKER_CARGO>;
new Iterator:CommodityIterator<MAX_COMMODITIES>;


#include "IndustryManagementGUI"

// Sekundëmis
#define DROPPED_WEAPON_DESTROY_DELAY            10*60

enum E_DROPPED_WEAPON_DATA {
    ObjectId, 
    DissapearTimer,
    WeaponId,
    Ammo,
    bool:CanBePickedUp
};

new DroppedWeapons[ MAX_DROPPED_WEAPONS ][ E_DROPPED_WEAPON_DATA ];



#define MAX_AD_TEXT                     170

    // Kintamieji
new bool:PlayerOn[MAX_PLAYERS] = { false, ... },
    bool:OOCDisabled = false,
    Checkpoint[MAX_PLAYERS],
    bool:FirstSpawn[ MAX_PLAYERS ] = {true, ... },
    Offer[MAX_PLAYERS][9],
    OfferPrice[MAX_PLAYERS][8],
    OfferID[MAX_PLAYERS][8],
    bool:TogChat[MAX_PLAYERS][4],
    bool:Engine[MAX_VEHICLES] = { false, ... },
    bool:StartingEngine[MAX_PLAYERS] = { false, ... },
    PlayerText:InfoText[MAX_PLAYERS],
    PlayerText:Greitis[MAX_PLAYERS],
    Text:BlindfoldTextdraw,
    bool:IsBlindfolded[ MAX_PLAYERS ],
    Text3D:AdminON[MAX_PLAYERS],
    bool:AdminDuty[MAX_PLAYERS] = { false, ... },
    TalkingLive[MAX_PLAYERS],
    Biudzetas,
    cartax,
    biztax,
    housetax,
    Ruko[MAX_PLAYERS],
    Laikas[MAX_PLAYERS],
    LaikoTipas[MAX_PLAYERS],
    bool:Freezed[MAX_PLAYERS] = { false, ... },
    MobilePhone[MAX_PLAYERS],
    RingTone[MAX_PLAYERS],
    bool:Boxing[MAX_PLAYERS],
    BoxStart,
    Mires[MAX_PLAYERS],
    OldHour,
    bool:Mute[MAX_PLAYERS] = { false, ... },
    Mats = 300,
    bool:Windows[MAX_VEHICLES] = { false, ... },
    bool:gPlayerUsingLoopingAnim[MAX_PLAYERS],
    bool:gPlayerAnimLibsPreloaded[MAX_PLAYERS],
    bool:IsOnePlayAnim[MAX_PLAYERS],
    BackOut[MAX_PLAYERS],
    Unfreeze[MAX_PLAYERS],
    AfkCheck[MAX_PLAYERS],
    OldCar[MAX_PLAYERS],
    tmpinteger[MAX_PLAYERS],
    bool:Belt[MAX_PLAYERS],
    Float:Tlc[3],
    bool:Voted[MAX_PLAYERS] = { true, ... },
    Votes[ 2 ],
    RadioStation[ MAX_PLAYERS ],
    RadioName[ MAX_PLAYERS ],
    VehicleRadio[ MAX_VEHICLES ] = { 99, ... },
    VehRadio[ MAX_VEHICLES ][ 128 ],
    Police[ MAX_VEHICLES ],
    bool:VGaraze[ MAX_VEHICLES ] = { false, ... },
    Camera      [ MAX_PLAYERS  ] = { -1, ... },
    PlayerSpeed [ MAX_PLAYERS  ],
    bool:TazerAut = true,
    Pickups[ 5 ],
    szMessage[256],
    timeris                 [ MAX_PLAYERS  ],
    Meter                   [ MAX_VEHICLES ],
    Kils                    [ MAX_VEHICLES ],
    bool:UsingLoopAnim[ MAX_PLAYERS ],
    bool:AnimsPrelo   [ MAX_PLAYERS ],
    ObjUpdate[ MAX_PLAYERS ],
    Float:V_HP[ MAX_VEHICLES ],
    ac_SpeedWarns           [ MAX_PLAYERS ],
    PlayerMoney             [ MAX_PLAYERS ],
    //bool:PUzrakinta = false,
    vehview[ MAX_PLAYERS ],
    skinlist,
    Text3D:DeathLabel[MAX_PLAYERS],
    LastVehicleDriverSqlId[ MAX_VEHICLES ],
    bool:IsPlayerDataRecorded[ MAX_PLAYERS ],
    LastAds[ 10 ][ MAX_AD_TEXT ],
    LastPlayerCommandTimestamp[ MAX_PLAYERS ],
    Text3D:SpecCommandLabel[ MAX_PLAYERS ] = {INVALID_3DTEXT_ID, ... },
    SpecCommandTimer[ MAX_PLAYERS ] = {-1, ... },
    PlayerSpectatedPlayer[ MAX_PLAYERS ] = {INVALID_PLAYER_ID, ... }, 
    DrugTimer[MAX_PLAYERS],
    Text3D:Units[ MAX_VEHICLES ],
    bool:IsFillingFuel[ MAX_PLAYERS ],
    PlayerFillUpTimer[ MAX_PLAYERS ],
    InfoTextTimer[ MAX_PLAYERS ] = {-1, ...},
    LastPlayerAd[ MAX_PLAYERS ];                                // Timestamp kada raðë paskutiná skelbimà.
    //PVarning                [  MAX_PLAYERS ];//Login
    
new Iterator:Audio3D<MAX_PLAYERS>;


// Telefonø knyga
enum E_PHONEBOOK_DATA {
    PhoneNumber,
    Name[ MAX_PLAYER_NAME ]
};

new PlayerPhoneBook[ MAX_PLAYERS ][ MAX_PHONEBOOK_ENTRIES ][ E_PHONEBOOK_DATA ];


// Prikabinami þaidëjo ginklai, komanda /wepaon
enum E_PLAYER_ATTACHED_WEAPON_DATA
{
    WeaponId,
    ObjectSlot
};
new PlayerAttachedWeapons[ MAX_PLAYERS ][ MAX_PLAYER_ATTACHED_WEAPONS ][ E_PLAYER_ATTACHED_WEAPON_DATA ];


// Vagiø darbo reikalaujamos maðinos.
enum E_JACKER_BOUGHT_VEHICLE_DATA {
    VehicleModel, 
    AmountNeeded
};
new JackerBoughtVehicles[ 3 ][ E_JACKER_BOUGHT_VEHICLE_DATA ];





enum DAHX
{
    Float:aKords[ 3 ],
    aStation[ 128 ],
    aObjekt,
    aArea
};

new aInfo[ MAX_PLAYERS ][ DAHX ];

enum E_PLAYER_SPAWN_LOCATIONS 
{
	DefaultSpawn, 
	SpawnFaction,
	SpawnHouse,
	SpawnBusiness,
	SpawnGarage,
	SpawnLosSantos,
};

enum players
{
    pPassword,
    pLevel,
    pMoney,
    pBank,
    pExp,
    pAdmin,
    pSkin,
    pMask,
    pWarn,
    pJailTime,
    pJail,
    pLead,
    pMember,
    pRank,
    pCar[22],
    pCarGet,
    pHouseKey,
    pPhone,
    pRChannel,
    Float:pCrashPos[3],
    pInt,
    pVirWorld,
    pCrash,
    pJobDuty,
    pCuffs,
    pAge,
    pBackup,
    pWantedLevel,
    pRoadBlock,
    pLiga,
    pJob,
    pJobContr,
    pLicMoto,
    pLicCar,
    pLicHeli,
    pLicBoat,
    pLicWeapon,
    pPayCheck,
    pPayDayHad,
    pBoxStyle,
    pDeaths,
    pOnTime,
    pGun[MAX_SAVED_WEAPONS],
    pAmmo[MAX_SAVED_WEAPONS],
    pOrigin[MAX_PLAYER_NAME],
    pSex[15],
    pSavings,
    pMySQLID,
    pUcpID,
    pDubKey,
    pJobSkill,
    pJobLevel,
    pLeftTime,
    pDriverWarn,
    pTester,
    pFines,
    pPaydFines,
    pDonator,
    pWalkStyle,
    pTalkStyle,
    pHeroineAddict,
    pAmfaAddict,
    pCocaineAddict,
    pMetaAmfaineAddict,
    pExtazyAddict,
    pPCPAddict,
    pCrackAddict,
    pOpiumAddict,
    pConnectionIP[ 18 ],
    E_PLAYER_SPAWN_LOCATIONS:pSpawn,
    pBSpawn,
    pCard[ 256 ],
    pForumName[ 256 ],
    pPoints,
    pHealthLevel,
    pStrengthLevel,
	pJobHours,
    pHunger,
    pTotalPaycheck
};
new pInfo[MAX_PLAYERS][players];


new bool:ShowACTestMsg[ MAX_PLAYERS ];

stock SetPlayerHealthBonus(playerid, Float:health)
{
    if(health >= 100.0)
        health += float(pInfo[ playerid ][ pHealthLevel ]) * 3;
    return SetPlayerHealth(playerid, health);
}
#if defined _ALS_SetPlayerHealth
    #undef SetPlayerHealth
#else 
    #define _ALS_SetPlayerHealth
#endif
#define SetPlayerHealth SetPlayerHealthBonus

enum E_FACTION_DATA
{
    fID,
    fName[126],
    fLeader[MAX_PLAYER_NAME],
    Float:fSpawn[4],
    fRank1[54],
    fRank2[54],
    fRank3[54],
    fRank4[54],
    fRank5[54],
    fRank6[54],
    fRank7[54],
    fRank8[54],
    fRank9[54],
    fRank10[54],
    fRank11[54],
    fRank12[54],
    fRank13[54],
    fInt,
    fBank,
    fMatsPriv,
    fChat,
    fPayDay[MAX_FACTION_RANKS],
};
new fInfo[20][E_FACTION_DATA];
new Iterator:Faction<16>;

enum cars
{
    cName[20],
    cOwner,
    cModel,
    Float:cSpawn[4],
    cColor[2],
    cLock,
    cFuel,
    cNumbers[24],
    cFaction,
    cWheels,
    cTuning,
    cDuzimai,
    cID,
    cLockType,
    cAlarm,
    cInsurance,
    cTrunkWeapon[MAX_TRUNK_SLOTS],
    cTrunkAmmo[MAX_TRUNK_SLOTS],
    cTrunkItemContent[ MAX_TRUNK_SLOTS ],
    cTrunkItemDurability[ MAX_TRUNK_SLOTS ],
    cTicket,
    cHidraulik,
    cCrimes,
    cVehID,
    cDamage[40],
    Float:cKM,
    cDub,
    cVirtWorld,
    objectai[ MAX_TRUCKER_CARGO_OBJECTS ]
};
new cInfo[MAX_VEHICLES][cars];




trucker_DestroyVehicle(vehicleid)
{
    if(vehicleid > 0 && vehicleid <= MAX_VEHICLES)
        for(new j = 0; j < MAX_TRUCKER_CARGO_OBJECTS; j++)
        {
            if(cInfo[ vehicleid ][ objectai ][ j ] != -1)
                DestroyObject(cInfo[ vehicleid ][ objectai ][ j ]);
            cInfo[ vehicleid ][ objectai ][ j ] = -1;
        }
    return DestroyVehicle(vehicleid);
}
#if defined _ALS_DestroyVehicle
    #undef DestroyVehicle 
#else
    #define _ALS_DestroyVehicle
#endif
#define DestroyVehicle trucker_DestroyVehicle


enum E_STATIC_VEHICLE_DATA 
{
    Id,
    Model,
    Float:SpawnX,
    Float:SpawnY,
    Float:SpawnZ,
    Float:SpawnA,
    Color1,
    Color2,
    Faction,
    Rang,
    Job
};
new sVehicles[ MAX_VEHICLES ][ E_STATIC_VEHICLE_DATA ];

new Iterator:Vehicles<MAX_VEHICLES>;

enum fires
{
    bool:active,
    ugnis[ 80 ],
    smoke
};

new Fire[MAX_FIRE][fires];


#include "Tabula\TAC.pwn" // AntiCheatas
#include "Player\Weapons" // Yra AC dalykø


#include "Coordinates"

#include "Items"

#include "FishingSystem"
#include "Job_TaxiDriver"
#include "Property\Interiors"
#include "Property\Furniture"
#include "Property\_General"
#include "Property\Businesses"
#include "Property\Houses"
#include "Property\Garages"
#include "Player\Functions"
#include "Player\Inventory"
#include "Player\Attachments"
#include "Bank"
#include "Graffiti"


new RoadBlocks[MAX_ROADBLOCKS];
new RID[MAX_ROADBLOCKS];


enum Drg
{
   dOwner,
   dItemID,
   dLaikas,
   bool:dMade
}
new DrugMake[MAX_WEED_SEEDS][Drg];
new vartai[ 16 ][ 2 ];
#define MAX_LIC_Q 7
enum LIC_QUIZ_
{
    Question[ 126 ],
    Answer1[ 126 ],
    Answer2[ 126 ],
    Answer3[ 126 ],
    TruAnsw
}
new LIC_QUIZ[ MAX_LIC_Q ][ LIC_QUIZ_ ] = { // DMV Klausimai
    {"Laikantis teises galima nereguoti á kelio eismo taisykles (ðviesaforus, kelio þenklus ir kt.)?",
        "Galima",
        "Negalima",
        "Galima, nes laikantis teises tu turi pirmumà visais atvejais.", 2},
    {"Vaþiuojant vairavimo mokyklos transportu, galima vaþiuoti ne tam paskirtu marðrutu?",
        "Galima",
        "Negalima",
        "Galima, nes tu sumokëjei pinigus ir gali daryti kà nori", 2},
    {"Ar reikia rodyti posûká, norint sustoti pakelëje?",
        "Ne",
        "Taip",
        "nemanau, gi sustoti tik tenoriu, kam rodyti?", 2},
    {"Laikantis teises tu patenki á eismo ávyká, kà darai?",
        "Iðkvieèiu policijà ir laukiu kol bus iðspræsta problema",
        "Iðvaþiuoju ið eismo ávykio, nes tuo metu laikausi teises",
        "Palieku transporto priemonæ ir pasiðalinu ið eismo ávykio", 1},
    {"Vaþiuodamas automobiliu pastebite susitrenkusias dvi transporto priemones, kà darote?",
        "Pravaþiuoju nekreipdamas dëmesio.",
        "Praneðu apie pastebëta situacijà ir vaþiuoju toliau",
        "Vaþiuoju toliau nekreipdamas dëmesio, nes esu susikoncentravæs á teisiø laikymà", 2},
    {"Vaþiuojant motociklu bûtina devëti ðalmà?",
        "Taip",
        "Ne",
        "Nebûtina, nes tai trukdys vaþiuoti motociklu.", 1},
    {"Norint pasiðalinti ið transporto priemonës, galima palikti jà viduryje kelio?",
        "Taip, galima palikti transporto priemonæ viduryje kelio",
        "Ne, transporto priemonæ privalau statyti ten, kur ji netrukdytø eismo stabilumui",
        "Taip, galiu statyti transporto priemonæ viduryje kelio, nes neturiu laiko jos patraukti.", 2}
};

new const  // CCTV koordinatës
Float:CCTV[ ][ 4 ] = {
    { 1525.9738,-1688.2424,21.6822, 11.0 }, //
    { 1484.9551,-1728.3623,21.6822, 11.0 }, //
    { 1747.0881,-1847.5023,21.6822, 11.0 }, //
    { 1893.2758,-2042.8265,22.6208, 11.0 }, //
    { 2442.9839,-1660.9250,24.6212, 13.0 }, //
    { 1808.0552,-1672.2999,24.6212, 13.0 }, //
    { 1691.9740,-1490.6073,18.2193, 9.0 }, //
    { 1779.1565,-1279.0680,23.0045, 12.0 }, //
    { 1902.7317,-1145.2634,33.4001, 17.0 }, //
    { 2209.5779,-1137.7407,33.4001, 17.0 }, //
    { 2152.7297,-1014.2031,75.4673, 40.0 }, //
    { 2405.9502,-1245.6781,29.7572, 17.0 }, //
    { 2465.5908,-1514.7914,29.7572, 17.0 }, //
    { 2461.4946,-1356.7466,37.3127, 18.0 }, //
    { 2156.0454,-1790.7332,21.2839, 11.0 }, //
    { 2086.9709,-1824.0341,19.4909, 10.5 } //
};

/*new const
Float:LogWathc[8][6] = { //Vaizdas prisijungimui vykstant, pirma kordinatë - vieta, antra kordinatë - kamera
    {135.1453, 54.5497, 78.8274,   135.7209, 53.7337, 78.4673},
    {-68.4013, 147.1631, 40.6497,  -68.5086, 146.1703, 40.4897},
    {641.6294, -621.9632, 46.3704,  641.9489, -621.0170, 46.1054},
    {1438.6992, 335.3381, 56.2001,  1437.8203, 334.8645, 55.9900},
    {337.2339, -663.2688, 32.7126, 336.9972, -662.2993, 32.6026},
    {962.9985, -283.5939, 75.7649,  962.2916, -284.2987, 75.6147},
    {1199.7195, -70.2596, 44.4392, 1198.7742, -70.5790, 44.4041},
    {534.7148, -226.6253, 18.7703, 533.8982, -227.1986, 18.6952}
};*/

enum businfo
{
    objectas,
    Float:X4,
    Float:Y4,
    Float:Z4,
};

new RandBus[12][businfo] = {
{0, -178.7006,1044.9867,19.7422}, // ðiûkðlë1
{0, -167.4145,1086.3560,19.7422}, // ðiûkðlë2
{0, -135.5973,1086.2920,19.7422}, // ðiûkðlë3
{0, -105.6469,1113.8851,19.7422}, // ðiûkðlë4
{0, -88.2529,1128.5619,19.7422}, // ðiûkðlë5
{0, -87.8232,1163.3447,19.7422}, // ðiûkðlë6
{0, -170.2490,1214.6812,19.7422}, // ðiûkðlë7
{0, -854.4310,1539.2550,22.5638}, // ðiûkðlë8
{0, -890.0706,1544.4739,25.9505}, // ðiûkðlë9
{0, -784.9171,1621.5551,27.1172}, // ðiûkðlë10
{0, -336.4170,1162.9825,19.7301}, // ðiûkðlë11
{0, 76.6545,1211.3668,18.8376} // ðiûkðlëend
};



new const
Float:CloseGate[][8] = {
    {1500.0, 245.3984375, 72.459747314453, 1002.641418457, 0.0, 0.0, 0.0,1.0},
    {1500.0, 246.9089050293, 72.448867797852, 1002.640625, 0.0, 0.0, 0.0,1.0},
    {989.0,   2575.48, -1300.29, 1038.17, 0.00, 0.00, 286.44, 1.0},
    {19302.0, 2565.68, -1302.77, 1031.63, 0.00, 0.00, 90.48,  1.0},
    {19302.0, 2565.68, -1301.04, 1031.63, 0.00, 0.00, 271.26, 1.0},
    {1495.0, 67.37020, 1969.24316, 430.76300, 0.0, 0.00, 0.00, 1.0},
    {1495.0, -645.35809, -1792.86157, -76.05270, 0.0, 0.00, 0.00, 1.0},
    {5779.0, -258.30231, 1031.96106, 20.47970, 0.0, 0.00, 0.00, 2.0},
    {5779.0, -258.30121, 1081.63147, 20.47970, 0.0, 0.00, 0.00, 2.0},
    {5779.0, -258.30121, 1074.85144, 20.47970, 0.0, 0.00, 0.00, 2.0},
    {5779.0, -258.30231, 1047.10107, 20.47970, 0.0, 0.00, 0.00, 2.0},
    {5779.0, -258.30231, 1040.26111, 20.47970, 0.0, 0.00, 0.00, 2.0},
    {1569.0, -979.44855, -2429.74902, 2232.50000, 0.0, 0.00, 180.00, 1.0},
    {968.0, 1544.68, -1630.99, 13.33,   0.00, 90.00, 90.00, 1.0},
	{968.0, 1557.84, -1608.66, 13.20,   0.00, 90.00, 90.00, 1.0},
	{10184.0, 1590.14, -1638.37, 14.30,   0.00, 0.00, 90.00, 1.0},
	{1569.0, -10.01, 2053.78, 2129.00,   0.00, 0.00, 90.00, 1.0},
	{1495.0,1794.00976562,-1525.18676758,5699.42480469,   0.00, 0.00, 360.00, 1.0},
	{1495.0,1797.00830078,-1525.15258789,5699.42480469,   0.00, 0.00, 180.00, 1.0},
	{1495.0,1808.73071289,-1545.87463379,5699.42480469,   0.00, 0.00, 0.00, 1.0},
	{1495.0,1811.73828125,-1545.82873535,5699.42480469,0.00000000,0.00000000,180.00000000, 1.0},
	{1495.0,1808.76147461,-1547.63208008,5699.42480469,0.00000000,0.00000000,0.00000000, 1.0},
	{1495.0,1811.76184082,-1547.60510254,5699.42480469,0.00000000,0.00000000,180.00000000, 1.0},
	{1495.0, 1760.05, -1561.55, 8.59,   0.00, 0.00, 0.00, 1.0},
	{1966.0, 1813.71191, -1536.81494, 13.50000,   0.00000, 0.00000, 88.30000, 1.0},
	{1569.0, 1467.07, -2758.31, 5284.21,   0.00, 0.00, 0.00, 2.0}
};

new const
Float:MoveGate[][6] = {
    {244.03276062012, 72.469627380371, 1002.6823730469, 0.0, 0.0, 0.0},
    {247.29063415527, 72.450302124023, 1002.640625, 0.0, 0.0, 0.0},
    {2578.72, -1300.29, 1038.17, 0.00, 0.00, 286.44},
    {2565.68, -1304.26, 1031.63, 0.00, 0.00, 90.48},
    {2565.68, -1299.53, 1031.63, 0.00, 0.00, 271.26},
    {65.87020, 1969.24316, 430.76300, 0.0, 0.0, 0.0},
    { -646.85809, -1792.86157, -76.05270, 0.0, 0.0, 0.0},
    {-258.30231, 1031.96106, 16.9797, 0.0, 0.00, 0.00},
    {-258.30121, 1081.63147, 16.9797, 0.0, 0.00, 0.00},
    {-258.30121, 1074.85144, 16.9797, 0.0, 0.00, 0.00},
    {-258.30231, 1047.10107, 16.9797, 0.0, 0.00, 0.00},
    {-258.30231, 1040.26111, 16.9797, 0.0, 0.00, 0.00},
    {-979.44849, -2429.74902, 2232.50000, 0.00000, 0.00000, 100.00000},
    {1544.78, -1631.00, 13.43,   0.00, 0.00, 90.00},
	{1557.94, -1608.76, 13.30,   0.00, 0.00, 90.00},
	{1590.14, -1640.47, 16.22,   0.00, -90.00, 90.00},
	{-10.11, 2053.88, 2129.10,   0.00, 0.00, 0.00},
	{1792.7498,-1525.28676758,5699.52480469,   0.00, 0.00, 360.00},
	{1798.2883,-1525.25258789,5699.52480469,   0.00, 0.00, 180.00},
	{1807.4307,-1545.97463379,5699.52480469,   0.00, 0.00, 0.00},
	{1813.0383,-1545.92873535,5699.52480469,0.00000000,0.00000000,180.00000000},
	{1807.4815,-1547.73208008,5699.52480469,0.00000000,0.00000000,0.00000000},
	{1812.9818,-1547.70510254,5699.52480469,0.00000000,0.00000000,180.00000000},
	{1758.7714, -1562.55, 8.69,   0.00, 0.00, 0.00},
	{1813.3119, -1536.8149, 15.9800,   90.00000, 0.00000, 88.30000},
	{1467.17, -2758.41, 5284.31,   0.00, 0.00, 90.00}
};
new 
    bool:Gates[sizeof(CloseGate)] = { false, ... },
    Gates2[sizeof(CloseGate)];

/*new const
Float:Unload[][3] = {
    {763.0444,-1354.7875,13.5225},
    {1452.2545,972.6581,10.1163},
    {1461.8737,971.7272,10.0385},
    {1469.4023,1039.0527,10.2755},
    {1702.2316,1039.3301,10.8203},
    {1695.8961,919.8828,10.8108},
    {581.2244,1219.8376,11.7113},
    {265.2401,1411.7606,10.4873},
    {2800.0212,1265.1563,10.7500},
    {2817.8079,895.5203,10.0992},
    {2826.9871,897.7761,10.2876},
    {2855.1299,896.0623,10.1444},
    {1695.0026,-1524.2784,13.5469},
    {763.0444,-1354.7875,13.5225},
    {549.3511,-1287.3452,17.2482},
    {1065.2261,-910.7521,43.1026},
    {990.0439,-920.2379,42.1797},
    {2683.9336,-1102.4092,69.3428},
    {2770.3711,-2455.3840,13.6432},
    {2485.9033,-2388.6299,13.6250},
    {2187.4497,-2262.9661,13.4604},
    {2104.3865,-1775.8875,13.3915},
    {2805.2759,2413.5999,10.8203},
    {2259.0920,2768.8601,10.8203},
    {2313.1384,2737.7256,10.8203},
    {2398.8318,2757.5769,10.8203},
    {1092.2321,1889.9042,10.8203}
};

enum LoadEnum
{
    Float:Load_x,
    Float:Load_y,
    Float:Load_z,
    lName[54],
    Place[54]
}
new Load[27][LoadEnum] = { // Truckeriø pasikrovimo koordinatës
    {-158.9481,-288.7355,3.9053, "áaldytas maistas ir kt. produktai", "Blueberry Warehouses"},
    {-529.8994,-192.3401,78.4063, "Medienos dirbiniai", "Blueberry Sawmill"},
    {249.4086,-155.8652,1.5703, "áaltieji ginklai ir ju priedai", "Blueberry Gunshop"},
    {221.5633,23.9464,2.5781, "Popierius", "Blueberry Paper Storage"},
    {668.6018,-545.7848,16.3359, "Greito maisto prekës, gërimai", "Dillimore Gas Station"},
    {1071.3800,-341.3764,73.9922, "Traðos", "Dillimore Little Farms"},
    {1218.2552,297.2307,19.5547, "Medikamentai ir medicininës priemonës", "Montgomery Medical Department"},
    {1408.9059,459.4633,20.2200, "Greito maisto prekës, gërimai", "Montgomery Gas Station"},
    {-66.8451,22.5687,3.1172, "Traðos ir ûkines prekës", "Blueberry Farm's"},
    {55.9868,-190.3508,1.5800, "Sweeper's dalys, valymo árenginiai", "Blueberry Cleaners Office"},
    {1056.5160,2254.3376,10.6021, "Ginklø dalys", "San Fiero, Garcia"},
    {2508.4973,-2117.4688,13.3285, "Ginklø dalys", "Los Santos, Willowfield"},
    {-2109.3601,-2.0539,35.0987, "Ginklø dalys", "Las Venturas, Whitewood estate"},
    {2113.2981,-1777.9357,13.3905, "Maisto produktai ir kt. produktai", "Idlewood pizza stack co."},
    {2496.8994,-1752.6255,13.4600, "Kanceliarinës prekës", "Ganton"},
    {2644.2771,-2024.0822,13.5469, "Automobiliø dalys", "Playa Del Seville"},
    {1510.6405,-1846.2003,13.5469, "Maisto produktai, patiekalai ir kt. produktai", "Little Tokyo, Los Santos"},
    {380.5904,-1844.1962,7.8359, "Masalas ir þvejybos inventoriaus prekës", "Verona Bridge"},
    {2273.6147,-1037.6519,50.8055, "Statybinës medþiagos", "Las Colinas"},
    {2407.9502,-1406.2452,24.1220, "Metalo atliekos ir kiti metalo dirbiniai", "East Los Santos"},
    {2486.2080,-2485.8904,13.6505, "þuvies produktai ir þvejybos inventorius", "Ocean Docks garage 1."},
    {2716.6934,-2492.3401,13.6515, "þuvies produktai ir þvejybos inventorius", "Ocean Docks garage 2."},
    {2732.0796,-2509.5330,13.6641, "þuvies produktai ir þvejybos inventorius", "Ocean Docks garage 3."},
    {2783.2754,-2455.8110,13.6348, "þuvies produktai ir þvejybos inventorius", "Ocean Docks garage 13."},
    {2511.9910,-2397.8843,13.6250, "þuvies produktai ir þvejybos inventorius", "Ocean Docks garage 25."},
    {2349.8130,-2300.7473,13.5469, "þuvies produktai ir þvejybos inventorius", "Ocean Docks garage 7."},
    {2280.2583,-2213.8574,13.5469, "þuvies produktai ir þvejybos inventorius", "Ocean Docks garage 9."}
};*/

enum senters
{
    sID,
    Float:sEnter_x,
    Float:sEnter_y,
    Float:sEnter_z,
    Float:sExit_x,
    Float:sExit_Y,
    Float:sExit_z,
    Int,
    Int2,
    Wirt,
    Wirt2,
    Name[126],
    Pickup,
    PickupModel
}

#define MAX_SENTERS 100

new sEnter[ MAX_SENTERS ][ senters ];

new Iterator:sEnters<MAX_SENTERS>;
enum jobs
{
    Float:Job_x,
    Float:Job_y,
    Float:Job_z,
    PayCheck,
    Contr,
    MaxPayday,
    Name[42]
}

//Nefrakciniai darbai ir nustatymai

#define MAX_JOBS 8

new const pJobs[ MAX_JOBS ][ jobs ] = { // Darbø (ásidarbinimo) koordinatës, alga, kontraktas, maksimali alga
    { 99999.0, 99999.0, 8888.0, 50, 0, 2400,         "Bedarbis" },
    { 1657.9742,-1817.6954,13.6508, 600, 6, 900,         "Mechanikas" },
    { 99999.0, 99999.0, 8888.0, 0, 5, 750,        "Gatviø valytojas" },
//    { 758.1678, -77.3299, 1000.6499, 150, 5, 500,     "Kovos menø treneris" },
    { 2195.7881,-1973.2227,13.5589, 400, 5, 2200,         "Ðiûkðlininkas" },
    { 99999.0, 99999.0, 8888.0, 350, 5, 150,  "Gatviø ðlavëjas." },
    { 99999.0, 99999.0, 8888.0, 0, 5, 150,  "Mechanikas." },
    { 2281.1189,-2365.0647,13.5469, 400, 5, 900,  "Kroviniø perveþimø vairuotojas" },
    { 99999.0, 99999.0, 8888.0, 400, 10, 2200,      "Automobiliu vagis (nelegalus)" }
};

new Ligos[7][25] = { // Ligos
{"Neturi"},
{"Bronhitu"},
{"Plauøiu uþdegimu"},
{"Gripu"},
{"Raupais"},
{"Apendicitu"},
{"Sloga"}
};




/*Uþkraunamas tr. priemoniø turgus sellcars, sellbikes, sellsport*/
/*
new SellCars [ 90 ][ 2 ];
new SellBikes[ 11 ][ 2 ];
new SportCars[ 20 ][ 2 ];
*/

#define MAX_VEHICLE_SHOP_NAME           64
#define MAX_VEHICLE_SHOP_VEHICLES       50
#define MAX_VEHICLE_SHOPS               8

enum E_VEHICLE_SHOP_DATA {
    Id, 
    Name[ MAX_VEHICLE_SHOP_NAME ],
    Float:PosX,
    Float:PosY,
    Float:PosZ,
    Text3D:Label,
    VehicleModels[ MAX_VEHICLE_SHOP_VEHICLES ],
    VehiclePrices[ MAX_VEHICLE_SHOP_VEHICLES ]
};

new VehicleShops[ MAX_VEHICLE_SHOPS ][ E_VEHICLE_SHOP_DATA ];
new Iterator:VehicleShopIterator<MAX_VEHICLE_SHOPS>;
new CurrentPlayerVehicleShop[ MAX_PLAYERS ];


/*Uþkraunamas tr. priemoniø turgus sellcars, sellbikes, sellsport pabaiga*/


/*  Nefrakcinio darbo ðiûkðlininkai nustatymai */

#define TRASH_MISSION_NONE 0
#define TRASH_MISSION_MONTGOMERY 1
#define TRASH_MISSION_DILIMORE 2
#define TRASH_MISSION_POLOMINO_CREEK 3
#define TRASH_MISSION_JEFFERSON 4
#define TRASH_MISSION_IDLEWOOD 5

#define MAX_GARBAGE_CANS                200
#define TRASH_MISSION_COMPLETED_BONUS   380
#define TRASH_OBJECT_INDEX              4

/*  Nefrakcinio darbo ðiûkðlininkai nustatymai pabaiga*/


enum E_GARBAGE_CANS {
    gModel,
    gMission,
    gObjectId
};

new GarbageInfo[ MAX_GARBAGE_CANS ][ E_GARBAGE_CANS ];

new TrashMission[ MAX_PLAYERS ] = { TRASH_MISSION_NONE, ...}, 
    CurrentTrashCp[ MAX_PLAYERS ], 
    TrashTimer[ MAX_PLAYERS ],
    IsCarryingTrash[ MAX_PLAYERS ],
    TrashBagsInTrashVehicle[ MAX_VEHICLES ];




stock IsPlayerAddicted( playerid )
{
    if( pInfo[ playerid ][ pHeroineAddict ] > 3 )
        return true;
    if( pInfo[ playerid ][ pAmfaAddict ] > 3 )
        return true;
    if( pInfo[ playerid ][ pCocaineAddict ] > 3 )
        return true;
    if( pInfo[ playerid ][ pMetaAmfaineAddict ] > 3 )
        return true;
    if( pInfo[ playerid ][ pExtazyAddict ] > 5 )
        return true;
    if( pInfo[ playerid ][ pPCPAddict ] > 3 )
        return true;
    if( pInfo[ playerid ][ pCrackAddict ] > 4 )
        return true;
    if( pInfo[ playerid ][ pOpiumAddict ] > 2 )
        return true;
    return false;
}

stock GetVehiclePrice( model )
{
    new count, sum;
    foreach(VehicleShopIterator, i)
    {
        for(new  j = 0; j < MAX_VEHICLE_SHOP_VEHICLES; j++)
            if(VehicleShops[ i ][ VehicleModels ][ j ] == model)
            {
                sum += VehicleShops[ i ][ VehiclePrices ][ j ];
                count++;
            }
    }
    if(count && sum)
        return sum / count;
    /*
    new
        i = 0;
    while ( i < sizeof( SellCars ) )
    {
        if ( SellCars[ i ][ 0 ] == model )
            return SellCars[ i ][ 1 ];

        i ++;
    }
    i = 0;
    while ( i < sizeof( SportCars ) )
    {
        if ( SportCars[ i ][ 0 ] == model )
            return SportCars[ i ][ 1 ];

        i ++;
    }
    i = 0;
    while ( i < sizeof( SellBikes ) )
    {
        if ( SellBikes[ i ][ 0 ] == model )
            return SellBikes[ i ][ 1 ];

        i ++;
    }
    */
    if( model == 473 )
        return 5000;
    if( model == 453 )
        return 12000;
    if( model == 454 )
        return 24000;
    if( model == 493 )
        return 22000;
    if( model == 484 )
        return 27000;
    return 0;
}

stock Check_VHP( vehicleid, mode = 0, Float:HP = 1000.0 )
{
    if ( mode == 0 )
    {
        if ( HP < V_HP[ vehicleid ] )
            V_HP[ vehicleid ] = HP;
        return 1;
    }
    else if ( mode == 1 )
    {
        new Float:TMPVHP;
        GetVehicleHealth( vehicleid, TMPVHP );
        if ( V_HP[ vehicleid ] < TMPVHP )
            return SetVehicleHealth( vehicleid, V_HP[ vehicleid ] );
    }
    return 1;
}

stock PDJOBPlace( playerid )
{
    if( IsPlayerInRangeOfPoint(playerid, 40.0, -983.2907,-2424.8074,2233.5059 ) || IsPlayerInRangeOfPoint(playerid, 40.0, 65.7139,1966.2054,431.8035 ) || IsPlayerInRangeOfPoint(playerid, 40.0, 245.9104,114.2515,1003.2188 ) || IsPlayerInRangeOfPoint(playerid, 80.0, -23.8720,2066.4060,2130.0222 ) || IsPlayerInRangeOfPoint(playerid, 80.0, 1803.4606,-1520.4922,5700.4302 ))
        return true;
    return false;
}


FUNKCIJA:NullWeapons( playerid )
{
    new string[ 32 ];
    for(new i = 0; i < 47; i++)
    {
        format(string, 32, "%d", i);
        if( GetPVarInt( playerid, string ) == 0 ) continue;

        SetPVarInt( playerid, string, 0 );
    }
}

stock StopLoopingAnim( playerid, bool:  setvar = true )
{
    // Funkcija: StopLoopingAnim( playerid )

    if ( setvar )
        UsingLoopAnim[ playerid ] = false;

    ApplyAnimation( playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0 );
}

stock NullAnimVariables( playerid )
{
    // Funkcija: NullAnimVariables( playerid );

    UsingLoopAnim[ playerid ] = false;
    AnimsPrelo   [ playerid ] = false;
}

stock GetNumber( playerid, number )
{
    new
        string[ 128 ],
        ministr[ MAX_PLAYER_NAME ];

    // Jei telefonø knygoj turi tà nr.
    string = GetPlayerPhonebookName(playerid, number);
    if(!isnull(string))
        return string;

    // Tikrinimas tarp uþraðø ar yra tas nr... Po poros versij7 galima sunaikint.
    for ( new i = 1; i <= 7; i++ )
    {
        format           ( ministr, 8, "NOTE2_%d", i );
        if( GetPVarInt( playerid, ministr ) == number )
        {
            format           ( ministr, 8, "NOTE_%d", i );
            GetPVarString    ( playerid, ministr, string, 126 );
            return string;
        }
    }
    valstr(string,number);
    return string;
}
GetPlayerPhonebookNumber(playerid, name[])
{
    for(new i = 0; i < MAX_PHONEBOOK_ENTRIES; i++)
        if(!isnull(PlayerPhoneBook[ playerid ][ i ][ Name ]) && !strcmp(PlayerPhoneBook[ playerid ][ i ][ Name ], name, true))
            return PlayerPhoneBook[ playerid ][ i ][ PhoneNumber ];
    return 0;
}
GetPlayerPhonebookName(playerid, number)
{
    new s[ MAX_PLAYER_NAME ];
    for(new i = 0; i < MAX_PHONEBOOK_ENTRIES; i++)
        if(PlayerPhoneBook[ playerid ][ i ][ PhoneNumber ] == number)
        {
            strcat(s, PlayerPhoneBook[ playerid ][ i ][ Name ]);
            break;
        }
    return s;
}

stock PlacePlayerRoadBlockInPos( playerid, type )
{
    // Funkcija: PlacePlayerRoadBlockInPos( playerid, type )

    new
        objectid;

    switch ( type )
    {
        case 1 : objectid = 978;
        case 2 : objectid = 981;
        case 3 : objectid = 1228;
        case 4 : objectid = 1423;
        case 5 : objectid = 1251;
        case 6 : objectid = 8548;
        case 7 : objectid = 2599;
        case 8 : objectid = 1238;
        case 9:
        {
            if( PlayerFaction( playerid ) == 1 )
                objectid = 2899;
        }
        case 10:
        {
            if( PlayerFaction( playerid ) == 5 )
                objectid = 1426;
        }
        case 11:
        {
            if( PlayerFaction( playerid ) == 5 )
                objectid = 1466;
        }
        case 12:
        {
            if( PlayerFaction( playerid ) == 5 )
                objectid = 1428;
        }
        case 13:
        {
            if( PlayerFaction( playerid ) == 5 )
                objectid = 1436;
        }
        case 14:
        {
            if( PlayerFaction( playerid ) == 5 )
                objectid = 3864;
        }
        case 15:
        {
            if( PlayerFaction( playerid ) == 5 )
                objectid = 1262;
        }
        case 16:
        {
            if( PlayerFaction( playerid ) == 5 )
                objectid = 1358;
        }
        case 17:
        {
            if( PlayerFaction( playerid ) == 5 )
                objectid = 1299;
        }
        case 18:
        {
            if( PlayerFaction( playerid ) == 5 )
                objectid = 19125;
        }

        default:
        {
            SendClientMessage( playerid, COLOR_RED, "Klaida, nurodytas blogas/netinkamas kelio blokados tipas." );
            return false;
        }
    }

    new
        slotid = GetFreeRoadBlockSlot( );

    if ( slotid < MAX_ROADBLOCKS )
    {
        new
            Float:pX,
            Float:pY,
            Float:pZ,
            Float:pA;

        GetPlayerPos        ( playerid, pX, pY, pZ );
        GetPlayerFacingAngle( playerid, pA );
        GetXYJudgedByAngle  ( 1.5, pX, pY, pA, pX, pY );

        if( objectid == 2899 )
            RID[ slotid ] = 1;
        else
            RID[ slotid ] = 0;

        RoadBlocks[ slotid ] = CreateDynamicObject( objectid, pX, pY, pZ,
             0, 0, pA );
        if( objectid == 2599 )
        SetDynamicObjectMaterial(RoadBlocks[ slotid ], 0, 967, "cj_barr_set_1", "Stop2_64");
        if( objectid == 8548 )
        SetDynamicObjectMaterial(RoadBlocks[ slotid ], 0, 7184, "vgndwntwn1", "stop2_64");
        if( objectid == 1251 )
        SetDynamicObjectMaterial(RoadBlocks[ slotid ], 0, 12938, "sw_apartments", "sw_policeline");
        Streamer_Update( playerid );
        EditDynamicObject(playerid, RoadBlocks[ slotid ]);
    }
    else
    {
        SendClientMessage( playerid, COLOR_GREY, "   Jau virðytas maksimalø kel\
            io blokadø skaiøius." );
        return false;
    }

    return true;
}

stock RemoveRoadBlock( id )
{
    // Funkcija: RemoveRoadBlock( id )

    if ( -1 < id < MAX_ROADBLOCKS )
    {
        if ( RoadBlocks[ id ] > 0 )
        {
            DestroyDynamicObject( RoadBlocks[ id ] );
            RoadBlocks[ id ] = 0;
            RID[ id ] = 0;
        }
    }
}

stock NullRoadBlocks( )
{
    // Funkcija: NullRoadBlocks( )

    for ( new i = 0; i < MAX_ROADBLOCKS; i++ )
    {
        RoadBlocks[ i ] = 0;
        RID[ i ] = 0;
    }
}

stock GetFreeBoxSlot( )
{
    // Funkcija: GetFreeBoxSlot( )
    for ( new i = 0; i < MAX_BOXES; i++ )
    {
        if(!IsValidDynamicObject(CargoBox[ i ][ ObjectId ]))
            return i;
    }

    return -1;
}

stock GetFreeRoadBlockSlot( )
{
    // Funkcija: GetFreeRoadBlockSlot( )

    for ( new i = 0; i < MAX_ROADBLOCKS; i++ )
    {
        if ( RoadBlocks[ i ] == 0 )
            return i;
    }

    return MAX_ROADBLOCKS;
}


stock GetAdminRank( playerid )
{
    // Funkcija: GetAdminRank( playerid )
    // Returnins veikëjo admin ranká 

    new
        admrank[ 32 ];

    switch ( pInfo[ playerid ][ pAdmin ] )
    {
        case 1,2: admrank = "Administratorius";
        case 3: admrank = "Vyr. Administratorius";
        case 4: admrank = "Pagr. Administratorius";
        case 5: admrank = "Projekto savininkas";
        case 6: admrank = "Skripto priþiûrëtojas";
        default: admrank = "";
    }

    return admrank;
}

stock GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
    // Created by Y_Less

    new Float:a;

    GetPlayerPos(playerid, x, y, a);
    GetPlayerFacingAngle(playerid, a);

    if (GetPlayerVehicleID(playerid)) {
        GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
    }

    x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
}

stock GetXYBehindPoint(Float:x,Float:y,&Float:x2,&Float:y2,Float:A,Float:distance)
{
    x2 = x - (distance * floatsin(-A,degrees));
    y2 = y - (distance * floatcos(-A,degrees));
}

stock GetXYBehindVehicle(vehicleid, &Float:x2, &Float:y2, Float:dist)
{
    new Float:x,Float:y,Float:a;
    GetVehiclePos(vehicleid, x,y,a);
    GetVehicleZAngle(vehicleid, a);
    GetXYBehindPoint(x, y, x2, y2, a, dist);
}

stock GetXYJudgedByAngle( Float:distance, Float:x, Float:y, Float:angle, &Float:rx, &Float:ry )
{
    // Funkcija: GetXYJudgedByAngle( distance, Float:x, Float:y Float:angle, &Float:rx, &Float:ry )

    rx = x + distance * floatsin( -angle, degrees );
    ry = y + distance * floatcos( -angle, degrees );
}

stock doesVehicleExist(const vehicleid) {
    if(GetVehicleModel(vehicleid) >= 400) {
        return 1;
    }
    return 0;
}


new aVehicleNames[ 212 ][ ] = { // Credit: BetaMaster
    {"Landstalker"},
    {"Bravura"},
    {"Buffalo"},
    {"Linerunner"},
    {"Perrenial"},
    {"Sentinel"},
    {"Dumper"},
    {"Firetruck"},
    {"Trashmaster"},
    {"Stretch"},
    {"Manana"},
    {"Infernus"},
    {"Voodoo"},
    {"Pony"},
    {"Mule"},
    {"Cheetah"},
    {"Ambulance"},
    {"Leviathan"},
    {"Moonbeam"},
    {"Esperanto"},
    {"Taxi"},
    {"Washington"},
    {"Bobcat"},
    {"Mr Whoopee"},
    {"BF Injection"},
    {"Hunter"},
    {"Premier"},
    {"Enforcer"},
    {"Securicar"},
    {"Banshee"},
    {"Predator"},
    {"Bus"},
    {"Rhino"},
    {"Barracks"},
    {"Hotknife"},
    {"Ðaldoma priekaba"},
    {"Previon"},
    {"Coach"},
    {"Cabbie"},
    {"Stallion"},
    {"Rumpo"},
    {"RC Bandit"},
    {"Romero"},
    {"Packer"},
    {"Monster"},
    {"Admiral"},
    {"Squalo"},
    {"Seasparrow"},
    {"Pizzaboy"},
    {"Tram"},
    {"Atvira priekaba"},
    {"Turismo"},
    {"Speeder"},
    {"Reefer"},
    {"Tropic"},
    {"Flatbed"},
    {"Yankee"},
    {"Caddy"},
    {"Solair"},
    {"RC Van"},
    {"Skimmer"},
    {"PCJ-600"},
    {"Faggio"},
    {"Freeway"},
    {"RC Baron"},
    {"RC Raider"},
    {"Glendale"},
    {"Oceanic"},
    {"Sanchez"},
    {"Sparrow"},
    {"Patriot"},
    {"Quad"},
    {"Coastguard"},
    {"Dinghy"},
    {"Hermes"},
    {"Sabre"},
    {"Rustler"},
    {"ZR-350"},
    {"Walton"},
    {"Regina"},
    {"Comet"},
    {"BMX"},
    {"Burrito"},
    {"Camper"},
    {"Marquis"},
    {"Baggage"},
    {"Dozer"},
    {"Maverick"},
    {"News Chopper"},
    {"Rancher"},
    {"FBI Rancher"},
    {"Virgo"},
    {"Greenwood"},
    {"Jetmax"},
    {"Hotring"},
    {"Sandking"},
    {"Blista Compact"},
    {"Police Maverick"},
    {"Boxville"},
    {"Benson"},
    {"Mesa"},
    {"RC Goblin"},
    {"Hotring Racer A"},
    {"Hotring Racer B"},
    {"Bloodring Banger"},
    {"Rancher"},
    {"Super GT"},
    {"Elegant"},
    {"Journey"},
    {"Bike"},
    {"Mountain Bike"},
    {"Beagle"},
    {"Cropdust"},
    {"Stunt"},
    {"Tanker"},
    {"Roadtrain"},
    {"Nebula"},
    {"Majestic"},
    {"Buccaneer"},
    {"Shamal"},
    {"Hydra"},
    {"FCR-900"},
    {"NRG-500"},
    {"HPV1000"},
    {"Cement Truck"},
    {"Tow Truck"},
    {"Fortune"},
    {"Cadrona"},
    {"FBI Truck"},
    {"Willard"},
    {"Forklift"},
    {"Tractor"},
    {"Combine"},
    {"Feltzer"},
    {"Remington"},
    {"Slamvan"},
    {"Blade"},
    {"Freight"},
    {"Streak"},
    {"Vortex"},
    {"Vincent"},
    {"Bullet"},
    {"Clover"},
    {"Sadler"},
    {"Firetruck LA"},
    {"Hustler"},
    {"Intruder"},
    {"Primo"},
    {"Cargobob"},
    {"Tampa"},
    {"Sunrise"},
    {"Merit"},
    {"Utility"},
    {"Nevada"},
    {"Yosemite"},
    {"Windsor"},
    {"Monster A"},
    {"Monster B"},
    {"Uranus"},
    {"Jester"},
    {"Sultan"},
    {"Stratum"},
    {"Elegy"},
    {"Raindance"},
    {"RC Tiger"},
    {"Flash"},
    {"Tahoma"},
    {"Savanna"},
    {"Bandito"},
    {"Freight Flat"},
    {"Streak Carriage"},
    {"Kart"},
    {"Mower"},
    {"Duneride"},
    {"Sweeper"},
    {"Broadway"},
    {"Tornado"},
    {"AT-400"},
    {"DFT-30"},
    {"Huntley"},
    {"Stafford"},
    {"BF-400"},
    {"Newsvan"},
    {"Tug"},
    {"Cisterna"},
    {"Emperor"},
    {"Wayfarer"},
    {"Euros"},
    {"Hotdog"},
    {"Club"},
    {"Freight Carriage"},
    {"Ðaldoma priekaba 2"},
    {"Andromada"},
    {"Dodo"},
    {"RC Cam"},
    {"Launch"},
    {"Police Car"},
    {"Police Car"},
    {"Police Car"},
    {"Police Ranger"},
    {"Picador"},
    {"S.W.A.T. Van"},
    {"Alpha"},
    {"Phoenix"},
    {"Glendale Shit"},
    {"Sadler Shit"},
    {"Luggage Trailer A"},
    {"Luggage Trailer B"},
    {"Stair Trailer"},
    {"Boxville"},
    {"Farm Plow"},
    {"Utility Trailer"}
};
new vBakas[212],
    vValgo[212],
    vSlotai[212];

stock SyncFuel( vehicleid )
{
    new model = GetVehicleModel( vehicleid ),
        talpa = GetVehicleFuelTank( model );
    if(Engine[vehicleid] == true)
        cInfo[vehicleid][cFuel] -= vValgo[ model - 400 ];
    if(cInfo[vehicleid][cFuel] > talpa)
        cInfo[vehicleid][cFuel] = talpa;
    if(cInfo[vehicleid][cFuel] < 0)
        cInfo[vehicleid][cFuel] = 0;
    if(cInfo[vehicleid][cFuel] <= 0)
    {
        new
            engine, lights, alarm, doors, bonnet, boot, objective;

        GetVehicleParamsEx ( vehicleid, engine, lights, alarm, doors, bonnet, boot, objective             );
        SetVehicleParamsEx ( vehicleid, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective );
    }
    return true;
}

stock LoadFuelInfo()
{
    new Cache:result = mysql_query(DbHandle, "SELECT * FROM `duomenys` ORDER BY Modelis ASC");
    new i = 0,
        modelis;

    for(i = 0; i < cache_get_row_count(); i++)
    {
        if(i >= sizeof vSlotai)
        {
            printf("Lentelej 'duomenys' yra daugiau eiluciu(%d) nei gali buti(%d)", cache_get_row_count(), sizeof vSlotai);
            break;
        }

        modelis = cache_get_field_content_int(i, "Modelis");
        if(modelis >= 400)
        {
            vBakas[ modelis - 400 ] = cache_get_field_content_int(i, "Bakas");
            vValgo[ modelis - 400 ] = cache_get_field_content_int(i, "Valgo");
            vSlotai[ modelis - 400 ] = cache_get_field_content_int(i, "Slotai");
        }
        //sscanf(string,"p<|>ddddd", modelis, vBakas[ i ], vValgo[ i ], vSlotai[ i ], vSlotai2[ i ] );
    }
    cache_delete(result);
    return 1;
}

stock LoadSEnter()
{
    new Cache:result = mysql_query(DbHandle, "SELECT * FROM `senters`");
    

    for(new i = 0; i < cache_get_row_count(); i++)
    {
        sEnter[ i ][ sID      ] = cache_get_field_content_int(i, "sID");
        sEnter[ i ][ sEnter_x ] = cache_get_field_content_float(i, "sEnter_x");
        sEnter[ i ][ sEnter_y ] = cache_get_field_content_float(i, "sEnter_y");
        sEnter[ i ][ sEnter_z ] = cache_get_field_content_float(i, "sEnter_z");
        sEnter[ i ][ sExit_x  ] = cache_get_field_content_float(i, "sExit_x");
        sEnter[ i ][ sExit_Y  ] = cache_get_field_content_float(i, "sExit_y");
        sEnter[ i ][ sExit_z  ] = cache_get_field_content_float(i, "sExit_z");
        sEnter[ i ][ Int      ] = cache_get_field_content_int(i, "Interior");
        sEnter[ i ][ Int2     ] = cache_get_field_content_int(i, "Interior2");
        sEnter[ i ][ Wirt     ] = cache_get_field_content_int(i, "Wirt");
        cache_get_field_content(i, "Name", sEnter[ i ][ Name ], DbHandle, 126);
        sEnter[ i ][ Wirt2    ] = cache_get_field_content_int(i, "Wirt2");
        sEnter[ i ][ PickupModel ] = cache_get_field_content_int(i, "PickupModel");
        UpdateSEnterInfo( i );
        Itter_Add(sEnters,i);
    }
    cache_delete(result);
    return 1;
}
stock UpdateSEnterInfo( i )
{
    if ( IsValidDynamicPickup( sEnter[ i ][ Pickup ] ) )
        DestroyDynamicPickup( sEnter[ i ][ Pickup ] );

    if(!sEnter[ i ][ PickupModel ] )
        sEnter[ i ][ PickupModel ] = DEFAULT_SENTER_PICKUP_MODEL;

    sEnter[ i ][ Pickup ] = CreateDynamicPickup( sEnter[ i ][ PickupModel ], 1, 
        sEnter[ i ][ sEnter_x ], 
        sEnter[ i ][ sEnter_y ], 
        sEnter[ i ][ sEnter_z ],
        sEnter[ i ][ Wirt ],
        sEnter[ i ][ Int2 ]);
    return 1;
}

LoadStaticVehicles()
{
    new string[256];
    new Cache:result = mysql_query(DbHandle, "SELECT * FROM `scars` ORDER BY `sFaction` ASC");

    for(new i = 0; i < cache_get_row_count(); i++)
    {
        new vehData[ E_STATIC_VEHICLE_DATA ]; 
        vehData[ Id         ] = cache_get_field_content_int(i, "sID");
        vehData[ Model       ] = cache_get_field_content_int(i, "sModel");
        vehData[ SpawnX       ] = cache_get_field_content_float(i, "sCar_x");
        vehData[ SpawnY       ] = cache_get_field_content_float(i, "sCar_y");
        vehData[ SpawnZ       ] = cache_get_field_content_float(i, "sCar_z");
        vehData[ SpawnA      ] = cache_get_field_content_float(i, "sCar_a");
        vehData[ Color1      ] = cache_get_field_content_int(i, "sColor1");
        vehData[ Color2      ] = cache_get_field_content_int(i, "sColor2");
        vehData[ Faction     ] = cache_get_field_content_int(i, "sFaction");
        vehData[ Rang        ] = cache_get_field_content_int(i, "sRang");
        vehData[ Job         ] = cache_get_field_content_int(i, "sJob");

        new id = AddStaticVehicleEx( vehData[ Model       ],
                       vehData[ SpawnX       ],
                       vehData[ SpawnY       ],
                       vehData[ SpawnZ       ],
                       vehData[ SpawnA       ],
                       vehData[ Color1      ],
                       vehData[ Color2      ],
                       -1);
        sVehicles[ id ] = vehData;

        format( string, 24, "{000000}%s%s%s%d", 
            random(26) + 65,
            random(26) + 65,
            random(26) + 65,
            id);
        SetVehicleNumberPlate(id, string );
        for(new j = 0; j < MAX_TRUCKER_CARGO_OBJECTS; j++)
            cInfo[ id ][ objectai ][ j ] = -1;
    }
    printf("Serveryje yra %d transporto priemones.", cache_get_row_count());
    cache_delete(result);

	result = mysql_query(DbHandle, "SELECT vehicle_id,cargo_id,amount FROM vehicle_cargo WHERE is_static = 1");
	
	new cargoid,vehicleid,amount;
	for(new i = 0; i < cache_get_row_count(); i++)
	{
        vehicleid = cache_get_field_content_int(i, "vehicle_id");
        cargoid = cache_get_field_content_int(i, "cargo_id");
        amount = cache_get_field_content_int(i, "amount");

	
		// Ðitas kodas toks sudëtingai kvailas dël to nes virðuje esantis krovimas neiðsaugo niekur vehicle ID.
		for(new j = 1; j < i; j++)
		{
			if(vehicleid == sVehicles[ j ][ Id ])
			{
				for(new k = 0; k < amount; k++)
					AddCargoToVehicle(j, cargoid, true);
			}
		}
	}
    cache_delete(result);
    return 1;

}


GetIndustryCargoStock(index, cargoid)
{
    // Graþina industrijai priklausantá nurodytos prekës kieká.
    foreach(CommodityIterator, i)
        if(Commodities[ i ][ IndustryId ] == Industries[ index ][ Id ]
            && Commodities[ i ][ CargoId ] == cargoid
            && !Commodities[ i ][ IsBusinessCommodity ])
            return Commodities[ i ][ CurrentStock ];
    return 0;
}


stock LoadFactions()
{
    new Cache:result, payday[ 126 ];


    result = mysql_query(DbHandle, "SELECT * FROM `factions` ORDER BY id ASC");

    for(new i = 0; i < cache_get_row_count(); i++)
    {
        fInfo[ i ][ fID ] = cache_get_field_content_int(i, "id");
        cache_get_field_content(i, "fName", fInfo[ i ][ fName   ], DbHandle, 126);
        cache_get_field_content(i, "fLeader", fInfo[ i ][ fLeader ], DbHandle, 24);
        fInfo[ i ][ fSpawn  ][0] = cache_get_field_content_float(i, "fSpawn1");
        fInfo[ i ][ fSpawn  ][1] = cache_get_field_content_float(i, "fSpawn2");
        fInfo[ i ][ fSpawn  ][2] = cache_get_field_content_float(i, "fSpawn3");
        fInfo[ i ][ fSpawn  ][3] = cache_get_field_content_float(i, "fSpawn3");
        cache_get_field_content(i, "fRank1", fInfo[ i ][ fRank1  ], DbHandle, 54);
        cache_get_field_content(i, "fRank2", fInfo[ i ][ fRank2  ], DbHandle, 54);
        cache_get_field_content(i, "fRank3", fInfo[ i ][ fRank3  ], DbHandle, 54);
        cache_get_field_content(i, "fRank4", fInfo[ i ][ fRank4  ], DbHandle, 54);
        cache_get_field_content(i, "fRank5", fInfo[ i ][ fRank5  ], DbHandle, 54);
        cache_get_field_content(i, "fRank6", fInfo[ i ][ fRank6  ], DbHandle, 54);
        cache_get_field_content(i, "fRank7", fInfo[ i ][ fRank7  ], DbHandle, 54);
        cache_get_field_content(i, "fRank8", fInfo[ i ][ fRank8  ], DbHandle, 54);
        fInfo[ i ][ fInt    ] = cache_get_field_content_int(i, "fInt");
        fInfo[ i ][ fBank   ] = cache_get_field_content_int(i, "fBank");
        fInfo[ i ][ fMatsPriv ] = cache_get_field_content_int(i, "fMatsPriv");
        cache_get_field_content(i, "fPayDay", payday);
        cache_get_field_content(i, "fRank9", fInfo[ i ][ fRank9  ], DbHandle, 54);
        cache_get_field_content(i, "fRank10", fInfo[ i ][ fRank10  ], DbHandle, 54);
        cache_get_field_content(i, "fRank11", fInfo[ i ][ fRank11  ], DbHandle, 54);
        cache_get_field_content(i, "fRank12", fInfo[ i ][ fRank12  ], DbHandle, 54);
        cache_get_field_content(i, "fRank13", fInfo[ i ][ fRank13  ], DbHandle, 54);
        LoadPayDay( i, payday );
        Itter_Add(Faction,i);
    }
    printf("Serveryje ðiuo metu yra sukurta (-os): %d frakcija (-os)", cache_get_row_count());
    cache_delete(result);
    return 1;
}
stock LoadPayDay( i, payday[])
{
    sscanf( payday, "p</>ddddddddddddd",
    fInfo[ i ][ fPayDay ][ 1 ],
    fInfo[ i ][ fPayDay ][ 2 ],
    fInfo[ i ][ fPayDay ][ 3 ],
    fInfo[ i ][ fPayDay ][ 4 ],
    fInfo[ i ][ fPayDay ][ 5 ],
    fInfo[ i ][ fPayDay ][ 6 ],
    fInfo[ i ][ fPayDay ][ 7 ],
    fInfo[ i ][ fPayDay ][ 8 ],
    fInfo[ i ][ fPayDay ][ 9 ],
    fInfo[ i ][ fPayDay ][ 10 ],
    fInfo[ i ][ fPayDay ][ 11 ],
    fInfo[ i ][ fPayDay ][ 12 ],
    fInfo[ i ][ fPayDay ][ 13 ]);
    return 1;
}
stock UnLoadFactions()
{
    foreach(Faction,i)
    {
        fInfo[ i ][ fID     ] = 0;
        fInfo[ i ][ fName   ] = 0;
        fInfo[ i ][ fLeader ] = 0;
        fInfo[ i ][ fSpawn  ][0] = 0;
        fInfo[ i ][ fSpawn  ][1] = 0;
        fInfo[ i ][ fSpawn  ][2] = 0;
        fInfo[ i ][ fSpawn  ][3] = 0;
        fInfo[ i ][ fRank1  ] = 0;
        fInfo[ i ][ fRank2  ] = 0;
        fInfo[ i ][ fRank3  ] = 0;
        fInfo[ i ][ fRank4  ] = 0;
        fInfo[ i ][ fRank5  ] = 0;
        fInfo[ i ][ fRank6  ] = 0;
        fInfo[ i ][ fRank7  ] = 0;
        fInfo[ i ][ fRank8  ] = 0;
        fInfo[ i ][ fRank9  ] = 0;
        fInfo[ i ][ fRank10 ] = 0;
        fInfo[ i ][ fRank11 ] = 0;
        fInfo[ i ][ fRank12 ] = 0;
        fInfo[ i ][ fRank13 ] = 0;
        fInfo[ i ][ fInt    ] = 0;
        fInfo[ i ][ fBank   ] = 0;
        fInfo[ i ][ fMatsPriv ] = 0;
    }
    Itter_Clear(Faction);
    return 1;
}
stock LoadMisc()
{
    new Cache:result;

    result = mysql_query(DbHandle, "SELECT `biudzetas`,`cartax`,`housetax`,`biztax` FROM `misc`");

    Biudzetas = cache_get_field_content_int(0, "biudzetas");
    cartax = cache_get_field_content_int(0, "cartax");
    housetax = cache_get_field_content_int(0, "housetax");
    biztax = cache_get_field_content_int(0, "biztax");
    printf("Los Santos miesto biudþetas siekia: %d SAD",Biudzetas);
    printf("Tr. priemoniø mokestis: %d SAD, Namø mokestis: %d SAD, Verslø mokestis %d SAD",cartax, housetax, biztax);
    cache_delete(result);
    return 1;
}
/*stock LoadTax() // Ikraunam mokescius
{
    new qLine[60];

    MySQLCheckConnection();
    mysql_query(DbHandle, "SELECT `car`,`house`,`biz` FROM `mokesciai`");

    mysql_store_result();
    mysql_fetch_row(qLine);

    sscanf(qLine,"p<|>dd", housetax, biztax);
    printf("Mokesciai uz nama %d, uz masina %d, uz versla %d", house, biz);
    mysql_free_result();
    return 1;
}*/
stock SaveMisc()
{
    new string[80];
    MySQLCheckConnection();

    format(string,80,"UPDATE `misc` SET `biudzetas`=%d,`cartax`=%d,`housetax`=%d,`biztax`=%d",Biudzetas,cartax,housetax,biztax);
    mysql_query(DbHandle, string, false);
    return 1;
}
stock SaveFactions(i)
{
    new string[1024],
        rangas[ 14 ][ 128 ];
    MySQLCheckConnection();
    if(i == 0)
    {
        foreach(Faction,f)
        {
            mysql_real_escape_string(fInfo[f][fName],rangas[0]);
            mysql_real_escape_string(fInfo[f][fRank1],rangas[1]);
            mysql_real_escape_string(fInfo[f][fRank2],rangas[2]);
            mysql_real_escape_string(fInfo[f][fRank3],rangas[3]);
            mysql_real_escape_string(fInfo[f][fRank4],rangas[4]);
            mysql_real_escape_string(fInfo[f][fRank5],rangas[5]);
            mysql_real_escape_string(fInfo[f][fRank6],rangas[6]);
            mysql_real_escape_string(fInfo[f][fRank7],rangas[7]);
            mysql_real_escape_string(fInfo[f][fRank8],rangas[8]);
            mysql_real_escape_string(fInfo[f][fRank9],rangas[9]);
            mysql_real_escape_string(fInfo[f][fRank10],rangas[10]);
            mysql_real_escape_string(fInfo[f][fRank11],rangas[11]);
            mysql_real_escape_string(fInfo[f][fRank12],rangas[12]);
            mysql_real_escape_string(fInfo[f][fRank13],rangas[13]);
            format(string,sizeof(string),"UPDATE `factions` SET `fName`='%s',`fSpawn1`='%f',`fSpawn2`='%f',`fSpawn3`='%f',`fSpawn4`='%f'\
            ,`fRank1`='%s',`fRank2`='%s',`fRank3`='%s',`fRank4`='%s',`fRank5`='%s',`fRank6`='%s',`fRank7`='%s',`fRank8`='%s',`\
            fInt`=%d,`fBank`=%d,`fLeader`='%s',`fMatsPriv`=%d,`fRank9`='%s',`fRank10`='%s',`fRank11`='%s',`fRank12`='%s',`fRank13`='%s' WHERE `id`=%d",
            rangas[0],
            fInfo[f][fSpawn][0],
            fInfo[f][fSpawn][1],
            fInfo[f][fSpawn][2],
            fInfo[f][fSpawn][3],
            rangas[1],
            rangas[2],
            rangas[3],
            rangas[4],
            rangas[5],
            rangas[6],
            rangas[7],
            rangas[8],
            fInfo[f][fInt],
            fInfo[f][fBank],
            fInfo[f][fLeader],
            fInfo[f][fMatsPriv],
            rangas[9],
            rangas[10],
            rangas[11],
            rangas[12],
            rangas[13],
            fInfo[f][fID]);
            mysql_query(DbHandle, string, false);
        }
        return 1;
    }
    else
    {
        mysql_real_escape_string(fInfo[i][fName],rangas[0]);
        mysql_real_escape_string(fInfo[i][fRank1],rangas[1]);
        mysql_real_escape_string(fInfo[i][fRank2],rangas[2]);
        mysql_real_escape_string(fInfo[i][fRank3],rangas[3]);
        mysql_real_escape_string(fInfo[i][fRank4],rangas[4]);
        mysql_real_escape_string(fInfo[i][fRank5],rangas[5]);
        mysql_real_escape_string(fInfo[i][fRank6],rangas[6]);
        mysql_real_escape_string(fInfo[i][fRank7],rangas[7]);
        mysql_real_escape_string(fInfo[i][fRank8],rangas[8]);
        mysql_real_escape_string(fInfo[i][fRank9],rangas[9]);
        mysql_real_escape_string(fInfo[i][fRank10],rangas[10]);
        mysql_real_escape_string(fInfo[i][fRank11],rangas[11]);
        mysql_real_escape_string(fInfo[i][fRank12],rangas[12]);
        mysql_real_escape_string(fInfo[i][fRank13],rangas[13]);
        format(string,sizeof(string),"UPDATE `factions` SET `fName`='%s',`fSpawn1`='%f',`fSpawn2`='%f',`fSpawn3`='%f',`fSpawn4`='%f'\
        ,`fRank1`='%s',`fRank2`='%s',`fRank3`='%s',`fRank4`='%s',`fRank5`='%s',`fRank6`='%s',`fRank7`='%s',`fRank8`='%s',`\
        fInt`=%d,`fBank`=%d,`fLeader`='%s',`fMatsPriv`=%d,`fRank9`='%s',`fRank10`='%s',`fRank11`='%s',`fRank12`='%s',`fRank13`='%s' WHERE `id`=%d",
        rangas[0],
        fInfo[i][fSpawn][0],
        fInfo[i][fSpawn][1],
        fInfo[i][fSpawn][2],
        fInfo[i][fSpawn][3],
        rangas[1],
        rangas[2],
        rangas[3],
        rangas[4],
        rangas[5],
        rangas[6],
        rangas[7],
        rangas[8],
        fInfo[i][fInt],
        fInfo[i][fBank],
        fInfo[i][fLeader],
        fInfo[i][fMatsPriv],
        rangas[9],
        rangas[10],
        rangas[11],
        rangas[12],
        rangas[13],
        fInfo[i][fID]);
        mysql_query(DbHandle, string, false);
        return 1;
    }
}
stock SavePayDay( idx )
{
    new string[ 200 ];
    for( new slot = 1; slot < MAX_FACTION_RANKS; slot ++)
        format( string, 180, "%s%d/", string, fInfo[ idx ][ fPayDay ][ slot ]);

    format( string, 200, "UPDATE `factions` SET fPayDay='%s' WHERE id=%d",string, fInfo[ idx ][ fID ] );
    mysql_query(DbHandle,  string, false);
    return string;
}
stock UnPackTrunk(veh,trunkinfo[])
{
    sscanf( trunkinfo, "p</>dddddddddddddddddddddddddddddddddddddddddddddddd",
    cInfo[ veh ][ cTrunkWeapon ][ 0 ],
    cInfo[ veh ][ cTrunkAmmo   ][ 0 ],
    cInfo[ veh ][ cTrunkItemContent   ][ 0 ],
    cInfo[ veh ][ cTrunkItemDurability   ][ 0 ],
    cInfo[ veh ][ cTrunkWeapon ][ 1 ],
    cInfo[ veh ][ cTrunkAmmo   ][ 1 ],
    cInfo[ veh ][ cTrunkItemContent   ][ 1 ],
    cInfo[ veh ][ cTrunkItemDurability   ][ 1 ],
    cInfo[ veh ][ cTrunkWeapon ][ 2 ],
    cInfo[ veh ][ cTrunkAmmo   ][ 2 ],
    cInfo[ veh ][ cTrunkItemContent   ][ 2 ],
    cInfo[ veh ][ cTrunkItemDurability   ][ 2 ],
    cInfo[ veh ][ cTrunkWeapon ][ 3 ],
    cInfo[ veh ][ cTrunkAmmo   ][ 3 ],
    cInfo[ veh ][ cTrunkItemContent   ][ 3 ],
    cInfo[ veh ][ cTrunkItemDurability   ][ 3 ],
    cInfo[ veh ][ cTrunkWeapon ][ 4 ],
    cInfo[ veh ][ cTrunkAmmo   ][ 4 ],
    cInfo[ veh ][ cTrunkItemContent   ][ 4 ],
    cInfo[ veh ][ cTrunkItemDurability   ][ 4 ],
    cInfo[ veh ][ cTrunkWeapon ][ 5 ],
    cInfo[ veh ][ cTrunkAmmo   ][ 5 ],
    cInfo[ veh ][ cTrunkItemContent   ][ 5 ],
    cInfo[ veh ][ cTrunkItemDurability   ][ 5 ],
    cInfo[ veh ][ cTrunkWeapon ][ 6 ],
    cInfo[ veh ][ cTrunkAmmo   ][ 6 ],
    cInfo[ veh ][ cTrunkItemContent   ][ 6 ],
    cInfo[ veh ][ cTrunkItemDurability   ][ 6 ],
    cInfo[ veh ][ cTrunkWeapon ][ 7 ],
    cInfo[ veh ][ cTrunkAmmo   ][ 7 ],
    cInfo[ veh ][ cTrunkItemContent   ][ 7 ],
    cInfo[ veh ][ cTrunkItemDurability   ][ 7 ],
    cInfo[ veh ][ cTrunkWeapon ][ 8 ],
    cInfo[ veh ][ cTrunkAmmo   ][ 8 ],
    cInfo[ veh ][ cTrunkItemContent   ][ 8 ],
    cInfo[ veh ][ cTrunkItemDurability   ][ 8 ],
    cInfo[ veh ][ cTrunkWeapon ][ 9 ],
    cInfo[ veh ][ cTrunkAmmo   ][ 9 ],
    cInfo[ veh ][ cTrunkItemContent   ][ 9 ],
    cInfo[ veh ][ cTrunkItemDurability   ][ 9 ],
    cInfo[ veh ][ cTrunkWeapon ][ 10 ],
    cInfo[ veh ][ cTrunkAmmo   ][ 10 ],
    cInfo[ veh ][ cTrunkItemContent   ][ 10 ],
    cInfo[ veh ][ cTrunkItemDurability   ][ 10 ],
    cInfo[ veh ][ cTrunkWeapon ][ 11 ],
    cInfo[ veh ][ cTrunkAmmo   ][ 11 ],
    cInfo[ veh ][ cTrunkItemContent   ][ 11 ],
    cInfo[ veh ][ cTrunkItemDurability   ][ 11 ]);

    return 1;
}
stock PackTrunk( vehicleid )
{
    new string[ 512 ];
    for(new i = 0; i < MAX_TRUNK_SLOTS; i++)
    {
        format(string, sizeof(string ),"%s%d/%d/%d/%d/",string,
        cInfo[ vehicleid ][ cTrunkWeapon ][ i ],
        cInfo[ vehicleid ][ cTrunkAmmo   ][ i ],
        cInfo[ vehicleid ][ cTrunkItemContent ][ i ],
        cInfo[ vehicleid ][ cTrunkItemDurability ][ i ]);
    }
    return string;
}
stock SaveCar(carid)
{
    if ( cInfo[ carid ][ cOwner ] == 0 ) return 1;
    new string[ 1400 ];

    format(string,sizeof(string),"UPDATE `vehicles` SET `cName`='%s',`cOwner`=%d,`cModel`=%d,`cSpawn1`='%f',`cSpawn2`='%f',\
    `cSpawn3`='%f',`cAngle`='%f',`cColor1`=%d,`cColor2`=%d,`cFuel`=%d,`cNumbers`='%s',`cFaction`=%d,`cWheels`=%d,`c\
    Tuning`=%d,`cInsurance`=%d,`cDuzimai`=%d,`cLockType`=%d,`cAlarm`=%d,`cTrunk`='%s',`cTicket`=%d,`cHid\
    raulik`=%d,`cCrimes`=%d,`cVehID`=%d,cDamage='%s',cKM='%f',cVW=%d WHERE `id`=%d",
    cInfo[ carid ][ cName      ],
    cInfo[ carid ][ cOwner     ],
    cInfo[ carid ][ cModel     ],
    cInfo[ carid ][ cSpawn     ][0],
    cInfo[ carid ][ cSpawn     ][1],
    cInfo[ carid ][ cSpawn     ][2],
    cInfo[ carid ][ cSpawn     ][3],
    cInfo[ carid ][ cColor     ][0],
    cInfo[ carid ][ cColor     ][1],
    cInfo[ carid ][ cFuel      ],
    cInfo[ carid ][ cNumbers   ],
    cInfo[ carid ][ cFaction   ],
    cInfo[ carid ][ cWheels    ],
    cInfo[ carid ][ cTuning    ],
    cInfo[ carid ][ cInsurance ],
    cInfo[ carid ][ cDuzimai   ],
    cInfo[ carid ][ cLockType  ],
    cInfo[ carid ][ cAlarm     ],
    PackTrunk( carid       ),
    cInfo[ carid ][ cTicket    ],
    cInfo[ carid ][ cHidraulik ],
    cInfo[ carid ][ cCrimes    ],
    cInfo[ carid ][ cVehID     ],
    cInfo[ carid ][ cDamage    ],
    cInfo[ carid ][ cKM        ],
    cInfo[ carid ][ cVirtWorld ],
    cInfo[ carid ][ cID        ]);
    mysql_query(DbHandle, string, false);

    SaveVehicleFish(carid);
    return 1;
}
stock SaveSVehicle(vehid)
{
    new string[ 256 ];


    mysql_format(DbHandle, string, sizeof(string), "UPDATE `scars` SET `sModel`= %d,`sCar_x`='%f',`sCar_y`='%f',`sCar_z`='%f',`sCar_a`='%f',`sColor1`=%d,`sColor2`=%d,`sFaction`=%d,`sRang`=%d,`sJob`=%d WHERE `sID`=%d",
    sVehicles[ vehid ][ Model       ],
    sVehicles[ vehid ][ SpawnX       ],
    sVehicles[ vehid ][ SpawnY      ],
    sVehicles[ vehid ][ SpawnZ       ],
    sVehicles[ vehid ][ SpawnA       ],
    sVehicles[ vehid ][ Color1      ],
    sVehicles[ vehid ][ Color2      ],
    sVehicles[ vehid ][ Faction     ],
    sVehicles[ vehid ][ Rang        ],
    sVehicles[ vehid ][ Job         ],
    sVehicles[ vehid ][ Id          ]);

    if(mysql_pquery(DbHandle,  string))
        return 1;
    return 0;
}
stock SaveSEnter( id )
{
    new string[ 512 ],
        name[ 128 ];
    mysql_real_escape_string(sEnter[ id ][ Name ],name);
    format( string, sizeof(string), "UPDATE `senters` SET `sEnter_x`='%f',`sEnter_y`='%f',`sEnter_z`='%f',`sExit_x`='%f',`sExit_y`='%f',`sExit_z`='%f',`Interior`=%d,`Interior2`=%d,`Wirt`=%d,`Name`='%s',Wirt2=%d, PickupModel = %d WHERE `sID`=%d",
    sEnter[ id ][ sEnter_x ],
    sEnter[ id ][ sEnter_y ],
    sEnter[ id ][ sEnter_z ],
    sEnter[ id ][ sExit_x  ],
    sEnter[ id ][ sExit_Y  ],
    sEnter[ id ][ sExit_z  ],
    sEnter[ id ][ Int      ],
    sEnter[ id ][ Int2     ],
    sEnter[ id ][ Wirt     ],
    name,
    sEnter[ id ][ Wirt2    ],
    sEnter[ id ][ PickupModel ],
    sEnter[ id ][ sID      ]);

    if(mysql_pquery(DbHandle,  string))
        return 1;
    return 0;
}
stock SaveVehicleEx( masina, mode[], count)// Only for Interator
{
    if ( cInfo[ masina ][ cOwner ] == 0 ) return 0;
    new string[ 126 ];
    format( string, 126, "UPDATE `vehicles` SET `%s`=%d WHERE `id`=%d", mode, count, cInfo[ masina ][ cID ]);
    mysql_query(DbHandle,  string, false);
    return 1;
}



stock ShowFines( giveplayerid, playerid )
{
    new
        string[ 1024 ],
        rows,
        etc[ 3 ][ 128 ],
        kaina,
        Cache:result;
        
    format( string, 256, "SELECT `id`,`crime`,`price` FROM `tickets` WHERE `name` = '%s' AND `paid` = 0 LIMIT 7", GetPlayerNameEx(playerid) );
    result = mysql_query(DbHandle,  string );
    rows = cache_get_row_count();

    format( string, 256, "" );

    for(new i = 0; i < cache_get_row_count(); i++)
    {
        rows = cache_get_field_content_int(i, "id");
        cache_get_field_content(i, "crime", etc[ 0 ]);
        kaina = cache_get_field_content_int(i, "price");
        format( string, sizeof( string ),"%sFine #%d [$%d] uþ '%s'\n", string, rows, kaina, etc[ 0 ] );
    }
    cache_delete(result);
    tmpinteger[ giveplayerid ] = playerid;
    ShowPlayerDialog(giveplayerid,166,DIALOG_STYLE_LIST,"Fine list",string,"Detaliau","Atgal");
    return 1;
}
stock ShowVehicleFines( giveplayerid, playerid )
{
    new
        string[ 1024 ],
        rows,
        etc[ 3 ][ 128 ],
        kaina,
        Cache:result;

    format( string, 256, "SELECT `id`,`crime`,`price` FROM `cartickets` WHERE `numbers` = '%s' AND `paid` = 0 LIMIT 7", cInfo[ playerid ][ cNumbers ] );
    result = mysql_query(DbHandle,  string );
    rows = cache_get_row_count();

    for(new i = 0; i < rows; i++)
    {
        rows = cache_get_field_content_int(i, "id");
        cache_get_field_content(i, "crime", etc[ 0 ]);
        kaina = cache_get_field_content_int(i, "price");
        format( string, sizeof( string ),"%sFine #%d [$%d] uþ '%s'\n", string, rows, kaina, etc[ 0 ] );
    }

    cache_delete(result);
    SetPVarInt(giveplayerid, "Listitem", rows);
    tmpinteger[ giveplayerid ] = playerid;
    ShowPlayerDialog(giveplayerid,168,DIALOG_STYLE_LIST,"Fine list",string,"Detaliau","Atgal");
    return 1;
}

stock ShowTrunk( playerid, veh )
{
    new string[ 1028 ];
    for( new slot = 0; slot < GetVehicleTrunkSlots( GetVehicleModel( veh ) ); slot ++)
    {
        if ( cInfo[ veh ][ cTrunkWeapon ][ slot ] == 0)
            format( string, sizeof(string), "%s%d. Nëra\n", string,slot+1);
        else if ( cInfo[ veh ][ cTrunkWeapon ][ slot ] > 0 )
        {
            format( string, sizeof(string), "%s%d. %s %d\n", string, slot+1, GetItemName(cInfo[ veh ][ cTrunkWeapon ][ slot ]) , cInfo[ veh ][ cTrunkAmmo ][ slot ] );
        }
    }
    format( string, sizeof(string), "%s\nIðjunkti", string);
    ShowPlayerDialog(playerid,13,DIALOG_STYLE_LIST,"Bagaþinë",string,"Paimti","Atgal");
    return 1;
}


stock IsItemInTrunk( vehicle, item )
{
    for( new slot = 0; slot < GetVehicleTrunkSlots( GetVehicleModel( vehicle ) ); slot ++)
    {
        if ( cInfo[ vehicle ][ cTrunkWeapon ][ slot ] == item)
            return slot;
    }
    return MAX_TRUNK_SLOTS;
}
stock TakeFromTrunk( playerid, veh, slot )
{
    if ( !PlayerToCar( 5.0, playerid, veh ) ) return 1;
    if ( cInfo[ veh ][ cTrunkWeapon ][ slot ] == 0) return 1;

    new string[ 100 ],
        tmpid = cInfo[ veh ][ cTrunkWeapon ][ slot ];
    if ( tmpid < 50 && !IsPlayerHaveManyGuns( playerid, tmpid ) )
    {
        if ( tmpid > 21 )
        {
            if ( pInfo[ playerid ][ pLevel ] < 2 )
            return SendClientMessage( playerid, COLOR_RED, "Klaida, Jûs privalote bøti pasiekæs 2 lygá, kad naudotumëtës ðia galimybæ." );
        }

        if( sVehicles[ veh ][ Faction ] != 2 && sVehicles[ veh ][ Faction ] != 3 )
        {
            GivePlayerWeapon( playerid, tmpid, cInfo[ veh ][ cTrunkAmmo ][ slot ] );
            cInfo[ veh ][ cTrunkWeapon ][ slot ] = 0;
            cInfo[ veh ][ cTrunkAmmo   ][ slot ] = 0;
            GunLog       ( pInfo[ playerid ][ pMySQLID ], 4, cInfo[ veh ][ cOwner ], GetItemName(tmpid), cInfo[ veh ][ cTrunkAmmo ][ slot ] );
        }
        else 
        {
            GivePlayerJobWeapon(playerid, tmpid, cInfo[ veh ][ cTrunkAmmo ][ slot ]);
        }
    }
    else if ( tmpid > 50 )
    {
        if( IsItemDrug( tmpid ) )
            NarkLog       ( pInfo[ playerid ][ pMySQLID ], 4, cInfo[ veh ][ cOwner ], GetItemName(tmpid), cInfo[ veh ][ cTrunkAmmo ][ slot ] );
        if ( tmpid == ITEM_MAGNETOLA )
            VehicleRadio[ veh ] = 99;

        if(IsPlayerInventoryFull(playerid))
            return SendClientMessage(playerid, COLOR_FADE2, "{FF6347}Klaida, bet Jûsø inventoriuje nepakanka laisvos vietos ðiam daiktui..");

        GivePlayerItem(playerid, tmpid, cInfo[ veh ][ cTrunkAmmo   ][ slot ], cInfo[ veh ][ cTrunkItemContent ][ slot ], cInfo[ veh ][ cTrunkItemDurability ][ slot ]);
            
        cInfo[ veh ][ cTrunkWeapon ][ slot ] = 0;
        cInfo[ veh ][ cTrunkAmmo   ][ slot ] = 0;
        cInfo[ veh ][ cTrunkItemContent   ][ slot ] = 0;
        cInfo[ veh ][ cTrunkItemDurability   ][ slot ] = 0;
    }
    format(string, sizeof(string), "* %s ið tr. priemonës bagaþinës iðtraukia daiktà atrodantá kaip %s " ,GetPlayerNameEx( playerid ), GetItemName(tmpid));
    ProxDetector( 20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
    SaveCar( veh );
    return 1;
}
FUNKCIJA:CreateAllTrash( )
{
    for( new i = 0; i < 12; i++ )
    {
        if( !IsValidDynamicObject(RandBus[ i ][ objectas ]) )
            RandBus[ i ][ objectas ] = CreateDynamicObject(1264, RandBus[ i ][ X4 ], RandBus[ i ][ Y4 ], RandBus[ i ][ Z4 ]-0.5, 0.0, 0.0, 0.0);
    }
    return 1;
}



stock RemoveAllCargoFromVehicle(vehicleid)
{
    for(new i = 0; i < sizeof VehicleCargo[]; i++)
        if(VehicleCargo[ vehicleid ][ i ][ Amount])
            RemoveCargoFromVehicle(vehicleid, VehicleCargo[ vehicleid ][ i ][ CargoId ], VehicleCargo[ vehicleid ][ i ][ Amount]);
    return 1;
}

stock RemoveCargoFromVehicle(vehicleid, cargoid, amount = 1)
{
    new query[140];
    for(new i = 0; i < sizeof(VehicleCargo[]); i++)
    {
        if(!VehicleCargo[ vehicleid ][ i ][ Amount ]) 
            continue;
        if(VehicleCargo[ vehicleid ][ i ][ CargoId ] != cargoid)
            continue;

        VehicleCargo[ vehicleid ][ i ][ Amount ] -= amount;
        // Jei nebëra kroviniø, paðalinam ir jo ID ið maðinos ir DB
        if(VehicleCargo[ vehicleid ][ i ][ Amount ] == 0)
        {
            VehicleCargo[ vehicleid ][ i ][ CargoId ] = 0;
            if(cInfo[ vehicleid ] [ cID ])
            {
                format(query,sizeof(query), "DELETE FROM vehicle_cargo WHERE vehicle_id= %d AND cargo_id = %d AND is_static = 0",
                    cInfo[ vehicleid ][ cID ], cargoid);
                mysql_query(DbHandle, query, false);
            }
			else 
			{
				format(query,sizeof(query), "DELETE FROM vehicle_cargo WHERE vehicle_id= %d AND cargo_id = %d AND is_static = 1",
                    sVehicles[ vehicleid ][ Id ], cargoid);
                mysql_query(DbHandle, query, false);
			}
        }
        else 
        {
            if(cInfo[ vehicleid ][ cID ])
            {
                format(query,sizeof(query),"UPDATE vehicle_cargo SET amount = amount - %d WHERE vehicle_id = %d AND cargo_id = %d AND is_static = 0",
                    amount, cInfo[vehicleid ][ cID ], cargoid);
                mysql_query(DbHandle, query, false);
            }
			else 
			{
				format(query,sizeof(query),"UPDATE vehicle_cargo SET amount = amount - %d WHERE vehicle_id = %d AND cargo_id = %d AND is_static = 1",
                    amount, sVehicles[vehicleid ][ Id ], cargoid);
                mysql_query(DbHandle, query, false);
			}
        }

        // Su forklift kiek kitaip
        if(GetVehicleModel(vehicleid) == 530)
        {
            if(VehicleCargo[ vehicleid ][ i ][ Amount ] == 0)
            {
				for(new j = 0; j < 4; j++)
					DestroyVehicleObject(vehicleid, j);
            }
            else 
            {
                // Buvo 3 dezes
                // isima 2
                // Turi likt 1.

                // Naudojami slotai: 0, 1, 2, 3
                // Turi b8t naudojami: 0,1 
                for(new j = VehicleCargo[ vehicleid ][ i ][ Amount ] + amount; j != VehicleCargo[ vehicleid ][ i ][ Amount ]; j--)
                    DestroyVehicleObject(vehicleid, j);
            }
        }
		else 
		{
			switch(GetCargoType(cargoid))
			{
				case 1: DestroyVehicleObject(vehicleid, 0);
				case 2,5:
				{
                    new index = GetLastUsedVehicleObjectSlot(vehicleid);
					for(new j = index; j >= 0; j--)
						DestroyVehicleObject(vehicleid,  j);
				}
			}
		}
        return 1;
    }
    return 0;
}
stock DestroyVehicleObject(vehicleid, index)
{
    if(index < 0 || index >= MAX_TRUCKER_CARGO_OBJECTS)
        return printf("Error. Klaida. DestroyVehicleObject(%d,%d) index invalid", vehicleid, index);
    DestroyObject(cInfo[ vehicleid ][ objectai ][ index ]);
    cInfo[ vehicleid ][ objectai ][ index ] = -1;
    return 1;
}
stock AddCargoToVehicle(vehicleid, cargoid, bool:ignore_sql = false)
{
    new bool:found,freeSlot = -1, amount;
    for(new i = 0; i < sizeof(VehicleCargo[]); i++)
    {
        if(!VehicleCargo[ vehicleid ][ i ][ Amount ] && !VehicleCargo[ vehicleid ][ i ][ CargoId ]) 
        {
            if(freeSlot == -1)
                freeSlot = i;
            continue;
        }
        if(VehicleCargo[vehicleid ][ i ][ CargoId ] != cargoid) continue;
    

        amount = VehicleCargo[ vehicleid ][ i ][ Amount ]; // slotas objektui.
        VehicleCargo[ vehicleid ][ i ][ Amount ]++;
        found = true;
        break;
    }

    if(!found)
    {
        if(freeSlot == -1)
            printf("ERROR. Klaida. AddCargoToVehicle(%d, %d, %b) freeSlot:%d",vehicleid, cargoid, ignore_sql, freeSlot);
        VehicleCargo[ vehicleid ][ freeSlot ][ CargoId ] = cargoid;
        VehicleCargo[ vehicleid ][ freeSlot ][ Amount ] = 1;
    }

    // Irasom krovinio egzistavima i db.
	if(!ignore_sql)
	{
		new query[180];
		if(cInfo[ vehicleid ][ cID ])
			format(query,sizeof(query) ,"INSERT INTO vehicle_cargo (vehicle_id, cargo_id, amount,is_static) VALUES(%d,%d,%d,0)\
				ON DUPLICATE KEY UPDATE amount = VALUES(amount)",
				cInfo[ vehicleid ][ cID ], cargoid, amount+1);
		else 
			format(query,sizeof(query) ,"INSERT INTO vehicle_cargo (vehicle_id, cargo_id, amount,is_static) VALUES(%d,%d,%d,1)\
				ON DUPLICATE KEY UPDATE amount = VALUES(amount)",
				sVehicles[ vehicleid ][ Id ], cargoid, amount+1);
		mysql_query(DbHandle, query, false);

    }

    // Sukuriam ir primontuojam objekta.

    // A forklift. Su jais kiek kitaip.
    new index = GetFreeVehicleObjectSlot(vehicleid);
    if(index == -1)
        printf("Vehicle Id=%d SqlId=%d has more cargo objects than possible(" #MAX_TRUCKER_CARGO_OBJECTS ")", vehicleid, cInfo[ vehicleid ][ cID ]);
    if(GetVehicleModel(vehicleid) == 530)
    {
        switch(amount)
        {
            case 0:
            {
                cInfo[ vehicleid ][ objectai ][ index ] = CreateObject(1448, 0.0,0.0,0.0,0.0,0.0,0.0);
                AttachObjectToVehicle(cInfo[ vehicleid ][ objectai ][ index ], vehicleid, -0.030395508, 0.7, 0.0, 0.0,0.0,0.0);
                cInfo[ vehicleid ][ objectai ][ index+1 ] = CreateObject(2912, 0.0,0.0,0.0,0.0,0.0,0.0);
                AttachObjectToVehicle(cInfo[ vehicleid ][ objectai ][ index+1 ], vehicleid,  0.3079834, 0.7, 0.1, 0.0,0.0,0.0);
            }
            case 1:
            {
                cInfo[ vehicleid ][ objectai ][ index ] = CreateObject(2912, 0.0,0.0,0.0,0.0,0.0,0.0);
                AttachObjectToVehicle(cInfo[ vehicleid ][ objectai ][ index ], vehicleid,  -0.38916016, 0.7, 0.1, 0.0,0.0,0.0);
            }
            case 2:
            {
                cInfo[ vehicleid ][ objectai ][ index ] = CreateObject(2912, 0.0,0.0,0.0,0.0,0.0,0.0);
                AttachObjectToVehicle(cInfo[ vehicleid ][ objectai ][ index ], vehicleid,  -0.045166016, 0.7, 0.8, 0.0,0.0,0.0);
            }
        }
    }
    else 
    {
        new type = GetCargoType(cargoid);
        // 4 tipas nereikalauja objekto.
        if(type != 4)
        {
            new objectid = GetTruckerCargoObject(GetCargoType(cargoid));
            cInfo[ vehicleid ][ objectai ][ index ] = CreateObject(objectid, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000, 0.00000);
            
            new Float:offX,Float:offY, Float:offZ, Float:rotx,Float:roty,Float:rotz;
            GetTruckerCargoOffsets(GetVehicleModel(vehicleid), GetCargoType(cargoid), index, offX, offY, offZ, rotx, roty, rotz);
            AttachObjectToVehicle(cInfo[ vehicleid ][ objectai ][ index ], vehicleid, offX, offY, offZ, rotx, roty, rotz);
        }
    }

}

stock GetFreeVehicleObjectSlot(vehicleid)
{
    for(new i = 0; i < MAX_TRUCKER_CARGO_OBJECTS; i++)
    {
        if(cInfo[ vehicleid ][ objectai ][ i ] == -1)
        {
            return i;
        }
    }
    return -1;
}
stock GetLastUsedVehicleObjectSlot(vehicleid)
{
    for(new i = MAX_TRUCKER_CARGO_OBJECTS-1; i >= 0; i--)
        if(cInfo[ vehicleid ][ objectai ][ i ] != -1)
            return i;
    return -1;
}

stock GetTruckerCargoOffsets(model, cargo_type, number, &Float:x, &Float:y, &Float:z, &Float:rotx, &Float:roty, &Float:rotz)
{
    switch(model)
    {
		case 428: //securicar
		{
			switch(cargo_type)
			{
				case 2: // dezes 
				{
					switch(number)
					{
						case 0: { x = 0.7293701;	y = -0.4281006;	z = -0.15219975; }
						case 1: { x = 0.025268555;	y = -0.4281006;	z = -0.15219975; }
						case 2: { x = -0.6697998;	y = -0.4281006;	z = -0.15219975; }
						case 3: { x = -0.6697998;	y = -1.1330566;	z = -0.15219975; }
						case 4: { x = 0.020263672;	y = -1.1330566;	z = -0.15219975; }
						case 5: { x = 0.7102051;	y = -1.1330566;	z = -0.15219975; }
						case 6: { x = -0.66955566;	y = -1.8280029;	z = -0.15219975; }
						case 7: { x = 0.020385742;	y = -1.8280029;	z = -0.15219975; }
						case 8: { x = 0.7104492;	y = -1.8280029; z = -0.15219975; }
						case 9: { x = -0.66955566;	y = -2.5179443;	z = -0.15219975; }
						case 10: { x = 0.020385742;	y = -2.5179443;	z = -0.15219975; }
						case 11: { x = 0.7104492;	y = -2.5179443;	z = -0.15219975; }
						case 12: { x = 0.7293701;	y = -0.4281006;	z = 0.53779984; }
						case 13: { x = 0.03930664;	y = -0.4281006; z = 0.53779984; }
						case 14: { x = -0.65063477;	y = -0.4281006;	z = 0.53779984; }
						case 15: { x = 0.03930664;	y = -1.1330566;	z = 0.53779984; }
					}
				}
				case 6: // Brangios dezes 
				{
					switch(number)
					{
						case 0 .. 7:
							{ x = 0.0013427734;	y = -0.9185791;	z = -0.17819977; }
						case 8 .. 15: 
							{ x = 0.0013427734;	y = -2.1785889;	z = -0.17819977; }

					}
				}
			}
		}
		case 578: //DFT-30
		{
			switch(cargo_type)
			{
				case 1: // malkos
					{x = 0.203125;	y = -4.814087;	z = 0.82102966; rotx = 0.00000; roty = 0.00000; rotz = 4.53463;}
				case 5: // plytos
				{
					switch(number)
					{
						case 0: { x = -0.068603516;	y = 1.3687744;	z = 0.49217987; }
						case 1: { x = -0.068603516;	y = -0.9831543;	z = 0.4921999; }
						case 2: { x = -0.068603516;	y = -3.2302246;	z = 0.4921999; }
					}
				}
			}
		}
        case 600: // Picador
        {
            switch(number)
            {
                case 0: {x = 0.00865;  y = -0.97901;    z = -0.13754; }
                case 1: {x = 0.00865;  y = -1.68238;    z = -0.13754; }
            }
        }
        case 543, 605: // Sadler ir sadler shit
        {
            switch(number)
            {
                case 0: {x = -0.33167;    y = -2.18864; z = -0.10093; }
                case 1: {x = 0.34769;   y = -2.18864; z = -0.10093; }
            }
        } 
        case 422:   //bobcat 
        {
            switch(number)
            {
                case 0: { x = -0.33313;  y = -0.78529;    z = -0.28743; }
                case 1: { x = 0.40613; y = -0.76478;    z = -0.30857; }
                case 2: { x = 0.02588; y = -0.76478;    z = -0.30857; }
            }
        }
        case 478:   // walton
        {
            switch(number)
            {
                case 0: { x = 0.62209; y = -2.19438; z = -0.03901; }
                case 1: { x = -0.64597;  y = -2.15849; z = -0.03901; }
                case 2: { x = -0.64353;  y = -1.39652; z = -0.03901; }
                case 3: { x = 0.18288; y = -1.47685; z = -0.03901; }
            }
        }
        case 554: // Yosemite
        {
            switch(cargo_type)
            {
                case 5: // plytos
                    { x = -0.01735;  y = -1.68338; z = 0.48368; }
                case 2: // dezes
                {
                    switch(number)
                    {
                        case 0: { x = -0.39235;  y = -0.96633;    z = -0.24251; }
                        case 1: { x = 0.3314;  y = -0.97988;    z = -0.24251; }
                        case 2: { x = -0.39235;  y = -1.66616;    z = -0.24251; }
                        case 3: { x = 0.3314;  y = -1.65933;    z = -0.24251; }
                        case 4: { x = -0.39235;  y = -2.37844;    z = -0.24251; }
                        case 5: { x = 0.3314;  y = -2.39163;    z = -0.24251; }
                    }
                }
            }
        }
        case 413: // pony
        {
            switch(number)
            {
                case 0: { x = 0.40747;  y = 0.06923; z = -0.25233; }
                case 1: { x = -0.3114;  y = 0.06923; z = -0.25233; }
                case 2: { x = 0.40747;  y = -0.63732;   z = -0.25233; }
                case 3: { x = -0.3114;  y = -0.63732;   z = -0.25233; }
                case 4: { x = 0.40747;  y = -1.33959;   x = -0.25233; }
                case 5: { x = -0.3114;  y = -1.33959;   z = -0.25233; }
                case 6: { x = 0.40747;  y = -2.08287;   z = -0.25233; }
                case 7: { x = -0.3114;  y = -2.08287;   z = -0.25233; }
                case 8: { x = 0.05444;  y = -0.00341;   z = 0.38135; }
                case 9: { x = 0.05444;  y = -0.75621;   z = 0.38135; }
            }
        }
        case 459: // topfun
        {
            switch(number)
            {
                case 0: { x = 0.5128174;    y = 0.0670166;  z = -0.26280022; }
                case 1: { x = -0.37316895;  y = 0.0670166;  z = -0.26282024; }
                case 2: { x = 0.5062256;    y = -0.6333008; z = -0.26280022; }
                case 3: { x = -0.375;       y = -0.6333008; z = -0.26282024; }
                case 4: { x = 0.5062256;    y = -1.3354492; z = -0.26280022; }
                case 5: { x = -0.375;       y = -1.3354492; z = -0.26280022; }
                case 6: { x = 0.5062256;    y = -2.0534668; z = -0.26280022; }
                case 7: { x = -0.375;       y = -2.0534668; z = -0.26280022; }
                case 8: { x = 0.076538086;  y = 0.008422852; z = 0.36553955; }
                case 9: { x = 0.057617188;  y = -0.7651367; z = 0.37178993; }
            }
        }
        case 482: // burrito
        {
            switch(number)
            {
                case 0: { x = 0.51293945;   y = -0.23730469;    z = -0.48169994; }
                case 1: { x = -0.24816895;  y = -0.23730469;    z = -0.48169994; }
                case 2: { x = 0.51293945;   y = -0.9420166;     z = -0.48174; }
                case 3: { x = -0.24816895;  y = -0.9420166;     z = -0.48169994; }
                case 4: { x = 0.31293945;   y = -1.5184555;     z = -0.48169994; }
                case 5: { x = -0.24816895;  y = -1.6518555;     z = -0.48169994; }
                case 6: { x = 0.4729004;    y = -0.23730469;    z = 0.024100304; }
                case 7: { x = -0.24719238;  y = -0.23730469;    z = 0.024100304; }
                case 8: { x = 0.4729004;    y = -0.9572754;     z = 0.024100304; }
                case 9: { x = -0.24719238;  y = -0.9572754;     z = 0.024100304; }
            }
        }
        case 440: // Rumpo
        {
            switch(number)
            {
                case 0: { x = 0.37438965;   y = 0.01586914;     z = -0.4368; }
                case 1: { x = -0.3656006;   y = 0.01586914;     z = -0.4368; }
                case 2: { x = 0.37438965;   y = -0.70422363;    z = -0.4368; }
                case 3: { x = -0.3656006;   y = -0.70422363;    z = -0.4368; }
                case 4: { x = 0.37438965;   y = -1.4241943;     z = -0.4368; }
                case 5: { x = -0.3656006;   y = -1.4241943;     z = -0.4368; }
                case 6: { x = 0.37438965;   y = -2.144165;      z = -0.4368; }
                case 7: { x = -0.3656006;   y = -2.144165;      z = -0.4368; }
                case 8: { x = 0.37438965;   y = 0.01586914;     z = 0.26609993; }
                case 9: { x = -0.3656006;   y = 0.01586914;     z = 0.26609993; }
                case 10: { x = 0.37438965;  y = -0.70422363;    z = 0.26609993; }
                case 11: { x = -0.3656006;  y = -0.70422363;    z = 0.26609993; }
            }
        }
        case 498: // Boxville
        {
            switch(number)
            {
                case 0: { x = 0.039331;     y = -0.6726074; z = -0.43187046; }
                case 1: { x = 0.21936035;   y = -0.6726074; z = -0.43190002; }
                case 2: { x = -0.1035156;   y = -0.6726074; z = -0.43190002; }
                case 3: { x = 0.239331;     y = -1.3725586; z = -0.43190002; }
                case 4: { x = 0.1936035;   y = -1.3725586; z = -0.43190002; }
                case 5: { x = -0.1035156;   y = -1.3725586; z = -0.43190002; }
                case 6: { x = -0.1035156;   y = -0.6726074; z = 0.26809978; }
                case 7: { x = 0.21936035;   y = -0.6726074; z = 0.26809978; }
                case 8: { x = 0.239331;     y = -0.6726074; z = 0.26809978; }
                case 9: { x = -0.1035156;   y = -1.3725586; z = 0.26809978; }
                case 10: { x = 0.1936035;  y = -1.3725586; z = 0.26809978; }
                case 11: { x = 0.039331;        y = -1.3725586; z = 0.26809978; }
            }
        }
        case 499: // benson 
        {
            switch(cargo_type)
            {
                case 2: // dezes
                {
					switch(number)
					{
						case 0: { x = 0.5916748;		y = 0.2919922;	z = 1.0380993; }
						case 1: { x = -0.13635254;		y = 0.2919922;	z = 1.0380993; }
						case 2: { x = -0.8084717;		y = 0.18005371;	z = 1.0380993; }
						case 3: { x = -0.7453613;		y = -0.9719238;	z = -0.10730076; }
						case 4: { x = -0.045288086;		y = -0.9719238;	z = -0.10730076; }
						case 5: { x = 0.6826172;		y = -0.9719238;	z = -0.10730076; }
						case 6: { x = 0.6826172;		y = -1.7279053;	z = -0.10730076; }
						case 7: { x = -0.045288086;		y = -1.7279053;	z = -0.10730076; }
						case 8: { x = -0.7453613;		y = -1.7279053;	z = -0.10730076; }
						case 9: { x = -0.7453613;		y = -2.4278564;	z = -0.10730076; }
						case 10: { x = -0.045288086;	y = -2.4278564;	z = -0.10730076; }
						case 11: { x = 0.6826172;		y = -2.4278564;	z = -0.10730076; }
						case 12: { x = 0.6826172;		y = -2.4278564;	z = 0.5647001; }
						case 13: { x = -0.045410156;	y = -2.4278564;	z = 0.5927; }
						case 14: { x = -0.7454834;		y = -2.4278564;	z = 0.5927; }
						case 15: { x = -0.045288086;	y = -1.7279053;	z = 0.5927; }
					}
				}
                case 5: // plytos
                {
					switch(number)
					{
						case 0: { x = -0.011474609;	y = -1.2894287;	z = 0.5930004; }
						case 1: { x = -0.021728516;	y = -2.4053955;	z = 0.5930004; }
					}	
				}
            }
        
        }
        case 414: // mule 
        {
            switch(cargo_type)
            {
                case 2: // dezes 
                {
					switch(number)
					{
						case 0: { x = -0.7192383;	y = 1.5007324;	z = 1.3246002; }
						case 1: { x = -0.019165039;	y = 1.5007324;	z = 1.3246002; }
						case 2: { x = 0.65283203;	y = 1.5007324;	z = 1.3246002; }
						case 3: { x = -0.663208;	y = 0.10070801;	z = -0.10340023; }
						case 4: { x = 0.036743164;	y = 0.10070801;	z = -0.10340023; }
						case 5: { x = 0.7368164;	y = 0.10070801;	z = -0.10340023; }
						case 6: { x = -0.663208;	y = -0.59924316;	z = -0.10340023; }
						case 7: { x = 0.036743164;	y = -0.59924316;	z = -0.10340023; }
						case 8: { x = 0.70874023;	y = -0.59924316;	z = -0.10340023; }
						case 9: { x = -0.663208;	y = -1.2993164;	z = -0.10340023; }
						case 10: { x = 0.036743164;	y = -1.2993164;	z = -0.10340023; }
						case 11: { x = 0.68078613;	y = -1.2993164;	z = -0.10340023; }
						case 12: { x = -0.663208;	y = -1.9992676;	z = -0.10340023; }
						case 13: { x = 0.036743164;	y = -1.9992676;	z = -0.10340023; }
						case 14: { x = 0.68078613;	y = -1.9992676;	z = -0.10340023; }
						case 15: { x = 0.7368164;	y = 0.10070801;	z = 0.5965996; }
						case 16: { x = 0.036743164;	y = 0.10070801;	z = 0.5965996; }
						case 17: { x = -0.6352539;	y = 0.10070801;	z = 0.5965996; }
					}
				}
                case 5: // plytos
                {
					switch(number)
					{
						case 0: {x = 0.06567383;	y = -0.48010254;	z = 0.6166992; }
						case 1: {x = 0.06567383;	y = -2.2441406;	z = 0.6166992; }
						case 2: {x = 0.06567383;	y = -1.2081299;	z = 1.5407; }
					}
				}
            }
        }
        case 456: // yankee
        {
            switch(cargo_type)
            {
                case 2: //dezes 
                {
                    switch(number) 
                    {
                        case 0: { x = 0.8388672;    y = -0.15039062;    z = 0.058169365; }
                        case 1: { x = 0.12792969;   y = -0.15039062;    z = 0.058199883; }
                        case 2: { x = -0.5831299;   y = -0.15039062;    z = 0.058199883; }
                        case 3: { x = 0.8388672;    y = -0.8613281;     z = 0.058199883; }
                        case 4: { x = 0.12792969;   y = -0.8613281;     z = 0.058199883; }
                        case 5: { x = -0.5831299;   y = -0.8613281;     z = 0.058199883; }
                        case 6: { x = 0.8388672;    y = -1.5723877;     z = 0.058199883; }
                        case 7: { x = 0.12792969;   y = -1.5723877;     z = 0.058199883; }
                        case 8: { x = -0.5831299;   y = -1.5723877;     z = 0.058199883; }
                        case 9: { x = 0.8388672;    y = -2.2833252;     z = 0.058199883; }
                        case 10: { x = 0.12792969;  y = -2.2833252;     z = 0.058199883; }
                        case 11: { x = -0.5831299;  y = -2.2833252;     z = 0.058199883; }
                        case 12: { x = 0.8388672;   y = -2.9943848;     z = 0.058199883; }
                        case 13: { x = 0.12792969;  y = -2.9943848;     z = 0.058199883; }
                        case 14: { x = -0.5831299;  y = -2.9943848;     z = 0.058199883; }
                        case 15: { x = -0.5831299;  y = -3.7053223;     z = 0.058199883; }
                        case 16: { x = 0.12792969;  y = -3.7053223;     z = 0.058199883; }
                        case 17: { x = 0.8388672;   y = -3.7053223;     z = 0.058199883; }
                        case 18: { x = 0.8388672;   y = -0.15039062;    z = 0.7691994; }
                        case 19: { x = 0.12792969;  y = -0.15039062;    z = 0.7691994; }
                        case 20: { x = -0.5831299;  y = -0.15039062;    z = 0.7691994; }
                        case 21: { x = 0.8388672;   y = -0.8613281;     z = 0.7691994; }
                        case 22: { x = 0.12792969;  y = -0.8613281;     z = 0.7691994; }
                        case 23: { x = -0.5831299;  y = -0.8613281;     z = 0.7691994; }
                    }
                }
                case 5: // plytos 
                {
                    switch(number)
                    {
                        case 0, 1: { x = -0.045654297;  y = -0.5404053; z = 0.8616495; }
                        case 2, 3: { x = -0.045654297;  y = -3.2263184; z = 0.8616991; }
                    }
                }
            }
        }
        case 435, 591: // article trailers
        {
            switch(cargo_type)
            {
                case 2: //deze 
                    { x = -0.087890625; y = -0.17773438; z = -0.12885952; }
                case 5: // Plytos 
                    { x = -0.114868164; y = -0.5235596; z = 0.46541977; }
            }
        }
    }
    return 0;
}
stock GetTruckerCargoObject(cargo_type)
{
    switch(cargo_type)
    {
        case 1: // Malkos
            return 18609;
        case 2: // Deze 
            return 2912;
        case 5: // plyots
            return 1685;
		case 6: // Brangi deze
			return 964;
    }
    return 0;
}

stock CanPlayerUseTruckerVehicle(playerid, model)
{
    printf("CanPlayerUseTruckerVehicle(%d, %d) : IsVehicleTrucker:%d IsVehicleTrailer:%d", playerid, model, IsVehicleTrucker(model), IsVehicleTrailer(model));
	if(!IsVehicleTrucker(model) && !IsVehicleTrailer(model))
		return false;
	if(pInfo[ playerid ][ pJob ] != JOB_TRUCKER)
		return false;

	new hours = pInfo[ playerid ][ pJobHours ];
	
	
	if(hours >= 48)
		return true;
	
	switch(model)
	{
		case 530:
			return true; //forklift gali imt visi.
		case 600, 543, 605, 422, 478, 554:
			return true;
		case 413, 459, 482:
			if(hours >= 12)
				return true;
		case 440, 498, 499:
			if(hours >= 24)
				return true;
		case 414, 578, 428, 455:
			if(hours >= 32)
				return true;
		case 456:
			if(hours >= 48)
				return true;
	}
	return false;
}
stock HasVehicleSpaceForCargo(vehicleid, cargoid)
{
    if(!IsCargoCompatibleWithVehicle(cargoid,GetVehicleModel(vehicleid)))
        return 0;
    new slotsUsed;
    for(new i = 0; i < sizeof VehicleCargo[]; i++)
    {
        if(!VehicleCargo[ vehicleid ][ i ][ Amount ]) 
            continue;
		slotsUsed += GetCargoSlot(VehicleCargo[ vehicleid ][ i ][ CargoId ]) * VehicleCargo[ vehicleid ][ i ][ Amount ];
		/*
        if(VehicleCargo[ vehicleid ][ i ][ CargoId ] == cargoid)
        {
            if(VehicleCargo[ vehicleid ][ i ][ Amount ] >= GetVehicleCargoLimit(GetVehicleModel(vehicleid)) / GetCargoSlot(VehicleCargo[ vehicleid ][ i ][ CargoId ]))
                return false;
            else 
                return true;
        }
		*/
    }
	if(GetVehicleCargoLimit(GetVehicleModel(vehicleid)) - slotsUsed >= GetCargoSlot(cargoid))
		return true;
	else 
		return false;
	/*
    if(freeSlotFound)
        return true;
    return false;
	*/
}
stock GetVehicleCargoLimit(model)
{
    switch(model)
    {
        case 600, 605, 543: return 2;
        case 422: return 3;
        case 478: return 4;
        case 554: return 6;
        case 413, 459, 482: return 10;
        case 440, 498: return 12;
        case 499: return 16;
        case 414: return 18;
        case 456: return 24;
        case 435, 591: return 36;

        //Forklift
        case 530: return 3;

        // Liquids.
        case 584: return 40;

        // Loose material
        case 455: return 16;
        case 450: return 30;

        // Large cargos
        case 578: return 18; 
    }
    return 0;
}
stock ShowVehicleCargo(playerid, vehicleid)
{
    new string[512];
    for(new i = 0; i < sizeof(VehicleCargo[]); i++)
    {
        if(VehicleCargo[ vehicleid ][ i ][ Amount ] == 0) continue;
        format(string,sizeof(string),"%s{000000}%d{D7D7DA}\t%s\t\t%d {FFFFFF}vienetai\n",
            string, 
            VehicleCargo[ vehicleid ][ i ][ CargoId ],
            GetCargoName(VehicleCargo[ vehicleid ][ i ][ CargoId ]), 
            VehicleCargo[ vehicleid ][ i ][ Amount]);
    }
    if(isnull(string)) 
        ShowPlayerDialog( playerid, 9999, DIALOG_STYLE_MSGBOX, "Vehicle Cargo", "Jûsø transporto priemonëje nëra jokio krovinio", "Gerai", "" );
        
    else 
    {
        ShowPlayerDialog( playerid, DIALOG_VEHICLE_CARGO_LIST, DIALOG_STYLE_LIST, "Vehicle Cargo", string, "Pasiimti", "Atgal" );
        SetPVarInt(playerid, "vehicleid", vehicleid);
    }
    return 1;
}

stock ShowTPDA( playerid )
{
	ShowPlayerDialog(playerid, DIALOG_TPDA_MAIN, DIALOG_STYLE_LIST, "TPDA", "{C0C0C0}Perþiûrëti{FFFFFF} Visas industrijas\n{C0C0C0}Perþiûrëti{FFFFFF} Verslus perkanèius prekes\n{C0C0C0}Perþiûrëti{FFFFFF} Laivo informacijà", "Pasirinkti","Iðeiti");
    return 1;
}

stock GetIndustrySectorName(industry_index)
{
	new name[24];
	new bought = GetIndustryBoughtCommodityCount(industry_index);
	new sold;
	foreach(CommodityIterator, i)
        if(Commodities[ i ][ IndustryId ] == Industries[ industry_index ][ Id ] 
            && Commodities[ i ][ SellBuyStatus ] == Selling
            && !Commodities[ i ][ IsBusinessCommodity ])
            sold++;
	
	// Jei pardavineja bet nieko neperka, pirmas sektorius
	if(sold && !bought)
		name = "Pirminë";
	else if(sold && bought)
		name = "Antrinë";
	else 
		name = "Paslauginë";
	return name;
}


stock GetIndustryBoughtCommodityCount(industry_index)
{
    new count = 0;
    foreach(CommodityIterator, i)
        if(Commodities[ i ][ IndustryId ] == Industries[ industry_index ][ Id ] 
            && Commodities[ i ][ SellBuyStatus ] == Buying
            && !Commodities[ i ][ IsBusinessCommodity ])
            count++;
    return count;
}
stock GetIndustrySoldCommodityCount(industry_index)
{
    new count = 0;
    foreach(CommodityIterator, i)
        if(Commodities[ i ][ IndustryId ] == Industries[ industry_index ][ Id ] 
            && Commodities[ i ][ SellBuyStatus ] == Selling
            && !Commodities[ i ][ IsBusinessCommodity ])
            count++;
    return count;
}

stock IsShipAcceptingCargo(cargoid)
{
    #pragma unused cargoid
	// Laivas superka visas prekes kaip ir verslai...
	// Kitaip tariant, jeigu jokia industrija to neperka - laivas perka.
	//if(IsAnyIndustryBuyingCargo(cargoid))
	//	return false;
    // Nuo 2015.01.04 laivas superka VISKA.
	return true;
}

stock IsAnyIndustryBuyingCargo(cargoid)
{
    if(!cargoid)
        return false;
	foreach(IndustryIterator, i)
		foreach(CommodityIterator,j)
			if(Commodities[ j ][ CargoId ] == cargoid
			&& Commodities[ j ][ IndustryId ] == Industries [ i ][ Id ]
			&& !Commodities[ j ][ IsBusinessCommodity ]
			&&	Commodities[ j ][ SellBuyStatus ] == Buying)
				return true;
	return false;
}
stock HasIndustryRoomForCargo(industry_index, cargoid)
{
    if(!cargoid)
        return false;
    foreach(CommodityIterator, i)
        if(Commodities[ i ][ IndustryId ] == Industries[ industry_index ][ Id ] 
            && Commodities[ i ][ CargoId ] == cargoid
            && !Commodities[ i ][ IsBusinessCommodity ])
                if(Commodities[ i ][ CurrentStock ] < GetCargoLimit(cargoid))
                    return true;
    return false;
}
stock IsIndustryAcceptingCargo(industry_index, cargoid)
{
    if(!cargoid)
        return false;
    foreach(CommodityIterator, i)
        if(Commodities[ i ][ IndustryId ] == Industries[ industry_index ][ Id ] 
            && Commodities[ i ][ CargoId ] == cargoid
            && !Commodities[ i ][ IsBusinessCommodity ])
            return true;
    return false;
}
stock IsIndustrySellingCargo(industry_index, cargoid)
{
    if(!cargoid)
        return false;
    foreach(CommodityIterator, i)
        if(Commodities[ i ][ IndustryId ] == Industries[ industry_index ][ Id ] 
            && Commodities[ i ][ SellBuyStatus ] == Selling
            && Commodities[ i ][ CargoId ] == cargoid
            && !Commodities[ i ][ IsBusinessCommodity ])
            return true;
    return false;
}

stock SaveIndustryCommodities(industry_index)
{
	new query[140];
	foreach(CommodityIterator, i)
    {
		if(Commodities[ i ][ IndustryId ] == Industries[ industry_index ][ Id ]
            && !Commodities[ i ][ IsBusinessCommodity ])
        {
			format(query,sizeof(query), "UPDATE commodities SET current_stock = %d WHERE cargo_id = %d AND industry_id = %d AND Type = 'Industry'",
				Commodities[ i ][ CurrentStock ], Commodities[ i ][ CargoId ], Industries[ industry_index ][ Id ]); 
			mysql_query(DbHandle, query, false);
		}
	}
}

stock AddCargoToIndustry(industry_index, cargoid, amount = 1)
{
    new query[160];
    foreach(CommodityIterator, i)
    {
		if(Commodities[ i ][ IndustryId ] == Industries[ industry_index ][ Id ]
            && Commodities[ i ][ CargoId ] == cargoid
            && !Commodities[ i ][ IsBusinessCommodity ])
        {
            Commodities[ i ][ CurrentStock ] += amount;
            format(query,sizeof(query),"UPDATE commodities SET current_stock = %d WHERE industry_id = %d AND cargo_id = %d AND type = 'Industry'",
                Commodities[ i ][ CurrentStock ], Industries[ industry_index ][ Id ] ,Commodities[ i ][ CargoId ]);
            mysql_query(DbHandle, query, false);
			UpdateIndustryInfo(industry_index);
            return 1;
        }
	}
    return false;
}

stock RemoveCargoFromIndustry(industry_index, cargoid, amount = 1)
{
	new query[160];
	foreach(CommodityIterator, i)
        if(Commodities[ i ][ IndustryId ] == Industries[ industry_index ][ Id ]
            && Commodities[ i ][ CargoId ] == cargoid
            && !Commodities[ i ][ IsBusinessCommodity ])
        {
			Commodities[ i ][ CurrentStock ] -= amount;
            format(query,sizeof(query),"UPDATE commodities SET current_stock = %d WHERE industry_id = %d AND cargo_id = %d AND type = 'Industry'",
                Commodities[ i ][ CurrentStock ], Industries[ industry_index ][ Id ] ,Commodities[ i ][ CargoId ]);
            mysql_query(DbHandle, query, false);
			UpdateIndustryInfo(industry_index);
            return 1;
		}
	return false;
}


stock GetCargoName(cargoid) 
{
    new str[64];
    foreach(TruckerCargoIterator, i)
    {
        if(TruckerCargo[ i ][ Id ] == cargoid)
        {
            strcat(str, TruckerCargo[ i ][ Name ]);
            return str;
        }   
    }
    return str;
}
stock IsPlayerInRangeOfAnyIndustry(playerid, Float:distance)
{
    if(GetPlayerIndustryInRange(playerid,distance) == -1)
        return false;
    return true;
}

stock GetPlayerIndustryInRange(playerid,Float:distance)
{
    new Float:winDistance = 999999, winIndex = -1;
    foreach(IndustryIterator, i)
    {
        new Float:tmpDis = GetPlayerDistanceFromPoint(playerid, Industries[ i ][ PosX ], Industries[ i ][ PosY ], Industries[ i ][ PosZ ]);
        if(tmpDis <= winDistance && tmpDis <= distance)
        {
            winDistance = tmpDis;
            winIndex = i;
        }
    }
    return winIndex;
}

// Useless. Legacy code.
stock GetCommoditySellPrice(commodity_index)
    return Commodities[ commodity_index ][ Price ];

stock GetCargoProduction(cargoid)
{
    foreach(TruckerCargoIterator, i)
        if(TruckerCargo[ i ][ Id ] == cargoid)
            return TruckerCargo[ i ][ Production ];
    return 0;
}

stock GetCargoConsumption(cargoid)
{
    foreach(TruckerCargoIterator, i)
        if(TruckerCargo[ i ][ Id ] == cargoid)
            return TruckerCargo[ i ][ Consumption ];
    return 0;
}

stock GetCargoLimit(cargoid)
{
    foreach(TruckerCargoIterator, i)
        if(TruckerCargo[ i ][ Id ] == cargoid)
            return TruckerCargo[ i ][ Limit ];
    return 0;
}

stock GetCargoType(cargoid)
{
    foreach(TruckerCargoIterator, i)
        if(TruckerCargo[ i ][ Id ] == cargoid)
            return TruckerCargo[ i ][ Type ];
    return 0;
}

stock GetCargoSlot(cargoid)
{
    foreach(TruckerCargoIterator, i)
        if(TruckerCargo[ i ][ Id ] == cargoid)
            return TruckerCargo[ i ][ Slot ];
    return 0;
}
stock IsCargoInVehicle(vehicleid, cargoid)
{
    for(new i = 0; i < MAX_TRUCKER_CARGO; i++)
        if(VehicleCargo[ vehicleid ][ i ][ Amount ] && VehicleCargo[ vehicleid ][ i ][ CargoId ] == cargoid)
            return true;
    return false;
}
stock IsCargoCarryable(cargoid)
{
    switch(GetCargoType(cargoid))
    {
        case 2: return true;
        default: return false;
    }
    return false;
}

stock IsCargoCompatibleWithVehicle(cargoid, model)
{
    switch(GetCargoType(cargoid))
    {
        case 1:
            if(model == 578)
                return true;
        case 2:
        {
            switch(model)
            {
                case 600, 605, 543, 422, 478, 554, 413, 459, 482, 440, 498, 499, 414, 456, 435, 591, 530 : return true;
                default: return false;
            }
        }
        case 3:
            if(model == 584)
                return true;
        case 4:
            if(model == 455 || model == 450)
                return true;
        case 5:
        {
            switch(model)
            {
                case 499, 554, 414, 456, 591, 435, 578: return true;
                default: return false;
            }
        }
    }
    return false;
}

stock WepNames[][24] = { // Ginklø pavadinimai
        {"Niekas"},
        {"Kastetas"},
        {"Golfo lazda"},
        {"Bananas"},
        {"Peilis"},
        {"Beisbolo lazda"},
        {"Kastuvas"},
        {"Bilijardo lazda"},
        {"Katana"},
        {"Benzininis pjøklas"},
        {"Purpurinis vibratorius"},
        {"Baltas vibratorius"},
        {"Baltas vibratorius"},
        {"Sidabrinis vibratorius"},
        {"Gëliø puokðtë"},
        {"Lazda"},
        {"Granatos"},
        {"Dujinë granata"},
        {"Molotovo kokteilis"},
        {"Vehicle Missile"},
        {"Hydra Flare"},
        {"Jetpack"},
        {"9mm pistoletas"},
        {"9mm su duslintuvu"},
        {"Desert Eagle"},
        {"Shotgun"},
        {"Sawnoff Shotgun"},
        {"Combat Shotgun"},
        {"Micro SMG"},
        {"MP5"},
        {"AK-47"},
        {"G36-C SD"},
        {"Tec-9"},
        {"Country Rifle"},
        {"Sniper Rifle"},
        {"Rocket Launcher"},
        {"HS Rocket Launcher"},
        {"Ugniasvaidis"},
        {"Minigun"},
        {"Nuotolinë bomba"},
        {"Detonatorius"},
        {"Balionëlis"},
        {"Gesintuvas"},
        {"Fotoaparatas"},
        {"Naktiniai akiniai"},
        {"Infrar. akiniai"},
        {"Paraðiutas"},
        {"Netikras pistoletas"}
    };






FUNKCIJA:Explosion( Float:x, Float:y, Float:z, object, id, bool:destroy, virw, inter )
{
    CreateExplosion( x+1, y-1, z, 13, 30 );
    CreateExplosion( x-1, y+1, z, 13, 30 );
    CreateExplosion( x-1, y+1, z, 13, 30 );
    CreateExplosion( x+1, y-1, z, 13, 30 );
    if ( destroy )
    {
        for ( new i = 0; i < 80; i++ )
        {
            DestroyDynamicObject( Fire[ object ][ ugnis ][ i ] );
        }
        DestroyDynamicObject( Fire[ object ][ smoke ] );
        Fire[ object ][ active ] = false;
    }
    else
    {
        if( id == 0 )
        {
            for ( new i = 0; i < 80; i++ )
            {
                if( i < 20 )
                    Fire[ object ][ ugnis ] [ i ] = CreateDynamicObject(3461, x-random(5), y+random(5), (z+0.7)-3, 0, 0, 0, virw, inter, -1, 500.0 );
                else if( i >= 20 && i < 40 )
                    Fire[ object ][ ugnis ] [ i ] = CreateDynamicObject(3461, x+random(5), y-random(5), (z+0.7)-3, 0, 0, 0, virw, inter, -1, 500.0 );
                else if( i >= 40 && i < 60 )
                    Fire[ object ][ ugnis ] [ i ] = CreateDynamicObject(3461, x-random(5), y-random(5), (z+0.7)-3, 0, 0, 0, virw, inter, -1, 500.0 );
                else
                    Fire[ object ][ ugnis ] [ i ] = CreateDynamicObject(3461, x+random(5), y+random(5), (z+0.7)-3, 0, 0, 0, virw, inter, -1, 500.0 );
            }
        }
    }
    return 1;
}


stock SaveAccount(playerid)
{
    new string[2048],
        string2[256],
        string3[256];
    MySQLCheckConnection();
    pInfo[ playerid ][ pMoney ] = PlayerMoney[ playerid ];
    mysql_real_escape_string(pInfo[playerid][pSex], pInfo[playerid][pSex], DbHandle, 15);
    mysql_real_escape_string(pInfo[playerid][pOrigin], pInfo[playerid][pOrigin], DbHandle, MAX_PLAYER_NAME);
    mysql_real_escape_string(pInfo[playerid][pCard], string2);
    mysql_real_escape_string(pInfo[playerid][pForumName], string3);

    format(string, sizeof(string), "UPDATE players SET Money = '%d', Level = '%d', AdminLevel = '%d', Respect = '%d', Bank = '%d'", pInfo[ playerid ][ pMoney ], pInfo[ playerid ][ pLevel ], pInfo[ playerid ][ pAdmin ], pInfo[ playerid ][ pExp ], pInfo[ playerid ][ pBank ] );
    format(string, sizeof(string), "%s, Skinas = '%d', Warnings = '%d', JailTime = '%d', Jailed = '%d', pDubKey = '%d'", string, pInfo[ playerid ][ pSkin ], pInfo[ playerid ][ pWarn ], pInfo[ playerid ][ pJailTime ], pInfo[ playerid ][ pJail ], pInfo[ playerid ][ pDubKey ] );
    format(string, sizeof(string), "%s, DriverWarn = '%d', Tester = '%d', pFines = '%d', pPFines = '%d'", string, pInfo[ playerid ][ pDriverWarn ], pInfo[ playerid ][ pTester ], pInfo[ playerid ][ pFines ], pInfo[ playerid ][ pPaydFines ] );
    format(string, sizeof(string), "%s, House = '%d', PhoneNr = '%d', Leader = '%d', Member = '%d', Rank = '%d'", string, pInfo[ playerid ][ pHouseKey ], pInfo[ playerid ][ pPhone ], pInfo[ playerid ][ pLead ], pInfo[ playerid ][ pMember ], pInfo[ playerid ][ pRank ] );
    format(string, sizeof(string), "%s, RChanel = '%d', VirWorld = '%d', Intas = '%d', Crashed = '%d', Pos_X = '%f'", string, pInfo[ playerid ][ pRChannel ], pInfo[ playerid ][ pVirWorld ], pInfo[ playerid ][ pInt ], pInfo[ playerid ][ pCrash ], pInfo[ playerid ][ pCrashPos ][ 0 ] );
    format(string, sizeof(string), "%s, Pos_Y = '%f', Pos_Z = '%f', Age = '%d', Liga = '%d', WantedLevel = '%d'", string, pInfo[ playerid ][ pCrashPos ][ 1 ], pInfo[ playerid ][ pCrashPos ][ 2 ], pInfo[ playerid ][ pAge ], pInfo[ playerid ][ pLiga ], pInfo[ playerid ][ pWantedLevel ] );
    format(string, sizeof(string), "%s, Job = '%d', JobContr = '%d', MotoLic = '%d', CarLic = '%d', BoatLic = '%d'", string, pInfo[ playerid ][ pJob ], pInfo[ playerid ][ pJobContr ], pInfo[ playerid ][ pLicMoto ], pInfo[ playerid ][ pLicCar ], pInfo[ playerid ][ pLicBoat ] );
    format(string, sizeof(string), "%s, FlyLic = '%d', GunLic = '%d', BoxStyle = '%d', Deaths = '%d', ConnectedTime = '%d'", string, pInfo[ playerid ][ pLicHeli ], pInfo[ playerid ][ pLicWeapon ], pInfo[ playerid ][ pBoxStyle ], pInfo[ playerid ][ pDeaths ], pInfo[ playerid ][ pOnTime ] );
    format(string, sizeof(string), "%s, Origin = '%s', PayDayHad = '%d', PayDay = '%d', Sex = '%s'", string, pInfo[ playerid ][ pOrigin ], pInfo[ playerid ][ pPayDayHad ], pInfo[ playerid ][ pPayCheck ], pInfo[ playerid ][ pSex ] );
    format(string, sizeof(string), "%s, pJobCar = '%d', Inventory = ' ', Weapons = '  ', JobSkill = '%d', JobLevel = '%d'", string, pInfo[ playerid ][ pSavings ], pInfo[ playerid ][ pJobSkill ], pInfo[ playerid ][ pJobLevel ] );
    format(string, sizeof(string), "%s, LeftTime = '%d', Donator = '%d', WalkStyle = '%d', TalkStyle = '%d', HeroineAddict = '%d'", string, pInfo[ playerid ][ pLeftTime ], pInfo[ playerid ][ pDonator ], pInfo[ playerid ][ pWalkStyle ], pInfo[ playerid ][ pTalkStyle ], pInfo[ playerid ][ pHeroineAddict ] );
    format(string, sizeof(string), "%s, AmfaAddict = '%d', MetamfaAddict = '%d', CocaineAddict = '%d'", string, pInfo[ playerid ][ pAmfaAddict ], pInfo[ playerid ][ pMetaAmfaineAddict ], pInfo[ playerid ][ pCocaineAddict ] );
    format(string, sizeof(string), "%s, playerLastLogOn = CURRENT_TIMESTAMP, playerSpawn = '%d', bSpawn = '%d', Card = '%s', ForumName = '%s'", string, _:pInfo[ playerid ][ pSpawn ], pInfo[ playerid ][ pBSpawn ], string2, string3 );
    format(string, sizeof(string), "%s, ExtazyAddict = '%d', PCPAddict = '%d', CrackAddict = '%d', OpiumAddict = '%d', Points = '%d'", string, pInfo[ playerid ][ pExtazyAddict ], pInfo[ playerid ][ pPCPAddict ], pInfo[ playerid ][ pCrackAddict ], pInfo[ playerid ][ pOpiumAddict ], pInfo[ playerid ][ pPoints ]);
    format(string, sizeof(string), "%s, HealthLevel = %d, StrengthLevel = %d, JobHours = %d, Hunger = %d, TotalPaycheck = %d ",string, pInfo[ playerid ][ pHealthLevel ],pInfo[ playerid ][ pStrengthLevel ], pInfo[ playerid ][ pJobHours ], pInfo[ playerid ][ pHunger ], pInfo[ playerid ][ pTotalPaycheck ]);
    format(string, sizeof(string), "%s WHERE Name = '%s'", string, GetName( playerid ));
    mysql_query(DbHandle, string, false);
    printf("Vartotojas buvo sëkmingai iðsaugotas duomenø bazëje (uþklausa truko: %d)",strlen(string));
    return 1;
}
main()
{
    ServerStartTimestamp = gettime();
    MySQLCheckConnection();
    print( "\n----------------------- Lithuanian ROLE-PLAY ---------------------" );
    print( "| GameMode creator: WARRIOR, Gedas" );
    print( "| GameMode translated by: Nova" );
    print( "-----------------------------------------------------------------\n" );
}


/*
stock PackPoints( playerid )
{
    new string[ 56 ];
    format( string, 56, "%s%d/%d/", string,
        pInfo[ playerid ][ pPoints  ][ 0 ],
        pInfo[ playerid ][ pPoints  ][ 1 ]);
    return string;
}
*/

stock UpdateJacker( spot, vehs1 )
{
    // Taigi vehs1 reikðmës:
    // 0 - Lengvoji
    // 1 - Dviratis

    // Bet mums nebeidomu kokia ta transporto  priemone
    #pragma unused vehs1

    JackerBoughtVehicles[ spot ][ AmountNeeded ] = 3;
    SetSellSpot:
    new randomShop = Iter_Random(VehicleShopIterator), vehicles[ MAX_VEHICLE_SHOP_VEHICLES ], count;

    // Nëra nei vieno turgaus :/
    if(randomShop == -1)
        return 1;
    for(new i = 0; i < MAX_VEHICLE_SHOP_VEHICLES; i++)
    {
        if(VehicleShops[ randomShop ][ VehicleModels ][ i ])
        {
            vehicles[ count++ ] = i;
        }

    }
    JackerBoughtVehicles[ spot ][ VehicleModel ] = VehicleShops[ randomShop ][ VehicleModels ][ vehicles[ random(count) ] ];
    // Jei tokia jau buvo...
    for(new i = 0; i < sizeof JackerBoughtVehicles; i++)
        if(i != spot && JackerBoughtVehicles[ i ][ VehicleModel ] == JackerBoughtVehicles[ spot ][ VehicleModel ])
            goto SetSellSpot;
    // Na valciu ir priekabu nevogsim...
    if(IsVehicleTrailer(JackerBoughtVehicles[ spot ][ VehicleModel ]) || IsABoat(JackerBoughtVehicles[ spot ][ VehicleModel ]))
        goto SetSellSpot;

    printf("Sellspot: %s", GetVehicleName( JackerBoughtVehicles[ spot ][ VehicleModel ] ));

    return 1;
}



stock LoadServer( )
{
    LoadFactions();
    LoadMisc();
//  LoadTax();
    LoadFuelInfo();
    LoadSEnter();
    //LoadSellCars();
    LoadGarbage();
    LoadIndustries();
    LoadTruckerCargo();
    LoadCommodities();
    // Turi bûti PO to kai uþkrautos IR prekës IR industrijos.
    foreach(IndustryIterator, i)
        UpdateIndustryInfo(i);
    LoadVehicleShops();
    return 1;
}
public OnPlayerEditAttachedObject( playerid, response, index, modelid, boneid,
                                   Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ,
                                   Float:fRotX, Float:fRotY, Float:fRotZ,
                                   Float:fScaleX, Float:fScaleY, Float:fScaleZ )
{
    SendClientMessage(playerid, 0xFFFFFFFF, "Objekto redagavimas sëkmingai baigtas.");

    new
        string[ 128 ];

    format(string, 128, "%dPosX", modelid );
    SetPVarFloat ( playerid, string, fOffsetX );
    format(string, 128, "%dPosY", modelid );
    SetPVarFloat ( playerid, string, fOffsetY );
    format(string, 128, "%dPosZ", modelid );
    SetPVarFloat ( playerid, string, fOffsetZ );

    format(string, 128, "%dRotX", modelid );
    SetPVarFloat ( playerid, string, fRotX );
    format(string, 128, "%dRotY", modelid );
    SetPVarFloat ( playerid, string, fRotY );
    format(string, 128, "%dRotZ", modelid );
    SetPVarFloat ( playerid, string, fRotZ );

    format(string, 128, "%dScaleX", modelid );
    SetPVarFloat ( playerid, string, fScaleX );
    format(string, 128, "%dScaleY", modelid );
    SetPVarFloat ( playerid, string, fScaleY );
    format(string, 128, "%dScaleZ", modelid );
    SetPVarFloat ( playerid, string, fScaleZ );

    SetPlayerAttachedObject(playerid,index,modelid,boneid,fOffsetX,fOffsetY,fOffsetZ,fRotX,fRotY,fRotZ,fScaleX,fScaleY,fScaleZ);
    if(response == EDIT_RESPONSE_FINAL)
        if(IsItemWearable(GetItemIdFromModel(modelid)))
            AddPlayerAttachedItem(playerid,GetItemIdFromModel(modelid),boneid,fOffsetX,fOffsetY,fOffsetZ,fRotX,fRotY,fRotZ,fScaleX,fScaleY,fScaleZ);
    return 1;
}
public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
    if( pInfo[ playerid ][ pJob ] == JOB_DRUGS && IsPlayerInRangeOfPoint( playerid, 2, 748.0026,257.0667,27.0859 ) )
    {
        ShowPlayerDialog( playerid, 114, DIALOG_STYLE_LIST,"Narkotikø parduotuvë",
                "METAMFETAMINAS\n\
                AMFETAMINAS\n\
                KOKAINAS\n\
                HEROINAS", "TOLIAU", "ATáAUKTI" );
    }
    if( pInfo[ playerid ][ pJob ] == JOB_DRUGS && IsPlayerInRangeOfPoint( playerid, 2, -279.4338,2722.4390,62.4920 ) )
    {
        ShowPlayerDialog( playerid, 160, DIALOG_STYLE_LIST,"Narkotikø parduotuvë",
                "EXTAZY\n\
                PCP\n\
                Krekas\n\
                Opijus", "TOLIAU", "ATáAUKTI" );
    }
    return 0;
}


public OnPlayerPickUpDynamicPickup( playerid, pickupid )
{
    if ( pickupid == Pickups[ 1 ] )
        SetPlayerHealth( playerid, 100);

    foreach(sEnters, i)
    {
        if(sEnter[ i ][ Pickup ] != pickupid) continue;
        new string[ 126 ];
        format( string, 126, "~g~~h~~h~%s~n~~w~Noredami ieiti - Rasykite ~y~/enter", sEnter[ i ][ Name ] ); // Áëjimo tekstas
        GameTextForPlayer(playerid, string, 4000, 7);
    }
    return 1;
}
new NPCTrain[2];
public OnGameModeInit()
{
    AntiDeAMX();
    SetGameModeText("LTRP " #VERSION);
    SendRconCommand("mapname ROLE-PLAY" );
    // Timeriø nustatymai
    SetTimer("Sekunde", 1000, 1);
    SetTimer("MinTime", 60000, 1);
    SetTimer("Spidometras", 250, 1 );
    SetTimer("Drugs", 15*60000, 1);
	SetTimer("IndustryUpdate", 60*60*1000, true);
	SetTimer("CargoShipDeparture",CARGOSHIP_DOCKED_INTERVAL, false);
	ShipInfo[ LastDepartureTimestamp ] = gettime();
    mysql_tquery(DbHandle, "UPDATE vehicles SET cVehID = 0 WHERE cVehID > 0");
//=============================[ Pagr. Serverio nustatymai ]================================
    ShowPlayerMarkers(0);
    AllowInteriorWeapons(1);
    DisableInteriorEnterExits();
    EnableStuntBonusForAll(0);
    SetNameTagDrawDistance(13.0);
    ShowNameTags(1);
    ManualVehicleEngineAndLights();
    NullRoadBlocks( );
    skinlist = LoadModelSelectionMenu("skins.txt");
//=============================[ Liftas ]================================
    ResetElevatorQueue();
    Elevator_Initialize();
//=============================[ Prijungiame serverá naudojamus NPC bot'us ]================================
    ConnectNPC("Banko_Darbuotoja","static_bank");
    //ConnectNPC("andromada_pilot","andromada_ls_to_lv");
    ConnectNPC("passenger_train_driver","cargo_train_loop_slow");
    //ConnectNPC("cargo_train_driver","cargo_train_loop_slow");
    NPCTrain[ 0 ] = AddStaticVehicle(538,  -1943.0914, 162.7502, 26.7423, 180.0, random(255), random(255));
    // Pirðtai kraujuoja raðant ðitas 6 eilutes...
    sVehicles[ NPCTrain[ 0 ] ][ Id          ] = 0;
    sVehicles[ NPCTrain[ 0 ] ][ Model       ] = 538;
    sVehicles[ NPCTrain[ 0 ] ][ SpawnX       ] = -1943.0914;
    sVehicles[ NPCTrain[ 0 ] ][ SpawnY       ] = 162.7502;
    sVehicles[ NPCTrain[ 0 ] ][ SpawnZ      ] = 26.7423;
    sVehicles[ NPCTrain[ 0 ] ][ SpawnA      ] = 180.0;

    NPCTrain[ 1 ] = AddStaticVehicle(537, -1948.7266, 138.5202, 26.3345, 178.6508, random(255), random(255));
    sVehicles[ NPCTrain[ 1 ] ][ Id          ] = 0;
    sVehicles[ NPCTrain[ 1 ] ][ Model       ] = 537;
    sVehicles[ NPCTrain[ 1 ] ][ SpawnX       ] = -1948.7266;
    sVehicles[ NPCTrain[ 1 ] ][ SpawnY       ] = 138.5202;
    sVehicles[ NPCTrain[ 1 ] ][ SpawnZ      ] = 26.3345;
    sVehicles[ NPCTrain[ 1 ] ][ SpawnA      ] = 178.6508;
    
    for(new i = 0; i < sizeof(NPCTrain); i++)
    {
        new engine, lights, alarm, doors, bonnet, boot, objective;
        GetVehicleParamsEx(NPCTrain[ i ], engine, lights, alarm, doors, bonnet, boot, objective);
        SetVehicleParamsEx(NPCTrain[ i ], engine, VEHICLE_PARAMS_ON, alarm, VEHICLE_PARAMS_ON, bonnet, boot, objective);
    }
/*
    NPCPlane = AddStaticVehicle(592, 1960.2163, -2434.0457, 12.5013, 180.0000, -1, -1);
    sVehicles[ NPCPlane ][ Id          ] = 0;
    sVehicles[ NPCPlane ][ Model       ] = 592;
    sVehicles[ NPCPlane ][ SpawnX       ] = 1960.2163;
    sVehicles[ NPCPlane ][ SpawnY       ] = -2434.0457;
    sVehicles[ NPCPlane ][ SpawnZ      ] = 12.5013;
    sVehicles[ NPCPlane ][ SpawnA      ] = 180.0000;
    new engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(NPCPlane, engine, lights, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(NPCPlane, VEHICLE_PARAMS_ON, VEHICLE_PARAMS_ON, alarm, VEHICLE_PARAMS_ON, bonnet, boot, objective);
*/
    LoadStaticVehicles();
    /*
    for(new i = 1; i < MAX_VEHICLES; i++)
        if(sVehicles[ i ][ Model ] == 538)
        {
            NPCTrain = i;
            printf("Train found at index:%d", i);
            break;
        }
        */


    //=============================[ Uþraunam serverio nekilnojamá ji turtá  ir kt. kas susijà su tuo]================================
    LoadServer( );
    //=============================[ Uþkraunam transporto priemoniø vagimá  ]================================
    UpdateJacker( 0, 0 );
    UpdateJacker( 1, 0 );
    UpdateJacker( 2, 2 );
    //=============================[ Serverio darbø 3D label ]================================
    for ( new i = 0; i < MAX_JOBS; i++ )
    {
        new mini[ 130 ];
        format( mini, 126, "{33AA11}%s\n{FFFFFF}Darbo kontraktas: {FFBB00}%d {FFFFFF}atlyginimai\n{FFBB00}/takejob", pJobs[ i ][ Name ], pJobs[ i ][ Contr ] );
        CreateDynamic3DTextLabel( mini, COLOR_WHITE, pJobs[ i ][ Job_x ], pJobs[ i ][ Job_y ], pJobs[ i ][ Job_z ], 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 15.0);
    }
    
    CreateDynamicCP(748.0026, 257.0667, 27.0859, 2.0, -1, -1, -1, 6.0 );
    CreateDynamicCP(-279.4338, 2722.4390, 62.4920, 2.0, -1, -1, -1, 6.0 );
	CreateDynamicCP(1803.4606,-1520.4922,5700.4302, 2.0, -1, -1, -1, 3.0 );
    
    //=============================[ Pickup'ai ]================================
    Pickups[ 1 ] = CreateDynamicPickup(1240, 2, 1810.2020,-1583.3362,5703.9175); // Gyvybiø atsistatymø pickup kalëjime

    //------------------------[ 3DTextLabeliai. Uþraðai, áëjimai. ]------------------------------------------
	CreateDynamic3DTextLabel("Los Santos License Center\nTeorijos ir praktikos egzaminai\n{FFFFFF}/license",COLOR_NEWS, 1491.0953,1306.8651,1093.2891 ,7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 15.0);
    //CreateDynamic3DTextLabel("Naujø automobiliø sàlonas\nParduodamø automobiliø sàraðas\nKomanda: {FFFFFF}/v buy",COLOR_NEWS, 2131.8079,-1151.2266,24.0707 ,7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 15.0);
    //CreateDynamic3DTextLabel("Sunkiøjø tr. priemoniø salonas\nParduodamø automobiliø sàraðas\nKomanda: {FFFFFF}/v buy",COLOR_NEWS, 2748.5361,-2451.3025,13.6599 ,7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 15.0);
    //CreateDynamic3DTextLabel("Motociklø ir dviraèiø parduotuvë\nParduodamø prekiø sàraðas\nKomanda: {FFFFFF}/v buy",COLOR_NEWS, 1738.9440,-1269.4951,13.5430 ,7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 15.0);
    //CreateDynamic3DTextLabel("Los Santos uosto salonas\nParduodamø laivø\nKomanda: {FFFFFF}/v buy",COLOR_LIGHTRED2,-444.3486,1154.1063,1.7273,7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 15.0);
    CreateDynamic3DTextLabel("Los Santos savivaldybë\nKomanda:{FFFFFF}/duty",COLOR_NEWS, 1500.8645,-1814.7734,2410.8157 ,7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 15.0);
    CreateDynamic3DTextLabel("Los Santos Prison Yard\nTIK DARBUOTOJAMS\nÁvaþiavimui /enter",COLOR_POLICE,1753.5140,-1595.8026,13.5380, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, false, -1, -1, -1, 15.0);
	CreateDynamic3DTextLabel("Los Santos Prison Yard\nTIK DARBUOTOJAMS\nIðvaþiavimui naudokite /exit",COLOR_POLICE,1753.4137,-1585.5315,13.0600, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, false, -1, -1, -1, 15.0);
    CreateDynamic3DTextLabel("Los Santos Fire Departament\nTr. priemoniø garaþas\nÁvaþiavimui /enter",COLOR_LIGHTRED,1284.9084,-1346.3730,13.6000, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, false, -1, -1, -1, 15.0);
	CreateDynamic3DTextLabel("Los Santos Fire Departament\nTr. priemoniø garaþas\nIðvaþiavimui naudokite /exit",COLOR_LIGHTRED,-1763.6812,984.6740,22.0003, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, false, -1, -1, -1, 15.0);	
    //CreateDynamic3DTextLabel("áia galite kovos stiliu\n raðykite {FFBB00}/learnfight",COLOR_WHITE,754.9053,-40.0628,1000.5859,7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, false, -1, -1, -1, 15.0);
    //CreateDynamic3DTextLabel("Privatus, uþdaras sandëlys\n Tik privatiems klientams\nKomanda:{FFFFFF}/buyseeds",COLOR_NEWS,-2172.5056,679.8398,55.1615,7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 15.0);
    //CreateDynamic3DTextLabel("Privatus, uþdaras sandëlys\n Jokiø paðaliniø\nKomanda: {FFFFFF}/buymats",COLOR_NEWS,-2074.3081,-2246.5073,31.6890,7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 15.0);
    CreateDynamic3DTextLabel("Los Santos reklamos skyrius\nSkelbkite,raðykite savo skelbimus á eterá\nKomanda: {FFFFFF}/ad",COLOR_NEWS,1128.8257,-1489.5168,22.7690,7.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 15.0);
    CreateDynamic3DTextLabel("Tr. priemonës sutvarkymas\n\nKomanda: {FFBB00}/fix [SPALVA1] [SPALVA2] / KAINA: 500 $",COLOR_WHITE,2075.5986,-1831.0374,13.5545,8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, false, 0, 0, -1, 15.0);

    CreateAllTrash( );
    //Produkcija( );
    SetTimer( "CreateAllTrash", 5*60000, 1 );

    
    //{Objeckto ID,Stovi:X,Stovi:Y,Stovi:Z,Rotacija:X,Rotacija:Y,Rotacija:Z,Judes:X,Judes:Y,Judes:Z,Rotacija:X,Rotacija:Y,Rotacija:Z,Frakcijos ID}
    for(new obj = 0; obj < sizeof CloseGate; obj ++)
        Gates2[obj] = CreateObject(floatround(CloseGate[obj][0],floatround_round),CloseGate[obj][1],CloseGate[obj][2],CloseGate[obj][3],CloseGate[obj][4],CloseGate[obj][5],CloseGate[obj][6]);

    //==============================[ PDr ir k.t Vartai ] ============================
    vartai[ 0 ][ 0 ] = CreateObject(968,595.11328, 353.75290, 17.93230,   0.00000, 0.00000, 215.06400);
    vartai[ 0 ][ 1 ] = 0;
    vartai[ 1 ][ 0 ] = CreateObject(968,606.71307, 361.89679, 17.93230,   0.00000, 0.00000, 35.09920);
    vartai[ 1 ][ 1 ] = 0;
    vartai[ 2 ][ 0 ] = CreateObject(1495, 225.07645, 115.93130, 1002.21564, 0, 0, 0);
    vartai[ 2 ][ 1 ] = 0;
    vartai[ 3 ][ 0 ] = CreateObject(1495, 239.64650, 118.66280, 1002.21570, 0, 0, -90);
    vartai[ 3 ][ 1 ] = 0;
    vartai[ 4 ][ 0 ] = CreateObject(1495, 217.56250, 120.77590, 1002.20752, 0, 0, -90);
    vartai[ 4 ][ 1 ] = 0;
    vartai[ 5 ][ 0 ] = CreateObject(1495, 266.45758, 115.84705, 1003.61621, 0, 0, 180);
    vartai[ 5 ][ 1 ] = 0;
    //=============================[ Sutvarkome narkotikus transporto priemonëje ]================================
    foreach(Vehicles,car)
    {
        if ( sVehicles[ car ][ Faction ] == 2 )
        {
            if( sVehicles[ car ][ Model ] == 598 || sVehicles[ car ][ Model ] == 596 || sVehicles[ car ][ Model ] == 599 || sVehicles[ car ][ Model ] == 490 || sVehicles[ car ][ Model ] == 426 || sVehicles[ car ][ Model ] == 427 )
            {
                cInfo[ car ][ cTrunkWeapon ][ 0 ] = 29;
                cInfo[ car ][ cTrunkAmmo   ][ 0 ] = 300;
                cInfo[ car ][ cTrunkWeapon ][ 1 ] = 31;
                cInfo[ car ][ cTrunkAmmo   ][ 1 ] = 300;
                cInfo[ car ][ cTrunkWeapon ][ 2 ] = 25;
                cInfo[ car ][ cTrunkAmmo   ][ 2 ] = 50;
            }
        }
        else if ( sVehicles[ car ][ Faction ] == 3 )
        {
            if( sVehicles[ car ][ Model ] == 407 || sVehicles[ car ][ Model ] == 544 )
            {
                cInfo[ car ][ cTrunkWeapon ][ 0 ] = 9;
                cInfo[ car ][ cTrunkAmmo   ][ 0 ] = 1;
                cInfo[ car ][ cTrunkWeapon ][ 1 ] = 42;
                cInfo[ car ][ cTrunkAmmo   ][ 1 ] = 1000;
            }
        }
        cInfo[ car ][ cFuel ] = GetVehicleFuelTank( sVehicles[ car ][ Model ] );
    }


    //=============================[ Sutvarkome transporto priemoniø degalus ir savininkus ]================================
    for( new car = 0; car < MAX_VEHICLES; car ++ )
    {
        cInfo[ car ][ cOwner] = 0;
        strmid( cInfo[ car ][ cNumbers ], "J", 0, 1, 2 );
    }
    printf( "Serveryje sukurtas objektø skaièius: %d", CountDynamicObjects( ) );
    printf( "Serveryje sukurtø 3D Text skaièius: %d", CountDynamic3DTextLabels( ) );
    printf( "Serveryje sukurtø dinaminiø arenø skaièius: %d", CountDynamicAreas( ) );
    printf( "Visi ðlaubaumai nuleisti ir atrakinti.");


    BlindfoldTextdraw = TextDrawCreate(0.0, 0.0, "box");
    TextDrawTextSize(BlindfoldTextdraw, 640.0, 0.0);
    TextDrawLetterSize(BlindfoldTextdraw, 0.0, 100.0);
    TextDrawBoxColor(BlindfoldTextdraw, 0x000000FF);
    TextDrawUseBox(BlindfoldTextdraw, 1);

    //=============================[ Serverio laiko ir atlyginimø nustatymø sutvarkymas ]================================
    new laikas[3];
    gettime(laikas[0],laikas[1], laikas[2]);
    SetWorldTime(laikas[0]+1);
    OldHour = laikas[0];
    printf("Serveryje senoji valanda: %d ", OldHour );
    return 1;
}



AntiDeAMX() {
    new a[][] = {
        "Unarmed (Fist)",
        "Brass K"
    };
    #pragma unused a
}

public OnPlayerAirbreak(playerid)
{
    if( pInfo[ playerid ][ pAdmin ] >= 5 )
        return true;

    if ( IsPlayerInAnyVehicle( playerid ) )
        KickPlayer( "AC", playerid, "AirBreak tr. priemonëje." );
    else
        KickPlayer( "AC", playerid, "AirBreak vaikðtant/bëgiojant" );
    return 1;
}

public OnGameModeExit()
{
    #if defined DEBUG
        print("[debug] OnGameModeExit()");
    #endif
    SendClientMessageToAll(0xFF0000FF,"Serveris perkraunamas.");
    mysql_close( );
    return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
    #if defined DEBUG
        printf("OnPlayerRequestClass(%s, %d)", GetName(playerid), classid);
    #endif
    switch( random( 3 ) )
    {
        case 0:
        {
            InterpolateCameraPos(playerid, 1616.193847, -1611.084350, 103.193656, 1034.297485, -1283.787353, 116.283706, 18000);
            InterpolateCameraLookAt(playerid, 1612.181518, -1613.264404, 101.156806, 1036.176879, -1288.001098, 114.356887, 5000);
        }
        case 1:
        {
            InterpolateCameraPos(playerid, 2646.913574, -1597.005493, 43.657371, 1803.948364, -1426.308959, 48.698162, 20000);
            InterpolateCameraLookAt(playerid, 2649.125732, -1601.473632, 43.280689, 1808.733764, -1425.373535, 47.591224, 4000);
        }
        case 2:
        {
            InterpolateCameraPos(playerid, 126.606079, -1787.460937, 95.428718, 626.815612, -973.070617, 124.867210, 20000);
            InterpolateCameraLookAt(playerid, 128.530899, -1791.819824, 93.913764, 624.234130, -977.284240, 124.104843, 4000);
        }
    }
    
    new pName[MAX_PLAYER_NAME+1];
    GetPlayerName(playerid,pName,MAX_PLAYER_NAME+1);
    if(!strcmp(pName,"npc1",true))
    {
        SetPlayerSkin( playerid, 69 );
        return 1;
    }
    if(!strcmp(pName,"npc2",true))
    {
        SetPlayerSkin( playerid, 12 );
        return 1;
    }
    
    if( PlayerOn[ playerid ] )
        SpawnPlayerEx( playerid );
    return false;
}

stock GetPlayerSqlId(playerid)
    return pInfo[ playerid ][ pMySQLID ];

stock GetPlayerAdminLevel(playerid)
    return pInfo[ playerid ][ pAdmin ];

stock GetPlayerHouseKey(playerid)
    return pInfo[ playerid ][ pHouseKey ];

stock Float:GetPlayerMaxHealth(playerid)
    return 100.0 + pInfo[ playerid ][ pHealthLevel ] * 3; 

stock GetPlayerSavings(playerid)
    return pInfo[ playerid ][ pSavings ];

stock GetPlayerTotalPaycheck(playerid)
    return pInfo[ playerid ][ pTotalPaycheck ];

stock SetPlayerTotalPaycheck(playerid, value)
    return pInfo[ playerid ][ pTotalPaycheck ] = value;

stock GetPlayerBankMoney(playerid)
    return pInfo[ playerid ][ pBank ];

stock SetPlayerBankMoney(playerid, value)
    return pInfo[ playerid ][ pBank ] = value;

stock GetPlayerIP(playerid)
{
    new
        ip[16];
    GetPlayerIp(playerid, ip, sizeof (ip));
    new
        ipv = strval(ip) << 24,
        pos = 0;
    while (pos < 15 && ip[pos++] != '.') {}
    ipv += strval(ip[pos]) << 16;
    while (pos < 15 && ip[pos++] != '.') {}
    ipv += strval(ip[pos]) << 8;
    while (pos < 15 && ip[pos++] != '.') {}
    ipv += strval(ip[pos]);
    return ipv;
}
public Audio_OnClientConnect( playerid )
{
    RadioName[ playerid ] = 99;
    return 1;
}
public Audio_OnClientDisconnect( playerid )
{
    RadioName[ playerid ] = 99;
    return 1;
}
public Audio_OnRadioStationChange( playerid, station )
{
    return 1;
}
public OnPlayerConnect(playerid)
{
    #if defined DEBUG
        printf("[debug] OnPlayerConnect(%s)", GetName(playerid));
    #endif
    if(IsPlayerNPC(playerid))
    {
        new ip_addr_npc[64+1];
        new ip_addr_server[64+1];
        GetServerVarAsString("bind",ip_addr_server,64);
        GetPlayerIp(playerid,ip_addr_npc,64);

        if(!strlen(ip_addr_server)) {
            ip_addr_server = "127.0.0.1";
        }

        if(strcmp(ip_addr_npc,ip_addr_server,true) != 0) {
            // this bot is remote connecting
            printf("NPC: Got a remote NPC connecting from %s and I'm kicking it.",ip_addr_npc);
            Kick(playerid);
            return 0;
        }
        printf("NPC: Connection from %s is allowed. NPC Name: %s",ip_addr_npc, GetName(playerid));
        SetSpawnInfo(playerid, NO_TEAM, 0, 0.0, 0.0, 0.0, 0.0, 0,0, 0,0, 0,0);
        SpawnPlayer(playerid);
        return 1;
    }


    OnLookupComplete(playerid);
    MySQL_Check_Account( playerid );
    CheckBan(playerid);	
//=============================[ Iconos þemëlapyje rodomos visiems ]================================
    SetPlayerMapIcon( playerid, 70, fInfo[ 2 ][ fSpawn ][ 0 ], fInfo[ 2 ][ fSpawn ][ 1 ] ,fInfo[ 2 ][ fSpawn ][ 2 ], 22, 0, MAPICON_LOCAL ); //Ligoninë
    SetPlayerMapIcon( playerid, 71, 2861.1670,-1405.5068,11.7382, 52, 0, MAPICON_LOCAL ); //Bankas
    SetPlayerMapIcon( playerid, 72, 1671.8431,-1858.0848,13.5313, 27, 0, MAPICON_LOCAL ); //Mechanikai
    SetPlayerMapIcon( playerid, 73, fInfo[ 5 ][ fSpawn ][ 0 ], fInfo[ 5 ][ fSpawn ][ 1 ] ,fInfo[ 5 ][ fSpawn ][ 2 ], 20, 0, MAPICON_LOCAL ); //Goverment
    SetPlayerMapIcon( playerid, 74, 2131.8408,-1151.3246,24.0603, 55, 0, MAPICON_LOCAL ); //CarShop
    SetPlayerMapIcon( playerid, 75, fInfo[ 1 ][ fSpawn ][ 0 ], fInfo[ 1 ][ fSpawn ][ 1 ] ,fInfo[ 1 ][ fSpawn ][ 2 ], 30, 0, MAPICON_LOCAL ); //PD
    SetPlayerMapIcon( playerid, 76, 2281.1189,-2365.0647,13.5469, 51, 0, MAPICON_LOCAL ); //KROVINIAI
    SetPlayerMapIcon( playerid, 78, fInfo[ 4 ][ fSpawn ][ 0 ], fInfo[ 4 ][ fSpawn ][ 1 ] ,fInfo[ 4 ][ fSpawn ][ 2 ], 56, 0, MAPICON_LOCAL ); //San News
   // SetPlayerMapIcon( playerid, 80, -368.4724,1510.7081,76.3117, 55, 0, MAPICON_LOCAL ); //CarShop BIKE
    SetPlayerMapIcon( playerid, 81, 1491.0953,1306.8651,1093.2891, 36, 0, MAPICON_LOCAL ); //DMV
    SetPlayerMapIcon( playerid, 82, 1368.7064,-1279.9117,13.5469, 18, 0, MAPICON_LOCAL ); //GunShop
	
    for(new car = 0; car < 21; car++)
        pInfo[ playerid ][ pCar ][ car ] = 0;

    //new
    //    string[ 128 ];

    /*
    for(new i = 0; i < 47; i++)
    {
        if( GetSlotByID( i ) == 2 || GetSlotByID( i ) == 3 || GetSlotByID( i ) == 4 || GetSlotByID( i ) == 5 || GetSlotByID( i ) == 6 )
        {
            format(string, sizeof(string), "%dbone", i );
            SetPVarInt ( playerid, string, 0 );
        }
    }
    */

    NullPlayerInfo   ( playerid );

    //=============================[ Informacijos tekstas ]================================
    InfoText[ playerid ] = CreatePlayerTextDraw( playerid, 13, 150, "_" );
    PlayerTextDrawUseBox          ( playerid, InfoText[ playerid ], 1 );
    PlayerTextDrawBoxColor        ( playerid, InfoText[ playerid ], 0x00000066 );
    PlayerTextDrawTextSize        ( playerid, InfoText[ playerid ], 159, 91 );
    PlayerTextDrawBackgroundColor ( playerid, InfoText[ playerid ], 0x000000ff );
    PlayerTextDrawFont            ( playerid, InfoText[ playerid ], 1 );
    PlayerTextDrawLetterSize      ( playerid, InfoText[ playerid ], 0.36, 1.5 );
    PlayerTextDrawColor           ( playerid, InfoText[ playerid ], 0xffffffff );
    PlayerTextDrawSetProportional ( playerid, InfoText[ playerid ], 1 );
    PlayerTextDrawSetShadow       ( playerid, InfoText[ playerid ], 0 );

    // Tr. priemonës greitis, degalai ir kita.
    Greitis[ playerid ] = CreatePlayerTextDraw( playerid, 535.0, 350.0, "_" );
    PlayerTextDrawFont            ( playerid, Greitis[ playerid ], 2 );
    PlayerTextDrawLetterSize      ( playerid, Greitis[ playerid ], 0.2, 1.3 );
    PlayerTextDrawSetShadow       ( playerid, Greitis[ playerid ], 0 );
    PlayerTextDrawUseBox          ( playerid, Greitis[ playerid ], 1 );
    PlayerTextDrawBoxColor        ( playerid, Greitis[ playerid ], 0x00000044 );
    PlayerTextDrawSetOutline      ( playerid, Greitis[ playerid ], 0 );

    
    RemoveBuildingForPlayer(playerid, 5156, 2838.0391, -2423.8828, 10.9609, 0.25);
    RemoveBuildingForPlayer(playerid, 5159, 2838.0313, -2371.9531, 7.2969, 0.25);
    RemoveBuildingForPlayer(playerid, 5160, 2829.9531, -2479.5703, 5.2656, 0.25);
    RemoveBuildingForPlayer(playerid, 5161, 2838.0234, -2358.4766, 21.3125, 0.25);
    RemoveBuildingForPlayer(playerid, 5162, 2838.0391, -2423.8828, 10.9609, 0.25);
    RemoveBuildingForPlayer(playerid, 5163, 2838.0391, -2532.7734, 17.0234, 0.25);
    RemoveBuildingForPlayer(playerid, 5164, 2838.1406, -2447.8438, 15.7266, 0.25);
    RemoveBuildingForPlayer(playerid, 5165, 2838.0313, -2520.1875, 18.4141, 0.25);
    RemoveBuildingForPlayer(playerid, 5166, 2829.9531, -2479.5703, 5.2656, 0.25);
    RemoveBuildingForPlayer(playerid, 5167, 2838.0313, -2371.9531, 7.2969, 0.25);
    RemoveBuildingForPlayer(playerid, 5335, 2829.9531, -2479.5703, 5.2656, 0.25);
    RemoveBuildingForPlayer(playerid, 5336, 2829.9531, -2479.5703, 5.2656, 0.25);
    RemoveBuildingForPlayer(playerid, 5352, 2838.1953, -2488.6641, 29.3125, 0.25);
    RemoveBuildingForPlayer(playerid, 5157, 2838.0391, -2532.7734, 17.0234, 0.25);
    RemoveBuildingForPlayer(playerid, 5154, 2838.1406, -2447.8438, 15.7500, 0.25);
    RemoveBuildingForPlayer(playerid, 3724, 2838.1953, -2488.6641, 29.3125, 0.25);
    RemoveBuildingForPlayer(playerid, 5155, 2838.0234, -2358.4766, 21.3125, 0.25);
    RemoveBuildingForPlayer(playerid, 3724, 2838.1953, -2407.1406, 29.3125, 0.25);
    RemoveBuildingForPlayer(playerid, 5158, 2837.7734, -2334.4766, 11.9922, 0.25);
    
    SetPlayerColor(playerid,TEAM_HIT_COLOR);
    ShowPlayerLoginDialog(playerid);
    return 1;
}

stock NullPlayerInfo( playerid )
{
    pInfo[ playerid ][ pLevel    ] = 1;
    pInfo[ playerid ][ pMoney    ] = 0;
    pInfo[ playerid ][ pBank     ] = 0;
    pInfo[ playerid ][ pExp      ] = 0;
    PlayerOn[ playerid ] = false;
    pInfo[ playerid ][ pAdmin    ] = 0;
    PlayerMoney     [ playerid ] = 0;

    pInfo[ playerid ][ pSkin     ] = 216;
    pInfo[ playerid ][ pMask     ] = 1;
    pInfo[ playerid ][ pJailTime ] = 0;
    pInfo[ playerid ][ pWarn     ] = 0;
    pInfo[ playerid ][ pJail     ] = 0;
    pInfo[ playerid ][ pLead     ] = 0;
    pInfo[ playerid ][ pMember   ] = 0;
    pInfo[ playerid ][ pCarGet   ] = 0;
    pInfo[ playerid ][ pHouseKey ] = 0;
    pInfo[ playerid ][ pPhone    ] = 0;

    SetPVarInt( playerid, "P_SMONEY", 0 );// Serverio puses pinigeliai.
    SetPVarInt( playerid, "TOG_FAMILY", 1 );
    SetPVarInt( playerid, "PDTYPE", 0 );
    SetPVarInt( playerid, "BACKUP", INVALID_PLAYER_ID );
    SetPVarInt( playerid, "CallOwner", false );
    SetPVarInt( playerid, "RadioSlot", 1 );
    SetPVarInt( playerid, "Addicted", false );

    Offer[ playerid ][ 0 ] = 255;
    Offer[ playerid ][ 1 ] = 255;
    Offer[ playerid ][ 2 ] = 255;
    Offer[ playerid ][ 3 ] = 255;
    Offer[ playerid ][ 4 ] = 255;
    Offer[ playerid ][ 5 ] = 255;
    Offer[ playerid ][ 8 ] = INVALID_PLAYER_ID;

    TogChat[ playerid ][ 0 ] = true;
    TogChat[ playerid ][ 1 ] = true;
    TogChat[ playerid ][ 2 ] = true;
    TogChat[ playerid ][ 3 ] = true;

    Boxing[ playerid ] = false;
    Voted [ playerid ] = true;

    pInfo[ playerid ][ pVirWorld ] = 0;
    pInfo[ playerid ][ pInt      ] = 0;
    pInfo[ playerid ][ pCuffs    ] = 0;
    pInfo[ playerid ][ pDonator    ] = 0;

    Checkpoint[ playerid ] = CHECKPOINT_NONE;
    pInfo[ playerid ][ pJobDuty ] = 0;

    TalkingLive     [ playerid ] = 255;
    Ruko            [ playerid ] = 0;
    Laikas          [ playerid ] = 0;
    LaikoTipas      [ playerid ] = 0;
    MobilePhone     [ playerid ] = INVALID_PLAYER_ID;
    RingTone        [ playerid ] = 0;
    Mires           [ playerid ] = 0;
    Mute            [ playerid ] = false;
    Camera          [ playerid ] = -1;
    PlayerSpeed     [ playerid ] = 0;
    OldCar  [ playerid ] = 0;
    FirstSpawn[ playerid ] = true;
    for ( new i = 1; i <= 7; i++ )
    {
        new ministr[ 8 ];

        format           ( ministr, 8, "NOTE_%d", i );
        SetPVarString    ( playerid, ministr, "" );
        format           ( ministr, 8, "NOTE2_%d", i );
        SetPVarInt       ( playerid, ministr, 0 );
    }
    gPlayerUsingLoopingAnim [ playerid ] = false;
    gPlayerAnimLibsPreloaded[ playerid ] = false;
    IsOnePlayAnim           [ playerid ] = false;
    BackOut                 [ playerid ] = 0;

    TrashMission    [ playerid ] = TRASH_MISSION_NONE;
    CurrentTrashCp  [ playerid ] = 0;
    IsCarryingTrash[ playerid ] = false;
    DeletePVar(playerid, "TrashMission_Vehicle");
    InfoTextTimer[ playerid ] = -1;

    VehicleLoadTimer[ playerid ] = -1;
	VehicleLoadTime[ playerid ] = 0;

    IsFillingFuel[ playerid ] = false;

    for(new i = 0; i < sizeof(PlayerPhoneBook[]); i++)
        PlayerPhoneBook[ playerid ][ i ][ PhoneNumber ] = 0;

    for(new i = 0; i < sizeof(PlayerWornItems[]); i++)
        PlayerWornItems[ playerid ][ i ] = -1;

    for(new i = 0; i < sizeof(PlayerAttachedWeapons[]); i++)
    {
        RemovePlayerAttachedObject(playerid, PlayerAttachedWeapons[ playerid ][ i ][ ObjectSlot ]);
        PlayerAttachedWeapons[ playerid ][ i ][ WeaponId ] = 0;
    }

    for(new i = 0; i < 10; i++) 
        if(IsPlayerAttachedObjectSlotUsed(playerid, i))
            RemovePlayerAttachedObject(playerid, i);

    PlayerSpectatedPlayer[ playerid ] = INVALID_PLAYER_ID;
    ShowACTestMsg[ playerid ] = true;

    if(IsBlindfolded[ playerid ])
        TextDrawHideForPlayer(playerid, BlindfoldTextdraw);
    IsBlindfolded[ playerid ] = false;
    return 1;
}
public OnPlayerDisconnect(playerid, reason)
{
    #if defined DEBUG
        printf("[debug] OnPlayerDisconnect(%s, %d)", GetName(playerid), reason);
    #endif
    new string[225],name[MAX_PLAYER_NAME+1];
    GetPlayerName(playerid,name,MAX_PLAYER_NAME+1);
    HidePlayerInfoText( playerid );
    HideInfoText( playerid );
    DestroyDynamic3DTextLabel(DeathLabel[playerid]);
    DestroyDynamic3DTextLabel(SpecCommandLabel[ playerid ]);

    if(IsPlayerDataRecorded[ playerid ])
    {
        IsPlayerDataRecorded[ playerid ] = false;
        StopRecordingPlayerData(playerid);
    }


    KillTimer(SpecCommandTimer[ playerid ]);
    SpecCommandTimer[ playerid ] = -1;

    if(GetPVarInt(playerid, "FineOfferMemory"))
        free(Alloc:GetPVarInt(playerid, "FineOfferMemory"));
    
    switch(reason)
    {
        case 0:
        {
            format(string,sizeof(string),"%s paliko serverá (ávyko kliento klaida/nutrøko ryðys).",name);
            GetPlayerPos(playerid,pInfo[playerid][pCrashPos][0],pInfo[playerid][pCrashPos][1],pInfo[playerid][pCrashPos][2]);

            pInfo[playerid][pVirWorld] = GetPlayerVirtualWorld(playerid);

            pInfo[playerid][pInt] = GetPlayerInterior(playerid);
            pInfo[playerid][pCrash] = 1;
        }
        case 1: format(string,64,"%s paliko serverá (Klientas atsijungë).",name);
        case 2: format(string,64,"%s paliko serverá (Klientas iðmestas).",name);
    }
    ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
    if(AdminDuty[playerid] == true)
    {
        Delete3DTextLabel(AdminON[playerid]);
        AdminDuty[playerid] = false;
    }

    if(Mires[playerid] > 0 )
        pInfo[ playerid ][ pDeaths ] ++;

    if( Mires[ playerid ] == 0 && !IsPlayerInAnyVehicle( playerid ) )
    {
        for ( new slot = 0; slot < 12; slot++ )
        {
            new wep,
                ammo;

            GetPlayerWeaponData( playerid, slot, wep, ammo );
            if ( wep > 1 && wep != 19 && wep != 20 && wep < 39 && ammo > 65000)
            {
                new count;
                while ( ammo > 65000 )
                {
                    count ++;
                    GetPlayerWeaponData( playerid, slot, wep, ammo );
                    if ( count > 20 )
                        break;
                }
            }
            if ( wep > 0 && ammo > 0 )
            {
                for ( new i = 0; i < MAX_SAVED_WEAPONS; i++ )
                {
                    if ( pInfo[ playerid ][ pGun ][ i ] == 0 )
                    {
                        pInfo[ playerid ][ pGun  ][ i ] = wep;
                        pInfo[ playerid ][ pAmmo ][ i ] = ammo;
                        break;
                    }
                }
            }
        }
    }

    if ( TalkingLive[ playerid ] != 255 )
    {
        if (IsPlayerConnected(TalkingLive[playerid]))
            TalkingLive[TalkingLive[playerid]] = 255;
        TalkingLive[playerid] = 255;
    }
    if ( aInfo[ playerid ][ aObjekt ] > 0 )
    {
        foreach(Player,id)
        {
            if ( IsPlayerInDynamicArea( id, aInfo[ playerid ][ aArea ] ) )
                Set3DAudioForPlayer( id, "", playerid );
        }
        aInfo[ playerid ][ aKords ][ 0 ] = 0.0;
        aInfo[ playerid ][ aKords ][ 1 ] = 0.0;
        aInfo[ playerid ][ aKords ][ 2 ] = 0.0;
        format(aInfo[ playerid ][ aStation ], 128, "");
        DestroyDynamicObject( aInfo[ playerid ][ aObjekt ] );
        DestroyDynamicArea( aInfo[ playerid ][ aArea ] );

        aInfo[ playerid ][ aObjekt ] = 0;
        Itter_Remove(Audio3D,playerid);
    }
    if(Boxing[playerid] == true)
        BoxEnd(playerid);
        
    if (MobilePhone[playerid] != INVALID_PLAYER_ID)
    {
        if( MobilePhone[playerid] > MAX_PLAYERS )
        {
            SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
            RemovePlayerAttachedObject( playerid, 3 );
            MobilePhone[ playerid ] = INVALID_PLAYER_ID;
            RingTone   [ playerid ] = 0;
            if ( NearPhone( playerid ) )
                TogglePlayerControllable( playerid, true );
        }
        else
        {
            if (MobilePhone[MobilePhone[playerid]] == playerid)
            {
                SendClientMessage(MobilePhone[playerid], GRAD, "Dëmesio, ryðys staiga nutrøko." );
                MobilePhone[MobilePhone[playerid]] = INVALID_PLAYER_ID;
            }
            else 
                RingTone[MobilePhone[playerid]] = 0;
            SetPVarInt( MobilePhone[playerid], "CallOwner", true );
            MobilePhone[playerid] = INVALID_PLAYER_ID;
            RingTone[playerid] = 0;
        }
    }

    if (PlayerOn[ playerid ] == true )
    {
        SaveAccount( playerid );
        PlayerOn[ playerid ] = false;
    }

    if ( pInfo[ playerid ][ pBackup ] == 1 )
    {
        foreach(Player,i)
        {
            if ( GetPVarInt( i, "BACKUP") == playerid )
            {
                DisablePlayerCheckpoint( i );
                Checkpoint[ i ] = CHECKPOINT_NONE;
                SetPVarInt( i, "BACKUP", INVALID_PLAYER_ID );
            }
        }
        pInfo[ playerid ][ pBackup ] = 0;
    }


    Laikas[playerid] = 0;
    LaikoTipas[playerid] = 0;
    Ruko[playerid] = 0;
    SetPVarInt( playerid, "P_SMONEY", 0 );

    PlayerTextDrawHide   ( playerid, InfoText[ playerid ] );
    PlayerTextDrawDestroy( playerid, InfoText[ playerid ] );
    PlayerTextDrawHide   ( playerid, Greitis[ playerid ] );
    PlayerTextDrawDestroy( playerid, Greitis[ playerid ] );

    KillTimer(VehicleLoadTimer[playerid]);
    // Jei pylësi kurà, nemokamo jam neduosim
    if(IsFillingFuel[ playerid ])
    {
        KillTimer(PlayerFillUpTimer[ playerid ]);
        cInfo[ GetPlayerVehicleID(playerid) ][ cFuel ] = GetPVarInt( playerid, "FILLED" );
    }
    return 1;
}

public OnPlayerSpawn(playerid)
{
    #if defined DEBUG
        printf("[debug] OnPlayerSpawn(%s)", GetName(playerid));
    #endif
    if(IsPlayerNPC(playerid))
    {
        SetPlayerColor( playerid, TEAM_HIT_COLOR);
        if(!strcmp(GetName(playerid), "passenger_train_driver"))
            PutPlayerInVehicle(playerid, NPCTrain[0], 0);
        if(!strcmp(GetName(playerid), "cargo_train_driver")) 
            PutPlayerInVehicle(playerid, NPCTrain[ 1 ], 0);
        if(!strcmp(GetName(playerid), "Banko_Darbuotoja"))
        {
            SetPlayerSkin(playerid, 76);
        }
    
        //if(!strcmp(GetName(playerid), "andromada_pilot"))
        //    PutPlayerInVehicle(playerid, NPCPlane, 0);
        return 1;
    }

    if(PlayerOn[ playerid ] == false)
    {
        SendClientMessage(playerid, GRAD, "Jûs nesate prisijungæs prie serverio, praðome prisijungti.");
        Kick(playerid);
        return 1;
    }

    if(FirstSpawn[ playerid ])
    {
        FirstSpawn[ playerid ] = false;
        LoadPlayerKomp(playerid);
        LoadPlayerWeapons(playerid);
    }
    else 
    {
        // Jei spectatino ir turi ginklø reikia jam juos atiduoti.
        if(GetPVarInt(playerid, "SpectateWeaponCount"))
        {
            new buffer[128], weapons[ 26 ], specifier[16], count = GetPVarInt(playerid, "SpectateWeaponCount")*2;
            GetPVarString(playerid, "SpectateWeaponString", buffer, sizeof(buffer));
            format(specifier, sizeof(specifier), "p<|>a<i>[%d]", count);
            sscanf(buffer, specifier, weapons);

            for(new i = 0; i < count; i+=2)
                GivePlayerWeapon(playerid, weapons[ i ], weapons[ i + 1]);
        }
    }
    
    ObjUpdate[ playerid ] = true;

    SetPlayerSkillLevel(playerid, 0, 1);
    SetPlayerSkillLevel(playerid, 6, 1);

    SetPlayerSkillLevel(playerid, 3, 200);
    SetPlayerSkillLevel(playerid, 4, 1);
    SetPlayerSkillLevel(playerid, 5, 200);
    SetPlayerSkillLevel(playerid, 7, 300);
    SetPlayerSkillLevel(playerid, 8, 200);
    SetPlayerSkillLevel(playerid, 9, 200);
    SetPlayerSkillLevel(playerid, 10, 200);

    PreloadAnimsForPlayer( playerid );
    if(gPlayerAnimLibsPreloaded[playerid] == false)
    {
        gPlayerAnimLibsPreloaded[playerid] = true;
    }
    if( pInfo[ playerid ][ pMask ] == 0 )
    {
        foreach(Player,i)
        {
            ShowPlayerNameTagForPlayer(i, playerid, pInfo[playerid][pMask]);
        }
    }
    if( pInfo[ playerid ][ pLevel ] == 0 )
    {
        pInfo[ playerid ][ pLevel ] = 1;
        SetPlayerScore( playerid, 1 );
        SetPlayerTeam( playerid, playerid );
        return 1;
    }
    SetPlayerTeam( playerid, playerid );
    SetPlayerScore( playerid, pInfo[ playerid ][ pLevel ] );
    //SetTimerEx("GiveWeapons", 2000, 0, "d", playerid );
    return 1;
}
/*
FUNKCIJA:GiveWeapons(playerid)
{
    if (!IsPlayerConnected(playerid)) 
        return 1;
    for ( new gun = 0; gun < MAX_SAVED_WEAPONS; gun++ )
    {
        if(pInfo[ playerid ][ pGun ][ gun ] > 0 && pInfo[ playerid ][ pAmmo ][ gun ] > 0)
        {
            GivePlayerWeapon(playerid, pInfo[ playerid ][ pGun ][ gun ], pInfo[ playerid ][ pAmmo ][ gun ]);

            pInfo[ playerid ][ pGun  ][ gun ] = 0;
            pInfo[ playerid ][ pAmmo ][ gun ] = 0;
        }
    }
    return 1;
}
*/

public OnPlayerDeath(playerid, killerid, reason)
{
    #if defined DEBUG
        printf("[debug] OnPlayerDeath(%s, %d, %d)", GetName(playerid), killerid, reason);
    #endif
    if (MobilePhone[playerid] != INVALID_PLAYER_ID)
    {
        if( MobilePhone[playerid] > MAX_PLAYERS )
        {
            SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
            RemovePlayerAttachedObject( playerid, 3 );
            MobilePhone[ playerid ] = INVALID_PLAYER_ID;
            RingTone   [ playerid ] = 0;
            if ( NearPhone( playerid ) )
                TogglePlayerControllable( playerid, true );
        }
        else
        {
            if (MobilePhone[MobilePhone[playerid]] == playerid)
            {
                SendClientMessage(MobilePhone[playerid], GRAD, "Dëmesio, staiga nutrûko ryðys." );
                MobilePhone[MobilePhone[playerid]] = INVALID_PLAYER_ID;
            }
            SetPVarInt( MobilePhone[playerid], "CallOwner", true );
            RingTone[MobilePhone[playerid]] = 0;
            MobilePhone[playerid] = INVALID_PLAYER_ID;
            RingTone[playerid] = 0;
        }
    }
    
    if(Mires[playerid] == 0)
    {
        Mires[playerid] = 600;
        GetPlayerPos(playerid,pInfo[playerid][pCrashPos][0],pInfo[playerid][pCrashPos][1],pInfo[playerid][pCrashPos][2]);
        pInfo[playerid][pVirWorld] = GetPlayerVirtualWorld(playerid);
        pInfo[playerid][pInt] = GetPlayerInterior(playerid);
    }
    else
    {
    	//SetSpawnInfo(playerid, NO_TEAM, GetPlayerSkin(playerid), )
    	Mires[playerid] = 1;
   	}

    if(gPlayerUsingLoopingAnim[playerid] == true)
    {
        gPlayerUsingLoopingAnim[playerid] = false;
    }
    if(IsOnePlayAnim[playerid] == true)
    {
        IsOnePlayAnim[playerid] = false;
    }
    if(BackOut[playerid] == 1)
    {
        BackOut[playerid] = 0;
    }
    CancelEdit(playerid);
    if ( killerid == INVALID_PLAYER_ID ) return 1;
    foreach(Player,i)
    {
        if ( pInfo[ i ][ pAdmin ] >= 1 )
        {
            if ( GetPVarInt( i, "AP_KILLS" ) == 0 )
            {
                new string[ 126 ];
                GetWeaponName( reason, string, 24 );

                format          ( string, 126 ,"AdmWarn: þaidëjas (%s) nuþudë (%s) naudodamas (%s)", GetName( killerid ), GetName( playerid ), string );
                SendAdminMessagePlayer( i, COLOR_ADM, string );
            }
        }
    }
    SaveAccount(playerid);
    return 1;
}

public OnVehicleSpawn( vehicleid )
{
    #if defined DEBUG
        printf("[debug] OnVehicleSpawn(%d)", vehicleid);
    #endif
    
    switch(GetVehicleModel(vehicleid)) {
        case 427, 428, 432, 601, 528: SetVehicleHealth(vehicleid, 5000.0); // Enforcer, Securicar, Rhino, SWAT Tank, FBI truck - this is the armour plating dream come true.
    }
    
    Engine[ vehicleid ] = false;
    if( cInfo[ vehicleid ][ cOwner ] == 0 )
        ChangeVehicleColor( vehicleid, sVehicles[ vehicleid ][ Color1    ],
                                       sVehicles[ vehicleid ][ Color2    ] );
    AddVehicleComponent( vehicleid, cInfo[ vehicleid ][ cWheels    ] );
    AddVehicleComponent( vehicleid, cInfo[ vehicleid ][ cHidraulik ] );
    TuneCarMods( vehicleid );
    return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
    #if defined DEBUG
        printf("[debug] OnVehicleDeath(%d, %s)", vehicleid, GetName( killerid ));
    #endif
    new time  [ 6 ],
        string[ 126 ];
    cInfo[ vehicleid ][ cDuzimai ] ++;
    
    if(IsVehicleLoaded[ vehicleid ])
        IsVehicleLoaded[vehicleid ] = false;

    if( killerid != INVALID_PLAYER_ID && cInfo[ vehicleid ][ cOwner ] > 0 )
    {
        printf( "Tr. priemonës MySQL ID: %d (%s), sunaikinusiojo ID: %d (%s)", cInfo[ vehicleid ][ cID ], GetVehicleName( GetVehicleModel( vehicleid ) ), killerid, GetName( killerid ));
        format( string, 126, "AdmWarn: ([%d]%s[%d]) sunaikino tr. priemonæ.", killerid, GetName( killerid ) );
        SendAdminMessage( COLOR_ADM, string );
    }
    // Jei kaþkà veþë, krovinys prarastas :(
    RemoveAllCargoFromVehicle(vehicleid);

    for(new i = 0; i < MAX_TRUCKER_CARGO_OBJECTS; i++)
        if(cInfo[ vehicleid ][ objectai ][ i ] != -1)
            DestroyObject( cInfo[ vehicleid ][ objectai ][ i ] );
    
    SetVehicleToRespawn( vehicleid );
    if (cInfo[ vehicleid ][ cOwner ] > 0)
    {
        new carowner = GetCarOwner( vehicleid );
        if ( cInfo[ vehicleid ][ cInsurance ] >= 0)
        {
            cInfo[ vehicleid ][ cInsurance ] --;
            cInfo[ vehicleid ][ cVehID     ] = 0;
            cInfo[ vehicleid ][ cTuning     ] = 0;
            cInfo[ vehicleid ][ cWheels     ] = 0;
            cInfo[ vehicleid ][ cHidraulik     ] = 0;
            SaveCar       ( vehicleid );
            DestroyVehicle( vehicleid );
        }
        if(IsPlayerConnected(carowner))
        {
            gettime( time[ 0 ], time[ 1 ], time[ 2 ] );
            getdate( time[ 3 ], time[ 4 ], time[ 5 ] );

            format           ( string, 126,"* Dëmesio, Tr. priemonë buvo sunaikinta, duomenys: %s, laikas ir data: %d-%d-%d %d:%d:%d, sunaikinusiojo ID: %d (%s)",cInfo[ vehicleid ][ cName ], time[ 3 ], time[ 4 ], time[ 5 ],time[ 0 ], time[ 1 ], time[ 2 ], killerid, GetName( killerid ));
            SendClientMessage( carowner, COLOR_FADE1, string);
            pInfo[ carowner ][ pCarGet ] --;
        }
        nullVehicle   ( vehicleid );
    }
    return 1;
}
public OnPlayerText(playerid, text[])
{
    new string[ 256 ],
        query[ 512 ],
        zone[30];

    GetPlayer2DZone(playerid, zone, 30);

    if(Mires[playerid] > 0)
    {
        SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðiuo metu Jûs esate komos/kritinëje bûsenoje.");
        UpdatePlayerInfoText( playerid );
        return false;
    }
    if(Mute[playerid] == true)
    {
        SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûsø veikëjui yra uþdrausti kalbëti (/mute) susisiekite su Administratoriumi dël draudimo paðalinimo (/unmute).");
        return false;
    }

    if ( AfkCheck[ playerid ] != 0 )
        AfkCheck[ playerid ] = 0;

    if(MobilePhone[playerid] != INVALID_PLAYER_ID && RingTone[ playerid ] == 0)
    {
        if( !NearPhone( playerid ) )
        format(string, 256, "%s sako (telefonu): %s", GetPlayerNameEx(playerid), text);
        else
        format(string, 256, "%s sako (taksofonu): %s", GetPlayerNameEx(playerid), text);
        ProxDetector(10.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
        if( !NearPhone( playerid ) )
        {
            if( IsPlayerConnected( MobilePhone[ playerid ] ) )
            {
                if (TalkingLive[playerid] != 255) // Interviu telefonu sistema
                {
                    if (TalkingLive[playerid] == MobilePhone[ playerid ] && PlayerToPlayer(5.0, playerid, TalkingLive[playerid]))
                    {
                        format(string,179, "[SAN NEWS] Tiesioginis interviø %s: %s", GetName( playerid ), text );
                        SendNEWS(COLOR_GREEN,string);
                        if( GetPVarInt  ( playerid, "SPEAKER" ) == 0 )
                        {
                            format(string, 256, "%s sako (telefonu): %s", GetNumber( MobilePhone[ playerid ], pInfo[ playerid ][ pPhone ] ), text);
                            SendClientMessage( MobilePhone[ playerid ], COLOR_LIGHTRED2, string );
                        }
                        else
                        {
                            format(string, 256, "%s sako (telefonu): %s", GetNumber( MobilePhone[ playerid ], pInfo[ playerid ][ pPhone ] ), text);
                            SendClientMessage( MobilePhone[ playerid ], COLOR_LIGHTRED2, string );
                            format(string, 256, "%d sako (telefonu): %s", pInfo[ playerid ][ pPhone ], text);
                            ProxDetector2(10.0, MobilePhone[ playerid ], string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
                        }
                    }
                    else
                    {
                        if( GetPVarInt  ( playerid, "SPEAKER" ) == 0 )
                        {
                            format(string, 256, "%s sako (telefonu): %s", GetNumber( MobilePhone[ playerid ], pInfo[ playerid ][ pPhone ] ), text);
                            SendClientMessage( MobilePhone[ playerid ], COLOR_LIGHTRED2, string );
                        }
                        else
                        {
                            format(string, 256, "%s sako (telefonu): %s", GetNumber( MobilePhone[ playerid ], pInfo[ playerid ][ pPhone ] ), text);
                            SendClientMessage( MobilePhone[ playerid ], COLOR_LIGHTRED2, string );
                            format(string, 256, "%d sako (telefonu): %s", pInfo[ playerid ][ pPhone ], text);
                            ProxDetector2(10.0, MobilePhone[ playerid ], string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
                        }
                    }
                }
                else
                {
                    if( GetPVarInt  ( playerid, "SPEAKER" ) == 0 )
                    {
                        format(string, 256, "%s sako (telefonu): %s", GetNumber( MobilePhone[ playerid ], pInfo[ playerid ][ pPhone ] ), text);
                        SendClientMessage( MobilePhone[ playerid ], COLOR_LIGHTRED2, string );
                    }
                    else
                    {
                        format(string, 256, "%s sako (telefonu): %s", GetNumber( MobilePhone[ playerid ], pInfo[ playerid ][ pPhone ] ), text);
                        SendClientMessage( MobilePhone[ playerid ], COLOR_LIGHTRED2, string );
                        format(string, 256, "%d sako (telefonu): %s", pInfo[ playerid ][ pPhone ], text);
                        ProxDetector2(10.0, MobilePhone[ playerid ], string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
                    }
                }
            }
        }
        else
        {
            format(string, 256, "Anonimas sako (taksofonu): %s", text);
            SendClientMessage( MobilePhone[ playerid ], COLOR_LIGHTRED2, string );
        }
        SetPlayerChatBubble( playerid, text, COLOR_FADE1, 20.0, 10000 );
        if(MobilePhone[playerid] == 911)
        {
            if ( strcmp( "policija", text, true, strlen( text ) ) == 0 ) // PD kvietimas
            {
                SendClientMessage(playerid, COLOR_FADE2, "LOS SANTOS pagalbos linija: tuojaus sujungsime Jus su policijos departamentu.");
                MobilePhone[playerid] = 912;
                SendClientMessage(playerid, COLOR_WHITE, "LOS SANTOS POLICIJOS DEPARTAMENTAS: Los Santos policija klauso, koks Jûsø praneðimas ir vieta?");
                return false;
            }
            else if (strcmp("medikais", text, true, strlen(text)) == 0) // MD kvietimas
            {
                SendClientMessage(playerid, COLOR_FADE2, "LOS SANTOS pagalbos linija: tuojaus sujungsime Jus su ligonine ar kita medicinos ástaiga.");
                MobilePhone[playerid] = 913;
                SendClientMessage(playerid, COLOR_WHITE, "LOS SANTOS ligoninë: Los Santos ligoninë klauso, apibûdinkite kas nutiko ir kur nutiko.");
                return 0;
            }
            else if ( strcmp( "abu", text, true, strlen( text ) ) == 0 ) // Abiejø kvietimas
            {
                SendClientMessage(playerid, COLOR_FADE2, "LOS SANTOS pagalbos linija: tuojaus sujungsime su bendros pagalbos centru.");
                MobilePhone[playerid] = 914;
                SendClientMessage(playerid, COLOR_WHITE, "LOS SANTOS bendra pagalbos linija: apibûdinkite savo ávyki, bei ávykio vietà.");
                return false;
            }
            else
            {
                SendClientMessage(playerid, COLOR_FADE2, "LOS SANTOS pagalbos linija: Atleiskite, bet að nesuprantu su kuo Jûs reikia sujungti: Policija ar medikais?");
                return false;
            }
        }
        else if(MobilePhone[playerid] == 912) // Iðkvietimo parodymas PD
        {
            SendClientMessage(playerid, COLOR_FADE2, "LOS SANTOS POLICIJOS DEPARTAMENTAS: Jûsø praneðimas uþfiksuotas ir praneðtas pareigønams.");
            SendClientMessage(playerid, COLOR_FADE1, "Aèiø Jums, kad praneðëte apie insidentà, pasistengsime Jums padëti.");
            SendTeamMessage(1, COLOR_LIGHTRED, "|________________Gautas praneðimas apie ávyki________________|");
            if( !NearPhone( playerid ) )
            {
                mysql_real_escape_string(text, text, DbHandle, 128);
                mysql_real_escape_string(zone, zone, DbHandle, 128);
                format( query, sizeof( query ), "INSERT INTO `lastcall` (number, crime, position) VALUES (%d, '%s', '%s')",
                    pInfo[playerid][pPhone], text, zone );
                format(string, 256, "| ávyki praneðë | %d, nustatytà vieta: %s", pInfo[playerid][pPhone], zone);
            }
            else
            {
                mysql_real_escape_string(text, text, DbHandle, 128);
                mysql_real_escape_string(zone, zone, DbHandle, 128);
                format(string, 256, "| ávyki praneðë | Klaida, praneðëjas nenustatytas" );
                format( query, sizeof( query ), "INSERT INTO `lastcall` (number, crime, position) VALUES (0, '%s', '%s')",
                    text, zone );
            }
            SendTeamMessage(1, COLOR_WHITE, string);
            format(string, 256, "| ávykis: %s",text);
            GetPlayerPos( playerid, Tlc[ 0 ], Tlc[ 1 ], Tlc[ 2 ] );
            SendTeamMessage(1, COLOR_WHITE, string);
            SetPVarInt( playerid, "CallOwner", false );
            MobilePhone[playerid] = INVALID_PLAYER_ID;
            if( !NearPhone( playerid ) )
            {
                SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
                RemovePlayerAttachedObject( playerid, 3 );
            }
            else
            TogglePlayerControllable( playerid, true );
            mysql_query(DbHandle,  query, false);
            return false;
        }
        else if(MobilePhone[playerid] == 999)
        {
            SendTeamMessage(4, COLOR_LIGHTRED, "|_____________Gautas praneðimas apie ávyki_____________|");
            if( !NearPhone( playerid ) )
            format                  ( string, 179, "| ávyki praneðë | %d", pInfo[playerid][pPhone] );
            else
            format                  ( string, 179, "| ávyki praneðë | Klaida, praneðëjas nenustatytas" );
            SendTeamMessage(4, COLOR_WHITE, string);
            format                  ( string, 179, "| ávykio praneðimas | %s", text );
            SendTeamMessage(4, COLOR_WHITE, string);
            SetPVarInt( playerid, "CallOwner", false );
            MobilePhone[playerid] = INVALID_PLAYER_ID;
            if( !NearPhone( playerid ) )
            {
                SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
                RemovePlayerAttachedObject( playerid, 3 );
            }
            else
            TogglePlayerControllable( playerid, true );
        }
        else if(MobilePhone[playerid] == 913) // Iðkvietimo parodymas MD
        {
            SendClientMessage(playerid, COLOR_FADE2, "LOS SANTOS LIGONINë: Jûsø praneðimas uþfiksuotas ir praneðtas møsø medikams.");
            SendClientMessage(playerid, COLOR_FADE1, "Aèiø Jums, kad praneðëte apie insidentà, pasistengsime Jums padëti, medikai jau atvyksta");
            SendTeamMessage(2, COLOR_LIGHTRED, "|________________Gautas praneðimas apie ávyki________________|");
            mysql_real_escape_string(text, text, DbHandle, 128);
            mysql_real_escape_string(zone, zone, DbHandle, 128);
            if( !NearPhone( playerid ) )
            {
                format( query, sizeof( query ), "INSERT INTO `lastcall` (number, crime, position) VALUES (%d, '%s', '%s')",
                    pInfo[playerid][pPhone], text, zone );
                format(string, 256, "| ávyki praneðë | %d, nustatyti vieta: %s", pInfo[playerid][pPhone], zone);
            }
            else
            {
                format(string, 256, "| ávyki praneðë | Klaida, praneðëjas nenustatytas" );
                format( query, sizeof( query ), "INSERT INTO `lastcall` (number, crime, position) VALUES (0, '%s', '%s')",
                    text, zone );
            }
            SendTeamMessage(2, COLOR_WHITE, string);
            format(string, 256, "| ávikio praneðimas | %s",text);
            SendTeamMessage(2, COLOR_WHITE, string);
            GetPlayerPos( playerid, Tlc[ 0 ], Tlc[ 1 ], Tlc[ 2 ] );
            SetPVarInt( playerid, "CallOwner", false );
            MobilePhone[playerid] = INVALID_PLAYER_ID;
            if( !NearPhone( playerid ) )
            {
                SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
                RemovePlayerAttachedObject( playerid, 3 );
            }
            else
            TogglePlayerControllable( playerid, true );
            mysql_query(DbHandle,  query, false);
            return false;
        }
        else if(MobilePhone[playerid] == 914) // Iðkvietimo parodymas MD/PD
        {
            SendClientMessage(playerid, COLOR_FADE2, "LOS SANTOS pagalbos linija Jûsø ávykis buvo praneðtas visiems departamentams.");
            SendClientMessage(playerid, COLOR_FADE1, "Aèiø Jums, kad praneðëte apie insidentà, pasistengsime Jums padëti.");
            SendTeamMessage(2, COLOR_LIGHTRED, "|________________Gautas praneðimas apie ávyki________________|");
            SendTeamMessage(1, COLOR_LIGHTRED, "|________________Gautas praneðimas apie ávyki________________|");
            mysql_real_escape_string(text, text, DbHandle, 128);
            mysql_real_escape_string(zone, zone, DbHandle, 128);
            if( !NearPhone( playerid ) )
            {
                format( query, sizeof( query ), "INSERT INTO `lastcall` (number, crime, position) VALUES (%d, '%s', '%s')",
                    pInfo[playerid][pPhone], text, zone );
                format(string, 256, "| ávyki praneðë | %d, nustatyta vieta: %s", pInfo[playerid][pPhone], zone);
            }
            else
            {
                format(string, 256, "| ávyki praneðë | Klaida, praneðëjas nenustatytas" );
                format( query, sizeof( query ), "INSERT INTO `lastcall` (number, crime, position) VALUES (0, '%s', '%s')",
                    text, zone );
            }
            SendTeamMessage(2, COLOR_WHITE, string);
            SendTeamMessage(1, COLOR_WHITE, string);
            format(string, 256, "| ávikio praneðimas | %s",text);
            SendTeamMessage(2, COLOR_WHITE, string);
            SendTeamMessage(1, COLOR_WHITE, string);
            SetPVarInt( playerid, "CallOwner", false );
            MobilePhone[playerid] = INVALID_PLAYER_ID;
            if( !NearPhone( playerid ) )
            {
                SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
                RemovePlayerAttachedObject( playerid, 3 );
            }
            else
            TogglePlayerControllable( playerid, true );
            mysql_query(DbHandle,  query, false);
            return false;
        }
        else if(MobilePhone[playerid] == 816) // Mechanikø iðkvietimo parodymas
        {
            SendClientMessage(playerid, COLOR_FADE2, "Automatinis atsakiklis: Dëkojame uþ tai, kad naudojatës Los Santos serviso paslaugomis.");
            SendJobMessage(JOB_MECHANIC, COLOR_LIGHTRED, "|________________Gautas iðkvietimas mechanikui________________|");
            if( !NearPhone( playerid ) )
        format(string, 256, "| Iðkvietimas gautas nuo | %d", pInfo[playerid][pPhone]);
            else
            format(string, 256, "| Iðkvietimas gautas nuo | Asmuo nebuvo nustatytas.");
            SendJobMessage(JOB_MECHANIC, COLOR_WHITE, string);
            format(string, 256, "| Iðkvietimo vieta|  %s",text);
            SendJobMessage(JOB_MECHANIC, COLOR_WHITE, string);
            SetPVarInt( playerid, "CallOwner", false );
            MobilePhone[playerid] = INVALID_PLAYER_ID;
            if( !NearPhone( playerid ) )
            {
                SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
                RemovePlayerAttachedObject( playerid, 3 );
            }
            else
            TogglePlayerControllable( playerid, true );
            return false;
        }
        else if(MobilePhone[playerid] == 817) // Taksi iðkvietimo parodymas
        {
            foreach(Player, mech )
            {
                if( GetVehicleModel( GetPlayerVehicleID( mech ) ) == 420 || GetVehicleModel( GetPlayerVehicleID( mech ) ) == 438 )
                {
                    SendClientMessage( mech, COLOR_YELLOW, "|________________Gautas TAXI iðkvietimas________________|");
                    if( !NearPhone( playerid ) )
                    format(string, 256, "| TAXI iðkvietëjas | %d, nurodyta iðkvietimo vieta: %s", pInfo[playerid][pPhone], zone);
                    else
                    format(string, 256, "| TAXI iðkvietëjas | nebuvo nustatytas nei asmuo, nei vieta.");
                    SendClientMessage( mech, COLOR_WHITE, string);
                    format(string, 256, "| Iðkvietimo vieta | %s", text);
                    SendClientMessage( mech, COLOR_WHITE, string);
                }
            }
            SendClientMessage(playerid, COLOR_FADE2, "Automatinis atsakiklis: Jûs sëkmingai iðsikvietët TAXI, dëkojame, kad naudojatës møsø paslaugomis.");
            SetPVarInt( playerid, "CallOwner", false );
            MobilePhone[playerid] = INVALID_PLAYER_ID;
            if( !NearPhone( playerid ) )
            {
                SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
                RemovePlayerAttachedObject( playerid, 3 );
            }
            else
                TogglePlayerControllable( playerid, true );
            return false;
        }
        return false;
    }
    if (TalkingLive[playerid] != 255) // Interviu sistema
    {
        if (PlayerToPlayer(5.0, playerid, TalkingLive[playerid]))
        {
            format(string,179, "[SAN NEWS] Tiesioginis interviø su %s: %s", GetName( playerid ), text );
            SendNEWS(COLOR_GREEN,string);
            return false;
        }
        else
        SendClientMessage(playerid,GRAD, "Klaida, Jûsø kalbinamas asmuo yra per toli nuo Jûsø, tad negalite tæsti interviu kol jis nebus ðalia. Nutraukimui: /live." );
        return false;
    }
    new Float:dist = 9.0;

    format( string, 144, "%s", text );
    SetPlayerChatBubble(playerid, string, COLOR_FADE1, dist, 10000);
    format(string,179," %s sako: %s", GetPlayerNameEx( playerid ), text);
    if ( IsPlayerInAnyVehicle(playerid))
    {
        new vehid = GetPlayerVehicleID(playerid);
        if(VehicleHasWindows(GetVehicleModel(vehid)))
        {
            if ( Windows[ vehid ] )
                format( string, 179, "(Atidarytas langas (-ai)) %s", string );
            else
            {
                format( string, 179, "(Uþdarytas langas (-ai)) %s", string );
                dist = 1.0;
            }
        }
    }
    ProxDetector(dist, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
    new times = strlen(text);
    if(times > 100)
        times = 100;
    if ( gPlayerUsingLoopingAnim[ playerid ] == false && pInfo[ playerid ][ pTalkStyle ] == 0 )
    {
        ApplyAnimation( playerid, "PED", "IDLE_CHAT", 4.0, 1, 1, 1, 1, 1 );
        SetTimerEx("UnChat", times * 100, false, "d",playerid);
    }
    if ( gPlayerUsingLoopingAnim[ playerid ] == false && pInfo[ playerid ][ pTalkStyle ] == 1 )
    {
        ApplyAnimation( playerid, "MISC", "IDLE_CHAT_02", 4.0, 1, 1, 1, 1, 1 );
        SetTimerEx("UnChat", times * 100, false, "d",playerid);
    }
    if (gPlayerUsingLoopingAnim[ playerid ] == false && pInfo[ playerid ][ pTalkStyle ] == 2 )
    {
        ApplyAnimation( playerid, "GHANDS", "gsign1", 4.0, 1, 1, 1, 1, 1 );
        SetTimerEx("UnChat", times * 100, false, "d",playerid);
    }
    if ( gPlayerUsingLoopingAnim[ playerid ] == false && pInfo[ playerid ][ pTalkStyle ] == 3 )
    {
        ApplyAnimation( playerid, "GANGS", "prtial_gngtlkD", 4.0, 1, 1, 1, 1, 1 );
        SetTimerEx("UnChat", times * 100, false, "d",playerid);
    }
    if ( gPlayerUsingLoopingAnim[ playerid ] == false && pInfo[ playerid ][ pTalkStyle ] == 4 )
    {
        ApplyAnimation( playerid, "GANGS", "prtial_gngtlkH", 4.0, 1, 1, 1, 1, 1 );
        SetTimerEx("UnChat", times * 100, false, "d",playerid);
    }
    return false;
}

FUNKCIJA:UnChat(playerid)
{
    StopLoopingAnim(playerid);
    return true;
}


CMD:fpv(playerid,params[])
{
    #pragma unused params
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, norëdami naudoti ðá veiksmà, privalote sedëti/bûtii tr. priemonëje. ");
    if(GetPVarInt(playerid,"used") == 0)
    {
        new p = GetPlayerVehicleID(playerid);
        vehview[playerid] = CreatePlayerObject(playerid,19300, 0.0000, -1282.9984, 10.1493, 0.0000, -1, -1, 100);
        AttachPlayerObjectToVehicle(playerid,vehview[playerid],p,-0.314999, -0.195000, 0.510000, 0.000000, 0.000000, 0.000000);
        AttachCameraToPlayerObject(playerid,vehview[playerid]);
        SetPVarInt(playerid,"used",1);
        PlayerPlaySound( playerid, 1057, 0.0, 0.0, 0.0 );
    }
    else if(GetPVarInt(playerid,"used") == 1)
    {
        SetCameraBehindPlayer(playerid);
        DestroyPlayerObject(playerid,vehview[playerid]);
        SetPVarInt(playerid,"used",0);
        PlayerPlaySound( playerid, 1057, 0.0, 0.0, 0.0 );
    }
    return 1;
}

CMD:help(playerid)
{
    SendClientMessage( playerid, COLOR_GREEN, "|________________________________Serverio komandø sàraðas________________________________|");
    SendClientMessage( playerid, COLOR_FADE2, "  ROLE-PLAY VEIKSMAI: /me /do /try");
    SendClientMessage( playerid, COLOR_FADE1, "  IC IR OOC KALBËJIMO KANALAI: IC - /f /r /s /low /g /ame /w /cw /ds. OOC - /b (/o)oc /pm.");
    SendClientMessage( playerid, COLOR_FADE2, "  VEIKËJO VALDYMAS: /levelup /fpv /stats /inv /invweapon /transfer /pay /anims /learnfight /stop /die /(lic)ences");
    SendClientMessage( playerid, COLOR_FADE1, "  DARBAS IR FRAKCIJA: /leavefaction /takejob /leavejob");	
    SendClientMessage( playerid, COLOR_FADE2, "  ADMINISTRACIJA IR PAGALBA: /admins /moderators /(re)port /askq");
    SendClientMessage( playerid, COLOR_FADE1, "  TURTO PIRKIMAS: /buy /buygun /buyhouse /buybiz");
    SendClientMessage( playerid, COLOR_FADE2, "  KITOS KOMANDOS: /bail /id /make /bank /note /knock /maxspeed /charity /lock /accept /fines /vehiclefines /setbelt");
    SendClientMessage( playerid, COLOR_FADE1, "  KITOS KOMANDOS: /lastad /bell /setcard /ccard /windows /trunk /bonnet /sid /savings");
    if ( pInfo[ playerid ][ pJob ] == JOB_MECHANIC )
    SendClientMessage( playerid, COLOR_LIGHTRED2, "  MECHANIKO KOMANDOS: /repair /repaint /addwheels");
    if ( pInfo[ playerid ][ pJob ] == JOB_TRASH )
      SendClientMessage( playerid, COLOR_LIGHTRED2, "  ÐIÛKÐLININKO: /startmission /endmission /takegarbage /throwgarbage");
    if ( pInfo[ playerid ][ pJob ] == JOB_DRUGS )
      SendClientMessage( playerid, COLOR_LIGHTRED2, "  NARKOTIKØ PREKEIVIO KOMANDOS: /buyseeds /cutweed");
    if ( pInfo[ playerid ][ pJob ] == JOB_GUN )
      SendClientMessage( playerid, COLOR_LIGHTRED2, "  GINKLØ GAMINTOJO KOMANDOS: /weaponlist /make");
    if ( pInfo[ playerid ][ pJob ] == JOB_TRUCKER )
	{ 
      SendClientMessage( playerid, COLOR_LIGHTRED2, "  KROVINIØ PERVEÞIMO VAIRUOTOJO KOMANDOS: /tpda /cargo /killcheckpoint"),
      SendClientMessage( playerid, COLOR_LIGHTRED2, "  /tpda - kroviniø tvarkaraðtis | /cargo - kroviniø valdymas | /killcheckpoint - esame CP panaikinimas.");	
	}
    if ( pInfo[ playerid ][ pJob ] == JOB_JACKER )
		SendClientMessage( playerid, COLOR_LIGHTRED2, "  TR. PRIEMONËS VOGIMO KOMANDOS: /sellcar /info /spots");
	if ( PlayerFaction( playerid ) == 1 )
		SendClientMessage( playerid, COLOR_POLICE, "  LOS SANTOS POLICIJOS DEPARTAMENTAS: /policehelp");
    if ( PlayerFaction( playerid ) == 2 ) 
	{
        SendClientMessage( playerid, COLOR_LIGHTRED2, "|________________________________Mediko komandos________________________________|"),
		SendClientMessage( playerid, COLOR_WHITE, "  /rb /rrb /drag /fdgear /duty /heal /takefmoney /checfkbudget /flist /tlc");     
	}
    if ( PlayerFaction( playerid ) == 5 ) 
	{
        SendClientMessage( playerid, COLOR_GREEN2, "|________________________Savivaldybës darbuotojo komandos________________________|"),
		SendClientMessage( playerid, COLOR_WHITE, "  /duty /takemoney /takefmoney /checfkbudget /checkbudget /flist");     
	}
    if ( pInfo[ playerid ][ pLead ] > 1 )
        SendClientMessage( playerid, COLOR_WHITE, "  FRAKCIJOS VALDYMAS: /invite /uninvite /setrank /flist /nof /togf" );
    if ( pInfo[ playerid ][ pAdmin ] > 0 )
    SendClientMessage( playerid, COLOR_WHITE, "  ADMINISTRATORIUS: Pokalbiai - /a, darbas - /aduty, komandos - /ahelp /togadmin");
    if ( pInfo[ playerid ][ pDonator ] > 0 )
        SendClientMessage( playerid, COLOR_FADE1, "  REMËJAS: /blockpm /togpm /walkstyle /talkstyle /mask");
    SendClientMessage( playerid, COLOR_FADE2, "  SISTEMØ PAGALBA/KOMANDOS: /v /radiohelp /phonehelp /phonebookhelp /bizhelp /househelp ");
    SendClientMessage( playerid, COLOR_FADE1, "  SISTEMØ PAGALBA/KOMANDOS: /vradio /garagehelp /fishinghelp /toghelp /gunhelp");	
    SendClientMessage( playerid, COLOR_GREEN2, "________________________Daugiau informacijos________________________");
    SendClientMessage( playerid, COLOR_FADE1, "  Vis informacija pateikta møsø diskusijø forume forum.ltrp.lt");
    SendClientMessage( playerid, COLOR_FADE2, "  Jei prireikë pagalbos, visados galite klausti naudodami komanda /askq");
    //Produkcija( );
    return 1;
}
CMD:gunhelp(playerid)
{
    SendClientMessage( playerid, COLOR_GREEN, "|__________________GINKLØ KOMANDOS__________________|");
    SendClientMessage( playerid, COLOR_WHITE, "  /leavegun - numeta ant þemës rankoje laikomà ginklà, kuri galite paiimti su /grabgun.");
    SendClientMessage( playerid, COLOR_FADE1, "  /grabgun - paiiima ant þemës rodomà ginklà");
    SendClientMessage( playerid, COLOR_WHITE, "  /buygun - naudojama ginklø parduotuvëje");
    SendClientMessage( playerid, COLOR_GREEN, "__________________________________________________________________");	
    return 1;
}
CMD:phonebookhelp(playerid)
{
    SendClientMessage( playerid, COLOR_GREEN, "|__________________TELEFONØ KNYGOS KOMANDOS__________________|");
    SendClientMessage( playerid, COLOR_WHITE, "  /phonebook - Jûsø telefonø adresø sàraðas.");
    SendClientMessage( playerid, COLOR_FADE1, "  /addcontact - pridësite kontaktà á telefonø knygà");
    SendClientMessage( playerid, COLOR_WHITE, "  /deletecontact - iðtrinsite kontaktà ið telefonø knygos");
    SendClientMessage( playerid, COLOR_GREEN, "__________________________________________________________________");	
    return 1;
}
CMD:toghelp(playerid)
{
    SendClientMessage( playerid, COLOR_GREEN, "|__________________KANALØ IÐJUNGIMO KOMANDOS__________________|");
    SendClientMessage( playerid, COLOR_WHITE, "  /togooc - nebematysite OOC kanalø ir informacijos");
    SendClientMessage( playerid, COLOR_FADE1, "  /tognames - iðjungsite rodomus veikëjø vardus");
    SendClientMessage( playerid, COLOR_WHITE, "  /tognews - nebematysite SAN News kanalo skelbiamø naujienø");
    SendClientMessage( playerid, COLOR_FADE1, "  /togpm - nebegalësite gauti privaèiø þinuèiø");
    SendClientMessage( playerid, COLOR_FADE1, "  KITOS KOMANDOS: /togf /togq /togadmin");
    SendClientMessage( playerid, COLOR_GREEN, "__________________________________________________________________");	
    return 1;
}
CMD:policehelp(playerid)
{
    if ( PlayerFaction( playerid ) == 1 )
    {
        SendClientMessage( playerid, COLOR_POLICE, "|__________________LOS SANTOS POLICIJOS DEPARTAMENTO__________________|"),
        SendClientMessage( playerid, COLOR_WHITE, "  PATIKRINIMO KOMANDOS: /frisk /checkalco /fines /vehiclefines /checkspeed /mdc /take"),
        SendClientMessage( playerid, COLOR_FADE1, "  BUDËJIMO PRADÞIOS KOMANDOS: /duty /wepstore"),
        SendClientMessage( playerid, COLOR_WHITE, "  SUËMIMO KOMANDOS: /tazer /cuff /drag"),
        SendClientMessage( playerid, COLOR_FADE1, "  GAUDYNIØ/SITUACIJØ KOMANDOS: /bk /rb  /rrb /m /tlc /ram"),
        SendClientMessage( playerid, COLOR_WHITE, "  KOMANDOS NUBAUSTI: /fine /vehiclefine /arrest /prison /arrestcar /licwarn "),
        SendClientMessage( playerid, COLOR_FADE1, "  KITOS KOMANDOS: /flist /setunit /delunit /police /delarrestcar /jobid /cutdownweed"),
        SendClientMessage( playerid, COLOR_WHITE, "  DRABUÞIAI/APRANGA: /vest /badge /rbadge /pdclothes"),
        SendClientMessage( playerid, COLOR_POLICE, "____________________________________________________________________________");	
    }	
    return 1;
}
CMD:radiohelp(playerid)
{
    SendClientMessage( playerid, COLOR_GREEN, "|__________________RACIJOS NAUDOJIMO KOMANDOS__________________|");
    SendClientMessage( playerid, COLOR_FADE1, "  /r [TEKSTAS] - IC pokalbiø per racijà kanalas." );
    SendClientMessage( playerid, COLOR_WHITE, "  /rlow [TEKSTAS] - IC pokalbiø per racijà kanalas kalbant tyliai" );
    SendClientMessage( playerid, COLOR_FADE1, "  /setchannel [1-3] [RACIJOS KANALAS] - racijos kanalo nustatymas/keitimas./setslot" );
    SendClientMessage( playerid, COLOR_WHITE, "  /setslot [1-3] - nustatyti vietà kanalui." );
    SendClientMessage( playerid, COLOR_GREEN, "__________________________________________________________________" );	
    return 1;
}
CMD:phonehelp(playerid)
{
    SendClientMessage( playerid, COLOR_GREEN, "|__________________MOBILAUS TELEFONO NAUDOJIMAS__________________|");
    SendClientMessage( playerid, COLOR_LIGHTRED2, "Norëdami suþinoti specialiuosius numerius paraðykite komandà /call");	
    SendClientMessage( playerid, COLOR_FADE1, "  /call [NUMERIS] - skambinti á pasirinktà numerá." );
    SendClientMessage( playerid, COLOR_WHITE, "  (/h)angup - padëti telefonà pokalbio metu ir nutraukti pokalbá." );	
    SendClientMessage( playerid, COLOR_FADE1, "  (/p)ickup - atsiliepti á ateinantá skambutá." );	
    SendClientMessage( playerid, COLOR_WHITE, "  /sms [NUMERIS] [TEKSTAS] - paraðyti trumpaja þinutæ á pasirinktà numerá." );
    SendClientMessage( playerid, COLOR_FADE1, "  /turnphone - iðjungti/ájungti telefonà." );	
    SendClientMessage( playerid, COLOR_WHITE, "  /speaker - Ájungti garsiakalbá telefone." );	
    SendClientMessage( playerid, COLOR_FADE1, "  /ucall - komanda skirta taksafonams.." );	
    SendClientMessage( playerid, COLOR_GREEN, "___________________________________________________________________" );		
    return 1;
}
CMD:bizhelp(playerid)
{
    SendClientMessage(playerid,COLOR_GREEN,"|__________________BIZNIO VALDYMO INFORMACIJA__________________|");
	SendClientMessage(playerid,COLOR_WHITE,"  /furniture - komandoje naudojama viduje biznio, su kuria galite pirktis baldus á savo bizná");
	SendClientMessage(playerid,COLOR_FADE1,"  /buybiz - jei esate ðalia parduodamo biznio, su ðia komandà galite já nusipirkti.");	
	SendClientMessage(playerid,COLOR_WHITE,"  /sellbiz [VEIKËJO ID] [KAINA] - galite parduoti savo turimà verslà.");	
	SendClientMessage(playerid,COLOR_FADE1,"  /biz - pagrindinis biznio valdymas, nustatymai ir kt. Komanda veikia prie biznio áëjimo.");
	SendClientMessage(playerid,COLOR_WHITE,"  /cargoprice - naudojama norint pateikti uþsakymà perkant prekes..");		
    SendClientMessage( playerid, COLOR_GREEN, "__________________________________________________________________" );	
    return 1;
}
CMD:househelp(playerid)
{
    SendClientMessage(playerid,COLOR_GREEN,"|__________________NAMO VALDYMO INFORMACIJA__________________|");
	SendClientMessage(playerid,COLOR_WHITE,"  /furniture - komandoje naudojama viduje namo, su kuria galite pirktis baldus á savo bizná");
	SendClientMessage(playerid,COLOR_FADE1,"  /buyhouse - jei esate ðalia parduodamo namo su ðia komandà galite já nusipirkti.");	
	SendClientMessage(playerid,COLOR_WHITE,"  /sellhouse [VEIKËJO ID] [KAINA] - galite parduoti savo turimà namà.");	
	SendClientMessage(playerid,COLOR_FADE1,"  /setrent [NUOMOS KAINÀ] - naudojama nustatant nuomos kainà savo name.");
	SendClientMessage(playerid,COLOR_WHITE,"  /lock - nuosavo namo durø uþrakinimas, atrakinimas.");		
	SendClientMessage(playerid,COLOR_WHITE,"  /housewithdraw [SUMA] - pinigø iðsieimas ið namo. /housedeposit [SUMA] - pinigø ásidëjimas á namo seifà.");
	SendClientMessage(playerid,COLOR_FADE1,"  /houseinfo - namo informacija..");	
	SendClientMessage(playerid,COLOR_WHITE,"  /hinv - namo seifo informacija.");	
	SendClientMessage(playerid,COLOR_FADE1,"  /hradio - name esanèios audio sistemos valdymas.");
	SendClientMessage(playerid,COLOR_WHITE,"  /tenantry - nuomininkø informacija.");
	SendClientMessage(playerid,COLOR_WHITE,"  /evict - paðalinti nuomininkà..");
	SendClientMessage(playerid,COLOR_FADE1,"  /evictall - paðalinti visus nuomininkus ið namo.");	
	SendClientMessage(playerid,COLOR_WHITE,"  /eat - atsistatyti gyvybæs pavalgant.");	
	SendClientMessage(playerid,COLOR_FADE1,"  /hu - namo patobulinimas.");
	SendClientMessage(playerid,COLOR_WHITE,"  /clothes - persirengimas namuose, iðvaizdos pakeitimas.");		
    SendClientMessage( playerid, COLOR_GREEN, "__________________________________________________________________" );	
    return 1;
}

CMD:setunit( playerid, params[ ] )
{
    new
        string[ 256 ];

    if(UsePDCMD(playerid) != 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûs nesate pareigûnas, kad atliktumët ðá veiksmà.");
    if(sscanf( params, "s[128]", string ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /setunit [PAVADINIMAS]" );
    new idcar = GetPlayerVehicleID( playerid );
    if( sVehicles[ idcar ][ Faction ] == 2 )
    {
        new Float:X, Float:Y, Float:Z;
        GetVehicleModelInfo(GetVehicleModel( idcar ), VEHICLE_MODEL_INFO_SIZE, X, Y, Z);
        if ( !IsValidDynamic3DTextLabel( Units [idcar] ) )
            Units [idcar] = CreateDynamic3DTextLabel (string, COLOR_WHITE, 0, (-0.5*Y), 0.0, 15.0, INVALID_PLAYER_ID, idcar, 1);
        else
            UpdateDynamic3DTextLabelText (Units [idcar], COLOR_WHITE, string);
    }
    return 1;
}
CMD:delunit( playerid, params[ ] )
{
    if(UsePDCMD(playerid) != 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûs nesate pareigûnas, kad atliktumët ðá veiksmà.");
    new idcar = GetPlayerVehicleID( playerid );
    if( sVehicles[ idcar ][ Faction ] == 2 && IsValidDynamic3DTextLabel( Units [idcar] ) )
        DestroyDynamic3DTextLabel( Units [ idcar ] );
    return 1;
}
CMD:forumname( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 1 || pInfo[ playerid ][ pTester ] >= 1 )
    {
        new string[ 256 ];

        if ( sscanf( params, "s[256]", string ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Komanda naudojama: /forumname [VARDAS FORUME forum.ltrp.lt]" );
        format( pInfo[ playerid ][ pForumName ], 256, string );
        SendClientMessage( playerid, GRAD, "Jûsø forumo vardas sëkmingai pakeistas." );
    }
    return 1;
}
CMD:setcard( playerid, params[ ] )
{
    new string[ 256 ];

    if ( sscanf( params, "s[256]", string ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Komanda naudojama: /setcard [VEIKËJO APRAð YMAS]" );
    format( pInfo[ playerid ][ pCard ], 256, string );
    SendClientMessage( playerid, GRAD, "Pateiktas veikëjo apraðymas sëkmingai atnaujintas." );
    return 1;
}
CMD:ccard( playerid, params[ ] )
{
    new giveplayerid,
        string[ 256 ];

    if ( sscanf( params, "u", giveplayerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Komanda naudojama: /ccard [VEIKËJO ID]" );
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid,GRAD,"Veikëjas su nurodytu ID skaièiumi ðiuo metu nëra prisijungæs.");
    format(string,256,"* %s (( %s ))",pInfo[ giveplayerid ][ pCard ],GetPlayerNameEx(giveplayerid));
    SendClientMessage( playerid, COLOR_PURPLE, string );
    return 1;
}
CMD:me( playerid, params[ ] )
{
    new string[ 256 ];
    if ( sscanf( params, "s[256]", string ) ) return SendClientMessage( playerid ,GRAD, "{FF6347}Komanda naudojama: /me [VEIKËJO VEIKSMAS], pvz: /me pasilenkia ir uþsiriða batus." );
    if ( Mute[ playerid ] == true) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, ðiuo metu Jums yra uþdrausta kalbëtis (/mute), norëdami paðalinti draudimà susisiekite su Administratoriumi." );
    SetPlayerChatBubble( playerid, string, COLOR_PURPLE, 20.0, 10000);
    format             ( string, 256, "* %s %s" ,GetPlayerNameEx( playerid ), string );
    ProxDetector       ( 15.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
    if ( pInfo[ playerid ][ pJob ] == JOB_JACKER && ( LaikoTipas[playerid] == 5 || LaikoTipas[playerid] == 6 ) )
        ActionLog( pInfo[ playerid ][ pMySQLID ], string );
    return 1;
}
CMD:stats( playerid, params[ ] )
{
    #pragma unused params
    ShowStats(playerid, playerid);
    return 1;
}



CMD:leavegun(playerid)
{
	if(Mires[ playerid ] > 0)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite iðmesti ginklo bûdamas komos bûsenoje.");

    if(!GetPlayerWeapon(playerid))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, jûs nelaikote ginklo.");
    if(IsPlayerInAnyVehicle(playerid))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite iðmesti ginklo bûdami transporto priemonëje.");
    // MD ir PD negali iðmest.
    if(PlayerFaction(playerid) == 1 || PlayerFaction(playerid) == 2 || IsPlayerWeaponJobWeapon(playerid, GetPlayerWeapon(playerid)))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, jûs negalite iðmesti ginklo.");

    new index = -1;
    for(new i = 0; i < MAX_DROPPED_WEAPONS; i++)
        if(!IsValidDynamicObject(DroppedWeapons[ i ][ ObjectId ]) && !DroppedWeapons[ i ][ DissapearTimer ])
        {
            index = i;
            break;
        }
    if(index == -1)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, pasiektas ant þemës gulinèiø ginklø limitas. Pabandykite vëliau.");


    new Float:x, Float:y, Float:pz, Float:z,
        weaponid = GetPlayerWeapon(playerid);
    CheckWeaponCheat(playerid, weaponid, 0);
    if(!IsPlayerWeaponInDB(playerid, weaponid))
    {
        new s[128];
        format(s, sizeof(s),"ÞAidëjo %d(%s) ginklas %d neregistruotas DB.", playerid, GetName(playerid), weaponid);
        ACTestLog(s);
    }
    GetPlayerPos(playerid, x, y, pz);
    MapAndreas_FindZ_For2DCoord(x, y, z); // Magija

    // Taigi. Jei þmogus po tilto ar pnð, MapAndreas graþins VIRÐ tilto koordinates. 
    // Todël jeigu jis duoda mums koordinates aukðèiau nei þaidëjo Z, atimam ið þaidëjo Z ðiektiek.
    if(pz < z)
        DroppedWeapons[ index ][ ObjectId ] = CreateDynamicObject(GetWeaponObjectModel(weaponid), x, y, pz-1.0, 81.9390, -29.4950, random(360), .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid));
    else 
        DroppedWeapons[ index ][ ObjectId ] = CreateDynamicObject(GetWeaponObjectModel(weaponid), x, y, z, 81.9390, -29.4950, random(360),  .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid));

    DroppedWeapons[ index ][ DissapearTimer ] = SetTimerEx("OnDroppedWeaponDestroyed", DROPPED_WEAPON_DESTROY_DELAY*1000, false, "i", index);
    DroppedWeapons[ index ][ WeaponId ] = weaponid;
    DroppedWeapons[ index ][ Ammo ] = GetPlayerAmmo(playerid);
    DroppedWeapons[ index ][ CanBePickedUp ] = true;

    new string[60];
    GetWeaponName(weaponid, string, sizeof(string));
    format(string, sizeof(string), "iðmeta ginklà kuris atrodo kaip %s", string);
    cmd_ame(playerid, string);
    RemovePlayerWeapon(playerid, weaponid); // Yay jis ir ið DB iðtrins (sun)
    return 1;
}

CMD:grabgun(playerid)
{
	if(Mires[ playerid ] > 0)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite iðmesti ginklo bûdamas komos bûsenoje.");

    for(new i = 0; i < MAX_DROPPED_WEAPONS; i++)
    {
        if(!DroppedWeapons[ i ][ CanBePickedUp ])
            continue;
        if(!IsPlayerInRangeOfDynamicObject(playerid, 2.0, DroppedWeapons[ i ][ ObjectId ]))
            continue;

        if(IsPlayerInventoryFull(playerid))
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: jûsø inventoriuje nepakanka vietos, atsilaisvinkite ir bandykite dar kart." );
    

        GivePlayerItem(playerid, DroppedWeapons[ i ][ WeaponId ], DroppedWeapons[ i ][ Ammo ]);
        SendClientMessage ( playerid, COLOR_WHITE, " Ginklas sëkmingai ádëtas á inventoriø. ");
        PlayerPlaySound   ( playerid, 1057, 0.0, 0.0, 0.0);
        OnDroppedWeaponDestroyed(i);
        return 1;

    }
    return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, prie jûsø nëra jokio ginklo.");
}

forward OnDroppedWeaponDestroyed(index);
public OnDroppedWeaponDestroyed(index)
{
    DroppedWeapons[ index ][ CanBePickedUp ] = false;
    DestroyDynamicObject(DroppedWeapons[ index ][ ObjectId ]);
    KillTimer(DroppedWeapons[ index ][ DissapearTimer ]);
    DroppedWeapons[ index ][ ObjectId ] = -1;
    DroppedWeapons[ index ][ DissapearTimer ] = 0;
}

stock IsPlayerInRangeOfDynamicObject(playerid, Float:distance, objectid)
{
    if(!IsValidDynamicObject(objectid))
        return false;

    new Float:x, Float:y, Float:z;
    GetDynamicObjectPos(objectid, x, y, z);
    return IsPlayerInRangeOfPoint(playerid, distance, x, y, z);
}


CMD:leavejob( playerid, params[ ])
{
    #pragma unused params
    new string[ 126 ];
    if ( pInfo[ playerid ][ pJob ] == 0) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite palikti darbo, kurio neturite. Jûs jau bedarbis." );
    if ( pInfo[ playerid ][ pJobContr ] > 0 && pInfo[ playerid ][ pDonator ] == 0)
    {
        format           ( string, 126,"{FF6347}Jûs negalite palikti savo darbovietës neatidirbæ nustatyo darbo kontrakto.",pInfo[playerid][pJobContr]);
        SendChatMessage( playerid, GRAD, string);
        return 1;
    }
    pInfo[ playerid ][ pJob      ] = JOB_NONE;
    pInfo[ playerid ][ pJobLevel ] = 0;
    pInfo[ playerid ][ pJobSkill ] = 0;
    pInfo[ playerid ][ pJobHours ] = 0;
    SendClientMessage(playerid, COLOR_WHITE, " Sveikiname, Jûs sëkmingai iðëjote ið savo darbovietos.");
    return 1;
}
CMD:leavefaction(playerid)
{
    pInfo[playerid][pLead   ] = 0;
    pInfo[playerid][pMember ] = 0;
    pInfo[playerid][pRank   ] = 0;
    pInfo[playerid][pSpawn  ] = DefaultSpawn;
    RemovePlayerJobWeapons(playerid);
    SaveAccount(playerid);
    SendClientMessage(playerid, COLOR_WHITE, " Sveikiname, Jûs sëkmingai iðëjote ið savo darbovietos.");
    return 1;
}

/*
CMD:prescribe( playerid, params [ ] )
{
    new
        drug [ 15 ],
        drug_id,
        drug_amount,
        drug_curramount,
        drug_hasdrug;

    if( sscanf( params, "s[15]d", drug, drug_amount ) )
    {
        SendClientMessage( playerid, COLOR_WHITE,"/prescribe [NARKOTIKAS] [KIEKIS]" );
        SendClientMessage ( playerid, COLOR_WHITE, " Galimi narkotikø variantai: Metamfetaminas, Kokainas, Zole, Heroinas, Amfa, Opijus, PCP, Extazy, Krekas" );
    }
        else
    {

        if( drug_amount < 1 ) return true;

        new
            array [ 9 ][ 2 ][ 15 ] =
        {
            { "Metamfetaminas", "87"    },
            { "Amfa", "86"      },
            { "Kokainas", "88"  },
            { "Zole", "61"      },
            { "Heroinas", "64"  },
            { "Opijus", "210"   },
            { "PCP", "208"      },
            { "Extazy", "207"   },
            { "Krekas", "209"   }
        };

        for ( new n = 0; n < 9; n++ )
        {
            if( !strcmp( drug, array [ n ][ 0 ], true ) )
            {
                drug_id = strval( array [ n ][ 1 ] );
                drug_hasdrug = PlayerHasItemInInvEx( playerid, drug_id );

                if( drug_hasdrug < INVENTORY_SLOTS )
                {
                    drug_curramount = InvInfo [ playerid ][ drug_hasdrug ][ iAmmount ];

                    if( drug_curramount > drug_amount )
                    {
                        if( AddItemToInventory( playerid, drug_id, drug_amount ) )
                        {
                            InvInfo [ playerid ][ drug_hasdrug ][ iAmmount ] = drug_curramount - drug_amount;

                            SendClientMessage( playerid, COLOR_WHITE,"Nurodytas narkotikas buvo sëkmingai perskirtas á pasirinktà kieká." );
                        }
                            else
                        {
                            SendClientMessage( playerid, COLOR_GRAD, "{FF6347}Jûsø inventoriujë nëra pakankamai vietos, kad atliktumët ðá veiksmà." );
                        }

                    }
                        else
                    {
                        SendClientMessage ( playerid, COLOR_GRAD, "{FF6347}Negalite perskirti tiek narkotikø, kuriø neturite." );
                    }
                }
                    else
                {
                    SendClientMessage( playerid, COLOR_GRAD, "{FF6347}Jûs neturite ðio narkotiko su savimi." );
                }
            }
        }

    }

    return true;
}
*/
/*
CMD:sumtogether( playerid, params [ ] )
{
    new
        drug [ 15 ],
        drug_id,
        drug_amount,
        drug_curramount,
        drug_hasdrug,
        drug_hasdrug2;

    if( sscanf( params, "s[15]d", drug, drug_amount ) )
    {
        SendClientMessage( playerid, COLOR_WHITE, " /sumtogether [NARKOTIKAS] [KIEKIS]" );
        SendClientMessage ( playerid, COLOR_WHITE, " Galimi narkotikai: Metamfetaminas, Kokainas, Zole, Heroinas, Amfa, Opijus, PCP, Extazy, Krekas" );
    }
        else
    {

        if( drug_amount < 1 ) return true;

        new
            array [ 9 ][ 2 ][ 15 ] =
        {
            { "Metamfetaminas", "87"    },
            { "Amfa", "86"      },
            { "Kokainas", "88"  },
            { "Zole", "61"      },
            { "Heroinas", "64"  },
            { "Opijus", "210"   },
            { "PCP", "208"      },
            { "Extazy", "207"   },
            { "Krekas", "209"   }
        };

        for ( new n = 0; n < 9; n++ )
        {
            if( !strcmp( drug, array [ n ][ 0 ], true ) )
            {
                drug_id = strval( array [ n ][ 1 ] );
                drug_hasdrug = PlayerHasItemInInvEx( playerid, drug_id ),
                drug_hasdrug2 = PlayerHasItemInInvExDrugs( playerid, drug_id, drug_hasdrug );

                if( drug_hasdrug < INVENTORY_SLOTS && drug_hasdrug2 < INVENTORY_SLOTS )
                {
                    drug_curramount = InvInfo [ playerid ][ drug_hasdrug ][ iAmmount ];

                    if( drug_curramount >= drug_amount )
                    {
                        if(drug_curramount == drug_amount)
                        ClearInvSlot ( playerid, drug_hasdrug );
                        else
                        InvInfo [ playerid ][ drug_hasdrug ][ iAmmount ] -= drug_amount;

                        InvInfo [ playerid ][ drug_hasdrug2 ][ iAmmount ] += drug_amount;
                        SendClientMessage( playerid, COLOR_WHITE, "Pasirinktas narkotikas buvo sëkmingai sujungtas." );
                    }
                        else
                    {
                        SendClientMessage ( playerid, COLOR_GRAD, "{FF6347}Klaida, Jûs neturite tiek narkotikø kiek nurodëte" );
                    }
                    }
                        else
                    {
                        SendClientMessage( playerid, COLOR_GRAD, "{FF6347}Klaida, Jûs nurodëte narkotikà, kurio neturite." );
                    }
                }
            }

    }

    return true;
}
*/
CMD:make( playerid, params[ ] )
{
    new item,
        item2,
        string[ 126 ];
    if ( sscanf( params, "dd", item, item2 ) )
    {
        SendClientMessage( playerid ,COLOR_GREEN, " |_____________________/make informacija________________|");        
        SendClientMessage( playerid ,GRAD, "  KOMANDOS NAUDOJIMAS: /make [GAMINAMAS PRODUKTAS][KIEKIS]");
        SendClientMessage( playerid ,GRAD, "  GAMINAMI PRODUKTAI: 1 - Ginklas | 2 - Degusis skystis");
        return 1;
    }
    if ( item2 < 1 ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Gaminamas kiekis negali bøti maþesnis negu 1.");
    switch( item )
    {
        case 1:
        {
            if(pInfo[ playerid ][ pJob ] != JOB_GUN) 
                return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûs neturite galimybës gamintis ðaunamojo ginklo..");

            if(!IsItemInPlayerInventory(playerid, ITEM_MATS)) 
                return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite gamintis pasirinkto produkto neturëdami atitinkamø daliø.");

            if(IsPlayerHaveManyGuns(playerid, item2)) 
                return true;

            new bool:pasigamino = true,
                tikimybe = random( 100 );
            switch( tikimybe )
            {
                case 20..30: pasigamino = false;
                case 60..70: pasigamino = false;
                case 90..100: pasigamino = false;
            }

            switch( item2 )
            {
                case 23:
                {
                    if(GetPlayerItemAmount(playerid, ITEM_MATS) < 150 )
                        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite gamintis pasirinkto produkto neturëdami atitinkamø daliø.");

                    if ( pasigamino == false )
                    {
                        SendClientMessage(playerid, COLOR_RED, "Klaida, ginklo pagaminimas buvo atðauktas, kadangi dalys ir netinkamos." );
                        GivePlayerItem(playerid, ITEM_MATS, -75);
                        PlayerPlaySound(playerid, 34042, 0.0, 0.0, 0.0);
                        return 1;
                    }
                    GivePlayerItem(playerid, ITEM_MATS, -150);

                    GivePlayerWeapon( playerid, 23, 64 ); // Silenced
                }
                case 24:
                {
                    if(GetPlayerItemAmount(playerid, ITEM_MATS) < 200 )
                        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite gamintis pasirinkto produkto neturëdami atitinkamø daliø.");
                    if ( pasigamino == false )
                    {
                        SendClientMessage( playerid, COLOR_RED, "Klaida, ginklo pagaminimas buvo atðauktas, kadangi dalys ir netinkamos." );
                        GivePlayerItem(playerid, ITEM_MATS, -100);
                        PlayerPlaySound( playerid, 34042, 0.0, 0.0, 0.0);
                        return 1;
                    }
                    GivePlayerItem(playerid, ITEM_MATS, -200);

                    GivePlayerWeapon( playerid, 24, 70 ); // Deagle
                }
                case 25:
                {
                    if(GetPlayerItemAmount(playerid, ITEM_MATS) < 400 )
                        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite gamintis pasirinkto produkto neturëdami atitinkamø daliø.");
                    if ( pasigamino == false )
                    {
                        SendClientMessage( playerid, COLOR_RED, "Klaida, ginklo pagaminimas buvo atðauktas, kadangi dalys ir netinkamos." );
                        GivePlayerItem(playerid, ITEM_MATS, -200);
                        PlayerPlaySound( playerid, 34042, 0.0, 0.0, 0.0);
                        return 1;
                    }
                    GivePlayerItem(playerid, ITEM_MATS, -400);

                    GivePlayerWeapon( playerid, 25, 50 ); //  Shotgun
                }
                case 28:
                {
                    if(GetPlayerItemAmount(playerid, ITEM_MATS) < 350 )
                        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite gamintis pasirinkto produkto neturëdami atitinkamø daliø.");
                    if( pasigamino == false )
                    {
                        SendClientMessage( playerid, COLOR_RED, "Klaida, ginklo pagaminimas buvo atðauktas, kadangi dalys ir netinkamos." );
                        GivePlayerItem(playerid, ITEM_MATS, -175);
                        PlayerPlaySound( playerid, 34042, 0.0, 0.0, 0.0);
                        return 1;
                    }
                    GivePlayerItem(playerid, ITEM_MATS, -350);

                    GivePlayerWeapon( playerid, 28, 300 ); // UZI
                }
                case 29:
                {
                    if (GetPlayerItemAmount(playerid, ITEM_MATS) < 500 )
                        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite gamintis pasirinkto produkto neturëdami atitinkamø daliø.");
                    if ( pasigamino == false )
                    {
                        SendClientMessage( playerid, COLOR_RED, "Klaida, ginklo pagaminimas buvo atðauktas, kadangi dalys ir netinkamos." );
                        GivePlayerItem(playerid, ITEM_MATS, -250);
                        PlayerPlaySound( playerid, 34042, 0.0, 0.0, 0.0);
                        return 1;
                    }
                    GivePlayerItem(playerid, ITEM_MATS, -500);

                    GivePlayerWeapon( playerid, 29, 300 ); // MP5
                }
                case 30:
                {
                    if (GetPlayerItemAmount(playerid, ITEM_MATS) < 700 )
                        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite gamintis pasirinkto produkto neturëdami atitinkamø daliø.");
                    if ( pasigamino == false )
                    {
                        SendClientMessage( playerid, COLOR_RED, "Klaida, ginklo pagaminimas buvo atðauktas, kadangi dalys ir netinkamos." );
                        GivePlayerItem(playerid, ITEM_MATS, -350);
                        PlayerPlaySound( playerid, 34042, 0.0, 0.0, 0.0);
                        return 1;
                    }
                    GivePlayerItem(playerid, ITEM_MATS, -700);

                    GivePlayerWeapon( playerid, 30, 300 ); // AK-47
                }
                case 32:
                {
                    if(GetPlayerItemAmount(playerid, ITEM_MATS) < 400 )
                        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite gamintis pasirinkto produkto neturëdami atitinkamø daliø.");
                    if ( pasigamino == false )
                    {
                        SendClientMessage( playerid, COLOR_RED, "Klaida, ginklo pagaminimas buvo atðauktas, kadangi dalys ir netinkamos." );
                        GivePlayerItem(playerid, ITEM_MATS, -200);
                        PlayerPlaySound( playerid, 34042, 0.0, 0.0, 0.0);
                        return 1;
                    }
                    GivePlayerItem(playerid, ITEM_MATS, -400);

                    GivePlayerWeapon( playerid, 32, 300 ); // Tec-9
                }
                case 33:
                {
                    if (GetPlayerItemAmount(playerid, ITEM_MATS) < 700 )
                        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite gamintis pasirinkto produkto neturëdami atitinkamø daliø.");
                    if ( pasigamino == false )
                    {
                        SendClientMessage( playerid, COLOR_RED, "Klaida, ginklo pagaminimas buvo atðauktas, kadangi dalys ir netinkamos." );
                        GivePlayerItem(playerid, ITEM_MATS, -350);
                        PlayerPlaySound( playerid, 34042, 0.0, 0.0, 0.0);
                        return 1;
                    }
                    GivePlayerItem(playerid, ITEM_MATS, -700);

                    GivePlayerWeapon( playerid, 33, 20 ); // Country Rifle
                }
                case 34:
                {
                    if (GetPlayerItemAmount(playerid, ITEM_MATS) < 1500 )
                        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite gamintis pasirinkto produkto neturëdami atitinkamø daliø.");
                    if ( pasigamino == false )
                    {
                        SendClientMessage( playerid, COLOR_RED, "Klaida, ginklo pagaminimas buvo atðauktas, kadangi dalys ir netinkamos." );
                        GivePlayerItem(playerid, ITEM_MATS, -750);
                        PlayerPlaySound( playerid, 34042, 0.0, 0.0, 0.0);
                        return 1;
                    }
                    GivePlayerItem(playerid, ITEM_MATS, -1500);
                    GivePlayerWeapon( playerid, 34, 20 ); // Sniper
                }
                default: return
                SendClientMessage( playerid, COLOR_GRAD, "{FF6347} Nurodytas klaidingas ginklo ID.");
            }
            new wepname[ MAX_PLAYER_NAME ];
            GetWeaponName    ( item2, wepname, MAX_PLAYER_NAME );
            format           ( string, 43, "Sveikinome, Jums sëkmingai pavyko pasigaminti %s", wepname );
            SendClientMessage( playerid, COLOR_WHITE, string       );
        }
        case 2:
        {
            if(!IsItemInPlayerInventory(playerid, ITEM_FUEL)) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite naudoti ðio veiksmo neturëdami degalø bakelio invetoriuje.." );
            if(!IsItemInPlayerInventory(playerid, ITEM_PAPER)) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite naudoti ðio veiksmo neturëdami laikraðèio." );

            if(IsPlayerInventoryFull(playerid))
                return SendClientMessage(playerid, COLOR_FADE2, "{FF6347}Klaida, Jûsø inventoriuje nëra laisvos vietos, kad atliktumët ðá veiksmà.");

            GivePlayerItem(playerid, ITEM_MOLOTOV, 1);

            GivePlayerItem(playerid, ITEM_FUEL, -1);
            GivePlayerItem(playerid, ITEM_PAPER, -1);

            format(string, sizeof(string), "* %s atsukà rankose turimà bakelá ir ákiðà susukta laikraðtá á já." ,GetPlayerNameEx( playerid ));
            ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
            return 1;
        }
    }
    return 1;
}
CMD:buyseeds( playerid, params[ ] )
{
    #pragma unused params
    if(!Data_IsPlayerInRangeOfCoords(playerid, 5.0, "job_dealer_seeds_buy"))
        return SendClientMessage( playerid, GRAD, "Gaila, bet ðiuo metu aplinkui Jus nëra vietos susijusios su juodajà rinka. Ieðkokite toliau.");
    if ( PlayerMoney[ playerid ] < 200 ) return SendClientMessage( playerid ,GRAD, "{FF6347}Klaida, Jûs neturite pakankamai grynøjø pinigø. ");
    if ( pInfo[ playerid ][ pJob ] != JOB_DRUGS) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite naudotis ðia galimybe nebødamas narkotiku prekeiviu." );

    if(IsPlayerInventoryFull(playerid))
        return SendClientMessage(playerid, COLOR_FADE2, "{FF6347}Klaida, Jûsø inventoriuje nëra laisvos vietos, kad atliktumët ðá veiksmà..");

    GivePlayerItem(playerid, ITEM_SEED, 10); 

    GivePlayerMoney( playerid, -200);
    SendClientMessage( playerid, COLOR_WHITE, " Sëkmingai nusipirkote 10 þolës augalo sëklø, kurios kainavo 200$.");
    return 1;
}
CMD:pay( playerid, params[ ] )
{
    new giveplayerid,
        items,
        string[ 90 ],
        IP[ 16 ],
        IP2[ 16 ];
        
    if ( sscanf( params, "ud", giveplayerid, items ) )
    return SendClientMessage( playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /pay [VEIKËJO ID] [PINIGØ SUMA]");
    if ( playerid == giveplayerid ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite naudoti komandos sau." );
	if ( pInfo[ playerid ][ pLevel ] < 2 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite naudotis ðia komanda neturëdami antro lygio." );	
    if ( !IsPlayerConnected( giveplayerid ) ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodyto ID nëra prisijungæs serveryje.");
    if ( !PlayerToPlayer   ( 5.0, playerid, giveplayerid ) ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, komanda galite naudoti jei þaidëjas yra ðalia Jûsø.");
    if ( items < 1 || items > 999999 ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, perduodama suma negali bøti maþesnë nei 1$ ar didesnë nei 999999$" );
    if ( PlayerMoney[ playerid ] < items ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, savo rankose neturi tokios nurodytos sumos. ");

    GetPlayerIp( playerid, IP, 16 );
    GetPlayerIp( giveplayerid, IP2, 16 );

    if( !strcmp( IP, IP2, true ) || pInfo[ playerid ][ pUcpID ] == pInfo[ giveplayerid ][ pUcpID ] )
        return true;

    GivePlayerMoney( playerid, -items );
    GivePlayerMoney( giveplayerid, items );

    LoopingAnim( playerid, "DEALER", "shop_pay", 4.0, 0, 1, 1, 1, 0 );
    format           ( string, sizeof(string), " Sveikiname, pasirinktam veikëjui %s buvo perduota. %d$.", GetPlayerNameEx(giveplayerid), items );
    SendClientMessage( playerid, COLOR_WHITE, string );
    format           ( string, sizeof(string), " Kàtik sëkmingai gavote %d$ ið veikëjo %s.", items, GetPlayerNameEx(playerid) );
    SendClientMessage( giveplayerid, COLOR_WHITE, string );

    if ( items > 49999 )
    {
        format( string, sizeof(string), "AdmWarn: veikëjas (%s) naudodamas (/pay) sumokëjo veikëjui (%s), %d$.", GetName( playerid ), GetName( giveplayerid ), items );
        SendAdminMessage( COLOR_ADM, string );
    }

    PayLog           ( pInfo[ playerid ][ pMySQLID ], 7, pInfo[ giveplayerid ][ pMySQLID ], items );
    PayLog           ( pInfo[ giveplayerid ][ pMySQLID ], 8, pInfo[ playerid ][ pMySQLID ], items );
    SaveAccount      ( playerid );
    SaveAccount      ( giveplayerid );
    return 1;
}

CMD:buymats( playerid, params[ ] )
{
    if(!Data_IsPlayerInRangeOfCoords(playerid, 5.0, "job_dealer_material_buy")) 
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs nesate paketø pirkimo vietoje. " );
    if(pInfo[ playerid ][ pJob ] != JOB_GUN ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs nesate ginklø prekeivis. " );
    new mat,
        string[ 70 ];

    if(sscanf( params, "d", mat) ) return SendClientMessage( playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /buymats [kiekis]");
    if(Mats < mat ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: ðiuo metu tiek materijø neturime, bandykite vëliau.");
    if(PlayerMoney[ playerid ] < mat * 5 ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: neturite pakankamai pinigø.");
    if(mat < 0 ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Negalima pirkti maþiau negu 0 ");

    if(IsPlayerInventoryFull(playerid))
        return SendClientMessage(playerid, COLOR_FADE2, "{FF6347}Perspëjimas: jûsø inventoriuje nepakanka vietos, atsilaisvinkite ir bandykite dar kart.");

    GivePlayerItem(playerid, ITEM_MATS, mat);
    GivePlayerMoney( playerid, - mat * 2 );
    Mats -= mat;
    format          ( string, 70, " Nusipirkai %d paketø, bûk atsargus kad policija nepagautu. ", mat );
	SendClientMessage( playerid, COLOR_WHITE, string );
    SaveAccount( playerid );
    return 1;
}
CMD:weaponlist( playerid, params[ ] )
{
    #pragma unused params
	SendClientMessage( playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /make [2][GINKLO ID]");
	SendClientMessage( playerid ,GRAD, "GINKLAI: ID:23 (9mm su duslintuvu, 150 kulkø) | ID:24 (Desert Eagle,200 kulkø)");
	SendClientMessage( playerid ,GRAD, "GINKLAI: ID:25 (Shotgun, 400 kulkø) | ID:28 (UZI, 350 kulkø) | ID:29 (MP5, 500kulkø)");
	SendClientMessage( playerid ,GRAD, "GINKLAI: ID:30 (AK-47, 700 kulkø)");
	SendClientMessage( playerid ,GRAD, "GINKLAI: ID:32 (Tec9, 400 kulkø) | ID:33 (Rifle 1300 kulkø) | ID:34 (Sniper,1500 kulkø)");
    return 1;
}
CMD:fdgear( playerid, params[ ] )
{
    #pragma unused params
    if ( PlayerFaction( playerid ) != 2 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite naudoti ðio veiksmo nebødami ugniagesiø departamento darbuotoju." );
    ShowPlayerDialog( playerid, 159, DIALOG_STYLE_LIST,"{FFFFFF}Gaisrininkø apranga",
        "Gaisrininkø ðalmas 1\n\
        Gaisrininkø ðalmas 2\n\
        Kaukë", "Pasiimti", "Atðaukti" );
    return 1;
}
CMD:pgear( playerid, params[ ] )
{
    #pragma unused params
    if ( UsePDCMD( playerid ) == 0 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo nedirbdami policijos departamente." );
    if(!PDJOBPlace(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, norëdami persirengti privalote bøti persirengimo kabinoje.");
    ShowPlayerDialog( playerid, 104, DIALOG_STYLE_LIST,"{FFFFFF}Pareigøno apranga",
        "Policijos kepurë 1\n\
        Policijos kepurë 2\n\
        Policijos kepurë 3\n\
        Policijos akiniai\n\
        Policijos kepurë 4\n\
        Policijos kepurë 5\n\
        Skydas", "Pasiimti", "Atðaukti" );
    return 1;
}
CMD:drag( playerid, params[ ] )
{
    new
        giveplayerid,
        string[ 128 ];

    if(PlayerFaction( playerid ) != 1 && PlayerFaction( playerid ) != 2 ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo nedirbdami policijos departamente.");
    if(sscanf( params, "u", giveplayerid)) return SendClientMessage( playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /drag [VEIKËJO ID]");
    if(Mires[playerid] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûsø veikëjas ðiuo metu yra kritinëje arba komos bûsenoje.");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
    if(!PlayerToPlayer(10,playerid,giveplayerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite naudoti ðio veiksmo su veikëju, kuris nëra ðalia Jûsø. ");
    if(!GetPVarInt(giveplayerid, "Drag"))
    {
        if(IsPlayerInAnyVehicle(giveplayerid) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjas yra tr. priemonëje, o Jûs ne.");
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(giveplayerid) == PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûs esate tr. priemonëje, o nurodytas veikëjas ne");
        SetPVarInt(giveplayerid, "Drag", true);
        format(string, sizeof(string), "* %s pradëjo tempti/traukti %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
        ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        ShowInfoText(giveplayerid, "~w~Tempiamas", 2500);
        SetTimerEx("CuffsTime", 1000, false, "ii",giveplayerid,playerid);
        TogglePlayerControllable(giveplayerid, 0);
        return 1;
    }
    else
    {
        if(IsPlayerInAnyVehicle(giveplayerid) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjas yra tr. priemonëje, o Jûs ne.");
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(giveplayerid) == PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûs esate tr. priemonëje, o nurodytas veikëjas ne");
        SetPVarInt(giveplayerid, "Drag", false);
        format(string, sizeof(string), "* %s nustotojo tempti/traukti %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
        ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        ShowInfoText(giveplayerid, "~w~Nebe tempiamas", 2500);
        TogglePlayerControllable(giveplayerid, 1);
        return 1;
    }
}
CMD:m(playerid, params[])
{
    return cmd_megaphone(playerid, params);
}
CMD:megaphone( playerid, params[ ] )
{
    new
        gMessage[ 64 ],
        string[ 256 ];
        
    if(UsePDCMD(playerid) != 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo nedirbdami policijos departamente.");
    if(sscanf( params, "s[64]", gMessage)) return SendClientMessage( playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /m(egaphone) [SKELBIAMAS TEKSTAS]");
    if(Mires[playerid] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûsø veikëjas ðiuo metu yra kritinëje arba komos bûsenoje.");
    if(Mute[playerid] == true) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðiuo metu Jums yra uþdrausta kalbëtis (/mute), norëdami paðalinti draudimà susisiekite su Administratoriumi.");
    new idcar = GetNearestVehicle(playerid, 2.0);
    if(!IsValidVehicle(idcar) || sVehicles[ idcar ][ Faction ] != 2) 
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, turite bûti policijos transporto priemonëje arba ðalia jos.");

    format(string, sizeof(string), "[LSPD] %s!", gMessage);
    ProxDetector(40.0, playerid, string,COLOR_POLICEM,COLOR_POLICEM,COLOR_POLICEM,COLOR_POLICEM,COLOR_POLICEM);
    return 1;
}
CMD:killcheckpoint(playerid, params[])
{
    if ( pInfo[ playerid ][ pJob ] != JOB_TRUCKER && !UsePDCMD( playerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Atliekant veiksmà ávyko klaida. " );
    if ( UsePDCMD( playerid ) )
    {
        if ( !GetPVarInt( playerid, "BACKUP") )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, Jûs ðiuo metu nekvietëte jokio pastiprinimo." );
    }
    DisablePlayerCheckpoint( playerid );
    Checkpoint[ playerid ] = CHECKPOINT_NONE;
    SetPVarInt( playerid, "BACKUP", INVALID_PLAYER_ID );
    return 1;
}
CMD:abk( playerid, params[ ] )
{
    new
        giveplayerid,
        Float:Kords[ 3 ];
    if ( !UsePDCMD( playerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo nedirbdami policijos departamente." );
    if ( sscanf( params, "u", giveplayerid ) )  return SendClientMessage( playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /abk [veikëjo ID]");
    if(IsPlayerNPC(giveplayerid)) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite naudoti komandos ant NPC boto. ");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
    if ( pInfo[ giveplayerid ][ pBackup ] == 0 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, Jûs ðiuo metu nekvietëte jokio pastiprinimo. " );

    GetPlayerPos( giveplayerid, Kords[ 0 ], Kords[ 1 ], Kords[ 2 ] );
    SetPlayerCheckPointEx( playerid, CHECKPOINT_BACKUP, Kords[ 0 ], Kords[ 1 ], Kords[ 2 ], 5.0 );
    SetPVarInt( playerid, "BACKUP", giveplayerid );
    return 1;
}
CMD:bk( playerid, params[ ] )
{
    cmd_backup( playerid, "" );
    return 1;
}
CMD:backup( playerid, params[ ] )
{
    #pragma unused params
    new
        string[ 128 ];
        
    if ( UsePDCMD( playerid ) != 1 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo nedirbdami policijos departamente." );
    if ( Mires[ playerid ] > 0 )     return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, Jûsø veikëjas ðiuo metu yra kritinëje arba komos bûsenoje." );
    format(string, sizeof(string), "|DIÈPEÈERINË PRANEÐA| DËMESIO VISIEMS PADALINIAMS, pareigûnas %s praðo skubaus pastiprinimo, vietos kordinatës nustatytos Jûsø GPS.", GetPlayerNameEx(playerid));
    if(pInfo[playerid][pBackup] == 0)
    {
        foreach(Player,i)
        {
            if ( pInfo[ i ][ pMember ] == pInfo[ playerid ][ pMember ] )
            {
                format( string, sizeof(string), "|DIÈPEÈERINË PRANEÐA| DËMESIO VISIEMS PADALINIAMS, pareigûnas %s praðo skubaus pastiprinimo, vietos kordinatës nustatytos Jûsø GPS..", GetPlayerNameEx( playerid ) );
                SendClientMessage( i, COLOR_LIGHTRED2, string );
                format( string, sizeof(string), "|DIÈPEÈERINË PRANEÐA| Jeigu galite atvykti á pastiprinimà raðykite praneðkite dipeèerinei. (/abk %d)", playerid );
                SendClientMessage( i, COLOR_LIGHTRED2, string );
                pInfo[ playerid ][ pBackup ] = 1;
            }
        }
        return 1;
    }
    else if (pInfo[ playerid ][ pBackup ] == 1 )
    {
        foreach(Player,i)
        {
            if ( GetPVarInt( i, "BACKUP" ) == playerid )
            {
                DisablePlayerCheckpoint( i );
                Checkpoint[ i ] = CHECKPOINT_NONE;
                SetPVarInt( i, "BACKUP", INVALID_PLAYER_ID );
            }
            if ( pInfo[ i ][ pMember ] == pInfo[ playerid ][ pMember ])
            {
                format ( string, 126, "|DIÈPEÈERINË PRANEÐA| DëMESIO, pareigûnas %s atðaukë pastiprinimo praðymà.", GetPlayerNameEx( playerid ) );
                SendClientMessage( i, COLOR_LIGHTRED2, string );
                pInfo[ playerid ][ pBackup ] = 0;
            }
        }
        return 1;
    }
    return 1;
}

CMD:ramcar( playerid, params[ ] )
{
    #pragma unused params
    if(UsePDCMD(playerid) != 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo nedirbdami policijos departamente.");
    if(pInfo[playerid][pRank] < 2)       return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, komanda leidþiama naudotis 2 rango pareigønams.");
    new car = INVALID_VEHICLE_ID;
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        car = GetPlayerVehicleID( playerid );
    else
        car = GetNearestVehicle( playerid, 5.0 );
    if ( car == INVALID_VEHICLE_ID ) return SendClientMessage( playerid, COLOR_LIGHTRED, " Klaida, aplink Jus nëra jokios tr. priemonës.");

    if(cInfo[ car ][ cOwner ] != 0 && cInfo[ car ][ cLock ] == 1)
    {
        ShowInfoText(playerid, "~w~ Tr. priemones dureles islauztos", 5000);
        LockVehicle(car, 0);
        VehicleAlarm(car, 0);
    }
    return 1;
}
CMD:heal( playerid, params[ ] )
{
    new
        giveplayerid,
        string[ 128 ];
        
    if(PlayerFaction( playerid ) != 2) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite naudoti ðio veiksmo nebødami mediku.");
    if(sscanf( params, "u", giveplayerid)) return SendClientMessage( playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /heal [VEIKËJO ID]");
    if(giveplayerid == playerid) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûs negalite naudoti komandos ant savæs.");
    if(!IsPlayerConnected(giveplayerid))  return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
    if(!PlayerToPlayer(10.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite naudoti ðio veiksmo su veikëju, kuris nëra ðalia Jûsø.");
    SetPlayerHealth( giveplayerid, 100);
    if(pInfo[giveplayerid][pLiga] > 0)
    {
        format(string, sizeof(string), "Daktaras Jums davë vaistu dël ligos: %s. Dabar pradësite sveikti ir Jûsø sveikata gerës.",Ligos[pInfo[giveplayerid][pLiga]]);
        SendClientMessage(giveplayerid, COLOR_GREEN,string);
        pInfo[giveplayerid][pLiga] = 0;
        if(PlayerMoney[ giveplayerid ] > 50)
        {
            pInfo[playerid][pPayCheck] += 50;
            GivePlayerMoney(giveplayerid,-50);
        }
        return 1;
    }
    if(Mires[giveplayerid] > 0)
    {
        Mires[giveplayerid] = 0;
        TogglePlayerControllable(giveplayerid, true);
        SendClientMessage(giveplayerid, COLOR_WHITE,"Daktaras sëkmingai padëjo Jums iðgyti, bei pasveikti. Gydymo iðlaidos 50$.");
        if(PlayerMoney[ giveplayerid ] > 50)
        {
            pInfo[playerid][pPayCheck] += 50;
            GivePlayerMoney(giveplayerid,-50);
        }
        ApplyAnimation(giveplayerid, "CRACK", "null", 0.0, 0, 0, 0, 0, 0);
        ApplyAnimation(playerid, "MEDIC", "CPR", 4.0, 0, 0, 0, 0, 0 );
        DestroyDynamic3DTextLabel( DeathLabel[giveplayerid] );
        return 1;
    }
    return 1;
}
CMD:rrb( playerid, params[ ] )
{
    cmd_removeroadblock( playerid, "" );
    return 1;
}
CMD:removeroadblock( playerid, params[ ] )
{
    #pragma unused params
    if(PlayerFaction( playerid ) != 1 && PlayerFaction( playerid ) != 2 && PlayerFaction( playerid ) != 5)    
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo nedirbdami policijos ar medicinos departamente.");
    if(pInfo[playerid][pRank] < 2) 
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, komanda leidþiama naudotis tik nuo 2 rango.");
    for ( new i = 0; i < MAX_ROADBLOCKS; i++ )
    {
        if ( RoadBlocks[ i ] > 0 )
        {
            new
                Float:rX,
                Float:rY,
                Float:rZ;

            GetDynamicObjectPos( RoadBlocks[ i ], rX, rY, rZ );

            if ( IsPlayerInRangeOfPoint( playerid, 5.0, rX, rY, rZ ) )
            {
                RemoveRoadBlock( i );
                SendClientMessage(playerid, COLOR_GREEN, "Kelio uþtvara/blokada buvo sëkmingai paðalinta/paiimta.");
                return 1;
            }
        }
    }
    return 1;
}
CMD:rb( playerid, params[ ] )
{
    cmd_roadblock( playerid, params );
    return 1;
}
CMD:roadblock( playerid, params[ ] )
{
    new
        giveplayerid;
    if(PlayerFaction( playerid ) != 1 && PlayerFaction( playerid ) != 2 && PlayerFaction( playerid ) != 5)          
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo nedirbdami policijos ar medicinos departamente.");
    if(pInfo[playerid][pRank] < 2)       
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, komanda leidþiama naudotis tik nuo 2 rango.");
    if(sscanf( params, "d", giveplayerid)) 
        return SendClientMessage( playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /roadblock [UþTVAROS/BLOKADOS MODELIO ID]");
    if(IsPlayerInAnyVehicle(playerid))  
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, kelio uþtvaros/blokados negalite padëti sedëdami tr. priemonëje.");
    if(Mires[playerid] > 0)              
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûsø veikëjas ðiuo metu yra kritinëje arba komos bûsenoje.");

    if ( PlacePlayerRoadBlockInPos( playerid, giveplayerid ) )
    {
        SendClientMessage( playerid, COLOR_WHITE, "Nurodyta kelio uþtvara/blokada sëkmingai pastatyta nurodytoje vietoje." );
        SendClientMessage       ( playerid, COLOR_WHITE, "Norëdami paðalinti kelio uþtvara/blokada naudokite komanda - /rrb" );
    }
    return 1;
}
CMD:jobid( playerid, params[ ] )
{
    new
        giveplayerid,
        string[ 64 ];
    if(UsePDCMD(playerid) != 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo nedirbdami policijos departamente.");
    if(sscanf( params, "u", giveplayerid)) return SendClientMessage( playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /jobid [VEIKËJO ID]");
    if(Mires[playerid] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûsø veikëjas ðiuo metu yra kritinëje arba komos bûsenoje.");
    if(!IsPlayerConnected(giveplayerid))  return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
    if(!PlayerToPlayer(5.0,playerid,giveplayerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite naudoti ðio veiksmo su veikëju, kuris nëra ðalia Jûsø. ");
    SendClientMessage(giveplayerid,COLOR_GREEN2, "|______________LOS SANTOS DEPARTAMENTAS______________|");
    SendClientMessage(giveplayerid,COLOR_GREEN2, "|______________  PAREIGðªNO PAþYMëJIMAS ______________|");
    format(string,sizeof(string),"Pareigøno vardas: %s     Pavardë: %s",GetPlayerFirstName(playerid),GetPlayerLastName(playerid));
    SendClientMessage(giveplayerid,COLOR_WHITE, string);
    format(string,sizeof(string),"Pareigøno pareigos/rangas: %s     Amþius: %d",GetPlayerRangName( playerid ),pInfo[playerid][pAge]);
    SendClientMessage(giveplayerid,COLOR_WHITE, string);
    return 1;
}
CMD:takemoney( playerid, params[ ] )
{
    new
        giveplayerid,
        mony,
        string[ 126 ];
        
    if(pInfo[playerid][pLead] != 6) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite naudotis ðiuo veiksmu nebødavo miesto meru.");
    if(sscanf( params, "ud", giveplayerid, mony)) return SendClientMessage( playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /takemoney [3 LYGIO ADMINISTRATORIAUS ID][SUMA]. Didþiausia suma, kurià galite nuiimti - 50.000$");
    if(!IsPlayerConnected(giveplayerid))  return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
    if(mony < 0 || mony > 50000) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nuimdami pinigus turite nurodyti sumà, kuri bøti didesnë nei 1$, bei maþesnë uþ 50,000$.");
    if(!PlayerToPlayer(2.0,playerid,giveplayerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðalia Jûsø nëra reikiamo Administratoriaus.");
    if(pInfo[giveplayerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðalia stovinèio Administratoriaus lygis yra per maþas ðiai komandai.");
    if(mony > Biudzetas) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, frakcijos biudþete nëra nurodytos sumos.");
    GivePlayerMoney(playerid,mony);
    Biudzetas -= mony;
    format(string,126,"AdmWarn: Los Santos meras (%s) ið miesto biudþeto iðëmë: %d$.",GetName(playerid),mony);
    SendAdminMessage(COLOR_ADM,string);
    SaveMisc();
    return 1;
}
CMD:takefmoney( playerid, params[ ] )
{
    new
        giveplayerid,
        mony,
        string[ 126 ];
        
    if(pInfo[playerid][pLead] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs nesate frakcijos vadovas.");
    if(sscanf( params, "ud", giveplayerid, mony)) return SendClientMessage( playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /takefmoney [administratoriaus id (3lvl)][suma]. Daugiausiai nuiimti galite: 50.000$.");
    if(!IsPlayerConnected(giveplayerid))  return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
    if(mony < 0 || mony > 50000) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nuimdami pinigus turite nurodyti sumà, kuri bøti didesnë nei 1$, bei maþesnë uþ 50,000$.");
    if(!PlayerToPlayer(2.0,playerid,giveplayerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðalia Jûsø nëra reikiamo Administratoriaus..");
    if(pInfo[giveplayerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðalia stovinèio Administratoriaus lygis yra per maþas ðiai komandai.");
    if(mony > fInfo[PlayerFaction( playerid )][fBank]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, frakcijos biudþete nëra nurodytos sumos");
    GivePlayerMoney(playerid,mony);
    fInfo[PlayerFaction( playerid )][fBank] -= mony;
    format(string,126,"AdmWarn: Frakcijos vadovas (%s) ið frakcijos biudþeto iðëmë %d$.",GetName(playerid),mony);
    SendAdminMessage(COLOR_ADM,string);
    SaveFactions(PlayerFaction( playerid ));
    return 1;
}
CMD:checkfbudget( playerid, params[ ] )
{
    new
        string[ 126 ];
    #pragma unused params
    if(pInfo[playerid][pLead] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite naudoti ðios komandos jei nesate ðios frakcijos vadovu..");
    SendClientMessage(playerid,COLOR_GREEN,"|____________FRAKCIJOS BIUDÞETAS____________|");
    format(string,126,"Ðuo metu frakcijos biudþete yra %d$",fInfo[PlayerFaction( playerid )][fBank]);
    SendClientMessage(playerid,COLOR_WHITE,string);
    return 1;
}
CMD:checkbudget( playerid, params[ ] )
{
    new
        string[ 126 ];
    #pragma unused params
    if(pInfo[playerid][pLead] != 6) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs nesate meras.");
    SendClientMessage(playerid,COLOR_GREEN,"|_____BENDRAS LOS SANTOS MIESTO BIUDþETAS_____|");
    format(string,126,"Bendras Los Santos miesto biudþetas sieka %d$",Biudzetas);
    SendClientMessage(playerid,COLOR_WHITE,string);
    return 1;
}
CMD:charity( playerid, params[ ] )
{
    new
        giveplayerid,
        string[ 126 ];
    if(sscanf( params, "d", giveplayerid)) return SendClientMessage( playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /charity [SUMA], naudodami ðià komandà Jûs paremsite miesto biudþetà.");
    if(giveplayerid > PlayerMoney[ playerid ]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite nurodyti sumos, kurios neturite.");
    if(giveplayerid < 0 ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodyta suma negali bøti maþesnë uþ 1$");
    format( string, 126, "Dëkojame uþ Jûsø paramà, kadangi Jûs miesto biudþetà paremët %d$", giveplayerid );
    SendClientMessage( playerid, COLOR_NEWS, string );
    GivePlayerMoney(playerid,-giveplayerid);
    Biudzetas += giveplayerid;
    SaveMisc();
    return 1;
}
CMD:cuff( playerid, params[ ] )
{
    if ( UsePDCMD( playerid ) == 1 || ( PlayerFaction( playerid ) == 5 && pInfo[ playerid ][ pRank ] > 4 ) )
    {
        new
            giveplayerid,
            string[ 64 ];

        if(sscanf( params, "u", giveplayerid)) return SendClientMessage( playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /cuff [VEIKËJO ID]");
        if(Mires[playerid] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûsø veikëjas ðiuo metu yra kritinëje arba komos bûsenoje.");
        if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
        if(!PlayerToPlayer(10,playerid,giveplayerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite naudoti ðio veiksmo su veikëju, kuris nëra ðalia Jûsø. ");
        if(pInfo[giveplayerid][pCuffs] == 0)
        {
            if(IsPlayerInAnyVehicle(giveplayerid) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjas yra tr. priemonëje, o Jûs ne.");
            if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(giveplayerid) == PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûs esate tr. priemonëje, o nurodytas veikëjas ne");
            pInfo[giveplayerid][pCuffs] = 1;
            format(string, sizeof(string), "suima %s abi rankas uþ nugaros ir uþdeda antrankius ant rankø.", GetPlayerNameEx(giveplayerid));
            cmd_ame(playerid, string);
            ShowInfoText(giveplayerid, "~w~Rankos surakintos", 2500);
            SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_CUFFED );
            SetPlayerAttachedObject(giveplayerid, 0, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
            return 1;
        }
        else if(pInfo[giveplayerid][pCuffs] == 1)
        {
            if(IsPlayerInAnyVehicle(giveplayerid) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjas yra tr. priemonëje, o Jûs ne.");
            if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(giveplayerid) == PLAYER_STATE_ONFOOT) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûs esate tr. priemonëje, o nurodytas veikëjas ne");
            pInfo[giveplayerid][pCuffs] = 0;
            SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_NONE);
            RemovePlayerAttachedObject(giveplayerid, 0);
            format(string, sizeof(string), "nuima uþdëtus antrankius %s ir susideda juos á savo dëklà.", GetPlayerNameEx(giveplayerid));
            cmd_ame(playerid, string);
            ShowInfoText(giveplayerid, "~w~Rankos atrakintos", 2500);
            return 1;
        }
    }
    return 1;
}
CMD:duty(playerid)
{
    new
        string[ 170 ];
        
    if(PlayerFaction( playerid ) == 1 )
    {
        if(!PDJOBPlace(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite persirengti nebødamas persirengimo kabinoje/kambaryje.");
        if(pInfo[playerid][pJobDuty] == 0)
        {
            format(string, sizeof(string), "* pareigûnas %s atsidaro savo ginklø saugyklà.", GetPlayerNameEx(playerid));
            ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            SetPlayerArmour ( playerid, 100 );
            pInfo[playerid][pJobDuty] = 1;
            cmd_wepstore( playerid, "" );
            SetPlayerColor( playerid, 0x8d8dffAA );
            return 1;
        }
        else if(pInfo[playerid][pJobDuty] == 1)
        {
            SetPlayerArmour ( playerid, 0 );
            format(string, sizeof(string), "* pareigûnas %s pasidëjo savo turimus ginklus á savo ginklø saugyklà.", GetPlayerNameEx(playerid));
            ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            printf("Removing player %s job weapons", GetName(playerid));
            RemovePlayerJobWeapons(playerid);
            pInfo[playerid][pJobDuty] = 0;
            SetPlayerColor( playerid, TEAM_HIT_COLOR );
            return 1;
        }
    }
    else if(PlayerFaction( playerid ) == 2 )
    {
        if(pInfo[playerid][pJobDuty] == 0)
        {
            pInfo[playerid][pJobDuty] = 1;
            SendClientMessage(playerid, COLOR_LIGHTRED, "[LSFD] Jûs pradëjote darbà kaip departamento darbuotojas, nuo ðiol galite naudotis departamento komandomis");
            format(string, sizeof(string), "[Los Santos pagalbos skyrius] %s pradëjo darbà departamente. Skubios pagalbos departamento numeris iðkvietimams: /call 911.", GetPlayerNameEx(playerid));
            SendChatMessageToAll(COLOR_LIGHTRED2, string);
            SetPlayerColor( playerid, 0xc66871FF );
            return 1;
        }
        else if(pInfo[playerid][pJobDuty] == 1)
        {
            RemovePlayerJobWeapons(playerid);
            pInfo[playerid][pJobDuty] = 0;
            SendClientMessage(playerid, COLOR_LIGHTRED, "[LSFD] Jûs baigiate darbà kaip departamento darbuotojas..");
            SetPlayerColor( playerid, TEAM_HIT_COLOR );
            return 1;
        }
    }
    /*else if(PlayerFaction( playerid ) == 4 )
    {
        if(pInfo[playerid][pJobDuty] == 0)
        {
            pInfo[playerid][pJobDuty] = 1;
            SendClientMessage(playerid, COLOR_WHITE, "Pradëjote darbà .");
            GivePlayerWeapon(playerid, 43, 50);
            return 1;
        }
        else if(pInfo[playerid][pJobDuty] == 1)
        {
            RemovePlayerWeapon( playerid, 43 );
            pInfo[playerid][pJobDuty] = 0;
            SendClientMessage(playerid, COLOR_WHITE, "Baigëte darbà .");
            return 1;
        }
    }*/

    
    else if(PlayerFaction( playerid ) == 5 )
    {
        if( pInfo[ playerid ][ pRank ] >= 4 )
        {
            if(pInfo[playerid][pJobDuty] == 0)
            {
                format(string, sizeof(string), "*%s ið savo saugyklos pasiemà aðarines dujas, bananà ir ásideda á dëklus.", GetPlayerNameEx(playerid));
                ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                GivePlayerJobWeapon(playerid, 41, 500);
                GivePlayerJobWeapon(playerid, 3, 1);
                pInfo[playerid][pJobDuty] = 1;
                return 1;
            }
            else if(pInfo[playerid][pJobDuty] == 1)
            {
                format(string, sizeof(string), "*%s iðsiema turimas aðarines dujas, bananà ir ásideda á savo saugyklà.", GetPlayerNameEx(playerid));
                ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                RemovePlayerJobWeapons(playerid);
                pInfo[playerid][pJobDuty] = 0;
                return 1;
            }
        }
    }
    return 1;
}
CMD:windows( playerid, params[ ] )
{
    #pragma unused params
    if ( !IsPlayerInAnyVehicle( playerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, norëdami atlikti ðá veiksmà privalote bøti tr. priemonëje. ");
    new vehid = GetPlayerVehicleID( playerid ),
        string[ 60 ];
    if ( !VehicleHasWindows( GetVehicleModel( vehid ) )) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, transporto priemonë, kurioje esate neturi langø.");
    if ( Windows[ vehid ] == false )
    {
        format      ( string, 60, "* %s atidaro tr. priemonës langà (-us)." ,GetPlayerNameEx( playerid ));
        ProxDetector( 20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
        Windows[ vehid ] = true;
        return 1;
    }
    else if ( Windows[ vehid ] == true )
    {
        format      ( string, 60, "* %s uþdaro tr. priemonës langà (-us)." ,GetPlayerNameEx( playerid ));
        ProxDetector( 20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
        Windows[ vehid ] = false;
        return 1;
    }
    return 1;
}
CMD:trunk( playerid, params[ ] )
{
    #pragma unused params
    if ( Mires[ playerid ] > 0 )   return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, Jûsø veikëjas ðiuo metu yra kritinëje arba komos bûsenoje." );
    if ( IsPlayerInAnyVehicle( playerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite atidaryti bagaþinës sedëdamas tr. priemonëje.");
    new car = GetNearestVehicle( playerid, 10.0 );
    if ( car == INVALID_VEHICLE_ID ) return 1;
    if ( GetVehicleTrunkSlots( GetVehicleModel( car ) ) < 1 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, ði transporto priemonë neturi bagaþinës." );
    if ( cInfo[ car ][ cLock ] == 1 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, tr. priemonës bagaþinë yra uþrakinta." );
    if ( sVehicles[ car ][ Faction ] > 0 )
    {
        if ( sVehicles[ car ][ Faction ] != pInfo[ playerid ][ pMember ] )
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite naudotis ðia transporto priemone." );
    }
    new engine, lights, alarm, doors, bonnet, boot, objective;

    GetVehicleParamsEx( car, engine, lights, alarm, doors, bonnet, boot, objective );

    if ( boot != 1 )
    return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, tr. priemonës bagaþinë ðiuo metu uþdaryta." );

    new string[ 110 ];
    format      ( string, sizeof(string), "* %s pakelia bagaþinës dangtá ir atidaro tr. priemonës bagaþinæ." ,GetPlayerNameEx( playerid ));
    ProxDetector( 20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
    ShowTrunk( playerid, car );
    return 1;
}
CMD:nof( playerid, params[ ] )
{
    #pragma unused params
    if ( pInfo[ playerid ][ pMember ] > 1 && pInfo[playerid][pLead] == pInfo[ playerid ][ pMember ] )
    {
        new string[ 126 ];
        if ( fInfo[ PlayerFaction( playerid ) ][ fChat ] == 0 )
        {
            format         ( string, 126, " %s %s iðjungë privatø frakcijos kanalà (/f). " ,GetPlayerRangName( playerid ), GetName( playerid ) );
            fInfo[ PlayerFaction( playerid ) ][ fChat ] = 1;
            SendTeamMessage( PlayerFaction( playerid ), COLOR_NEWS, string );
            return 1;
        }
        else
        {
            format         ( string, 126, " %s %s ájungë privatø frakcijos kanalà (/f). " ,GetPlayerRangName( playerid ), GetName( playerid ) );
            fInfo[ PlayerFaction( playerid ) ][ fChat ] = 0;
            SendTeamMessage( PlayerFaction( playerid ), COLOR_NEWS, string );
            return 1;
        }
    }
    return 1;
}

CMD:f( playerid, params[ ] )
{
    new string[ 256 ];
    if ( sscanf( params, "s[256]", string ) ) return SendClientMessage( playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /f [TEKSTAS]" );
    if ( Mires[ playerid ] > 0 )              return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, Jûsø veikëjas ðiuo metu yra kritinëje arba komos bûsenoje." );
    if ( Mute[ playerid ] == true )           return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, ðiuo metu Jums yra uþdrausta kalbëtis (/mute), norëdami paðalinti draudimà susisiekite su Administratoriumi." );
    if ( PlayerFaction( playerid ) == 0)      return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite naudotis ðia komanda neturëdami frakcijos." );
    if ( fInfo[ PlayerFaction( playerid ) ][ fChat ] == 1 && pInfo[ playerid ][ pLead ] == 0)
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, frakcijos kanalas (/f) ðiuo metu yra iðjungtas. Susisiekite su frakcijos vadovu." );

    new
        pdtype[ 20 ] = "";
    if( PlayerFaction( playerid ) == 1 )
    {
        if ( GetPVarInt( playerid, "PDTYPE" ) == 1 ) pdtype = "(SWAT: Marksman)";
		if ( GetPVarInt( playerid, "PDTYPE" ) == 2 ) pdtype = "(SWAT: Elite)";
        else if ( GetPVarInt( playerid, "PDTYPE" ) == 3 ) pdtype = "(SWAT: Enforcer)";
    }
    format         ( string, 256, "((%s (%s%s): %s ))" ,GetPlayerRangName( playerid ), GetName( playerid ), pdtype, string );
    SendTeamMessage( PlayerFaction( playerid ), COLOR_FCHAT, string );
    return 1;
}
CMD:id( playerid, params[ ] )
{
    new id[ 24 ];
    if ( sscanf( params, "s[24]", id ) )    return SendClientMessage( playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /id [VEIKËJO ID] arba /id [VEIKËJO VARDAS ARBA DALIS VARDO]" );

    new string[ 64 ],
        name[ MAX_PLAYER_NAME ];

    foreach(Player,i)
    {
        GetPlayerName( i, name, sizeof(name) );
        if ( strfind( name, id, true ) != -1 )
        {
            format           ( string, 50,"Surastas veikëjas (ID: %d) %s", i, name );
            SendClientMessage( playerid, COLOR_WHITE, string );
        }
    }
    return 1;
}
CMD:frisk( playerid, params[ ] )
{
    new string[ 140 ],
        giveplayerid;
    if ( sscanf( params, "u", giveplayerid ) ) return SendClientMessage( playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /frisk [VEIKËJO ID]" );
    if ( !IsPlayerConnected( giveplayerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
    if ( !PlayerToPlayer   ( 5.0, playerid, giveplayerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite naudoti ðio veiksmo veikëjui, kuris nëra ðalia Jûsø..");

    format           ( string, 140, "Dëmesio, %s nori Jus apieðkoti, jei leidþiatës apieðkomas raðykite /accept frisk %d", GetPlayerNameEx( playerid ), playerid );
    SendClientMessage( giveplayerid, COLOR_WHITE, string );
    format           ( string, 140, "Veikëjas %s gavo praðymà leisti bøti apieðkomas Jûsø, palaukite kol veikëjas atsakys. ", GetPlayerNameEx( giveplayerid ) );
    SendClientMessage( playerid, COLOR_WHITE, string );
    SetPVarInt       ( giveplayerid, "APIESKA", playerid );
    return 1;
}
CMD:take( playerid, params[ ] )
{
    if ( UsePDCMD( playerid ) == 0 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo nedirbdami policijos departamente." );
    new string[ 140 ],
        giveplayerid,
        item;
    if ( sscanf( params, "ud", giveplayerid, item) )
    {
        SendClientMessage( playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /take [VEIKËJO ID][DAIKTAS, KURI PAIIMSITE]");
        SendClientMessage( playerid ,GRAD, "Pavyzdys: 1 - ginklà | 2 - licenzijà | 3 - narkotikus");
        return 1;
    }
    if ( !IsPlayerConnected( giveplayerid ) ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
    if ( !PlayerToPlayer   ( 5.0, playerid, giveplayerid ) ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite naudoti ðio veiksmo su veikëju, kuris nëra ðalia Jûsø.");
    switch ( item )
    {
        case 1:
        {
            ResetPlayerWeapons( giveplayerid );
            ClearWeaponsFromPlayerInventory(giveplayerid);
            format      ( string, 70, "* %s paiima visus turimus/neðiojamus %s ginklus/árankius." ,GetPlayerNameEx( playerid ), GetPlayerNameEx( giveplayerid ) );
            ProxDetector( 20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
            SaveAccount( giveplayerid );
            return 1;
        }
        case 2:
        {
            new lic;
            if ( sscanf( params, "udd", giveplayerid, item, lic) )
            {
                SendClientMessage( playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /take [VEIKËJO ID][DAIKTAS, KURI PAIIMSITE][LICENZIJOS ID]");
                SendClientMessage( playerid ,GRAD, "Pavyzdþiai: 1 - vairavimo |2 - motociklo |3 - jøreivystës |4 - pilotavimo |5 - ðaunamøjø ginklø");
                return 1;
            }
            switch ( lic )
            {
                case 1: pInfo[ giveplayerid ][ pLicCar     ] = 0;
                case 2: pInfo[ giveplayerid ][ pLicMoto    ] = 0;
                case 3: pInfo[ giveplayerid ][ pLicBoat    ] = 0;
                case 4: pInfo[ giveplayerid ][ pLicHeli    ] = 0;
                case 5: pInfo[ giveplayerid ][ pLicWeapon  ] = 0;
            }
            SaveAccount( giveplayerid );
            pInfo[ giveplayerid ][ pDriverWarn ] = 0;
            format      ( string, 70, "* %s atima turimà %s licenzijà." ,GetPlayerNameEx( playerid ), GetPlayerNameEx( giveplayerid ) );
            ProxDetector( 20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
            return 1;
        }
        case 3:
        {
            RemovePlayerDrugItems(playerid);
            format      ( string, 70, "* %s atima visas turimas/laikomas %s narkotines medþiagas." ,GetPlayerNameEx( playerid ), GetPlayerNameEx( giveplayerid ) );
            ProxDetector( 20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
            SaveAccount( giveplayerid );
            return 1;
        }
    }
    return 1;
}

CMD:do( playerid, params[ ] )
{
    new string[ 256 ];
    if ( sscanf( params, "s[256]", string ) ) return SendClientMessage( playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /do [VEIKSMAS]. Pavyzdys komandos naudojimui: /do Ant stalo padëta piniginë" ); 
    if ( Mute[ playerid ] == true) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, ðiuo metu Jums yra uþdrausta kalbëtis (/mute), norëdami paðalinti draudimà susisiekite su Administratoriumi." );
    SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 10000);
    format(string,256,"* %s (( %s ))",string,GetPlayerNameEx(playerid));
    ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    if ( pInfo[ playerid ][ pJob ] == JOB_JACKER && ( LaikoTipas[playerid] == 5 || LaikoTipas[playerid] == 6 ) )
        ActionLog( pInfo[ playerid ][ pMySQLID ], string );
    return 1;
}
CMD:b( playerid, params[ ] )
{
    new string[ 256 ];
    if ( sscanf( params, "s[256]", string ) ) 
		return SendClientMessage( playerid , COLOR_LIGHTRED, "OOC kanalo naudojimas: /b [TEKSTAS]" ); 
	//SendClientMessage( playerid , COLOR_LIGHTRED, "Nenaudokite ðio kanalo be reikalo, kadangi tai gali priðaukti nuobaudà." );
    if ( Mute[playerid] == true ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, ðiuo metu Jums yra uþdrausta kalbëtis (/mute), norëdami paðalinti draudimà susisiekite su Administratoriumi.");

    if(AdminDuty[playerid] == true)
    //if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        format      ( string, 256, "{d6d6d6}(([ID: %d] {ca965a}%s{d6d6d6}: %s ))", playerid, GetName( playerid ), string );
        ProxDetector( 10.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5 );
    }
    //else if ( pInfo[ playerid ][ pAdmin] >= 0 )
    else if(AdminDuty[playerid] == false)
    {
		format      ( string, 256, "(([ID: %d] %s: %s ))", playerid, GetName( playerid ), string );
		ProxDetector( 10.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5 );
    }
    return 1;
}
CMD:g( playerid, params[ ] )
{
    new string[ 256 ];
    if ( sscanf( params, "s[256]", string ) ) return SendClientMessage( playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /g [TEKSTAS]" );
    if ( Mires[ playerid ] > 0 )   return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, Jûsø veikëjas ðiuo metu yra kritinëje arba komos bûsenoje." );
    if ( Mute[ playerid ] == true) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, ðiuo metu Jums yra uþdrausta kalbëtis (/mute), norëdami paðalinti draudimà susisiekite su Administratoriumi." );
    format          ( string, 256, "%s",string );
    SendOrginMessage( playerid, string );
    return 1;
}
CMD:setswat( playerid, params[ ] )
{
	new giveplayerid,
		type;
	if ( sscanf( params, "ud", giveplayerid, type ) )
		return SendClientMessage( playerid ,COLOR_LIGHTRED, "KOMANDOS NAUDOJIMAS: /setswat [VEIKËJO ID][1-3]"), SendClientMessage( playerid ,COLOR_LIGHTRED, "BÛRIAI: 1 - Marksman | 2 - Elite | 3 - Enforcer");
	if( UsePDCMD(playerid) != 1)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo nedirbdami policijos departamente.");
    if ( pInfo[playerid][pRank] < 10 )
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðià komandà gali naudoti tik aukðto rango pareigûnai.");
	if ( !PlayerToPlayer( 10.0, playerid, giveplayerid ) )
		return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjas nëra ðalia Jûsø.");
 	if( !PDJOBPlace(playerid)) return SendClientMessage(playerid,COLOR_LIGHTRED,"Klaida, norëdami atlikti ðá veiksmà, privalote bûti policijos departamente");
	{
		if ( type == 1 )
		{
			SetPlayerSkin   ( giveplayerid, 285 );
			SetPlayerArmour(playerid, 150.0);
			GivePlayerJobWeapon(giveplayerid, 34, 20 );
			GivePlayerJobWeapon(giveplayerid, 29, 200 );			
			SetPVarInt      (giveplayerid, "PDTYPE", 1 );
			return 1;
		}
		else if ( type == 2 )
		{
			SetPlayerSkin   ( giveplayerid, 285 );		
			SetPlayerArmour(playerid, 170.0);		
			GivePlayerJobWeapon( giveplayerid, 31, 200 );
			GivePlayerJobWeapon( giveplayerid, 24, 150 );
			SetPVarInt      ( giveplayerid, "PDTYPE", 2 );
			return 1;
		}
		else if ( type == 3 )
		{
			SetPlayerSkin   ( giveplayerid, 285 );		
			SetPlayerArmour(playerid, 200.0);			
			GivePlayerJobWeapon( giveplayerid, 25, 40 );
			GivePlayerJobWeapon( giveplayerid, 29, 200 );
			SetPVarInt      ( giveplayerid, "PDTYPE", 3 );
			return 1;
		}		
	}
	return 1;
}
CMD:setfd( playerid, params[ ] )
{
    new
        giveplayerid;
    if ( sscanf( params, "u", giveplayerid ) ) return SendClientMessage( playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /setfd [VEIKËJO ID]");
    if ( PlayerFaction( playerid ) != 2 ) return SendClientMessage( playerid, GRAD, "neturite galimybës atlikti ðá veiksmà." );
    if ( pInfo[playerid][pRank] < 6 ) return SendClientMessage( playerid, GRAD, "neturite galimybës atlikti ðá veiksmà." );
    if ( !PlayerToPlayer( 10.0, playerid, giveplayerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite naudoti ðio veiksmo jei nurodytas veikëjas nëra ðalia Jûsø. ");
    if ( PlayerFaction( giveplayerid ) != 2 ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûs ne");

    switch ( GetPVarInt ( giveplayerid, "PDTYPE" ) )
    {
        case 0:
        {
            SetPlayerSkin   ( giveplayerid, 277 );
            GivePlayerJobWeapon( giveplayerid, 9, 1 );
            GivePlayerJobWeapon( giveplayerid, 42, 2000 );
        }
        case 1:
        {
            SetPlayerSkin   ( giveplayerid, 276);
        }
    }
    return 1;
}
CMD:checkalco( playerid, params[ ] )
{
    new giveplayerid,
        DrunkLevel,
        string[ 126 ];
    if ( sscanf( params, "u", giveplayerid) ) return SendClientMessage( playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /checkalco [VEIKËJO ID]");
    if ( UsePDCMD( playerid ) == 0 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite naudotis ðia komanda jei nesate pareigûnas." );
    if ( !PlayerToPlayer( 10.0, playerid, giveplayerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite naudoti ðio veiksmo jei nurodytas veikëjas nëra ðalia Jûsø. ");
    DrunkLevel = floatround( GetPlayerDrunkLevel( giveplayerid ) /1000 );
    format      ( string, 126, "* %s prideda alkotesterá prie %s lupø, kuris pripuèia d promilæ (-iø)." ,GetPlayerNameEx( playerid ), GetPlayerNameEx( giveplayerid ), DrunkLevel );
    ProxDetector( 20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
    return 1;
}


CMD:ad( playerid, params[ ] )
{
    if(!Data_IsPlayerInRangeOfCoords(playerid, 10.0, "advertisement_center")) 
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, reklamas á eterá galite skelbti (/ad) tik reklamos skyriuje, kuris yra Verona Mall." );
    if ( gettime() - LastPlayerAd[ playerid ] <= 30 && pInfo[ playerid ][ pDonator ] == 0 )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, skelbimà galite raðyti tik prabëgus 30 sekundþiø po buvusio skelbimo paraðymo. " );

    new string[ 256 ],
        coast;

    if (isnull(params)) 
        return SendClientMessage( playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /ad [JÛSØ REKLAMA]");
    coast = strlen( params );
    if ( coast < 39 )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Negalite paskelbti reklamos, kurios nesudaro net 40 simboliø. " );
    if ( PlayerMoney[ playerid ] < 250 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, neturite pakankamai pinigø (250$), kad atliktumët ðá veiksmà. ");

    GivePlayerMoney( playerid, -250);
    format           ( string, sizeof(string), "[Skelbimas] %s, kontaktai: %d", params, pInfo[ playerid ][ pPhone ] );
    SendNEWS         ( COLOR_AD, string );


    for(new i = sizeof LastAds - 1; i != 0; i--)
        if(!isnull(LastAds[ i-1 ]))
            strcpy(LastAds[ i ], LastAds[ i-1 ], MAX_AD_TEXT);
    strcpy(LastAds[ 0 ], string, MAX_AD_TEXT);

    //format           ( string, 256, "Uþ paskelbtá  skelbimá  eteryje sumokëjai: %d ", coast * 2 );
    //SendClientMessage( playerid, COLOR_WHITE, string );
    format           ( string, 70, "AdmWarn: veikëjas (%s) [ID: %d] paraðë skelbimà (/ad)", GetName( playerid ), playerid );
    SendAdminMessage ( COLOR_ADM, string );

    LastPlayerAd[ playerid ] = gettime();
    return 1;
}

CMD:lastad( playerid, params[ ] )
{
    new
        string2[ 2048 ];
    for(new i = 0; i < sizeof(LastAds); i++)
    {
        if(isnull(LastAds[ i ]))
            continue;

        if(strlen(LastAds[ i ]) > 65)
        {
            new string[ 140 ];

            strmid( string, LastAds[ i ], 0, 64 );
            format( string2, 1024, "%s%s\n", string2, string );

            format( string, 140, "" );

            strmid( string, LastAds[ i ], 64, 128 );
            format( string2, 1024, "%s%s\n", string2, string );
            
            format( string, 140, "" );
            
            strmid( string, LastAds[ i ], 128, 192 );
            format( string2, 1024, "%s%s\n", string2, string );
        }
        else
            format( string2, 1024, "%s%s\n", string2, LastAds[ i ] );
    }
    ShowPlayerDialog(playerid,9999,DIALOG_STYLE_LIST,"Paskutiniai skelbimai",string2,"Atgal","");
    return 1;
}

CMD:crouch( playerid, params[ ] )
{
    #pragma unused params

    if ( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT )
        LoopingAnim( playerid, "CAMERA", "camcrch_idleloop", 4.0, 0, 1, 1, 1, 0 );
    else
        SendClientMessage( playerid, COLOR_LIGHTRED, "Naudotis ðiomis animacijomis galite tik tada, kada Jûsø veikëjas yra ant kojø. ");

    return true;
}

CMD:yes( playerid, params[ ] )
{
    #pragma unused params

    if ( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT )
        LoopingAnim( playerid, "GANGS", "Invite_Yes", 4.0, 0, 1, 1, 1, 0 );
    else
        SendClientMessage( playerid, COLOR_LIGHTRED, "Naudotis ðiomis animacijomis galite tik tada, kada Jûsø veikëjas yra ant kojø. ");

    return true;
}

CMD:no( playerid, params[ ] )
{
    #pragma unused params

    if ( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT )
        LoopingAnim( playerid, "GANGS", "Invite_No", 4.0, 0, 1, 1, 1, 0 );
    else
        SendClientMessage( playerid, COLOR_LIGHTRED, "Naudotis ðiomis animacijomis galite tik tada, kada Jûsø veikëjas yra ant kojø. ");

    return true;
}

CMD:chand( playerid, params[ ] )
{
    #pragma unused params

    if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
        LoopingAnim( playerid, "CAR", "Tap_hand", 4.0, 0, 1, 1, 1, 0 );
    else
        SendClientMessage( playerid, COLOR_LIGHTRED, "Naudotis ðiomis animacijomis galite tik tada, kada Jûsø veikëjas yra tr. priemonëje. ");

    return true;
}

CMD:bag( playerid, params[ ] )
{
    #pragma unused params

    if ( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT )
        LoopingAnim( playerid, "BASEBALL", "Bat_IDLE", 4.0, 1, 1, 1, 1, 0 );
    else
        SendClientMessage( playerid, COLOR_LIGHTRED, "Naudotis ðiomis animacijomis galite tik tada, kada Jûsø veikëjas yra ant kojø. ");

    return true;
}

CMD:riot( playerid, params[ ] )
{
    #pragma unused params

    if ( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT )
        LoopingAnim( playerid, "RIOT", "RIOT_ANGRY", 4.0, 1, 0, 0, 0, 0 );
    else
        SendClientMessage( playerid, COLOR_LIGHTRED, "Naudotis ðiomis animacijomis galite tik tada, kada Jûsø veikëjas yra ant kojø. ");

    return true;
}

CMD:place( playerid, params[ ] )
{
    if ( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT )
    {
        new
            id;

        if ( sscanf( params, "d", id ) ) SendClientMessage( playerid, COLOR_GREY, "/place [1-2]" );
        else
        {
            switch ( id )
            {
                case 1 : LoopingAnim( playerid, "CARRY", "putdwn", 4.0, 0, 1, 1, 1, 0 );
                case 2 : LoopingAnim( playerid, "CARRY", "putdwn05", 4.0, 0, 1, 1, 1, 0 );
                default: SendClientMessage( playerid, COLOR_GREY, "/place [1-2]" );
            }
        }
    }
    else
        SendClientMessage( playerid, COLOR_LIGHTRED, "Naudotis ðiomis animacijomis galite tik tada, kada Jûsø veikëjas yra ant kojø. ");

    return true;
}

CMD:lift( playerid, params[ ] )
{
    if ( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT )
    {
        new
            id;

        if ( sscanf( params, "d", id ) ) SendClientMessage( playerid, COLOR_GREY, "/lift [1-2]" );
        else
        {
            switch ( id )
            {
                case 1 : LoopingAnim( playerid, "CARRY", "liftup", 4.0, 0, 1, 1, 1, 0 );
                case 2 : LoopingAnim( playerid, "CARRY", "liftup05", 4.0, 0, 1, 1, 1, 0 );
                default: SendClientMessage( playerid, COLOR_GREY, "/lift [1-2]" );
            }
        }
    }
    else
        SendClientMessage( playerid, COLOR_LIGHTRED, "Naudotis ðiomis animacijomis galite tik tada, kada Jûsø veikëjas yra ant kojø. ");
    return true;
}

CMD:rem( playerid, params[ ] )
{
    #pragma unused params

    if ( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT )
        LoopingAnim( playerid, "MUSCULAR", "MuscleIdle", 4.0, 0, 1, 1, 1, 0 );
    else
        SendClientMessage( playerid, COLOR_LIGHTRED, "Naudotis ðiomis animacijomis galite tik tada, kada Jûsø veikëjas yra ant kojø. ");

    return true;
}


CMD:re( playerid, params[] )
    return cmd_report( playerid, params );

CMD:report( playerid, params[] )
{
    new giveplayerid,
        string[ 256 ];
    if ( sscanf( params, "us[256]",giveplayerid, string ) ) 
        return SendClientMessage( playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /report [PRANEÐAMO VEIKËJO ID][KÀ VEIKËJAS NUSIÞENGË] " );
    if ( giveplayerid == INVALID_PLAYER_ID )
        return SendClientMessage( playerid , COLOR_LIGHTRED, "Klaida, blogai nurodytas praneðamo veikëjo ID. Pasitikrinkite ar já nurodëte teisingai.");
    if ( GetPVarInt( playerid, "REPORTED" ) == 1 ) 
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite taip greitai naudotis komanda /report. Palaukite minutæ ir bandykite vël. ");

    format(string,256,"** [AdmWarn] Veikëjas %s (ID:%d) praneðë apie (ID %d) %s, problema: %s ",GetName( playerid ), playerid, giveplayerid, GetName( giveplayerid ), string );
    SendAdminMessage(COLOR_YELLOW, string);
    SendAdminMessage(COLOR_YELLOW, "** KOMANDOS: /are [VEIKËJO ID] patvirtint/priimti praneðimà |  /dre [VEIKËJO ID] [KODËL ATMETËT PRANEÐIMÀ] - atmesti"); 

	SendChatMessage(playerid, COLOR_GREEN, "Sveikiname, Jûsø praneðimas buvo sëkmingai iðsiøstas visiems budintiems Administratoriams. Administratorius susisieks su Jumis dël tolimesniø veiksmø..");

    SetPVarInt( playerid, "REPORTED", 1 );
    SetTimerEx( "REPORT_T", 60000, false, "d", playerid );
    return 1;
}
FUNKCIJA:REPORT_T( playerid )
    return DeletePVar( playerid, "REPORTED" );

CMD:flist( playerid, params[ ] )
{
    #pragma unused params
    if ( PlayerFaction( playerid ) == 0 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite naudotis ðia komanda nebødami frakcijoje.");
    SendClientMessage( playerid, COLOR_GREEN, "|___________ Frakcijai priklausantys nariai ___________|");
    new string[ 30 ];
    foreach(Player,i)
    {
        if ( pInfo[ playerid ][ pMember ] == pInfo[ i ][ pMember ] )
        {
            format           ( string, 30, "** %s [%d]", GetName( i ), pInfo[ i ][ pRank ] );
            SendClientMessage( playerid, COLOR_WHITE, string );
        }
    }
    return 1;
}

CMD:w( playerid, params[ ] )
{
    new string[ 256 ],
        giveplayerid;
    if ( Mires[ playerid ] > 0 )   return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, Jûsø veikëjas ðiuo metu yra kritinëje arba komos bûsenoje." );
    if ( Mute[ playerid ] == true ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, ðiuo metu Jums yra uþdrausta kalbëtis (/mute), norëdami paðalinti draudimà susisiekite su Administratoriumi." );
    if ( sscanf( params, "us[256]", giveplayerid, string ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "IC kanalo naudojimas: /w [VEIKËJO ID][TEKSTAS], su ðia komanda galite sakyti þinutes ðnabþdëdami..");
    if ( !PlayerToPlayer( 2.0, playerid, giveplayerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo veikëjui, kuris nëra ðalia Jûsø. ");
    format         ( string, 256, "%s ðnabþdëdamas sako: %s", GetPlayerNameEx( playerid ), string);
    SendChatMessage( giveplayerid, COLOR_LIGHTRED, string );
    SendChatMessage( playerid, COLOR_LIGHTRED, string );
    format         ( string, 126, "* %s pasilenkæs prie %s, negirdimai suþnabdþa þodþius ir atsitraukia.", GetPlayerNameEx( playerid ), GetPlayerNameEx( giveplayerid ) );
    ProxDetector   ( 15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE );
    return 1;
}
CMD:cw( playerid, params[ ] )
{
    new string[ 256 ],
        message[ 256 ];
    if ( Mires[ playerid ] > 0 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, Jûsø veikëjas ðiuo metu yra kritinëje arba komos bûsenoje." );
    if ( Mute[ playerid ] == true ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, ðiuo metu Jums yra uþdrausta kalbëtis (/mute), norëdami paðalinti draudimà susisiekite su Administratoriumi." );
    if ( sscanf( params, "s[256]", message ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "IC kanalo naudojimas: /cw [TEKSTAS] ");
    if ( !IsPlayerInAnyVehicle( playerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs nesëdite transporto priemonëje. ");
    new veh = GetPlayerVehicleID(playerid);
    foreach(Player,i)
    {
        if ( IsPlayerInVehicle( i, veh ) )
        {
            new plstate = GetPlayerState( playerid );

            if ( plstate == PLAYER_STATE_DRIVER )
            {
                format( string, 256, "Vairuotojas %s sako: %s", GetPlayerNameEx( playerid ), message );
                SendChatMessage( i, 0xD7DFF3AA, string );
            }
            else if ( plstate == PLAYER_STATE_PASSENGER )
            {
                format( string, 256, "Pakeleivis %s sako: %s", GetPlayerNameEx( playerid ), message );
                SendChatMessage( i, 0xD7DFF3AA, string );
            }
        }
    }
    return 1;
}
CMD:oldcar(playerid, params[])
{
    new string[ 56 ];
    format(string, sizeof(string), "Paskutinës tr. priemonës, kurià naudojote ID: %d", OldCar[ playerid ] );
    SendClientMessage( playerid, COLOR_WHITE, string );
    return 1;
}


CMD:enter(playerid)
{
    new tmpcar = GetPlayerVehicleID( playerid );
    foreach(sEnters,i)
    {
        if ( PlayerToPoint( 2.0, playerid, sEnter[ i ][ sEnter_x ], sEnter[ i ][ sEnter_y ], sEnter[ i ][ sEnter_z ] ) && GetPlayerInterior(playerid) == sEnter[ i ][ Int2   ] && GetPlayerVirtualWorld(playerid) == sEnter[ i ][ Wirt   ])
        {
            Unfreeze[ playerid ] = 2;
            TogglePlayerControllable( playerid, false );
            if ( !IsPlayerInAnyVehicle( playerid ) )
            {
                SetPlayerPos         ( playerid, sEnter[ i ][ sExit_x ], sEnter[ i ][ sExit_Y ], sEnter[ i ][ sExit_z ] );
                SetPlayerVirtualWorld( playerid, sEnter[ i ][ Wirt2   ] );
                SetPlayerInterior    ( playerid, sEnter[ i ][ Int     ] );
            }
            break;
        }
    }
    if ( PlayerToPoint( 2.0, playerid, 1753.5140,-1595.8026,13.5380 ) && PlayerFaction( playerid ) == 1 )
    {
        if ( IsPlayerInAnyVehicle( playerid ) )
        {
            Unfreeze[ playerid ] = 2;
            TogglePlayerControllable( playerid, false );
            foreach(Player,playa)
            {
                if ( IsPlayerInVehicle( playa, tmpcar ) )
                    SetPlayerVirtualWorld( playa, 0 );
            }
            SetVehiclePos   ( tmpcar, 1753.4137,-1585.5315,13.0600 );
            SetVehicleVirtualWorld( tmpcar, 0 );
            SetPlayerInterior     ( playerid, 0 );
            VGaraze[ tmpcar ] = true;
            return 1;
        }
        else
        {
            Unfreeze[ playerid ] = 2;
            TogglePlayerControllable( playerid, false );
            SetPlayerPos( playerid, 1753.4137,-1585.5315,13.0600 );
            SetPlayerVirtualWorld( playerid, 0 );
            SetPlayerInterior     ( playerid, 0 );
            return 1;
        }
    }
    if ( PlayerToPoint( 2.0, playerid, 1284.9084,-1346.3730,13.6000 ) && PlayerFaction( playerid ) == 2 )
    {
        if ( IsPlayerInAnyVehicle( playerid ) )
        {
            Unfreeze[ playerid ] = 2;
            TogglePlayerControllable( playerid, false );
            foreach(Player,playa)
            {
                if ( IsPlayerInVehicle( playa, tmpcar ) )
                    SetPlayerVirtualWorld( playa, 0 );
            }
            SetVehiclePos   ( tmpcar, -1763.6812,984.6740,22.0003 );
            SetVehicleVirtualWorld( tmpcar, 0 );
            SetPlayerInterior     ( playerid, 0 );
            VGaraze[ tmpcar ] = true;
            return 1;
        }
        else
        {
            Unfreeze[ playerid ] = 2;
            TogglePlayerControllable( playerid, false );
            SetPlayerPos( playerid, -1763.6812,984.6740,22.0003 );
            SetPlayerVirtualWorld( playerid, 0 );
            SetPlayerInterior     ( playerid, 0 );
            return 1;
        }
    }	
    return 1;
}
CMD:exit(playerid)
{
    new tmpcar = GetPlayerVehicleID( playerid );
    
    foreach(sEnters,i)
    {
        if ( PlayerToPoint( 2.0, playerid, sEnter[ i ][ sExit_x ], sEnter[ i ][ sExit_Y ], sEnter[ i ][ sExit_z ] ) && GetPlayerInterior(playerid) == sEnter[ i ][ Int   ] && GetPlayerVirtualWorld(playerid) == sEnter[ i ][ Wirt2   ])
        {
            Unfreeze[ playerid ] = 2;
            TogglePlayerControllable( playerid, false );
            if ( !IsPlayerInAnyVehicle( playerid ) )
            {
                SetPlayerPos         ( playerid, sEnter[ i ][ sEnter_x ], sEnter[ i ][ sEnter_y ], sEnter[ i ][ sEnter_z ] );
                SetPlayerVirtualWorld( playerid, sEnter[ i ][ Wirt   ] );
                SetPlayerInterior    ( playerid, sEnter[ i ][ Int2     ] );
            }
            break;
        }
    }
    if (PlayerToPoint( 2.0, playerid, 1753.4137,-1585.5315,13.0600 ) && PlayerFaction( playerid ) == 1 )
    {
        if ( IsPlayerInAnyVehicle( playerid ) )
        {
            Unfreeze[ playerid ] = 2;
            TogglePlayerControllable( playerid, false );
            foreach(Player,playa)
            {
                if ( IsPlayerInVehicle( playa, tmpcar ) )
                    SetPlayerVirtualWorld( playa, 0 );
            }
            SetVehiclePos   ( tmpcar, 1753.5140,-1595.8026,13.5380 );
            SetVehicleVirtualWorld( tmpcar, 0 );
            SetPlayerInterior     ( playerid, 0 );
            VGaraze[ tmpcar ] = true;
            return 1;
        }
        else
        {
            Unfreeze[ playerid ] = 2;
            TogglePlayerControllable( playerid, false );
            SetPlayerPos( playerid, 1753.5140,-1595.8026,13.5380 );
            SetPlayerVirtualWorld( playerid, 0 );
            SetPlayerInterior     ( playerid, 0 );
            return 1;
        }
    }
    if (PlayerToPoint( 2.0, playerid, -1763.6812,984.6740,22.0003 ) && PlayerFaction( playerid ) == 2 )
    {
        if ( IsPlayerInAnyVehicle( playerid ) )
        {
            Unfreeze[ playerid ] = 2;
            TogglePlayerControllable( playerid, false );
            foreach(Player,playa)
            {
                if ( IsPlayerInVehicle( playa, tmpcar ) )
                    SetPlayerVirtualWorld( playa, 0 );
            }
            SetVehiclePos   ( tmpcar, 1284.9084,-1346.3730,13.6000 );
            SetVehicleVirtualWorld( tmpcar, 0 );
            SetPlayerInterior     ( playerid, 0 );
            VGaraze[ tmpcar ] = true;
            return 1;
        }
        else
        {
            Unfreeze[ playerid ] = 2;
            TogglePlayerControllable( playerid, false );
            SetPlayerPos( playerid, 1284.9084,-1346.3730,13.6000 );
            SetPlayerVirtualWorld( playerid, 0 );
            SetPlayerInterior     ( playerid, 0 );
            return 1;
        }
    }	
    return 1;
}

CMD:pm( playerid, params[ ] )
{
    new giveplayerid,
    string[ 256 ],
    string2[ 256 ];

    if ( sscanf( params, "us[256]", giveplayerid, string ) )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /pm [veikëjo id][tekstas]" );

    if ( Mute[ playerid ] == true )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, ðiuo metu Jums yra uþdrausta kalbëtis (/mute), norëdami paðalinti draudimà susisiekite su Administratoriumi." );

    if ( !IsPlayerConnected( giveplayerid ) )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje." );

    if ( TogChat[ giveplayerid ][ 2 ] == false && pInfo[ playerid ][ pAdmin ] == 0 )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: negalite raðyti þaidëjui, nes jis blokuoja /pm þinutes. " );


    format( string2, 126, "TOG_PM_USER_%d", playerid );
    if ( GetPVarInt( giveplayerid, string2 ) == playerid && pInfo[ playerid ][ pAdmin ] == 0 )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: negalite raðyti þaidëjui, nes jis blokuoja /pm þinutes." );

    format         ( string2, 256, "(( Gauta PÞ nuo %s[ID:%d]: %s ))", GetName( playerid ), playerid, string );
    SendChatMessage( giveplayerid, 0xBBA033AA, string2 );
    format         ( string2, 256, "(( PÞ iðsiûsta %s[ID:%d]: %s ))", GetName( giveplayerid ), giveplayerid, string );
    SendChatMessage( playerid,  0xE5C43EAA, string2    );
    PlayerPlaySound( giveplayerid, 1057, 0.0, 0.0, 0.0 );
    return 1;
}
CMD:setbelt( playerid, params[ ] )
{
    #pragma unused params
    if ( !IsPlayerInAnyVehicle( playerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, Jûs nesate tr. priemonëje. ");
    if ( !VehicleHasWindows( GetVehicleModel( GetPlayerVehicleID( playerid ) ) ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, tr. priemonë kurioje sëdite neturi saugos dirþø, tad veiksmas negalimas.");
    new string[ 126 ];
    if ( Belt[ playerid ] == false )
    {
        format( string, 126, "* %s patempia saugos dirþà ir uþsisega saugos dirþus.", GetPlayerNameEx( playerid ) );
        Belt[ playerid ] = true;
    }
    else if ( Belt[ playerid ] == true )
    {
        format( string, 126, "* %s atsisega saugos dirþus.", GetPlayerNameEx( playerid ) );
        Belt[ playerid ] = false;
    }
    ProxDetector( 15.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
    return 1;
}
CMD:togf( playerid, params[ ] )
{
    #pragma unused params
    if ( GetPVarInt( playerid, "TOG_FAMILY" ) == 1)
    {
        SetPVarInt       ( playerid, "TOG_FAMILY", 0 );
        SendClientMessage( playerid, GRAD, "Jûs nebematysite frakcijos kanalo þinuøiø." );
        return 1;
    }
    else if ( GetPVarInt( playerid, "TOG_FAMILY" ) == 0)
    {
        SetPVarInt       ( playerid, "TOG_FAMILY", 1 );
        SendClientMessage( playerid, GRAD, "Jûs matysite frakcijos kanalo pokalbá." );
        return 1;
    }
    return 1;
}
CMD:towup( playerid, params[ ] )
{
    if ( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: turite bûti automobilyje Town Truck. " );
    new veh = GetPlayerVehicleID( playerid ),
        veh2;
    if ( GetVehicleModel( veh ) != 525 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: turite bûti automobilyje Town Truck. " );
    if ( sscanf ( params, "d", veh2 ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /towup [Automobilio ID matomas /dl] ");
    new Float: Car_X,
        Float: Car_Y,
        Float: Car_Z;
    GetVehiclePos( veh2, Car_X, Car_Y, Car_Z );
    if ( !PlayerToPoint( 10, playerid, Car_X, Car_Y, Car_Z ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs nesate ðalia to automobilio ");

    if ( IsTrailerAttachedToVehicle( veh ) )
        DetachTrailerFromVehicle( veh );
    else
    {
        StartTimer( playerid, 15, 10);
        SetPVarInt( playerid, "TOWING", veh2 );
    }
    return 1;
}

CMD:fdclothes( playerid, params[ ] )
{
	#pragma unused params
	if ( PlayerFaction( playerid ) != 2 )
	    return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo nedirbdami ugniagesiø departamente.");

	if(!Data_IsPlayerInRangeOfCoords(playerid, 70.0, "job_firefighter_clothes"))
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite persirengti nebûdamas persirengimo kabinoje/kambaryje.");

	ShowModelSelectionMenu ( playerid, skinlist, "Select Skin" ) ;
    return 1;
}
CMD:pdclothes( playerid, params[ ] )
{
    #pragma unused params
    if ( !UsePDCMD( playerid ) )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo nedirbdami policijos departamente.");

    if(!PDJOBPlace(playerid))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite persirengti nebûdamas persirengimo kabinoje/kambaryje.");

    ShowModelSelectionMenu ( playerid, skinlist, "Select Skin" ) ;
    //ShowPlayerDialog(playerid,16,DIALOG_STYLE_INPUT,"Apranga","áraðykite norimá  aprangos\nSkino ID, tada jis jum bus pakeistas.","Pakeisti","Iðjungti");
    return 1;
}

CMD:sid( playerid, params[ ] )
{
    new string[ 80 ],
        giveplayerid;
    if ( sscanf( params, "u", giveplayerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /sid [ veikëjo vardas/ id ] ");
    if ( !PlayerToPlayer( 10, playerid, giveplayerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs turite bûti ðalia kito veikëjo. ");
    format           ( string, 80, "|______________%s______________|", GetName( playerid ) );
    SendClientMessage( giveplayerid, COLOR_GREEN, string );

    format           ( string, 80, "*| Vardas: %s Pavardë: %s", GetPlayerFirstName( playerid ), GetPlayerLastName( playerid ) );
    SendClientMessage( giveplayerid, COLOR_WHITE, string );

    format           ( string, 80, "*| Gimimo metai: %d Metai: %d", 2011 - pInfo[ playerid ][ pAge ], pInfo[ playerid ][ pAge ] );
    SendClientMessage( giveplayerid, COLOR_WHITE, string );

    format           ( string, 80, "*| Tautybë: %s", pInfo[ playerid ][ pOrigin ] );
    SendClientMessage( giveplayerid, COLOR_WHITE, string );

    format           ( string, 80, "*| Asmens kodas: %d000000%d%d", pInfo[ playerid ][ pUcpID ], pInfo[ playerid ][ pAge ], pInfo[ playerid ][ pMySQLID ] );
    SendClientMessage( giveplayerid, COLOR_WHITE, string );

    format           ( string, 80, "* %s parodo savo asmens dokumentá  %s" ,GetName( playerid ), GetName( giveplayerid ) );
    ProxDetector     ( 20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
    return 1;
}

CMD:levelup(playerid,params[])
{
    if(!pInfo[ playerid ][ pPoints ])
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, neturite laisvø taðkø prisidëti prie veikëjo savybiø..");

    new type;
    if(sscanf(params,"i",type) || (type != 1 && type != 2)) 
    {
        SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /levelup [1/2]");
        SendClientMessage(playerid, COLOR_LIGHTRED, "Pasirinkimas: Papildomos gyvybës - 1, papildoma jëga - 2");
        return 1;
    }

    new string[70];
    switch(type)
    {
        case 1: 
        {
            pInfo[ playerid ][ pHealthLevel ]++;
            format(string,sizeof(string), "[LevelUp] Sëkmingai pasikëlëtæ veikëjo gyvybiø skaièiø. Dabar Jûsø veikëjas turës %.2f gyvybes.",pInfo[ playerid ][ pHealthLevel ] * 3 + 100.0);
            SendClientMessage(playerid, COLOR_NEWS, string);
        }
        case 2:
        {
            pInfo[ playerid ][ pStrengthLevel ] ++;
            SendClientMessage(playerid, COLOR_NEWS, "[LevelUp] Sëkmingai pasikëlëtæ veikëjo fizinæ jëgà. Daugiau informacijos komandoje /stats.");
        }
    }
    pInfo[ playerid ][ pPoints ]--;
    SaveAccount(playerid);

    format(string,sizeof(string),"Jums liko %d taðkai.", pInfo[ playerid ][ pPoints ]);
    SendClientMessage(playerid, COLOR_NEWS, string);
    return 1;
}

CMD:r( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pRChannel ] == 0 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: neturite racijos." );
    if ( pInfo[ playerid ][ pRChannel ] == 1 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: racijos kanalas nenustatytas." );
    if ( pInfo[ playerid ][ pRChannel ] == 911 && PlayerFaction( playerid ) != 1 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Racijos kanalas kurá esate nustatà neveikia." );
    if ( pInfo[ playerid ][ pRChannel ] == 912 && PlayerFaction( playerid ) != 2 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Racijos kanalas kurá esate nustatà neveikia." );
    if ( Mute[ playerid ] == true ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, ðiuo metu Jums yra uþdrausta kalbëtis (/mute), norëdami paðalinti draudimà susisiekite su Administratoriumi." );
    if ( Mires[ playerid ] > 0 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, Jûsø veikëjas ðiuo metu yra kritinëje arba komos bûsenoje." );
    new string[ 256 ],
        text[ 256 ];
    if ( sscanf( params, "s[256]", text ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /r [tekstas]" );

    SetPlayerChatBubble( playerid, text, COLOR_FADE1, 20.0, 10000 );
    format          ( string, 256,"**[KN: %d, S: %d] %s: %s.", pInfo[ playerid ][ pRChannel ], GetPVarInt(playerid, "RadioSlot"), GetPlayerNameEx( playerid ), text );
    SendRadioMessage( pInfo[ playerid ][ pRChannel ], GetPVarInt(playerid, "RadioSlot"), 0x8D8DFF00, string );
    format          ( string, 256, " %s sako:[RACIJA] %s", GetPlayerNameEx( playerid ), text );
    ProxDetector2   ( 20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5 );
    return 1;
}
CMD:rlow( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pRChannel ] == 0 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: neturite racijos." );
    if ( pInfo[ playerid ][ pRChannel ] == 1 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: racijos kanalas nenustatytas." );
    if ( pInfo[ playerid ][ pRChannel ] == 911 && PlayerFaction( playerid ) != 1 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Racijos kanalas kurá esate nustatà neveikia." );
    if ( pInfo[ playerid ][ pRChannel ] == 912 && PlayerFaction( playerid ) != 2 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Racijos kanalas kurá esate nustatà neveikia." );
    if ( Mute[ playerid ] == true ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, ðiuo metu Jums yra uþdrausta kalbëtis (/mute), norëdami paðalinti draudimà susisiekite su Administratoriumi." );
    if ( Mires[ playerid ] > 0 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, Jûsø veikëjas ðiuo metu yra kritinëje arba komos bûsenoje." );
    new string[ 256 ],
        text[ 256 ];
    if ( sscanf( params, "s[256]", text ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /rlow [tekstas]" );

    SetPlayerChatBubble( playerid, text, COLOR_FADE1, 2.0, 10000 );
    format          ( string, 256,"**[KN: %d, S: %d] %s:[Tyliai] %s.", pInfo[ playerid ][ pRChannel ], GetPVarInt(playerid, "RadioSlot"), GetPlayerNameEx( playerid ), text );
    SendRadioMessage( pInfo[ playerid ][ pRChannel ], GetPVarInt(playerid, "RadioSlot"), 0x8D8DFF00, string );
    format          ( string, 256, " %s sako:[RACIJA][Tyliai] %s", GetPlayerNameEx( playerid ), text );
    ProxDetector2   ( 2.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5 );
    return 1;
}
CMD:setchannel( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pRChannel ] == 0 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite naudotis radijo komandomis savo inventoriuje neturëdami radijo.." );
    new giveplayerid,
        slot;
    if ( sscanf( params, "dd", slot, giveplayerid ) ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /setchanel [KANALO VIETA NUO 1-3] [KANALO NUMERIS]");
    if ( Mires[ playerid ] > 0 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, Jûsø veikëjas ðiuo metu yra kritinëje arba komos bûsenoje." );
    if ( giveplayerid == 911 && PlayerFaction( playerid ) != 1 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, ðis kanalo numeris naudojamas frakcijose, tad negalite naudoti ðio kanalo Jûs." );
    if ( giveplayerid == 912 && PlayerFaction( playerid ) != 2 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, ðis kanalo numeris naudojamas frakcijose, tad negalite naudoti ðio kanalo Jûs." );
    if ( giveplayerid < 100 || giveplayerid > 100000 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, pasirinkti racijos kanalà galite nuo 100 iki 100000." );
    SendClientMessage( playerid, COLOR_LIGHTRED2, "Sëkmingai nustatytas racijos kanalas, dabar galite per já kalbëti naudodami /r." );
    pInfo[ playerid ][ pRChannel ] = giveplayerid;
    SetPVarInt(playerid, "RadioSlot", slot);
    SaveAccount( playerid );
    UpdatePlayerInfoText( playerid );
    return 1;
}
CMD:setslot( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pRChannel ] == 0 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite naudotis radijo komandomis savo inventoriuje neturëdami radijo.." );
    if ( pInfo[ playerid ][ pRChannel ] == 1 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, nustatykite racijos kanalà su komanda /setchannel, kad galëtumëte naudotis ðiuo veiksmu.." );
    new giveplayerid;
    if ( sscanf( params, "d", giveplayerid ) ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /setslot [1-3]");
    if ( giveplayerid < 1 || giveplayerid > 3 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Dëmesio, radijo kanalø vietos ribojamos nuo 1 iki 3." );
    if ( Mires[ playerid ] > 0 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, Jûsø veikëjas ðiuo metu yra kritinëje arba komos bûsenoje." );
    SendClientMessage( playerid, COLOR_LIGHTRED2, "Sëkmingai buvo nustatytas pasirinktas radijo kanalas." );
    SetPVarInt(playerid, "RadioSlot", giveplayerid);
    UpdatePlayerInfoText( playerid );
    return 1;
}
CMD:o( playerid, params[ ] )
{
    new string[ 256 ];
    if ( sscanf( params, "s[256]", string ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /o [tekstas]" );
    if ( Mute[ playerid ] == true ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, ðiuo metu Jums yra uþdrausta kalbëtis (/mute), norëdami paðalinti draudimà susisiekite su Administratoriumi." );
    if ( OOCDisabled == false ) return SendClientMessage( playerid, GRAD, "OOC kanalas yra uþdraustas administratoriaus." );
    format ( string, 256,"(( %s[%d] sako: %s ))", GetName( playerid ), playerid, string );
    SendOOC( COLOR_OOC, string );
    return 1;
}
CMD:ao( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 1)
    {
        new string[ 256 ];

        if ( sscanf( params, "s[256]", string ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /ao [tekstas]" );
        format ( string, 256, "(( Adm %s[%d]: %s ))", GetName( playerid ), playerid, string );
        SendOOC( COLOR_OOC, string );
        return 1;
    }
    return 1;
}
CMD:ado( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 1)
    {
        new string[ 256 ];

        if ( sscanf( params, "s[256]", string ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /ado [tekstas]" );
        format ( string, 256, "%s", string);
        SendOOC( COLOR_NEWS, string );
        return 1;
    }
    return 1;
}
CMD:a( playerid, params[ ] )
{
    if(pInfo[playerid][pAdmin] > 0 )
    {
        new string[ 256 ];

        if ( sscanf( params, "s[256]", string ) ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /a [tekstas]");
        format          ( string, 256, "[Adm. level: %d] %s[ID:%d]: %s", pInfo[ playerid ][ pAdmin ], GetName( playerid ), playerid, string );
        SendAdminMessage( COLOR_ADM, string );
        return 1;
    }
    return 1;
}
CMD:admins( playerid, params[ ] )
{
    #pragma unused params
    SendClientMessage(playerid, COLOR_TEAL, "---------------------------PRISIJUNGÆ ADMINISTRATORIAI----------------------------------");

    foreach(Player, x) {
        if(pInfo[ x ][ pAdmin ] >= 1 && !GetPVarInt( x, "hideadmin" ) && AdminDuty[ x ]) {
            format(szMessage, sizeof(szMessage), "%s [AdmLVL: %d] %s [%s] budintis statusas (/re).",  GetAdminRank( x ), pInfo[ x ][ pAdmin ], GetName(x), pInfo[ x ][ pForumName ]);
            SendClientMessage(playerid, COLOR_GREEN, szMessage);
        }
        if(pInfo[ x ][ pAdmin ] >= 1 && !GetPVarInt( x, "hideadmin" ) && !AdminDuty[ x ]) {
            format(szMessage, sizeof(szMessage), "%s [AdmLVL: %d] %s [%s] nebudintis statusas.",  GetAdminRank( x ), pInfo[ x ][ pAdmin ], GetName(x), pInfo[ x ][ pForumName ]);
            SendClientMessage(playerid, COLOR_GREY, szMessage);
        }
    }

    SendClientMessage(playerid, COLOR_TEAL, "----------------------------------------------------------------------------------------------");
    return 1;
}
CMD:transfer( playerid, params[ ] )
{
    new giveplayerid,
        items,
        IP[ 16 ],
        IP2[ 16 ],
        string[ 126 ];
    if ( sscanf( params, "ud", giveplayerid, items ) )
    {
        SendClientMessage( playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /transfer [veikëjo id] [suma]");
        return 1;
    }
    if ( pInfo[ playerid ][ pSavings ] > 0 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Banku naudotis negalite, kol esate pasidëje terminuotá  indëlá. " );
    if ( !PlayerToPoint( 20.0, playerid, 295.6938,1012.7919,2119.1150 ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs nesate banke" );
    if ( pInfo[ playerid ][ pLevel ] < 2 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûsø Lygis per maþas, minimalus 2 Lygis. " );
    if ( playerid == giveplayerid ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: ginklø/pinigø sau duoti negalite." );
    if ( !IsPlayerConnected( giveplayerid ) ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
    if ( items < 0 || items > 999999 ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: perduodama suma negali bûti maþesnë nei 0 ir didesnë negu 999999 " );
    if ( pInfo[playerid][pBank] < items ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: neturite tiek pinigø. ");

    GetPlayerIp( playerid, IP, 16 );
    GetPlayerIp( giveplayerid, IP2, 16 );

    if( !strcmp( IP, IP2, true ) || pInfo[ playerid ][ pUcpID ] == pInfo[ giveplayerid ][ pUcpID ] )
        return true;

    SendClientMessage(giveplayerid, COLOR_GREEN, "|____ PERVEDIMAS ____|");
    format(string, 126, " Pervedë: $%d",items); SendClientMessage(giveplayerid, COLOR_WHITE, string);
    format(string, 126, " Pervedëjas: %s",GetName( playerid )); SendClientMessage(giveplayerid, COLOR_FADE1, string);

    if ( items > 49999 )
    {
        format( string, 70, "AdmWarn: veikëjas (%s) naudodamas (/transfer) pervedë veikëjui (%s), %d$", GetName( playerid ), GetName( giveplayerid ), items );
        SendAdminMessage( COLOR_ADM, string );
    }

    SendClientMessage( playerid, COLOR_WHITE, "Pervedimas sëkmingas!" );
    PayLog           ( pInfo[ playerid ][ pMySQLID ], 15, pInfo[ giveplayerid ][ pMySQLID ], items );
    PayLog           ( pInfo[ giveplayerid ][ pMySQLID ], 14, pInfo[ playerid ][ pMySQLID ], items );

    pInfo[playerid][pBank] -= items;
    pInfo[giveplayerid][pBank] += items;

    SaveAccount      ( playerid );
    SaveAccount      ( giveplayerid );
    return 1;
}
CMD:bank( playerid, params[ ] )
{
    #pragma unused params
    if ( NearBankomat( playerid ) && !IsPlayerInAnyVehicle( playerid ) )
    {
        new string[ 64 ];
        format( string, sizeof(string), "Jûsø banko sàskaitoje %d$\n Kiek norësite iðsiimti?",pInfo[playerid][pBank]);
        ShowPlayerDialog( playerid, 2, DIALOG_STYLE_INPUT, "Bankomatas", string, "Nuimti", "Atðaukti" );
        return 1;
    }
    return 1;
}

CMD:takelesson( playerid, params[ ] )
{
    #pragma unused params
    if ( !IsPlayerInAnyVehicle( playerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: norëdami pradëti turite sëdëti mokymo automobilyje ");
    new vehid = GetPlayerVehicleID( playerid );
    if ( !isLicCar( vehid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: norëdami pradëti turite sëdëti mokymo automobilyje ");
    new model = GetVehicleModel( vehid );
	if(!IsItemInPlayerInventory(playerid, ITEM_TEORIJA))
        return SendClientMessage( playerid, COLOR_LIGHTRED2, "** Norëdami pradëti egzaminà privalote turëti iðlaikytos teorijos paþymà." );
 
    if ( GetPVarInt( playerid, "LIC_TYME" ) > 0 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs jau mokotës vaziuoti. " );
    switch( model )
    {
        case 487:
        {
            if ( pInfo[ playerid ][ pLicHeli ] == 1 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite laikytis licenzijos jei jau jà esate iðsilaikæs.");
			SendClientMessage( playerid, COLOR_LIGHTRED2,"** Los Santos Piloting License Center "),		
			SendClientMessage( playerid, COLOR_WHITE," ** Skraidymo egzaminas prasideda, dabar skriskite á nustatytas vietas. Skriskite atsargiai ir atsakingai. ");
            SetPVarInt       ( playerid, "LIC_CP",   1 );
            SetPVarInt       ( playerid, "LIC_TYPE", 3 );
            SetPVarInt       ( playerid, "LIC_TIME", 6000 );
            SetPVarInt       ( playerid, "LIC_MISTAKE", 0 );
            setLicenseCp     ( playerid );
            VehicleEngine( vehid, 1 );
        }
        case 426:
        {
            if ( pInfo[ playerid ][ pLicCar ] == 1 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs jau turite iðsilaikàs ðiá  licenzijá . ");
			SendClientMessage( playerid, COLOR_LIGHTRED2,"** Los Santos Driver License Center "),		
			SendClientMessage( playerid, COLOR_WHITE," ** Dabar vaþiuokite á þemëlapyje nurodytas vietas nevirðydami greièio ir nepaþeisdami tr. priemonës. ");
            SetPVarInt       ( playerid, "LIC_CP",   1 );
            SetPVarInt       ( playerid, "LIC_TYPE", 1 );
            SetPVarInt       ( playerid, "LIC_TIME", 6000 );
            SetPVarInt       ( playerid, "LIC_MISTAKE", 0 );
            setLicenseCp     ( playerid );
            VehicleEngine( vehid, 1 );
        }
        case 586:
        {
            if ( pInfo[ playerid ][ pLicMoto ] == 1 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs jau turite iðsilaikàs ðiá  licenzijá . ");
			SendClientMessage( playerid, COLOR_LIGHTRED2,"** Los Santos Driver License Center "),		
			SendClientMessage( playerid, COLOR_WHITE," ** Dabar vaþiuokite á þemëlapyje nurodytas vietas nevirðydami greièio ir nepaþeisdami tr. priemonës. ");
            SetPVarInt       ( playerid, "LIC_CP",   1 );
            SetPVarInt       ( playerid, "LIC_TYPE", 2 );
            SetPVarInt       ( playerid, "LIC_TIME", 6000 );
            SetPVarInt       ( playerid, "LIC_MISTAKE", 0 );
            setLicenseCp     ( playerid );
            VehicleEngine( vehid, 1 );
        }
        case 473:
        {
            if ( pInfo[ playerid ][ pLicBoat ] == 1 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs jau turite iðsilaikàs ðiá  licenzijá . ");
			SendClientMessage( playerid, COLOR_LIGHTRED2,"** Los Santos License Center "),		
			SendClientMessage( playerid, COLOR_WHITE," ** Dabar plaukite á navigacijoje paþymëtas vietas. ");
            SetPVarInt       ( playerid, "LIC_CP",   1 );
            SetPVarInt       ( playerid, "LIC_TYPE", 4 );
            SetPVarInt       ( playerid, "LIC_TIME", 6000 );
            SetPVarInt       ( playerid, "LIC_MISTAKE", 0 );
            setLicenseCp     ( playerid );
            VehicleEngine( vehid, 1 );
        }
        default: return 1;
    }
    return 1;
}
CMD:tlc( playerid, params[ ] )
{
    #pragma unused params
    if ( PlayerFaction( playerid ) == 1 || PlayerFaction( playerid ) == 2 )
    {
        if ( Tlc[ 0 ] == 0 ) return 1;
        SetPlayerCheckPointEx( playerid, CHECKPOINT_TLC, Tlc[ 0 ], Tlc[ 1 ], Tlc[ 2 ], 5.0 );
        Tlc[ 0 ] = 0;
        return 1;
    }
    return 1;
}
CMD:note( playerid, params[ ] )
{
    if(!IsItemInPlayerInventory(playerid, ITEM_NOTE)) 
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: su savimi neturite uþraðø knygutës.");
    new string[ 256 ],
        param [ 256  ],
        skai,
        ministr[ 8 ],
        ed[ 16 ];

    param = strtok( params, skai );
    if ( !strlen( param ) )
    {
        SendClientMessage( playerid, GRAD, "PAGALBA: /note [ tekstas ] " );
        SendClientMessage( playerid, COLOR_WHITE, "INFORMACIJA: delete - iðvalykite tekstá ." );
        SendClientMessage( playerid, COLOR_WHITE, "INFORMACIJA: show - perþiurëti savo uþraðus." );
        SendClientMessage( playerid, COLOR_WHITE, "INFORMACIJA: add - pridësite papildomos uþraðus.");
        return 1;
    }
    if ( !strcmp( param, "delete", true ) )
    {
        param = strtok( params, skai );
        if( !strlen( param ) ) return SendClientMessage( playerid, COLOR_WHITE, "PAGALBA: /note delete [ slotas 1 - 7 ]" );
        new slot = strval( param );
        if ( slot > 0 && slot <= 7 )
        {
            format           ( ministr, 8, "NOTE_%d", slot );
            SetPVarString    ( playerid, ministr, "" );
            format           ( ministr, 8, "NOTE2_%d", slot );
            SetPVarInt       ( playerid, ministr, 0 );
            SendClientMessage( playerid, COLOR_WHITE, "Uþraðai iðtrinti" );
            format     ( string, sizeof(string), "DELETE FROM notes WHERE owner = %d AND slot = %d", pInfo[ playerid ][ pMySQLID ], slot );
            mysql_query(DbHandle,  string, false);
            return 1;
        }
        else
            return SendClientMessage( playerid, COLOR_WHITE, "PAGALBA: /note delete [ slotas 1 - 7 ]" );
    }
    else if ( !strcmp( param,"show" , true ) )
    {
        SendClientMessage( playerid, COLOR_GREEN2, "_____________ Jûsø uþraðai _____________" );
        for ( new i = 1; i <= 7; i++ )
        {
            format           ( ministr, 8, "NOTE_%d", i );
            GetPVarString    ( playerid, ministr, string, 129 );
            format           ( ministr, 8, "NOTE2_%d", i );
            format           ( string, sizeof(string),"| %d: %s/%d", i, string, GetPVarInt ( playerid, ministr ) );
            SendClientMessage( playerid, COLOR_WHITE, string );
        }
    }
    else if ( !strcmp( param, "add", true ) )
    {
        param = strtok( params, skai );
        if( !strlen( param ) ) return SendClientMessage( playerid, COLOR_WHITE, "PAGALBA: /note add [ slotas 1 - 7 ][ tel. nr. ][ tekstas ]" );
        new slot = strval( param );
        param = strtok( params, skai );
        if( !strlen( param ) ) return SendClientMessage( playerid, COLOR_WHITE, "PAGALBA: /note add [ slotas 1 - 7 ][ tel. nr. ][ tekstas ]" );
        new number = strval( param );
        param = strtok( params, skai );
        if( !strlen( param ) ) return SendClientMessage( playerid, COLOR_WHITE, "PAGALBA: /note add [ slotas 1 - 7 ][ tel. nr. ][ tekstas ]" );
        
        if ( slot > 0 && slot < 8 )
        {
            if ( strlen( param ) < 1 || strlen( param ) > 128)
                return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Per maþai/daug teksto!");
            if ( number < 0 )
                return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Klaida!");

            valstr(ed,number);
            if( number > 0 && strcmp(GetNumber( playerid, number ), ed, true) )
                return true;

            mysql_real_escape_string(param,param);

            format           ( ministr, 8, "NOTE_%d", slot );
            SetPVarString    ( playerid, ministr, param );
            format           ( ministr, 8, "NOTE2_%d", slot );
            SetPVarInt       ( playerid, ministr, number );
            format           ( string, sizeof(string),"| %d: %s/%d", slot, param, number );
            SendClientMessage( playerid, COLOR_WHITE, string );
            savePlayerNotes  ( playerid, slot );
        }
        else
            return SendClientMessage( playerid, COLOR_WHITE, "PAGALBA: /note add [ slotas 1 - 7 ][ tel. nr. ][ tekstas ]" );
    }
    return 1;
}
stock checkVehicleByNumbers( numbers[ ] )
{
    foreach(Vehicles,i)
    {
        if ( !strcmp( numbers, cInfo[ i ][ cNumbers ], true ) ) return i;
    }
    return INVALID_VEHICLE_ID;
}
CMD:delarrestcar( playerid, params[ ] )
{
    if ( !UsePDCMD( playerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo nedirbdami policijos departamente.");
    new id,
        id2,
        string[ 128 ];
        
    if ( sscanf( params, "ud", id, id2 ) )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /delarrestcar [playerid] [ ID ] (pasako þaidëjas ið /v list )" );
    else if ( !IsPlayerConnected( id ) )      return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
    else if ( id2 > 20 ) return 1;
    else if ( !checkArrestedCar( id, pInfo[ id ][ pCar ][ id2 ] ) ) return 1;
    else
    {
        format     ( string, 126, "DELETE FROM arrestedcars WHERE cMySql = %d", pInfo[ id ][ pCar ][ id2 ] );
        mysql_query(DbHandle,  string, false);
        format     ( string, 126, "UPDATE vehicles SET cCrimes = 0 WHERE id = %d", pInfo[ id ][ pCar ][ id2 ]);
        mysql_query(DbHandle,  string, false);
        format         ( string, 126, "[LSPD] Policijos pareigûnas %s nutraukë areðtà tr. priemonei", GetPlayerNameEx( playerid ) );
        SendTeamMessage( 1, COLOR_POLICE, string );
    }
    return 1;
}
CMD:arrestcar( playerid, params[ ] )
{
    #pragma unused params
    if ( !UsePDCMD( playerid ) )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo nedirbdami policijos departamente.");

    new car = GetNearestVehicle( playerid, 10.0 );
    if ( car == INVALID_VEHICLE_ID || cInfo[ car ][ cOwner ] == 0 )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: áalia jûsø nerasta automobiliø");

    if (!Data_IsPlayerInRangeOfCoords(playerid, 40.0, "job_police_confiscated_garage"))
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs nesate prië policijos konfiskuotu automobiliu garaþø.");

    GetVehiclePos   ( car, cInfo[ car ][ cSpawn ][ 0 ], cInfo[ car ][ cSpawn ][ 1 ], cInfo[ car ][ cSpawn ][ 2 ]);
    GetVehicleZAngle( car, cInfo[ car ][ cSpawn ][ 3 ]);

    cInfo[ car ][ cCrimes    ] = 0;
    cInfo[ car ][ cTicket    ] = 0;
    cInfo[ car ][ cVehID     ] = 0;
    cInfo[ car ][ cVirtWorld ] = GetVehicleVirtualWorld( car );

    new string[ 126 ],
        name  [ 24  ];

    GetPlayerName( playerid, name, 24 );

    format     ( string, 126, "INSERT INTO arrestedcars (numbers,who,bauda,cMySql) VALUES ('%s','%s',%d,%d)", cInfo[ car ][ cNumbers ], name, cInfo[ car ][ cTicket ], cInfo[ car ][ cID ] );
    mysql_query(DbHandle,  string, false);

    format         ( string, 126, "[LSPD] Policijos pareigûnas %s areðtavo automobilá, kurio numeriai: %s.", name, cInfo[ car ][ cNumbers ] );
    SendTeamMessage( 1, COLOR_POLICE, string );

    new carowner = GetCarOwner( car );
    if ( IsPlayerConnected( carowner ) )
    {
        pInfo[ carowner ][ pCarGet ] --;
        format           ( string, 126, "[LSPD] Policijos pareigûnas %s areðtavo Jûsø automobilá, kurio numeriai: %s.", name, cInfo[ car ][ cNumbers ] );
        SendClientMessage( carowner, COLOR_POLICE, string );
    }
    SaveCar       ( car );

    DestroyVehicle( car );
    nullVehicle   ( car );
    return 1;
}
stock checkArrestedCar( playerid, car, mode = 1 )
{
    new string[ 126 ], bool:arrested = false, Cache:result; 

    format     ( string, 126, "SELECT * FROM arrestedcars WHERE cMySql = %d", car );
    result = mysql_query(DbHandle,  string );
    if ( cache_get_row_count( ) > 0  )
    {
        if( mode == 1 )
        {
            new id,
                numbers[ 24 ],
                who    [ 24 ],
                bauda,
                When   [ 54 ];

            id = cache_get_field_content_int(0, "id");
            cache_get_field_content(0, "numbers", numbers);
            cache_get_field_content(0, "who", who);
            bauda = cache_get_field_content_int(0, "bauda");
            cache_get_field_content(0, "Time", When); 

            SendClientMessage( playerid, COLOR_LIGHTRED, "_______________ Tr. Priemonës areðto blankas _______________");
            format           ( string, 126, "| Areðtavo: %s", who );
            SendClientMessage( playerid, COLOR_WHITE, string );
            format           ( string, 126, "| Numeriai: %s", numbers );
            SendClientMessage( playerid, COLOR_WHITE, string );
            format           ( string, 126, "| Bauda: %d", bauda );
            SendClientMessage( playerid, COLOR_WHITE, string );
            format           ( string, 126, "| áraðo numeris: %d", id );
            SendClientMessage( playerid, COLOR_WHITE, string );
            format           ( string, 126, "| Areðtavimo data: %s", When );
            SendClientMessage( playerid, COLOR_WHITE, string );
        }
        arrested =  true;
    }
    cache_delete(result);
    return arrested;
}
CMD:fopen( playerid, params[ ] )
{
    #pragma unused params
    if( PlayerFaction( playerid ) == 1 && pInfo[playerid][pRank] >= 4 )
    {
        if(IsPlayerInRangeOfPoint(playerid, 3.0 , 225.07645, 115.93130, 1002.21564 ) )
        {
            if ( vartai[ 2 ][ 1 ] == 0)
            {
                MoveObject (vartai[ 2 ][ 0 ], 223.57640, 115.93130, 1002.21558, 0.97, 0, 0, 0);
                vartai[ 2 ][ 1 ] = 1;
            }
            else 
            {
                MoveObject (vartai[ 2 ][ 0 ], 225.07645, 115.93130, 1002.21564, 0.97, 0, 0, 0);
                vartai[ 2 ][ 1 ] = 0;
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 3.0 , 239.64650, 118.66280, 1002.21570 ) )
        {
            if ( vartai[ 3 ][ 1 ] == 0)
            {
                MoveObject (vartai[ 3 ][ 0 ], 239.64650, 120.16280, 1002.21570, 0.97, 0, 0, -90);
                vartai[ 3 ][ 1 ] = 1;
            }
            else
            {
                MoveObject (vartai[ 3 ][ 0 ], 239.64650, 118.66280, 1002.21570, 0.97, 0, 0, -90);
                vartai[ 3 ][ 1 ] = 0;
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 3.0 , 217.56250, 120.77590, 1002.20752 ) )
        {
            if ( vartai[ 4 ][ 1 ] == 0)
            {
                MoveObject (vartai[ 4 ][ 0 ], 217.56250, 122.27590, 1002.20752, 0.97, 0, 0, -90);
                vartai[ 4 ][ 1 ] = 1;
            }
            else
            {
                MoveObject (vartai[ 4 ][ 0 ], 217.56250, 120.77590, 1002.20752, 0.97, 0, 0, -90);
                vartai[ 4 ][ 1 ] = 0;
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 3.0 , 266.45758, 115.84705, 1003.61621 ) )
        {
            if ( vartai[ 5 ][ 1 ] == 0)
            {
                MoveObject (vartai[ 5 ][ 0 ], 267.95761, 115.84710, 1003.6162, 0.97, 0, 0, 180);
                vartai[ 5 ][ 1 ] = 1;
            }
            else
            {
                MoveObject (vartai[ 5 ][ 0 ], 266.45758, 115.84705, 1003.61621, 0.97, 0, 0, 180);
                vartai[ 5 ][ 1 ] = 0;
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 3.0 , -10.00610, 2053.78491, 2129.00000 ) )
        {
            if ( vartai[ 6 ][ 1 ] == 0)
            {
                MoveObject (vartai[ 6 ][ 0 ], -10.00607, 2053.78491, 2129.00000, 0.97, 0, 0, 180);
                vartai[ 6 ][ 1 ] = 1;
            }
            else
            {
                MoveObject (vartai[ 6 ][ 0 ], -10.00610, 2053.78491, 2129.00000, 0.97, 0, 0, 180);
                vartai[ 6 ][ 1 ] = 0;
            }
        }		
    }
    return 1;
}
CMD:open( playerid, params[ ] )
{
    #pragma unused params
    new Float:dist = 5.0;
    if ( IsPlayerInAnyVehicle( playerid ) )
        dist = 9.0;
    else
        dist = 5.0;

    for ( new obj = 0; obj < sizeof CloseGate; obj ++ )
    {
        if ( PlayerToPoint( dist, playerid, CloseGate[ obj ][ 1 ], CloseGate[ obj ][ 2 ], CloseGate[ obj ][ 3 ] )
           && PlayerFaction( playerid ) == floatround( CloseGate[ obj ][ 7 ], floatround_round ) )
        {
            if ( Gates[ obj ] == false )
            {
                MoveObject  ( Gates2[ obj ], MoveGate[ obj ][ 0 ], MoveGate[ obj ][ 1 ], MoveGate[ obj ][ 2 ] , 0.97, MoveGate[ obj ][ 3 ], MoveGate[ obj ][ 4 ], MoveGate[ obj ][ 5 ] );
                Gates[ obj ] = true;
            }
            else if ( Gates[ obj ] == true )
            {
                MoveObject  ( Gates2[ obj ], CloseGate[ obj ][ 1 ], CloseGate[ obj ][ 2 ], CloseGate[ obj ][ 3 ], 0.97, CloseGate[ obj ][ 4 ], CloseGate[ obj ][ 5 ], CloseGate[ obj ][ 6 ] );
                Gates[ obj ] = false;
            }
        }
    }
    return 1;
}
CMD:bonnet(playerid)
{
    if ( !IsPlayerInAnyVehicle( playerid ) )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs nesëdite transporto priemonëje." );
    if ( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs ne automobilio vairuotojas." );

    new engine, lights, alarm, doors, bonnet, boot, objective,
        vehicleid = GetPlayerVehicleID( playerid );

    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

    if ( bonnet == 1 )
    {
        SendClientMessage(playerid, COLOR_WHITE, " Automobilio kapotas uþdarytas." );
        SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, 0, boot, objective);
        PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0 );
        return 1;
    }
    else
    {
        SendClientMessage(playerid, COLOR_WHITE, " Automobilio kapotas atidarytas." );
        SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, 1, boot, objective);
        PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
        return 1;
    }
}
CMD:trunko(playerid)
{
    new engine, lights, alarm, doors, bonnet, boot, objective,
        vehicleid = GetNearestVehicle( playerid, 10.0 );

    if ( vehicleid == INVALID_VEHICLE_ID )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, ðalia Jûsø nëra jokios tr. priemonës. ");
    if ( cInfo[ vehicleid ][ cLock ] == 1 )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, tr. priemonës bagaþinë yra uþrakinta." );

    GetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, boot, objective );

    if ( boot == 1 )
    {
        SendClientMessage(playerid, COLOR_WHITE, " Uþdarëtæ tr. priemonës bagaþinæ." );
        SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, 0, objective);
        PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0 );
        return 1;
    }
    else
    {
        SendClientMessage(playerid, COLOR_WHITE, " Atidarëte tr. priemonës bagaþinæ." );
        SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, 1, objective);
        PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
        return 1;
    }
}
CMD:buygun( playerid, params[ ] )
{
    #pragma unused params
    if(!PlayerToPoint(10.0,playerid,296.7012,-37.4115,1001.5156)) return 1;
    ShowPlayerDialog(playerid,6,DIALOG_STYLE_LIST ,"Ammu-nation parduotuvë","\
      1. Kastetas \t150$\
    \n2. Profesonali golfo lazda \t498$\
    \n3. Kiðeninis peilis \t89$\
    \n4. Medinë beisbolo lazda \t91$\
    \n5. Kastuvas \t75$\
    \n6. Bilijardo lazda \t344$\
    \n7. Paprasta lazda rankai \t43$\
	\n8. Daþø balionëlis (80) \t110$\
	\n9. Japoniðkas kalavijas - katana \t720$","Pirkti","Atðaukti");
    return 1;
}
CMD:try( playerid, params[ ] )
{
    new string[ 256 ];
    if( sscanf( params, "s[256]", string ) ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /try [veiksmas]");
    if( Mires[ playerid ] > 0 ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûsø veikëjas ðiuo metu yra kritinëje arba komos bûsenoje.");
    if( Mute[ playerid ] == true ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðiuo metu Jums yra uþdrausta kalbëtis (/mute), norëdami paðalinti draudimà susisiekite su Administratoriumi.");
    new tryd = random(2)+1;
    if(tryd == 1)
        format(string,256," *** %s bando: %s ir pavyksta.",GetPlayerNameEx( playerid ), string);
    else
        format(string,256," *** %s bando: %s bet nepavyksta.",GetPlayerNameEx( playerid ), string );
    ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    return 1;
}
CMD:s( playerid, params[ ] )
{
    new string[ 256 ];
    if(Mires[playerid] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûsø veikëjas ðiuo metu yra kritinëje arba komos bûsenoje.");
    if(Mute[playerid] == true) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðiuo metu Jums yra uþdrausta kalbëtis (/mute), norëdami paðalinti draudimà susisiekite su Administratoriumi.");
    if(sscanf(params,"s[256]", string )) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /s [textas]");
    format(string, 256, "%s ðaukia: %s", GetPlayerNameEx(playerid), string);
    ProxDetector(15.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
    return 1;
}

CMD:low( playerid, params[ ] )
{
    new string[ 256 ];
    if(Mires[playerid] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûsø veikëjas ðiuo metu yra kritinëje arba komos bûsenoje.");
    if(Mute[playerid] == true) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðiuo metu Jums yra uþdrausta kalbëtis (/mute), norëdami paðalinti draudimà susisiekite su Administratoriumi.");
    if(sscanf( params, "s[256]", string )) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /low [textas]");
    format(string, 256, "%s sako:[Tyliai] %s", GetPlayerNameEx(playerid), string);
    ProxDetector(2.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
    return 1;
}
CMD:t( playerid, params[ ] )
{
    new string[ 256 ];
    if(Mires[playerid] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûsø veikëjas ðiuo metu yra kritinëje arba komos bûsenoje.");
    if(Mute[playerid] == true) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðiuo metu Jums yra uþdrausta kalbëtis (/mute), norëdami paðalinti draudimà susisiekite su Administratoriumi.");
    if(sscanf(params,"s[256]", string )) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /t [textas]");
    format(string, 256, "%s sako: %s", GetPlayerNameEx(playerid), string);
    ProxDetector(7.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
    return 1;
}
CMD:d( playerid, params[ ] )
{
    new string[ 256 ];
    if(Mires[playerid] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûsø veikëjas ðiuo metu yra kritinëje arba komos bûsenoje.");
    if(Mute[playerid] == true) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðiuo metu Jums yra uþdrausta kalbëtis (/mute), norëdami paðalinti draudimà susisiekite su Administratoriumi.");
    if(PlayerFaction( playerid ) == 1 || PlayerFaction( playerid ) == 2 || PlayerFaction( playerid ) == 3 || PlayerFaction( playerid ) == 5)
    {
        if(sscanf( params, "s[256]", string )) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /d [textas]");
        format(string, 256, "|TARPDEPARTAMENTINË RACIJA| %s[%s] praneða: %s", GetPlayerNameEx( playerid ),GetPlayerRangName( playerid ), string);
        SendTeamMessage(1, COLOR_POLICE, string);
        SendTeamMessage(2, COLOR_LIGHTRED, string);
        SendTeamMessage(5, COLOR_LIGHTRED2, string);
        return 1;
    }
    return 1;
}
CMD:startmission(playerid,params[])
{
    if(pInfo[ playerid ][ pJob ] != JOB_TRASH)
        return 0;
    new vehicleid = GetPlayerVehicleID(playerid);

    if(TrashMission[ playerid ] != TRASH_MISSION_NONE)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûs jau esate pradëjas vygdyti misijà, norëdami jà nutraukti raðykite /endmission");

    if(!vehicleid || sVehicles[ vehicleid ][ Job ] != JOB_TRASH)   
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, norëdami atlikti ðá veiksmà, turite bûti ðiûðkleveþëje.");

    if(isnull(params))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /startmission [RAJONO PAVADINIMAS]"),
		SendClientMessage(playerid, COLOR_LIGHTRED, "RAJONAI: Rodeo Market Mulholand Jefferson Idlewood Colinas Beach East");

    new missionId = TRASH_MISSION_NONE;
    if(!strcmp(params,"Rodeo",true))
        missionId = TRASH_MISSION_MONTGOMERY;
    else if(!strcmp(params,"Market", true))
        missionId = TRASH_MISSION_DILIMORE;
    else if(!strcmp(params,"Mulholand", true))
        missionId = TRASH_MISSION_POLOMINO_CREEK;
    else if(!strcmp(params,"Jefferson", true))
        missionId = TRASH_MISSION_JEFFERSON;
    else if(!strcmp(params,"Idlewood", true))
        missionId = TRASH_MISSION_IDLEWOOD;		

    if(missionId == TRASH_MISSION_NONE)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /startmission [RAJONO PAVADINIMAS]"),
		SendClientMessage(playerid, COLOR_LIGHTRED, "RAJONAI: Rodeo Market Mulholand Jefferson Idlewood");

    TrashMission[ playerid ] = missionId;
    CurrentTrashCp[ playerid ] = 1;
    SetPVarInt(playerid, "TrashMission_Vehicle", vehicleid);
    SetTimerEx( "StartEngine", 1500, false, "dd", playerid, vehicleid );
    StartingEngine[playerid] = true;
    //SetPlayerCheckPointEx(playerid, CHECKPOINT_TRASH, TrashCp[ missionId ][ 0 ][ PosX ], TrashCp[ missionId ][ 0 ][ PosY ], TrashCp[ missionId ][ 0 ][ PosZ ], 5.0);
    ShowPlayerTrashMissionCP(playerid, TrashMission[ playerid ], 1);
	SendClientMessage(playerid, COLOR_NEWS, "Ðiûðkleveþio misija sëkmingai pradëta."),	
    SendClientMessage(playerid, COLOR_LIGHTRED2, "MISIJA: Vaþiuokite surinkti ðiûkðliø á pasirinktà rajonà, kuris nustatytas Jûsø þemëlapyje."),
 	SendClientMessage(playerid, COLOR_NEWS, "KOMANDOS: /takegarbage - paiimti ðiûðkðlëms. /throwgarbage - iðmesti ðiûkðlëms á sunkeþimá.");	   
	cmd_ame(playerid, "pasuka automobilio raktelá ir bando uþvesti variklá.");
    return 1;
}

CMD:endmission(playerid)
{
    if(pInfo[ playerid ][ pJob ] != JOB_TRASH)
        return 0;
    if(TrashMission[ playerid ] == TRASH_MISSION_NONE)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûs nesate pradëjas misijos. Raðykite  /startmission");

    EndTrashMission(playerid);
    SendClientMessage(playerid, COLOR_LIGHTRED, "Sëkmingai nutraukëtæ misijà, bet Jûsø surinktos ðiûkðlës sunkveþime niekur nedings.");
    return 1;
}

// Valid numbers are 1 - limit 
stock ShowPlayerTrashMissionCP(playerid, mission, number)
{
    new count = 0;
    for(new i = 0 ; i < sizeof(GarbageInfo); i++)
    {
        if(GarbageInfo[ i ][ gMission ] == TRASH_MISSION_NONE) continue;
        if(GarbageInfo[ i ][ gMission ] == mission)
        {
            count++;
            if(number == count)
            {
                new Float:x,Float:y,Float:z;
                GetDynamicObjectPos(GarbageInfo[ i ][ gObjectId ], x, y, z);
                SetPlayerCheckPointEx(playerid, CHECKPOINT_TRASH, x, y, z, 4.0);
                return 1;
            }
        }
    }
    return 0;
}

stock HideTrashMissionObjectForPlayer(playerid, mission, number)
{
    new Players[ MAX_PLAYERS ], playerCount;
    foreach(Player,i)
    {
        if(i == playerid) continue;
        Players[ playerCount ++ ] = i;
    }

    new count = 0;
    for(new i = 0 ; i < sizeof(GarbageInfo); i++)
    {
        if(GarbageInfo[ i ][ gMission ] == TRASH_MISSION_NONE) continue;
        if(GarbageInfo[ i ][ gMission ] == mission)
        {
            count++;
            if(number == count)
            {
                new Float:pos[6];
                GetDynamicObjectPos(GarbageInfo[ i ][ gObjectId ], pos[0], pos[1], pos[2]);
                GetDynamicObjectRot(GarbageInfo[ i ][ gObjectId ], pos[3], pos[4], pos[5]);
                DestroyDynamicObject(GarbageInfo[ i ][ gObjectId ]);
                GarbageInfo[ i ][ gObjectId ] = CreateDynamicObjectEx(GarbageInfo[ i ][ gModel ],
                    pos[0],pos[1],pos[2],pos[3],pos[4],pos[5],
                    .players = Players, .maxplayers = playerCount);
                return 1;
            }
        }
    }
    return 0;
}

EndTrashMission(playerid)
{
    SetVehicleToRespawn(GetPVarInt(playerid, "TrashMission_Vehicle"));
    TrashBagsInTrashVehicle[ GetPVarInt(playerid, "TrashMission_Vehicle") ] = 0;
    ShowMissionTrashObjects(playerid, TrashMission[ playerid ]);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    TrashMission[ playerid ] = TRASH_MISSION_NONE;
    DisablePlayerCheckpoint(playerid);
    CurrentTrashCp[ playerid ] = 0;
    Checkpoint[ playerid ] = CHECKPOINT_NONE;
    DeletePVar(playerid, "TrashMission_Vehicle");
    KillTimer(TrashTimer[ playerid ]);
    if(IsPlayerAttachedObjectSlotUsed(playerid, TRASH_OBJECT_INDEX))
        RemovePlayerAttachedObject(playerid, TRASH_OBJECT_INDEX);
}

CMD:takegarbage(playerid)
{
    if(pInfo[ playerid ][ pJob ] != JOB_TRASH)
        return 0;
    if(!IsPlayerInCheckpoint(playerid) && Checkpoint[ playerid ] == CHECKPOINT_TRASH)
        return SendClientMessage(playerid, GRAD, "Klaida, norëdami paiimti ðiûkðles privalote bûti ðiûkðliø paþymëtoje vietoje.");
    if(IsPlayerInAnyVehicle(playerid))
        return SendClientMessage(playerid, GRAD, "Klaida, negalite paimti ðiukðliø bûdami transporto priemonëje.");
    if(IsCarryingTrash[ playerid ])
        return SendClientMessage(playerid, GRAD,"Klaida, Jûs jau turite paëmæs ðiûkðles");

    ApplyAnimation(playerid,"CARRY","LIFTUP",4.1,0,1,1,0,1000,1);
    SetPVarInt(playerid, "Tipas2", 3);
    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
    IsCarryingTrash[ playerid ] = true;
    //SetPlayerAttachedObject(playerid,TRASH_OBJECT_INDEX ,1265,1, 0.100000, 0.553958, -0.024002, 356.860290, 269.945068, 0.000000, 0.834606, 1.000000, 0.889027 );
    HideTrashMissionObjectForPlayer(playerid, TrashMission[ playerid ], CurrentTrashCp[ playerid ]);

    SendClientMessage(playerid, COLOR_NEWS, "Sëkmingai paiimëte maiðà su ðiûkðlëmis, dabar prieikite prie sunkveþimio galo ir ámeskite su komanda: /throwgarbage");
    Checkpoint[playerid] = CHECKPOINT_NONE;
    DisablePlayerCheckpoint(playerid);
    return 1;
}

CMD:throwgarbage(playerid)
{
    if(pInfo[ playerid ][ pJob ] != JOB_TRASH)
        return 0;

    if(!IsCarryingTrash[ playerid ])
        return SendClientMessage(playerid, GRAD, "Klaida, negalite iðmesti ðiûkðliø, kuriø neturite rankoje. Ásitikinkite ar tikrai paiimëte ðiûkðliø maiðà.");

    new vehicleid = GetPVarInt(playerid, "TrashMission_Vehicle"),Float:x,Float:y,Float:z;
    GetVehiclePos(vehicleid, x,y, z);
    GetXYBehindVehicle(vehicleid,x,y,4.0);


    if(!IsPlayerInRangeOfPoint(playerid, 3.0, x,y,z-1.0))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, esate per toli nuo sunkveþimio galo, tad negalite ámesti ðiûkðliø.");

    TrashBagsInTrashVehicle[ vehicleid ]++;
    ApplyAnimation(playerid, "GRENADE", "WEAPON_THROWU", 4.1, 0, 0, 0, 0, 0);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    IsCarryingTrash[ playerid ] = false;
    SetTimerEx("RemoveGarbageBagDelay", 300, false,"i",playerid);

    CurrentTrashCp[ playerid ] ++;
    // Baigta misija. ShowPlayerTrashMissionCP graþins 0 jei nebëra kà rodyt...
    if(!ShowPlayerTrashMissionCP(playerid, TrashMission[ playerid ], CurrentTrashCp[ playerid ])
        || TrashBagsInTrashVehicle[ vehicleid ] >= GetTrashMissionCPCount(TrashMission[ playerid ]))
    {
        Data_SetPlayerCheckPointEx(playerid, CHECKPOINT_TRASH_DROPOFF, "job_trash_dropoff", 5.0);
        SendClientMessage(playerid, COLOR_NEWS, "Jûsø sunkveþimis pilnas. Veþkite ðiukðles á ðiukðlynà .");
    }
    else 
    {
        SendClientMessage(playerid, COLOR_NEWS, "Vaþiuokite prie sekanèio konteinerio.");
    }

    return 1;
}

stock ShowMissionTrashObjects(playerid,missionid)
{
    for(new i = 0; i < sizeof GarbageInfo; i++)
    {
        if(missionid != GarbageInfo[ i ][ gMission ] || GarbageInfo[ i ][ gMission ] == TRASH_MISSION_NONE) continue;

        new Players[ MAX_PLAYERS ], count = 0,Float:x,Float:y,Float:z,Float:rx,Float:ry,Float:rz;
        foreach(Player,j)
        {
            if(j == playerid) continue;
            if(Streamer_IsItemVisible(j, STREAMER_TYPE_OBJECT, GarbageInfo[ i ][ gObjectId ]))
                Players[ count++ ] = j;
        }
        Players[ count++ ] = playerid;

        GetDynamicObjectPos(GarbageInfo[ i ][ gObjectId ],x, y, z);
        GetDynamicObjectRot(GarbageInfo[ i ][ gObjectId ], rx, ry, rz);
        DestroyDynamicObject(GarbageInfo[ i ][ gObjectId ]);
        GarbageInfo[ i ][ gObjectId ] = CreateDynamicObjectEx(GarbageInfo[ i ][ gModel ], x, y, z, rx, ry, rz, .players = Players, .maxplayers = count);
    }
}

stock GetTrashMissionCPCount(missionid)
{
    new count = 0;
    for(new i = 0; i < sizeof(GarbageInfo); i++)
    {
        if(GarbageInfo[ i ][ gMission ] == TRASH_MISSION_NONE ) continue;
        if(GarbageInfo[ i ][ gMission ] == missionid)
            count++;
    }
    return count;
}

forward RemoveGarbageBagDelay(playerid);
public RemoveGarbageBagDelay(playerid)
    return RemovePlayerAttachedObject(playerid, TRASH_OBJECT_INDEX);


CMD:pickuptrash( playerid, params[ ] )
{
    #pragma unused params
    for( new i = 0; i < 12; i++ )
    {
        if( IsValidDynamicObject( RandBus[ i ][ objectas ] ) && IsPlayerInRangeOfPoint(playerid, 3.0, RandBus[ i ][ X4 ], RandBus[ i ][ Y4 ], RandBus[ i ][ Z4 ] ) )
        {
            DestroyDynamicObject( RandBus[ i ][ objectas ] );
            ApplyAnimation( playerid, "CARRY", "liftup", 4.0, 0, 1, 0, 0, 0 );
            SetPVarInt( playerid, "Tipas2", true );
            SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
        }
    }
    return 1;
}
CMD:placetrash( playerid, params[ ] )
{
    #pragma unused params
    new idcar = INVALID_VEHICLE_ID,
        string[54];
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        idcar = GetPlayerVehicleID( playerid );
    else
        idcar = GetNearestVehicle( playerid, 5.0 );
    if ( idcar == INVALID_VEHICLE_ID ) return SendClientMessage( playerid, GRAD, "Tai kad aplink tave nëra jokio automobilio...");
    if ( GetVehicleModel(idcar) == 408 && IsPlayerAttachedObjectSlotUsed(playerid, 7) )
    {
        ApplyAnimation(playerid,"CARRY","putdwn", 4.0, 0, 1, 0, 0, 0 );
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
        RemovePlayerAttachedObject(playerid, 7);
        idcar = random(50)+1;
        pInfo[playerid][pPayCheck] += idcar;
        AddJobExp( playerid, 1 );
        format(string, 54, "~g~%d$ ~w~prideda prie jusu atlyginimo.",idcar);
        ShowInfoText(playerid, string, 5000);
    }
    return 1;
}

CMD:giverec( playerid, params[ ] )
{
    new giveplayerid,
        string[ 126 ];

    if ( sscanf( params, "u", giveplayerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /giverec [veikëjo id]");
    if ( !PlayerToPlayer( 5.0, playerid, giveplayerid ) )  return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs nesate ðalia veikëjo. ");
    if ( PlayerFaction( playerid ) == 2 )
    {
        if(IsPlayerInventoryFull(playerid))
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Nepakanka vietos jo inventoriuje" );
        GivePlayerItem(giveplayerid, ITEM_MEDLIC, 1); 
        format      (string, 126, "* %s iðraðo vaistø receptá  ir paduoda %s ", GetPlayerNameEx( playerid ), GetPlayerNameEx( giveplayerid ) );
        ProxDetector(20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
        return 1;
    }
    return 1;
}


CMD:tpda(playerid)
{
    if ( pInfo[ playerid ][ pJob ] != JOB_TRUCKER )
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite naudoti ðios komandos nedirbdami kroviniø perveþimø vairuotoju.");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, komanda galite naudoti tik sedëdami tr. priemonës vairuotojo vietoje");
    if(!IsVehicleTrucker(GetVehicleModel(GetPlayerVehicleID(playerid))))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ði tr. priemonë negalima kroviniø perveþimams.");

    ShowTPDA(playerid);
    return 1;
}


CMD:cargo(playerid, params[])
{
    if ( pInfo[ playerid ][ pJob ] != JOB_TRUCKER )
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite naudoti ðios komandos nedirbdami kroviniø perveþimø vairuotoju.");
    
    if(isnull(params) || strfind(params," ") != -1)
    {
        cargo_help:
        SendClientMessage(playerid, COLOR_LIGHTRED, "__________________________Kroviniø valdymas ir komandos__________________________");
        SendClientMessage(playerid,COLOR_LIGHTRED2, "  TEISINGAS KOMANDOS NAUDOJIMAS: /cargo [KOMANDA], pavyzdþiui: /cargo list");
        SendClientMessage(playerid,GRAD,"  PAGRINDINËS KOMANDOS: list, place, fork, unfork, putdown, pickup, buy, sell");
        SendClientMessage(playerid,GRAD,"  KITOS KOMANDOS: /trailer - priekabø valdymas");		
        return 1;
    }
    // Sàraðas turimo krovinio
    if(!strcmp(params, "list",true))
    {
        if(IsPlayerInAnyVehicle(playerid))
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, turite bûti prie savo sunkveþimio norëdami atlikti ðá veiksmà.");

        new vehicleid = GetNearestVehicle( playerid, 5.0 );
        if(vehicleid == INVALID_VEHICLE_ID)
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðalia Jûsø nëra jokios tr. priemonës.");
        new model = GetVehicleModel(vehicleid);
        if(!IsVehicleTrucker(model) && !IsVehicleTrailer(model))
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ði tr. priemonë yra tuðèia.");
        if(cInfo[ vehicleid ][ cLock ])
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðalia Jûsø esanti tr. priemonë yra uþrakinta. Atrakinkite ir bandykite dar kartà.");
        
        ShowVehicleCargo(playerid, vehicleid);
        return 1;
    }
    if(!strcmp("buy",params,true))
    {
        new string[512];
        // Jei ne prie industrijos, nëra kà pikrt.
        if(!IsPlayerInRangeOfAnyIndustry(playerid, 4.0))
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, norëdami pirkti prekes turite bûti/stovëti ðalia kompanijos, kuri parduoda juos.");

        new index = GetPlayerIndustryInRange(playerid, 4.0);
        foreach(CommodityIterator, i)
        {
            if(Commodities[ i ][ IndustryId ] == Industries[ index ][ Id ] 
                && Commodities[ i ][ SellBuyStatus ] == Selling
                && !Commodities[ i ][ IsBusinessCommodity ])
                format(string,sizeof(string),"%s%s\n",string, GetCargoName(Commodities[ i ][ CargoId ]));
            SetPVarInt(playerid, "Industry_Index", index);
            ShowPlayerDialog( playerid, DIALOG_SOLD_COMMODITY_LIST, DIALOG_STYLE_LIST, Industries[ index ][ Name ], string, "Pirkti", "Atgal" );
        }
        return 1;
    }
    if(!strcmp(params, "sell", true))
    {
        new cargoid = GetPVarInt(playerid, "CargoId"),
            string[1024],
            bool:sellToBusines,
            bool:sellToIndustry,
            bool:sellToShip;

        new index;
        foreach(IndustryIterator, i)
        {
            if(!IsPlayerInRangeOfPoint(playerid, 3.0, Industries[ i ][ PosX ], Industries[ i ][ PosY ], Industries[ i ][ PosZ ])) continue;
            if(!IsIndustryAcceptingCargo(i, cargoid) && cargoid)
            {
                sellToIndustry = false;
                break;
            }
            sellToIndustry = true;
            index = i;
            break;
        }
        new bizindex;
        if((bizindex = GetPlayerBusinessIndex(playerid)) != -1)
        {
            if(IsBusinessAcceptingCargo(bizindex, cargoid) && cargoid)
            {
                sellToBusines = true;
            }
        }

        if(IsPlayerInRangeOfCargoShip(playerid,4.0))
            sellToShip = true;

        /// Jei þaidëjas laiko dëþæ su prekëm
        if(cargoid)
        {
            if(!sellToBusines && !sellToIndustry && !sellToShip)
                return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, turite bûti ðalia kompanijos arba verslo arba ði kompanija/verslas neperka jokiø prekiø.");

            new price;
            if(sellToIndustry)
            {
                if(!Industries[ index ][ IsBuyingCargo ])
                    return SendClientMessage(playerid, GRAD, "Klaida, dël produktø pertekliaus ði industrija nedirba.");
                if(!HasIndustryRoomForCargo(index, cargoid))
                    return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, industrija ðiai prekei nebeturi vietos.");
                // Jei parduoda ta krovini kuri pirko ten pat.
                if(IsIndustrySellingCargo(index, cargoid))
                    price = Commodities[ GetIndustryCargoIndex(index, cargoid) ][ Price ];
                else 
                    price = GetCommoditySellPrice(GetIndustryCargoIndex(index,cargoid));
                AddCargoToIndustry(index, cargoid);
            }
            else if(sellToBusines)
            {
                price = Commodities[ GetBusinessCargoIndex(index, cargoid) ][ Price ];
                if(price > bInfo[ index ][ bBank ])
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Verslas nebeturi pakankamai lëðø, kad nupirktu ðià prekæ. Susisiekite su savininku.");
                    // reik surast savininkà ir pasakyk kad kapeikos baigës :(
                    foreach(Player,i)
                        if(pInfo[ i ][ pMySQLID ] == bInfo[ index ][ bOwner ])
                        {
                            SendClientMessage(playerid, COLOR_LIGHTRED, "Dëmesio, Jûsø verslo banke pasibaigë pinigai, visi prekiø pirkimai buvo atðaukti/nutraukti.");
                            StopBusinessBuyingCargo(index, cargoid);
                            break;
                        }
                }
                bInfo[ index ][ bBank ] -= price;
                AddCargoToBusiness(index, cargoid);
                
                // Jei verslas pasiekë limità, jis daugiau pirkti nebegali.
                if(bInfo[ index ][ bProducts ] >= MAX_BUSINESS_PRODUCTS)
                    StopBusinessBuyingCargo(index, cargoid);
            }
            else if(sellToShip)
            {
                if(ShipInfo[ Status ] != Docked)
                    return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, laivas ðiuo metu yra iðplaukæs. Naudokite komanda /tpda daugiau informacijos.");
                
                price = GetShipCargoPrice(cargoid);
                ShipInfo[ CurrentStock ] += GetCargoSlot(cargoid);
            }
              
            GivePlayerMoney(playerid, price);
            DeletePVar(playerid, "CargoId");
            ApplyAnimation(playerid,"CARRY","putdwn", 4.0, 0, 1, 0, 0, 0 );
            RemovePlayerAttachedObject(playerid, 7);
            SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
            format(string,sizeof(string)," Jûsø veþamà kroviná/prekes pavadinimu:  {97cd17}%s{FFFFFF}, sëkmingai nupirko uþ{97cd17}%d${FFFFFF}",GetCargoName(cargoid), price);
            SendClientMessage(playerid, COLOR_WHITE, string);
        }
        // Jei þaidëjas nelaiko prekës, bandom ieðkot transporto piremoniø.
        else 
        {
            if(!sellToBusines && !sellToIndustry && !sellToShip)
                return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûs neesate prie kompanijos arba verslo arba jie neperka ðios prekës.");
            
            new vehicleid = GetNearestVehicle(playerid, 5.0);
        
            
            if(IsTrailerAttachedToVehicle(vehicleid))
                vehicleid = GetVehicleTrailer(vehicleid);

            if(!CanPlayerUseTruckerVehicle(playerid,GetVehicleModel(vehicleid)))
                return SendClientMessage(playerid, COLOR_LIGHTRED, "Dëmesio, neturite pakankamai patirties taðkø, kad galëtumëte veþti krovinius su ðia tr. priemone.");

            // Jei maðina yra ðalia, ir tai fûristø transporto priemonë ARBA priekaba.
            if(vehicleid != INVALID_VEHICLE_ID
                && (IsVehicleTrucker(GetVehicleModel(vehicleid)) || IsVehicleTrailer(GetVehicleModel(vehicleid))))
            {
                if(cInfo[ vehicleid ][ cLock ])
                    return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ði tr. priemonë yra uþrakinta.");
                new cargocount = 0;
                for(new i = 0; i < sizeof VehicleCargo[]; i++)
                {
                    if(!VehicleCargo[ vehicleid ][ i ][ Amount ])
                        continue;
                    if(sellToBusines && !IsBusinessAcceptingCargo(index, VehicleCargo[ vehicleid ][ i ][ CargoId ]))
                        continue;
                    else if(sellToIndustry && !IsIndustryAcceptingCargo(index, VehicleCargo[ vehicleid ][ i ][ CargoId ] ))
                        continue;
                    else if(sellToShip && !IsShipAcceptingCargo(VehicleCargo[ vehicleid ][ i ][ CargoId ]))
                        continue;
                        
                    cargocount++;   
                    format(string,sizeof(string),"%s%d\t%s\t%d vienetai\n",
                        string,
                        VehicleCargo[ vehicleid ][ i ][ CargoId ],
                        GetCargoName(VehicleCargo[ vehicleid ][ i ][ CargoId ]),
                        VehicleCargo[ vehicleid ][ i ][ Amount ]);
                }
                if(!cargocount)
                    ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Prekiø pardavimas","Jûsø automobilyje nëra prekiø kurias perka ði kompanija.","Gerai","");
                else 
                {
                    SetPVarInt(playerid, "IndustryIndex", index);
                    SetPVarInt(playerid, "vehicleid", vehicleid);
                    if(sellToBusines)
                        SetPVarInt(playerid, "CommoditySellTo",1);
                    else if(sellToIndustry)
                        SetPVarInt(playerid, "CommoditySellTo",2);
                    else if(sellToShip)
                        SetPVarInt(playerid, "CommoditySellTo",3);
                    ShowPlayerDialog(playerid, DIALOG_COMMODITY_SELL, DIALOG_STYLE_LIST, "Prekiø pardavimas",string, "Parduoti", "Iðeiti");
                }
            }
            else 
                return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûs neturite rankoje prekiø arba ðalia Jûsø nëra tr. priemonës su prekëmis.");
        }   
        DeletePVar(playerid, "CargoId");
        return 1;
    }
    if(!strcmp(params, "fork", true))
    {
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) 
            return SendClientMessage(playerid,COLOR_LIGHTRED,"Klaida, privalotë sedëti savo tr. priemonëje.");
        
        new vehicleid = GetPlayerVehicleID( playerid );
        if( GetVehicleModel( vehicleid ) != 530 )
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, komanda /fork galima tik sëdint specialioje tam skirtoje tr. priemonëje.");

        vehicleid = GetClosestVehicleToVehicle(vehicleid, 8.0);
        if(vehicleid == INVALID_VEHICLE_ID)
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðalia Jûsø nëra jokios tr. priemonës.");
        if(!CanPlayerUseTruckerVehicle(playerid,GetVehicleModel(GetPlayerVehicleID(playerid))))
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Dëmesio, neturite pakankamai patirties taðkø, kad galëtumëte veþti krovinius su ðia tr. priemone.");
        if(cInfo[ vehicleid ][ cLock ])
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðalia esanti tr. priemonë yra uþrakinta.");
        ShowVehicleCargo( playerid, vehicleid);
        return 1;
    }
    if(!strcmp(params, "unfork", true))
    {
        new vehicleid = GetPlayerVehicleID( playerid );
        if( GetVehicleModel( vehicleid ) != 530 )
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, komanda /fork galima tik sëdint specialioje tam skirtoje tr. priemonëje.");
        vehicleid = GetClosestVehicleToVehicle(vehicleid, 8.0);
        if(vehicleid == INVALID_VEHICLE_ID)
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðalia Jûsø nëra jokios tr. priemonës.");
        if(cInfo[ vehicleid ][ cLock ])
            return SendClientMessage(playerid,  COLOR_LIGHTRED, "Klaida, ðalia esanti tr. priemonë yra uþrakinta.");
        if(!CanPlayerUseTruckerVehicle(playerid,GetVehicleModel(vehicleid)))
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Dëmesio, neturite pakankamai patirties taðkø, kad galëtumëte veþti krovinius su ðia tr. priemone.");
        new cargoid;
        for(new i = 0; i < sizeof VehicleCargo[]; i++)
        {
            if(!VehicleCargo[ vehicleid ][ i ][ Amount ])
                continue;
            cargoid = VehicleCargo[ vehicleid ][ i ][ CargoId ];
            break;
        }
        if(!cargoid)
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûsø transporto priemonëje nëra jokio krovinio!");
        if(!HasVehicleSpaceForCargo(vehicleid, cargoid))
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Ðioje transporto primonëje nebëra vietos!");
        
        RemoveCargoFromVehicle(GetPlayerVehicleID(playerid), cargoid);
        AddCargoToVehicle(vehicleid, cargoid);
        SendClientMessage(playerid, COLOR_WHITE, " Sveikiname,  {97cd17}sëkmingai {FFFFFF} pakrovëtæ tr. priemonæ prekëmis.");
        return 1;
    }
    if(!strcmp(params, "putdown", true))
    {
        new slotid = GetFreeBoxSlot( ),
            cargoid = GetPVarInt(playerid, "CargoId");
        if(slotid == -1)
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite padëti ðios deþës, kadangi serveryje negali bûtø daugiau nei " #MAX_BOXES " dëþiø");
 
        if(!cargoid)
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite padëti dëþës, kurios nelaikote rankoje.");

        if ( slotid < MAX_BOXES)
        {
            new Float:x, Float:y, Float:z;
            GetPlayerPos        ( playerid, x, y, z);
            GetXYInFrontOfPlayer( playerid, x, y, 1.0 );
            CargoBox[ slotid ][ CargoId ] = cargoid;
            CargoBox[ slotid ][ ObjectId ] = CreateDynamicObject( 2912, x, y, z-1, 0, 0, 0 );
            CargoBox[ slotid ][ DissapearTimer ] = SetTimerEx("OnCargoBoxDestroy",5*60*1000, false, "i", slotid);
            CargoBox[ slotid ][ CanBePickedUp ] = true;
            ApplyAnimation(playerid,"CARRY","putdwn", 4.0, 0, 1, 0, 0, 0 );
            RemovePlayerAttachedObject(playerid, 7);
            SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
            DeletePVar(playerid, "CargoId");
        }
        return 1;
    }
    if(!strcmp(params, "pickup", true))
    {
        new cargoid = GetPVarInt(playerid, "CargoId"),
            Float:x,Float:y, Float:z, string[64];
        if(cargoid)
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite paiimti dar vienos dëþës, kada rankose jau kaþkà laikote.");

        for(new i = 0; i < MAX_BOXES; i++)
        {
            GetDynamicObjectPos(CargoBox[ i ][ ObjectId ], x, y, z);
            if (IsValidDynamicObject( CargoBox[ i ][ ObjectId ] ) && IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z) && CargoBox[ i ][ CanBePickedUp ])
            {
                CargoBox[ i ][ CanBePickedUp ] = false;
                DestroyDynamicObject( CargoBox[ i ][ ObjectId ] );
                KillTimer(CargoBox[ i ][ DissapearTimer ]);
                ApplyAnimation( playerid, "CARRY", "liftup", 4.0, 0, 1, 0, 0, 0 );
                SetPVarInt( playerid, "Tipas2", false );
                SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
                SetPVarInt(playerid, "CargoId", CargoBox[ i ][ CargoId ]);
                format(string,sizeof(string),"Sëkmingai pakëlëtæ dëþæ ant kurios etiketës yra paraðytas prekës pavadinimas: {97cd17} %s", GetCargoName( CargoBox[ i ][ CargoId ]));
                SendClientMessage(playerid, COLOR_WHITE, string);
                CargoBox[ i ][ CargoId ] = 0;
                return 1;
            }
        }
        SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, prie Jûsø nëra jokios dëþës, kad galëtumëte paiimti.");
        return 1;
    }
    if(!strcmp(params,"place", true))
    {
        new vehicleid = GetNearestVehicle(playerid, 5.0),
            cargoid = GetPVarInt(playerid, "CargoId");
        if(vehicleid == INVALID_VEHICLE_ID)
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðalia Jûsø turi bûti tr. priemonë, kurioje padësitæ kroviná");

        if(IsTrailerAttachedToVehicle(vehicleid))
            vehicleid = GetVehicleTrailer(vehicleid);
            
        if(!CanPlayerUseTruckerVehicle(playerid,GetVehicleModel(vehicleid)))
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Dëmesio, neturite pakankamai patirties taðkø, kad galëtumëte veþti krovinius su ðia tr. priemone.");
        if(!cargoid)
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûs nelaikote dëþës rankose, kad galëtumëte ádëti.");
        if(!IsCargoCompatibleWithVehicle(cargoid, GetVehicleModel(vehicleid)))
            return SendClientMessage(playerid, COLOR_LIGHTRED, " Klaida, ði tr. priemonë nëra pritaikyta tokio tipo kroviniui.");
        if(!HasVehicleSpaceForCargo(vehicleid, cargoid))
            return SendClientMessage(playerid, COLOR_LIGHTRED, " Dëmesio, ðá tr. priemonë jau yra pakrauta ir pilna.");
        if(cInfo[ vehicleid ][ cLock ])
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðalia esanti tr. priemonë yra uþrakinta.");

        AddCargoToVehicle(vehicleid, cargoid);
        ApplyAnimation(playerid,"CARRY","putdwn", 4.0, 0, 1, 0, 0, 0 );
        RemovePlayerAttachedObject(playerid, 7);
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
        DeletePVar(playerid, "CargoId");
        return 1;
    }
    if(pInfo[ playerid ][ pAdmin ] >= 4 && !strcmp(params,"boxinfo", true))
    {
        new Float:dist, Float:x,Float:y,Float:z, string[1024];
        for(new i = 0; i < MAX_BOXES; i++)
        {
            if(!IsValidDynamicObject(CargoBox[ i ][ ObjectId ]))
                continue;
            GetDynamicObjectPos(CargoBox[ i ][ ObjectId ], x, y, z);
            dist = GetPlayerDistanceFromPoint(playerid, x, y, z);
            format(string, sizeof(string),"%sIndeksas:%d X:%.2f Y:%.2f Z:%.2f Atstumas:%.2f cargoid:%d Pavadinimas:%s\n",
                string,
                x,y,z,
                dist, 
                CargoBox[ i ][ CargoId],
                GetCargoName(CargoBox[ i ][ CargoId]));
        }
        if(isnull(string))
            return SendClientMessage(playerid,GRAD, "Ðiuo metu nëra ant þemës padëtø dëþiø.");
        ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Deziu, padetu ant zemes sarasas.", string, "Gerai", "");
        return 1;
    }
    else 
        goto cargo_help;
    return 1;
}


stock GetIndustryCount()
{
    new count = 0;
    for(new i = 0; i < sizeof Industries; i++)
        if(Industries[ i ][ Id ])
            count++;
    return count;
}
stock GetIndustryCargoIndex(index,cargoid)
{
	foreach(CommodityIterator, i)
		if(Commodities[ i ][ IndustryId ] == Industries[ index ][ Id ]
		&& Commodities[ i ][ CargoId] == cargoid
		&& !Commodities[ i ][ IsBusinessCommodity ])
			return i;
	return -1;
}

CMD:trailer(playerid, params[])
{
    if(isnull(params))
    {
        trailer_help:
        SendClientMessage(playerid, COLOR_LIGHTRED, "__________________________Trailer Cargo komandos ir naudojimas__________________________");
        SendClientMessage(playerid,COLOR_LIGHTRED2, "  KOMANDOS NAUDOJIMAS: /trailer [komanda], pavyzdþiui: /trailer cargo");
        SendClientMessage(playerid,GRAD,"  PAGRINDINES: lock, detach, lights, cargo sellto");
        return 1;
    }
    new vehicleid = GetPlayerVehicleID(playerid);
    new trailerid = GetVehicleTrailer(vehicleid),
        action[ 32 ];

    strmid(action, params, 0, strfind(params, " "));
    strdel(params, 0, strfind(params, " "));

    if(!IsValidVehicle(trailerid) || !IsVehicleTrailer(GetVehicleModel(trailerid)))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Prie jûsø transporto priemonës nëra prikabinta priekaba");

    if(!strcmp(action, "sellto", true))
    {
        if(pInfo[ playerid ][ pMySQLID ] != cInfo[ trailerid ][ cOwner ])
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, jûs neesate ðios priekabos savininkas.");

        new target, price;
        if(sscanf(params, "ui", target, price))
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Komandos naudojimas: /trailer sellto [Þaidëjo ID/Dalis vardo] [ Kaina ]");
        if(!IsPlayerConnected(target))
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, tokio þaidëjo nëra.");
        if(!IsPlayerInRangeOfPlayer(playerid, target, 4.0)) 
            return SendClientMessage(playerid, COLOR_WHITE,"[ KLAIDA! ] þaidëjas per toli nuo jûsø. ");

        SellVehicleToPlayer(playerid, trailerid, target, price);
        return 1;
    }
    if(!strcmp(action,"lock",true))
    {
        if(CheckCarKeys(playerid, trailerid))
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ði priekaba jums nepriklauso.");
        if(cInfo[ trailerid ][ cLock ])
            ShowInfoText(playerid,"~w~AUTOMOBILIS ~g~ATRAKINTAS", 1000);
        else 
            ShowInfoText(playerid,"~w~AUTOMOBILIS ~r~UZRAKINTAS", 1000);
        LockVehicle(trailerid, !cInfo[ trailerid ][ cLock ]);
        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
        return 1;
    }
    if(!strcmp(action, "detach",true))
    {
        DetachTrailerFromVehicle(vehicleid);
        SendClientMessage(playerid, COLOR_NEWS, "Priekaba atkabinta!");
        return 1;
    }
    if(!strcmp(action, "lights",true))
    {
        new engine,lights,alarm,doors,bonnet,boot,objective;
        GetVehicleParamsEx(trailerid, engine, lights, alarm, doors, bonnet, boot, objective);
        if(lights == VEHICLE_PARAMS_ON)
            SetVehicleParamsEx(trailerid, engine, VEHICLE_PARAMS_OFF, alarm, doors, bonnet, boot, objective);
        else 
            SetVehicleParamsEx(trailerid, engine, VEHICLE_PARAMS_ON, alarm, doors, bonnet, boot, objective);
        return 1;
    }
    if(!strcmp(action,"cargo", true))
    {
        ShowVehicleCargo(playerid, trailerid);
        return 1;
    }
    else 
        goto trailer_help;
    return 1;
}

forward OnCargoBoxDestroy(index);
public OnCargoBoxDestroy(index)
{
    if(IsValidDynamicObject(CargoBox[ index ][ ObjectId ]))
    {
        CargoBox[ index ][ CanBePickedUp ] = false;
        DestroyDynamicObject(CargoBox[ index ][ ObjectId ]);
    }
    else 
        printf("KLAIDA. OnCargoBoxDestroy(%d) objektas NERA tinkamas objektas.", index);
}

CMD:taip( playerid, params[ ] )
{
    #pragma unused params
    if ( Voted[ playerid ] == true ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Balsavimas nepradëtas, arba jau balsavoje. " );
    SendClientMessage( playerid, COLOR_WHITE, "Jûsø balsas sëkmingai áskaièiuotas. " );
    Votes[ 0 ] ++;
    Voted[ playerid ] = true;
    return 1;
}
CMD:ne( playerid, params[ ] )
{
    #pragma unused params
    if ( Voted[ playerid ] == true ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Balsavimas nepradëtas, arba jau balsavoje. " );
    SendClientMessage( playerid, COLOR_WHITE, "Jûsø balsas sëkmingai áskaièiuotas. " );
    Votes[ 1 ] ++;
    Voted[ playerid ] = true;
    return 1;
}

CMD:sellto( playerid, params[ ] )
{
            new
                pid,
                price,
                vehicleid = INVALID_VEHICLE_ID,
                string[ 128 ],
                IP[ 16 ],
                IP2[ 16 ];

            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
                vehicleid = GetPlayerVehicleID( playerid );
            else
                vehicleid = GetNearestVehicle( playerid, 5.0 );
            if ( vehicleid == INVALID_VEHICLE_ID ) return SendClientMessage( playerid, GRAD, "Tai kad aplink tave nëra jokio automobilio...");

            if( sscanf(params, "ud", pid, price ) ) SendClientMessage(playerid, COLOR_WHITE, "Naudojimas: /sellto [veikëjo ID] [Kaina]");
            else if (pid == INVALID_PLAYER_ID) SendClientMessage(playerid, COLOR_WHITE, "[ KLAIDA ! ] veikëjo nëra serveryje !");
            else if ( cInfo[vehicleid][cOwner] != pInfo[playerid][pMySQLID] ) SendClientMessage(playerid, COLOR_WHITE, "[ KLAIDA ! ] Jûs nesëdite savo transporto priemonëje!");
            else if ( price < 0 || price > 9999999) SendClientMessage(playerid, COLOR_WHITE, "[ KLAIDA! ] Kaina turi bûti tarp 0 ir 9999999");
            else if ( !PlayerToPlayer( 4, playerid, pid ) ) SendClientMessage( playerid, COLOR_WHITE,"[ KLAIDA! ] þaidëjas per toli nuo jûsø. ");
            else
            {
                GetPlayerIp( playerid, IP, 16 );
                GetPlayerIp( pid, IP2, 16 );

                if( !strcmp( IP, IP2, true ) || pInfo[ playerid ][ pUcpID ] == pInfo[ pid ][ pUcpID ] )
                    return true;
                    
                format(string,sizeof(string),"Jûs siulote jam %s,kad jis nupirktu jûsø automobilá uþ: $%d.",GetPlayerNameEx(pid),price);
                SendClientMessage(playerid,COLOR_WHITE,string);
                format(string,sizeof(string),"Automobilio savininkas %s siûlo jums nupirkti jo automobilá uþ: $%d, jeigu sutinkate,raðykite /accept car.",GetPlayerNameEx(playerid),price);
                SendClientMessage(pid,COLOR_WHITE,string);
                Offer[pid][0] = playerid;
                OfferPrice[pid][0] = price;
                OfferID[ pid ][ 0 ] = vehicleid;
            }
            return true;
}

stock SellVehicleToPlayer(owner_playerid, vehicleid, buyer_playerid, price)
{
    new
        string[ 128 ],
        IP[ 16 ],
        IP2[ 16 ];

    GetPlayerIp( owner_playerid, IP, 16 );
    GetPlayerIp( buyer_playerid, IP2, 16 );

    if( !strcmp( IP, IP2, true ) || pInfo[ owner_playerid ][ pUcpID ] == pInfo[ buyer_playerid ][ pUcpID ] )
        return true;
        
    format(string,sizeof(string),"Jûs siulote jam %s,kad jis nupirktu jûsø automobilá uþ: $%d.",GetPlayerNameEx(buyer_playerid),price);
    SendClientMessage(owner_playerid,COLOR_WHITE,string);
    format(string,sizeof(string),"Automobilio savininkas %s siûlo jums nupirkti jo automobilá uþ: $%d, jeigu sutinkate,raðykite /accept car.",GetPlayerNameEx(owner_playerid),price);
    SendClientMessage(buyer_playerid,COLOR_WHITE,string);
    Offer[buyer_playerid][0] = owner_playerid;
    OfferPrice[buyer_playerid][0] = price;
    OfferID[ buyer_playerid ][ 0 ] = vehicleid;
    return 1;
}

CMD:vradio( playerid)
{
    if(!IsPlayerInAnyVehicle(playerid))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, jûs neesate transporto priemonëje.");
    if ( GetPlayerVehicleSeat( playerid ) == 0 || GetPlayerVehicleSeat( playerid ) == 1 )
    {
        new vehicle = GetPlayerVehicleID( playerid );

        if ( IsItemInTrunk( vehicle, ITEM_MAGNETOLA ) == MAX_TRUNK_SLOTS ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Automobilio bagaþinëje nëra automagnetolos" );
        new string[ 126 ];
        format( string, 126, "- Radijo stotys\
                                \n- Garsumas \t[ %d ]\
                                \n- Iðjungti", GetRadioVolume( playerid ) );
        ShowPlayerDialog( playerid, 70, DIALOG_STYLE_LIST,"Automagnetola", string, "Rinktis", "Atsaukti" );
        return 1;
    }
    else SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs sëdite ne automobilio priekyje." );
    return 1;
}

CMD:tazer( playerid, params[ ] )
{
    #pragma unused params
    if ( UsePDCMD( playerid ) == 1 || ( PlayerFaction( playerid ) == 5 && pInfo[ playerid ][ pRank ] > 4 ) )
    {
        if ( Mires[ playerid ] > 0 )
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, Jûsø veikëjas ðiuo metu yra kritinëje arba komos bûsenoje." );

        if ( IsPlayerInAnyVehicle( playerid ) )
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs automobilyje. ");
        if ( TazerAut == false )
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Tazeris ðiuo metu uþdraustas. " );

        new string[ 126 ],
            wepdata[2];
        if ( GetPVarInt( playerid, "TAZER_MODE" ) == 0 )
        {
            GetPlayerWeaponData( playerid, 2, wepdata[ 0 ] , wepdata[ 1 ]);
            SetPVarInt( playerid, "TAZER_GUN_SLOT_2", wepdata[ 0 ] );
            SetPVarInt( playerid, "TAZER_AMMO_SLOT_2", wepdata[ 1 ] );
            format      ( string, 126, "* %s iðtraukia ið dëklo tazerá. ", GetPlayerNameEx( playerid ) );
            ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            GivePlayerJobWeapon( playerid, 23, 2 );
            SetPVarInt( playerid, "TAZER_MODE", 1 );
            return 1;
        }
        else if ( GetPVarInt( playerid, "TAZER_MODE" ) == 1 )
        {
            format      ( string, 126, "* %s ideda á dëkla tazerá. ", GetPlayerNameEx( playerid ) );
            ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

            GivePlayerJobWeapon( playerid, GetPVarInt( playerid, "TAZER_GUN_SLOT_2" ), GetPVarInt( playerid, "TAZER_AMMO_SLOT_2" ) );
            SetPVarInt( playerid, "TAZER_MODE", 0 );
            return 1;
        }
    }
    return 1;
}
CMD:auttazer( playerid, params[ ] )
{
    #pragma unused params
    if ( UsePDCMD( playerid )!= 1 )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo nedirbdami policijos departamente." );

    if ( Mires[ playerid ] > 0 )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, Jûsø veikëjas ðiuo metu yra kritinëje arba komos bûsenoje." );

    if ( pInfo[playerid][pLead] != 2 )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs negalite naudoti ðios komandos. " );

    new string[ 126 ];
    if ( TazerAut == true )
    {
        format( string, 126, " %s %s iðjungë savo tazerá. ", GetPlayerRangName( playerid ), GetName( playerid ) );
        SendTeamMessage( PlayerFaction( playerid ), COLOR_POLICE, string );
        TazerAut = false;
        return 1;
    }
    else
    {
        format( string, 126, " %s %s ájungë tazerá. ", GetPlayerRangName( playerid ), GetName( playerid ) );
        SendTeamMessage( PlayerFaction( playerid ), COLOR_NEWS, string );
        TazerAut = true;
        return 1;
    }
}

CMD:weapon(playerid, params[])
{
    if(isnull(params))
    {
        weapon_help:
        SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /weapon [veiksmas]");
        SendClientMessage(playerid, COLOR_WHITE, "GALIMI VEIKSMAI: adjust, show, hide");
        return 1;
    }

    new action[16],
        weaponid = GetPlayerWeapon(playerid);

    if(!weaponid)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, jûs neesate iðsitraukæs ginklo.");
    
    if(strfind(params, " ") != -1)
        strmid(action, params, 0, strfind(params, " "));
    else 
        strmid(action, params, 0, strlen(params));
    strdel(params, 0, strlen(action));

    if(!strcmp(action, "adjust", true))
    {
        if(GetWeaponSlotByID(weaponid) < 2 || GetWeaponSlotByID(weaponid) > 6)
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðio ginklo pozicijos keisti negalite.");

        for(new i = 0; i < sizeof(PlayerAttachedWeapons[]); i++)
        {
            if(PlayerAttachedWeapons[ playerid ][ i ][ WeaponId ] == weaponid)
            {
                // Should NOT be an issue. Jsut to be sure.
                if(IsPlayerAttachedObjectSlotUsed(playerid, 8))
                {
                    EditAttachedObject(playerid, PlayerAttachedWeapons[ playerid ][ i ][ ObjectSlot ]);
                }
            }
            return 1;
        }

        // Jei èia pasiekëm, reiðkia nëra PlayerAttachedWeapons to ginklo+
        SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, jûs neesate uþsidëjæ ðio ginklo.");
    }
    else if(!strcmp(action, "show", true))
    {
        if(GetWeaponSlotByID(weaponid) < 2 || GetWeaponSlotByID(weaponid) > 6)
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðio ginklo uþsidëti negalite.");

        for(new i = 0; i < MAX_PLAYER_ATTACHED_WEAPONS; i++)
        {
            if(PlayerAttachedWeapons[ playerid ][ i ][ WeaponId ])
                continue;

            PlayerAttachedWeapons[ playerid ][ i ][WeaponId ] = weaponid;
            if(!IsPlayerAttachedObjectSlotUsed(playerid, 8))
            {
                SetPlayerAttachedObject(playerid, 8, GunObjects[ weaponid ], 1, 0.199999, -0.139999, 0.030000, 0.500007, -115.000000, 0.000000, 1.000000, 1.000000, 1.000000);
                EditAttachedObject(playerid, 8);
                PlayerAttachedWeapons[ playerid ][ i ][ ObjectSlot ] = 8;
            }
            else if(!IsPlayerAttachedObjectSlotUsed(playerid, 9))
            {
                SetPlayerAttachedObject(playerid, 9, GunObjects[ weaponid ], 1, 0.199999, -0.139999, 0.030000, 0.500007, -115.000000, 0.000000, 1.000000, 1.000000, 1.000000);
                EditAttachedObject(playerid, 9);
                PlayerAttachedWeapons[ playerid ][ i ][ ObjectSlot ] = 9;
            }
            SendClientMessage(playerid, COLOR_NEWS, "Sëkmingai uþsidëjote ginklà. Jo pozicijà galite keisti su /weapon adjust");
            return 1;
        }
    }
    else if(!strcmp(action, "hide", true))
    {
        for(new i = 0; i < MAX_PLAYER_ATTACHED_WEAPONS; i++)
        {
            if(PlayerAttachedWeapons[ playerid ][ i ][ WeaponId ] != weaponid)
                continue;

            RemovePlayerAttachedObject(playerid, PlayerAttachedWeapons[ playerid ][ i ][ ObjectSlot ]);
            PlayerAttachedWeapons[ playerid ][ i ][ ObjectSlot ] = 0;
            PlayerAttachedWeapons[ playerid ][ i ][ WeaponId ] = 0;
            SendClientMessage(playerid, COLOR_NEWS, "Ginklas nebebus rodomas.");
            return 1;
        }
        SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðis ginklas nebuvo rodomas. Neávykdyti jokie pokyèiai.");
    }
    else 
        goto weapon_help;
    return 1;
}


CMD:savings( playerid, params[ ] )
{
    if ( !PlayerToPoint( 20.0, playerid, 295.7723,1021.7993,2123.6130 ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, norëdami naudotis komanda privalote bûti banke." );
    if ( pInfo[ playerid ][ pSavings ] > 0 )
    {
        GivePlayerMoney( playerid, pInfo[ playerid ][ pSavings ] );
        pInfo[ playerid ][ pSavings ] = 0;
        SendClientMessage( playerid, COLOR_LIGHTRED, "Dëmesio, Jûsø indëlis á bankà jau buvo padëtas. Gràþiname pinigus atgal." );
        return 1;
    }
    new indelis;
    if ( sscanf( params, "d", indelis ) )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /savings [INDËLIO SUMA]" );
    if ( indelis < 5000 || indelis > 25000)
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Dëmesio, indëlis turi bûti ne maþesnis uþ 5000$, bei nevirðyti nurodyto ribos - 25000$.");
    if ( indelis > PlayerMoney[ playerid ] )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, neturite tiek pinigø kiek nurodëte." );
    GivePlayerMoney( playerid, -indelis );
    pInfo[ playerid ][ pSavings ] = indelis;

    new string[ 123 ];
    format( string, 123, "[Los Santos Bank] Sveikiname, Jûsø indëlis buvo sëkmingai padëtas á bankà. Dabartinis indëlis: %d$", indelis );
    SendClientMessage( playerid, COLOR_NEWS, string );
    return 1;
}
CMD:police( playerid, params[ ] )
{
    #pragma unused params
    if ( GetPlayerVehicleSeat( playerid ) == 0 || GetPlayerVehicleSeat( playerid ) == 1 )
    {
        new vehicleid = GetPlayerVehicleID( playerid ),
            string[ 123 ];
        if ( VehicleHasWindows( GetVehicleModel( vehicleid ) ) && Windows[ vehicleid ] == false )
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Automobilio langas uþdarytas. " );
        if ( Police[ vehicleid ] == 0 )
        {
            if ( sVehicles[ vehicleid ][ Faction ] == 2 )
            {
                new Float:Z;
                switch( GetVehicleModel( vehicleid ) )
                {
                    case 596: Z = 0.9; // PD
                    case 597: Z = 0.9; // PD
                    case 598: Z = 0.9; // PD
                    case 599: Z = 1.1; // PD Rancher
                    case 541: Z = 0.65; // Bullet
                    case 560: Z = 0.85; // Sultan
                    case 566: Z = 0.9; // Tahoma
                    case 490: Z = 1.1; // FBI Rancher
                    case 426: Z = 0.9; // Premier
                    case 558: Z = 0.9; // Uranus
                    case 559: Z = 0.65; // Jester
                    default: Z = 0.85; // Default
                }
                Police[ vehicleid ] = CreateDynamicObject(18646,0,0,0,0,0,0);
                AttachDynamicObjectToVehicle( Police[ vehicleid ], vehicleid, -0.5, -0.2, Z, 2.0, 2.0, 3.0);
                format      ( string, 126, "* %s atsidaræs langà uþdeda policijos perspëjàmàjá ðvyturëli ant stogo ir ájungià já. ", GetPlayerNameEx( playerid ) );
                ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                return 1;
            }
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Tai ne policijos automobilis. " );
        }
        else if ( Police[ vehicleid ] > 0 )
        {
            DestroyDynamicObject( Police[ vehicleid ] );
            Police[ vehicleid ] = 0;
            format      ( string, 126, "* %s iðkiða rankà ir nuiima policijos perspëjàmàjá ðvyturëlá nuo stogo. ", GetPlayerNameEx( playerid ) );
            ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            return 1;
        }
    }
    return 1;
}
CMD:sellcar( playerid, params[ ] )
{
    #pragma unused params
    new string[ 128 ];
    if ( pInfo[ playerid ][ pJob ] != JOB_JACKER )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo nebûdamas automobiliu vagimi. " );
    if ( pInfo[ playerid ][ pLeftTime ] > 0 )
    {
        format( string, sizeof(string), "Klaida, kità automobilá galësite priduoti tik uþ %d minuèiø. Praðome palaukti." , pInfo[ playerid ][ pLeftTime ] / 60 );
        SendClientMessage( playerid, COLOR_LIGHTRED, string );
        return 1;
    }
    if(Data_IsPlayerInRangeOfCoords(playerid, 10.0, "jacker_buy_spot_1"))
    {
        if ( JackerBoughtVehicles[ 0 ][ VehicleModel ] > 0 && JackerBoughtVehicles[ 0 ][ AmountNeeded ] > 0 )
        {
            if ( IsPlayerInAnyVehicle( playerid ) )
            {
                new vehicle = GetPlayerVehicleID( playerid ),
                model = GetVehicleModel( vehicle );
                if ( sVehicles[ vehicle ][ Faction ] > 0 )
                    return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo, kadangi tr. priemonë priklauso frakcijai. " );
                if ( JackerBoughtVehicles[ 0 ][ VehicleModel ] == model )
                {
                    new money = 760;
                    format           ( string, sizeof(string), "SMS: Nustebinai mane, atgabenai ðá %s, uþ ðá darbelá atsilyginsiu Tau %d$. Siuntëjas: Nenustatytas numeris", GetVehicleName( model ), money);
                    SendClientMessage( playerid, COLOR_LIGHTRED2, string);
                    GivePlayerMoney  ( playerid, money );
                    CJLog( pInfo[ playerid ][ pMySQLID ], cInfo[vehicle][cID], "Pardavë vogtà tr. priemonæ." );
                    AddJobExp        ( playerid, 1 );
                    DestroyVehicle   ( vehicle );
                    pInfo[ playerid ][ pLeftTime ] = 1500;
                    cInfo[ vehicle ][ cVehID ] = 0;
                    new owner = GetCarOwner( vehicle );
                    if ( IsPlayerConnected( owner ) )
                    {
                        if ( pInfo[ owner ][ pCarGet ] > 0 )
                            pInfo[ owner ][ pCarGet ] --;
                    }
                    SaveCar    ( vehicle );
                    nullVehicle( vehicle );
                    JackerBoughtVehicles[ 0 ][ AmountNeeded ] --;
                    if ( JackerBoughtVehicles[ 0 ][ AmountNeeded ] == 0 )
                        UpdateJacker( 0, random( 2 ) );
                    return 1;
                }
                format           ( string, sizeof(string), "SMS: Ey, að neuþsakiau ið Taves %s, manau tarp mûsø reikalai baigti, viso. Siuntëjas: Nenustatytas numeris", GetVehicleName( model ));
                SendClientMessage( playerid, COLOR_LIGHTRED2, string);
                return 1;
            }
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, norëdamas atlikti ðá veiksmà privalai sedëti tr. priemonëje. " );
        }
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, jeigu iðkilo problemø praneðkite bûtinai apie tai diskusijø forume." );
    }
    else if(Data_IsPlayerInRangeOfCoords(playerid, 10.0, "jacker_buy_spot_2"))
    {
        if ( JackerBoughtVehicles[ 1 ][ VehicleModel ] > 0 && JackerBoughtVehicles[ 1 ][ AmountNeeded ] > 0 )
        {
            if ( IsPlayerInAnyVehicle( playerid ) )
            {
                new vehicle = GetPlayerVehicleID( playerid ),
                    model = GetVehicleModel( vehicle );
                if ( sVehicles[ vehicle ][ Faction ] > 0 )
                    return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo, kadangi tr. priemonë priklauso frakcijai. " );
                if ( JackerBoughtVehicles[ 1 ][ VehicleModel ] == model )
                {   
                    new money = 980;
                    format           ( string, sizeof(string), "SMS: Tau sëkmingai pavyko atgabenti %s, uþ ðá darbelá atsilyginsiu Tau %d$. Siuntëjas: Nenustatytas numeris", GetVehicleName( model ), money);
                    SendClientMessage( playerid, COLOR_LIGHTRED2, string);
                    GivePlayerMoney  ( playerid, money );
                    CJLog( pInfo[ playerid ][ pMySQLID ], cInfo[vehicle][cID], "Pardavë vogtà tr. priemonæ." );
                    AddJobExp        ( playerid, 1 );
                    DestroyVehicle   ( vehicle );
                    pInfo[ playerid ][ pLeftTime ] = 1900;
                    cInfo[ vehicle ][ cVehID ] = 0;
                    new owner = GetCarOwner( vehicle );
                    if ( IsPlayerConnected( owner ) )
                    {
                        if ( pInfo[ owner ][ pCarGet ] > 0 )
                            pInfo[ owner ][ pCarGet ] --;
                    }
                    SaveCar    ( vehicle );
                    nullVehicle( vehicle );
                    JackerBoughtVehicles[ 1 ][ AmountNeeded ] --;
                    if ( JackerBoughtVehicles[ 1 ][ AmountNeeded ] == 0 )
                        UpdateJacker( 1, random( 2 ) );
                    return 1;
                }
                format           ( string, sizeof(string), "SMS: Ey, að neuþsakiau ið Taves %s, manau tarp mûsø reikalai baigti, viso. Siuntëjas: Nenustatytas numeris", GetVehicleName( model ));
                SendClientMessage( playerid, COLOR_LIGHTRED2, string);
                return 1;
            }
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, norëdamas atlikti ðá veiksmà privalai sedëti tr. priemonëje. " );
        }
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, jeigu iðkilo problemø praneðkite bûtinai apie tai diskusijø forume." );
    }
    else if(Data_IsPlayerInRangeOfCoords(playerid, 10.0, "jacker_buy_spot_3"))
    {
        if ( JackerBoughtVehicles[ 2 ][ VehicleModel ] > 0 && JackerBoughtVehicles[ 2 ][ AmountNeeded ] > 0 )
        {
            if ( IsPlayerInAnyVehicle( playerid ) )
            {
                new vehicle = GetPlayerVehicleID( playerid ),
                    model = GetVehicleModel( vehicle );
                if ( sVehicles[ vehicle ][ Faction ] > 0 )
                    return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo, kadangi tr. priemonë priklauso frakcijai.. " );
                if ( JackerBoughtVehicles[ 2 ][ VehicleModel ] == model )
                {
                    new money = 640;
                    format           ( string, sizeof(string), "SMS: Laukiau Taves, maniau nepasirodysi. Graþi %s, uþ ðá darbelá atsilyginsiu Tau %d$. Siuntëjas: Nenustatytas numeris", GetVehicleName( model ), money);
                    SendClientMessage( playerid, COLOR_LIGHTRED2, string);
                    GivePlayerMoney  ( playerid, money );
                    CJLog( pInfo[ playerid ][ pMySQLID ], cInfo[vehicle][cID], "Pardavë vogtà tr. priemonæ." );
                    AddJobExp        ( playerid, 1 );
                    DestroyVehicle   ( vehicle );
                    pInfo[ playerid ][ pLeftTime ] = 1200;
                    cInfo[ vehicle ][ cVehID ] = 0;
                    new owner = GetCarOwner( vehicle );
                    if ( IsPlayerConnected( owner ) )
                    {
                        if ( pInfo[ owner ][ pCarGet ] > 0 )
                            pInfo[ owner ][ pCarGet ] --;
                    }
                    SaveCar    ( vehicle );
                    nullVehicle( vehicle );
                    JackerBoughtVehicles[ 2 ][ AmountNeeded ] --;
                    if ( JackerBoughtVehicles[ 2 ][ AmountNeeded ] == 0 )
                        UpdateJacker( 2, random( 2 ) );
                    return 1;
                }
                format           ( string, sizeof(string), "SMS: Ey, að neuþsakiau ið Taves %s, manau tarp mûsø reikalai baigti, viso. Siuntëjas: Nenustatytas numeris", GetVehicleName( model ) );
                SendClientMessage( playerid, COLOR_LIGHTRED2, string);
                return 1;
            }
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, norëdamas atlikti ðá veiksmà privalai sedëti tr. priemonëje. " );
        }
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, jeigu iðkilo problemø praneðkite bûtinai apie tai diskusijø forume." );
    }
    return 1;
}
CMD:info(playerid)
{
    if(pInfo[ playerid ][ pJob ] != JOB_JACKER)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, tik dirbdamas automobiliø vagies darbà galite naudotis ðiuo veiksmu. ");
    new string[ 160 ];
    if(Data_IsPlayerInRangeOfCoords(playerid, 10.0, "jacker_info_1"))
        format(string, sizeof(string), "SMS: Girdëjau ieðkai darbelio, o að ieðkausi %s, pasistengsiu gerai atsilyginti jei tik tinka ir nebijai rizikuoti -Neþinomas siuntëjas.", GetVehicleName(JackerBoughtVehicles[ 0 ][ VehicleModel ]));
    else if(Data_IsPlayerInRangeOfCoords(playerid, 10.0, "jacker_info_2"))
        format(string, sizeof(string), "SMS: Skubiai ieðkausi %s, visados moku daugiausia uþ kitus, tad manau nenuvilsi manæs. Siuntëjas: Nenustatytas numeris", GetVehicleName( JackerBoughtVehicles[ 1 ][ VehicleModel ] ));
    else if(Data_IsPlayerInRangeOfCoords(playerid, 10.0, "jacker_info_3"))
        format(string, sizeof(string), "SMS: Turiu klausimà, apsiimsi %s nuvarymø? Pasirûpinsiu, kad rizika bûtø apmokëta Siuntëjas: Nenustatytas numeris", GetVehicleName( JackerBoughtVehicles[ 2 ][ VehicleModel ] ));
    else
        format(string, sizeof(string), "SMS: Kodël vis dar negaunu þiniø? Atsisakai darbo? Nelabai patinka man tokie þmonës -Neþinomas siuntëjas");
    SendClientMessage(playerid, COLOR_LIGHTRED2, string);
    return 1;
}
CMD:spots( playerid, params[ ] )
{
    #pragma unused params
    if ( pInfo[ playerid ][ pJob ] != JOB_JACKER )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, tik dirbdamas automobiliø vagies darbà galite naudotis ðiuo veiksmu. " );
    new zone1[ MAX_ZONE_NAME ],
        zone2[ MAX_ZONE_NAME ],
        zone3[ MAX_ZONE_NAME ],
        string[ 128 ];

    Get2DZone( 868.8514,-30.3725, zone1, 28 );
    Get2DZone( 2827.3010,896.9294, zone2, 28 );
    Get2DZone( 2207.4143,-2296.2839, zone3, 28 );

    format( string, sizeof(string), "SMS: Tiesiog atveðk automobilius á ðiuos garaþus %s, %s, %s, ir baigiam reikalus. -Neþinomas siuntëjas", zone1, zone2, zone3 );
    SendClientMessage( playerid, COLOR_LIGHTRED2, string);
    return 1;
}
CMD:sup( playerid, params[ ] )
{
    new giveplayerid,
        type,
        string[ 126 ];
    if ( sscanf( params, "ud", giveplayerid, type ) )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /sup [ veikëjo id ] [ 1-3 ]");

    if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return 1;
    if ( !PlayerToPlayer( 1.0, playerid, giveplayerid ) )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: norëdami naudoti ðiá  komandá  turite bûti ðalia veikëjo. " );
    if ( type < 0 || type > 4 )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /sup [ veikëjo id ] [ 1 - 3 ]");

    SendClientMessage( playerid, COLOR_WHITE, "Jûs pasiûlëte pasisveikinimá  þaidëjui, laukite jo patvirtinimo. " );
    format( string, sizeof(string), "PASIûLIMAS: þaidëjas %s siûlo jums pasisvekinima, jeigu sutinkate raðykite: /accept sup %d)",GetPlayerNameEx( playerid ), playerid );
    SendClientMessage( giveplayerid, COLOR_LIGHTRED2, string );
    SetPVarInt( playerid, "OFER_SUP", type );
    return 1;
}

CMD:turnphone( playerid, params[ ] )
{
    #pragma unused params
    new string[ 126 ];
    if ( pInfo[ playerid ][ pPhone ] == 0 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs neturite su savimi telefono. " );
    if ( GetPVarInt( playerid, "PHONE_STATUS" ) == 0 )
    {
        SetPVarInt  ( playerid, "PHONE_STATUS", 1 );
        format      ( string, 126, "* %s iðjungia telefonà." ,GetPlayerNameEx( playerid ) );
        ProxDetector( 20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );

    }
    else
    {
        SetPVarInt  ( playerid, "PHONE_STATUS", 0 );
        format      ( string, 126, "* %s ájungia telefonà." ,GetPlayerNameEx( playerid ) );
        ProxDetector( 20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
    }
    return 1;
}
CMD:speaker( playerid, params[ ] )
{
    #pragma unused params
    new string[ 126 ];
    if ( pInfo[ playerid ][ pPhone ] == 0 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs neturite su savimi telefono. " );
    if ( NearPhone( playerid ) ) return SendClientMessage( playerid, COLOR_GREY, "   Jûs dabar kalbat per taksofonà!" );
    if ( MobilePhone[ playerid ] == INVALID_PLAYER_ID ) return true;
    if ( GetPVarInt( playerid, "SPEAKER" ) == 0 )
    {
        SetPVarInt  ( playerid, "SPEAKER", 1 );
        format      ( string, 126, "* %s ájungia telefono garsiakalbá." ,GetPlayerNameEx( playerid ) );
        ProxDetector( 20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
    }
    else
    {
        SetPVarInt  ( playerid, "SPEAKER", 0 );
        format      ( string, 126, "* %s áðjungia telefono garsiakalbá." ,GetPlayerNameEx( playerid ) );
        ProxDetector( 20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
    }
    return 1;
}
FUNKCIJA:CameraMove( playerid, camera )
{
    if ( Camera[ playerid ] >=0 )
    {
        new keys,
            updown,
            leftright;
        static Float:Degres[ MAX_PLAYERS ],
               Float:Radius[ MAX_PLAYERS ];

        GetPlayerKeys(playerid, keys, updown, leftright);
        if ( leftright == KEY_RIGHT )
        {
            Degres[ playerid ] = Degres[ playerid ] - 5.0;
            if ( Degres[ playerid ] < 0 )
                Degres[ playerid ] = 359;
            MoveCamera( playerid, Degres[ playerid ], Radius[ playerid ], camera );
        }
        if ( leftright == KEY_LEFT )
        {
            Degres[ playerid ] = Degres[ playerid ] + 5.0;
            if ( Degres[ playerid ] >= 360 )
                Degres[ playerid ] = 0;
            MoveCamera( playerid, Degres[ playerid ], Radius[ playerid ], camera );
        }
        if ( updown == KEY_UP )
        {
            if ( Radius[ playerid ] < 36 )
            {
                Radius[ playerid ] = Radius[ playerid ] + 0.5;
                MoveCamera( playerid, Degres[ playerid ], Radius[ playerid ], camera );
            }
        }
        if ( updown == KEY_DOWN )
        {
            if ( Radius[ playerid ] >= 1.5 )
            {
                Radius[ playerid ] = Radius[ playerid ] - 0.5;
                MoveCamera( playerid, Degres[ playerid ], Radius[ playerid ], camera );
            }
        }
        SetTimerEx( "CameraMove", 100, false, "dd", playerid, Camera[ playerid ] );
    }
    return 1;
}
stock MoveCamera( playerid, Float:degres, Float:radius, camera )
{
    static Float:WachX[ MAX_PLAYERS ],
           Float:WachY[ MAX_PLAYERS ];
    WachX[ playerid ] = CCTV[ camera ][ 0 ] + ( floatmul(radius, floatsin(-degres, degrees)));
    WachY[ playerid ] = CCTV[ camera ][ 1 ] + ( floatmul(radius, floatcos(-degres, degrees)));
    SetPlayerCameraLookAt(playerid, WachX[ playerid ], WachY[ playerid ], CCTV[ camera ][ 3 ]);
    return 1;
}
CMD:license(playerid)
{
    if(!Data_IsPlayerInRangeOfCoords(playerid, 5.0, "license_center"))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, jûs ne licenzijavimo center.");

    ShowPlayerDialog( playerid, 95, DIALOG_STYLE_MSGBOX, "Licenzijos teorijos egzaminas.",
                                                           "{FFFFFF}Mes leidþiame laikyti teorijos egzaminà ðiems dalykams\n\
                                                            \t- Automobilio\n\
                                                            \t- Motociklo\n\
                                                            \t- Laivybos\n\
                                                            \t- Pilotavimo\n\
                                                            Spauskite pradëti, kad pradëtumëte testà.", "Pradëti", "Atðaukti");
    return 1;
}
CMD:maxspeed( playerid, params[ ] )
{
    if ( !IsPlayerInAnyVehicle( playerid ) )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, norëdami atlikti ðá veiksmà privalote bøti tr. priemonëje. " );
    new speed,
        string[ 126 ];

    if ( sscanf( params, "d", speed ) )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /maxspeed [ 30 - 130 ] " );
    if ( speed < 30 )
    {
        PlayerSpeed[ playerid ] = 0;
        format( string, 126, " * Greièio ribotuvas iðjungtas. " );
    }
    else if ( speed > 29 && speed < 130 )
    {
        PlayerSpeed[ playerid ] = speed;
        format( string, 126, " * Greièio ribotuvas buvo nustatytas: %d Km/h ", speed );
    }
    else if ( speed >= 130 )
    {
        PlayerSpeed[ playerid ] = 0;
        format( string, 126, " * Greièio ribotuvas iðjungtas. " );
    }
    SendClientMessage( playerid, COLOR_WHITE, string );
    return 1;
}
CMD:stopsmoke( playerid, params[ ] )
{
    #pragma unused params
    if ( Ruko[ playerid ] > 0 )
    {
        SetPlayerSpecialAction( playerid, SPECIAL_ACTION_NONE);
        Ruko[ playerid ] = 0;
        return 1;
    }
    return 1;
}

CMD:licwarn( playerid, params[ ] )
{
    new string[ 126 ],
        giveplayerid;
    if ( UsePDCMD( playerid ) == 0 )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo nedirbdami policijos departamente." );
    if ( sscanf( params, "u", giveplayerid ) )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /licwarn [ veikëjo ID/Vardas ] " );
    if ( giveplayerid == INVALID_PLAYER_ID )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje." );
    if ( !PlayerToPlayer( 5.0, playerid, giveplayerid ) )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs nesate ðalia veikëjo. " );
    if ( pInfo[ giveplayerid ][ pDriverWarn ] >= 3 )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Vairuotojas jau turi 3 áspëjimus, naudokite /take . " );

    format           ( string, 126, "[LSPD] Pareigûnas iðraðë Jums áspëjimà licencijai dël %s, dël vairavimo. ", GetPlayerNameEx(playerid) );
    SendClientMessage( giveplayerid , COLOR_POLICE, string );

    format           ( string, 126, "[LSPD] Sëkmingai perspëjote asmená %s, dël nustatytos prieþasties. ", GetPlayerNameEx(giveplayerid) );
    SendClientMessage( playerid, COLOR_POLICE, string );

    pInfo[ giveplayerid ][ pDriverWarn ] ++;
    return 1;
}
CMD:bell( playerid, params[ ] )
{
    #pragma unused params
    if ( !PDJOBPlace(playerid) )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs nesate policijos departamente. " );
    if ( GetPVarInt( playerid, "PD_BELL" ) == 1 )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: /bell komanda galima naudoti tik kas 30 sekundþiø. " );
    new string[ 126 ];
    format         ( string, 126, "[LSPD DÛRØ SKAMBUTIS] Asmuo %s paskambino á dûrø skambutá ir laukia Jûsø.", GetPlayerNameEx(playerid) );
    SendTeamMessage( 1, COLOR_POLICE, string );
    format      ( string, 126, "* %s paskambina varpeliu." ,GetPlayerNameEx( playerid ) );
    ProxDetector( 20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
    SetPVarInt( playerid, "PD_BELL", 1 );
    SetTimerEx( "PD_BELL", 30000, false, "d", playerid );
    return 1;
}
FUNKCIJA:PD_BELL( playerid )
    return DeletePVar( playerid, "PD_BELL" );

CMD:blockpm( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pDonator ] >= 2 || pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        new string[ 126 ],
            giveplayerid;

        if ( sscanf( params, "u", giveplayerid ) )
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /blockpm [ veikëjo id/vardo dalis ] " );
        if ( !IsPlayerConnected( giveplayerid ) )
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /blockpm [ veikëjo id/vardo dalis ] " );

        format( string, 126, "TOG_PM_USER_%d", giveplayerid );
        if ( GetPVarInt( playerid, string ) == giveplayerid )
        {
            DeletePVar( playerid, string );

            format           ( string, 126, "þaidëjas %s buvo atblokuotas, dabar gausite ið jo þinutes. ", GetName( giveplayerid ) );
            SendClientMessage( playerid, COLOR_WHITE, string  );
            return 1;
        }
        SetPVarInt( playerid, string, giveplayerid );
        format           ( string, 126, "þaidëjas %s buvo uþblokuotas, dabar nebegausite ið jo privaøiø þinuøiø. ", GetName( giveplayerid ) );
        SendClientMessage( playerid, COLOR_WHITE, string  );
        return 1;
    }
    return 1;
}


CMD:drivebyoff( playerid, params[ ] )
{
    #pragma unused params
    if ( GetPlayerState( playerid ) == PLAYER_STATE_PASSENGER )
    {
        SetPlayerArmedWeapon( playerid , 0 );
        return 1;
    }
    return 1;
}
CMD:roof( playerid, params[ ] )
{
    if ( !IsPlayerInAnyVehicle( playerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, norëdami atlikti ðá veiksmà privalote bøti tr. priemonëje. " );
    new vehicle = GetPlayerVehicleID( playerid ),
        model = GetVehicleModel( vehicle );
    if ( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs nesate ðio automobilio vairuotojas. " );

    if ( model == 536 || model == 567 )
    {
        new type;
        if ( sscanf( params, "d", type ) )
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /roof [ 1 tipas | 2 tipas | 3 Nuimti ] ");
        if ( type == 1 )
        {
            if ( model == 536 )
                return AddVehicleComponent( vehicle, 1103 );
            else if ( model == 567 )
                return AddVehicleComponent( vehicle, 1130 );
        }
        else if ( type == 2 )
        {
            if ( model == 536 )
                return AddVehicleComponent( vehicle, 1128 );
            else if ( model == 567 )
                return AddVehicleComponent( vehicle, 1131 );
        }
        else if ( type == 3 )
        {
            new comp = GetVehicleComponentInSlot( vehicle, CARMODTYPE_ROOF);
            if ( comp == 1103 || comp == 1130 || comp == 1128 || comp == 1131 )
                return RemoveVehicleComponent( vehicle , comp );
        }
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /roof [ 1 tipas | 2 tipas | 3 Nuimti ] ");
    }
    return SendClientMessage( playerid, GRAD, "Apgailestaujame, ði maðina neturi pakeliamo stogo. " );
}

CMD:nofuel(playerid)
{
    cInfo [ GetPlayerVehicleID(playerid) ] [ cFuel ] = 0;
    return 1;
}
CMD:fill(playerid)
{
    if(!IsAtGasStation(playerid))
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs nesate degalinëje. " );
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, kurà gali pilti tik vairuotojas");
    if(IsFillingFuel[ playerid ])
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, jûs jau pilatës kurà.");
    new veh = GetPlayerVehicleID(playerid);
    if(Engine[ veh ] == true ) 
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Iðjunkite variklá" );

    IsFillingFuel[ playerid ] = true;
    PlayerFillUpTimer[ playerid ] = SetTimerEx( "FillUp", 200, true, "dd", playerid, veh );
    SetPVarInt( playerid, "FILLED", cInfo[ veh ][ cFuel ] );
    return 1;
}

FUNKCIJA:FillUp( playerid, vehicle )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
        return StopFillUp(playerid);
    if(!IsAtGasStation( playerid ))
        return StopFillUp(playerid);
    if(cInfo[ vehicle ][ cFuel ] >= GetVehicleFuelTank(GetVehicleModel(vehicle)))
        return StopFillUp(playerid);
    if(Engine[ vehicle ])
        return StopFillUp(playerid);

    cInfo[ vehicle ][ cFuel ] += 2;
    SetPVarInt( playerid, "MOKESTIS", GetPVarInt( playerid, "MOKESTIS" ) + BENZO_KAINA );
    if ( cInfo[ vehicle ][ cFuel ] == GetVehicleFuelTank( GetVehicleModel(vehicle) ) )
        StopFillUp(playerid);
    return 1;
}
stock StopFillUp(playerid)
{
    new string[ 126 ];
    format          ( string, sizeof(string), "DEGALINË\nMokestis uþ degalus: %d\nKuo atsikaitysite? spustelkite migtuka", GetPVarInt( playerid, "MOKESTIS" ) );
    ShowPlayerDialog( playerid ,5, DIALOG_STYLE_MSGBOX, "DEGALINË", string, "Grynais", "Banku" );
    KillTimer(PlayerFillUpTimer[ playerid ]);
    IsFillingFuel[ playerid ] = false;
    return 1;
}
CMD:checkspeed( playerid, params[ ] )
{
    new
        string[ 64 ];
    if(PlayerFaction( playerid ) != 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo nedirbdami policijos departamente.");

    new count;
    foreach(Vehicles,car)
    {
        if ( GetVehicleSpeed2( car ) < 1 || sVehicles[ car ][ Faction ] == 2 )
            continue;
            
        new Float: Car_X,
            Float: Car_Y,
            Float: Car_Z;
        GetVehiclePos( car, Car_X, Car_Y, Car_Z );
        if ( PlayerToPoint( 20, playerid, Car_X, Car_Y, Car_Z ) )
        {
            format(string, sizeof(string), "[LSPD] Pravaþiuojanèios tr. priemonës greitis yra: %dkm/h (( %s ))", GetVehicleSpeed2( car ), GetVehicleName( GetVehicleModel( car ) ) );
            SendClientMessage(playerid, COLOR_POLICE, string );
            count++;
        }
    }
    if(!count)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalimas veiksmas, kadangi aplink Jus nëra pravaþiuojanèiø tr. priemoniø");
    return true;
}
CMD:mdc( playerid, params[] )
{
    new
        string[ 64 ];
    if(PlayerFaction( playerid ) != 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo nedirbdami policijos departamente.");
    new idcar = GetPlayerVehicleID( playerid );
    if( PDJOBPlace(playerid) || ( IsPlayerInAnyVehicle( playerid ) && sVehicles[ idcar ][ Faction ] == 2 ) )
    {
        format( string, 64, "Policijos duomenø bazë - Prisijungta: %s", GetName( playerid ) );
        ShowPlayerDialog(playerid, 128, DIALOG_STYLE_LIST,string,
        "Surasti asmená\n\
        Ieðkoti tr. priemonës ((Numeris))\n\
        Paieðkomø sàraðas\n\
        Kalëjimo duomenø bazë\n\
        Pridëti prie paieðkomø asmenø \n\
        Paskelbti tr. priemonæ paieðkomà\n\
        Paieðkomø tr. priemoniø sàraðas\n\
        Areðtuotu tr. priemoniø sàraðas\n\
        Iðkvietimø registras", "Pasirinkti", "Atðaukti" );
    }
    else
        SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, norëdami atlikti ðá veiksmà privalote sedëti policijos tr. priemonëje arba bûdami nuovadoje.");
    return 1;
}
CMD:bail( playerid, params[ ] )
{
    if(!Data_IsPlayerInRangeOfCoords(playerid, 30.0, "prison_bail_spot"))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, privalote bûti ðalia kalëjimo priemamojo langelio.");
    if( GetPVarInt(playerid, "BailTime") < 1)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, jums nëra uþ kà mokëti.");
        
    new string[ 256 ],
        rows,
        Cache:result;

    format( string, 256, "SELECT * FROM `tickets` WHERE `name` = '%s' AND `paid` = 0", GetPlayerNameEx(playerid) );
    result = mysql_query(DbHandle,  string );
    rows = cache_get_row_count();

    cache_delete(result);

    if( rows )
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti iðpirkos turëdami nesumokëtø baudø.");

    if ( pInfo[playerid][pBank] < GetPVarInt(playerid, "Bail") )
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûsø banko sàskaitoje nëra pakankamai pinigø iðpirkai..");

    pInfo[playerid][pBank] -= GetPVarInt(playerid, "Bail");
    pInfo[playerid][pJailTime] = GetPVarInt(playerid, "BailTime");
    SaveAccount( playerid );
    ShowPlayerInfoText( playerid );
    DeletePVar(playerid, "Bail");
    DeletePVar(playerid, "BailTime");
    return 1;
}
CMD:prison( playerid, params[ ] )
{
    if(!Data_IsPlayerInRangeOfCoords(playerid, 30.0, "ic_prison"))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, norëdami atlikti ðá veiksmà privalote bûti ðalia kalëjimo.");
    if(UsePDCMD(playerid) != 1)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo nedirbdami policijos departamente.");
    new giveplayerid,
        string[ 126 ],
        time,
        bill,
        bail,
        bailtime;

    if ( sscanf( params, "rdddd", giveplayerid, time, bill, bail, bailtime ) )
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /prison [VEIKËJO ID][LAIKAS MINUTËMIS][BAUDA][IÐPIRKA][LAIKAS MINUTËMIS PO IÐPIRKOS]");
    if(IsPlayerNPC(giveplayerid)) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite uþdaryti ðio veikëjo, kadangi tai serverio dirbtinis þaidëjas (BOT)");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
    if(pInfo[giveplayerid][pJail] > 0)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjas jau yra kalëjime");
    if(!Data_IsPlayerInRangeOfCoords(giveplayerid, 30.0, "ic_prison"))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûs nesate prie kalëjimo, tad negalite atlikti ðio veiksmo.");
    if( time <= 60)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nustatant kalëjimo laika, minimalus laikas yra 60.");
    if ( bill < 1000 || bill > 1000000)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, bauda privalo bûti didesnë nei 1000$, bet nevirðyti 1000000$");
    if ( bail < 1000 || bail > 1000000)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, iðpirkos suma privalo bûti didesnë nei 1000$, bet nevirðyti 1000000$");
    if( bailtime <= 1)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nustatytas laikas po iðpirkos privalo bûti didesnis nei 1.");
        
    format(string, 126, "[LSPD] Pareigûnas %s pasodino á kalëjimà asmená %s, %d minutëms.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), time);
    SendChatMessageToAll(COLOR_LIGHTRED, string);
    format(string, 126, "[LSPD] Jûs buvote uþdarytas á kalëjimà %d minutëms, bei turësite susimokëti pareigûno nustatyà baudà: %d$",time,bill);
    SendClientMessage(giveplayerid,COLOR_LIGHTRED, string);
    SetPVarInt(giveplayerid, "Bail", bail);
    SetPVarInt(giveplayerid, "BailTime", bailtime*60);
    if ( PlayerMoney[ giveplayerid ] > bill )
        GivePlayerMoney( giveplayerid, -bill );
    else
    {
        if ( pInfo[giveplayerid][pBank] > bill )
            pInfo[giveplayerid][pBank] -= bill;
    }
    pInfo[giveplayerid][pJailTime] = time*60;
    pInfo[giveplayerid][pJail] = 2;
    pInfo[giveplayerid][pWantedLevel] = 0;
    Data_SetPlayerLocation(giveplayerid, "ic_prison");
    ResetPlayerWeapons(giveplayerid);
    SetPlayerSkin   ( giveplayerid, 8 );
    pInfo[ giveplayerid ][ pSkin ] = 8;
    SaveAccount( giveplayerid );
    ShowPlayerInfoText( giveplayerid );
    return 1;
}
CMD:arrest( playerid, params[ ] )
{
    if(!Data_IsPlayerInRangeOfCoords(playerid, 20.0, "ic_custody"))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs nesate prie kalëjimo.");
    if(UsePDCMD(playerid) != 1)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo nedirbdami policijos departamente.");
    new giveplayerid,
        string[ 126 ],
        time,
        bill;

    if ( sscanf( params, "rdd", giveplayerid, time, bill ) )
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /arrest [VEIKËJO ID][MINUTËS][BAUDA]");
    if(IsPlayerNPC(giveplayerid)) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite uþdaryti ðio veikëjo, kadangi tai serverio dirbtinis þaidëjas (BOT)");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
    if(pInfo[giveplayerid][pJail] > 0)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjas jau pasodintas á areðtinæ");
    if(!Data_IsPlayerInRangeOfCoords(giveplayerid, 40.0, "ic_custody"))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, veikëjas nëra ðalia kalëjimo.");
    if( time < 1)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodant areðtavimo laikà, privaloma nurodyti daugiau nei 1 minutæ.");
    if ( bill < 1 || bill > 20000)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, bauda negali bûti didesnë nei 20000$");

    format(string, 126, "[LSPD] Pareigûnas %s pasodino á areðtinæ asmená  %s, %d minutëms.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), time);
    SendChatMessageToAll(COLOR_POLICE, string);
    format(string, 126, "[LSPD] Jûs buvote uþdarytas á kalëjimà %d minutëms, bei turësite susimokëti pareigûno nustatyà baudà: %d$",time,bill);
    SendClientMessage(giveplayerid,COLOR_POLICE, string);
    if ( PlayerMoney[ giveplayerid ] > bill )
        GivePlayerMoney( giveplayerid, -bill );
    else
    {
        if ( pInfo[giveplayerid][pBank] > bill )
            pInfo[giveplayerid][pBank] -= bill;
    }
    pInfo[giveplayerid][pJailTime] = time*60;
    pInfo[giveplayerid][pJail] = 3;
    pInfo[giveplayerid][pWantedLevel] = 0;
    Data_SetPlayerLocation(giveplayerid, "ic_custody");
    ResetPlayerWeapons(giveplayerid);
    SaveAccount( giveplayerid );
    ShowPlayerInfoText( giveplayerid );
    SetPVarInt(giveplayerid, "Drag", false);
    TogglePlayerControllable(giveplayerid, 1);
    return 1;
}
CMD:wepstore( playerid, params[ ] )
{
    #pragma unused params
    if(UsePDCMD(playerid) != 1)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo nedirbdami policijos departamente.");

    if(!PDJOBPlace(playerid))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite persirengti nebødamas persirengimo kabinoje/kambaryje.");

    ShowPlayerDialog(playerid,102,DIALOG_STYLE_LIST, "Policijos Departamento Ginklinë", "Desert Eagle - 100 kulkø\nFotoparatas - 20 nuotraukø\nPolicininko lazda\nAðarinës dujos - 150", "Rinktis", "Atðaukti" );
    return 1;
}
CMD:gov( playerid, params[ ] )
{
    new string[ 256 ];
    //if(UsePDCMD(playerid) != 1)
        //return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo nedirbdami policijos departamente.");
    if(pInfo[playerid][pLead] != 2 && pInfo[playerid][pLead] != 6 && pInfo[playerid][pLead] != 3 ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, komandà gali naudoti tik Los Santos miesto meras arba policijos darbuotojas.");
    if ( sscanf( params, "s[256]", string ) )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /gov [TEKSTAS] " );
    SendChatMessageToAll( COLOR_LIGHTRED2, "|___________ LOS SANTOS___________ |"),
    SendChatMessageToAll( COLOR_LIGHTRED2, "|_________ MIESTO VALDÞIA__________|");	
    format( string, 256, "|PRANEÐIMAS| %s ", string );
    SendChatMessageToAll( COLOR_WHITE, string );
    format( string, 256, "|PRANEÐËJAS| %s ", GetName(playerid) );
    SendChatMessageToAll( COLOR_FADE1, string );
    return 1;
}
CMD:sms( playerid, params[ ] )
{
    if(pInfo[playerid][pPhone] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Tu neturi mobilaus telefono.");
    else if(Mires[playerid] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûsø veikëjas ðiuo metu yra kritinëje arba komos bûsenoje.");
    else if(Mute[playerid] == true) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðiuo metu Jums yra uþdrausta kalbëtis (/mute), norëdami paðalinti draudimà susisiekite su Administratoriumi.");
    else if(PlayerMoney[ playerid ] < 1 ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs neturite $1 ");
    else if ( GetPVarInt( playerid, "PHONE_STATUS" ) == 1 )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, turimas mobilusis telefonas iðjungtas." );
    else if ( pInfo[playerid][pJail] > 0 )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, èia mobilaus telefono ryðys yra blokuojamas." );
    new string[ 256 ],
        phonenumb,
        gMessage[ 256 ];

    if ( sscanf( params, "ds[240]", phonenumb, gMessage ) )
    {
        new target[ MAX_PLAYER_NAME ];
        if(strfind(params, " ") != -1) // Jei yra bent du string'ai 
        {
            strmid(target, params, 0, strfind(params, " "));
            phonenumb = GetPlayerPhonebookNumber(playerid, target);
            strmid(gMessage, params, strfind(params, " "), strlen(params));
        }   
    }
    if ( phonenumb == 0 )
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /sms [ADRESATO NUMERIS][ÞINUTË]");
    foreach(Player, i)
    {
        if(phonenumb == pInfo[i][pPhone] && phonenumb != 0)
        {
            if ( GetPVarInt( i, "PHONE_STATUS" ) == 1 )
                    return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, turimas mobilusis telefonas iðjungtas." );

            format(string, 126, "* %s iðsitraukia mobilujá telefonà, paraðæs SMS þinutæ, iðsiunèia jà.", GetPlayerNameEx(playerid));
            ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

            format(string, 256, "SMS: %s, siuntëjas: %s", gMessage, GetNumber( i, pInfo[ playerid ][ pPhone ] ));
            SendClientMessage(playerid, COLOR_LIGHTRED2, "Trumpoji þinutë buvo sëkmingai nusiûsta adresatui.");
            SendChatMessage(i, COLOR_LIGHTRED2, string);
            SendChatMessage(playerid, COLOR_WHITE, string);
            ShowInfoText(playerid, "~w~ SMS kaina $1", 5000);
            GivePlayerMoney(playerid,-1);
            PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
            return 1;
        }
    }
    return 1;
}
stock SendTesterMessage( color, text[ ] )
{
    foreach(Player,i)
    {
        if ( pInfo[ i ][ pTester ] >= 1 || ( pInfo[i][pAdmin] >= 1 && TogChat[i][3] == true ) )
        {
            if ( GetPVarInt( i, "TESTER_TOG" ) == 0 )
                SendClientMessage( i, color, text );
        }
    }
    return 1;
}
CMD:moderators( playerid, params[ ] )
{
    #pragma unused params
    new
        string[ 128 ];
    SendClientMessage( playerid, COLOR_MODERATOR, "|_________________PRISIJUNGÆ MODERATORIAI_________________|" );
    foreach(Player,i)
    {
        if ( pInfo[ i ][ pTester ] >= 1 )
        {
            if ( GetPVarInt( i, "TESTER_DUTY" ) == 1 )
            {
                format( string, sizeof(string), "Moderatorius %s (%s) ájungæs budinèio moderatoriaus rëþimà.", GetName( i ), pInfo[ i ][ pForumName ] );
                SendClientMessage( playerid, COLOR_GREEN, string );
            }
            else
            {
                format( string, sizeof(string), "Moderatorius %s (%s) áðjungæs budinèio moderatoriaus rëþimà.", GetName( i ), pInfo[ i ][ pForumName ] );
                SendClientMessage( playerid, GRAD, string );
            }
        }
    }
    return 1;
}
CMD:mduty( playerid, params[ ] )
{
    #pragma unused params
    if ( pInfo[ playerid ][ pTester ] <= 0 )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs nesate testuotojas, kad naudotumët ðiá  komanda." );

    new string[ 100 ];
    if ( GetPVarInt( playerid, "TESTER_DUTY" ) == 1 )
    {
        format( string, 100, "[ModCmd] Moderatorius %s iðjungë aktyvaus bûdëjimo rëþimà. ", GetName( playerid ) );
        SendTesterMessage( COLOR_MODERATOR, string );
        SetPVarInt( playerid, "TESTER_DUTY", 0 );
        SetPlayerColor( playerid, TEAM_HIT_COLOR );
        return 1;
    }
    else if ( GetPVarInt( playerid, "TESTER_DUTY" ) == 0 )
    {
        format( string, 100, "[ModCmd] Moderatorius %s ájungë aktyvaus bûdëjimo rëþimà ", GetName( playerid ) );
        SendTesterMessage( COLOR_MODERATOR, string );
        SetPVarInt( playerid, "TESTER_DUTY", 1 );
        SetPlayerColor( playerid, TEAM_TESTER_COLOR );
        return 1;
    }
    return 1;
}
CMD:acpq( playerid, params[ ] )
{
    new string[ 128 ],
        giveplayerid;
    if ( sscanf( params, "r", giveplayerid ) )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /acpq [VEIKËJO ID] " );
    if ( pInfo[ playerid ][ pTester ] >= 1 || pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        if ( GetPVarInt( giveplayerid, "ASK_Q" ) == 1 )
        {
            format(string,126,"[ModCmd] Moderatorius %s patvirinto pateiktà klausimà: %s", GetName( playerid ), GetName( giveplayerid ));
            AdminLog( pInfo[ playerid ][ pMySQLID ], pInfo[ giveplayerid ][ pMySQLID ], string );
        
            format( string, 126, "Dëmesio, Jûsø pateiktà klausimà patvirtino moderatorius %s, pasistengsime kuo greièiau pateikti atsakymà.", GetPlayerFirstName( playerid ) );
            SendClientMessage( giveplayerid, COLOR_MODERATOR, string );
            format( string, 126, "[ModCmd] Moderatorius %s priimë pateiktà klausimà ið %s", GetName( playerid ), GetName( giveplayerid ) );
            SendTesterMessage( COLOR_MODERATOR, string );
            DeletePVar( giveplayerid, "ASK_Q" );
            return 1;
        }
        return 1;
    }
    return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs nesate testuotojas, arba administratorius." );
}
CMD:dcpq( playerid, params[ ] )
{
    new string[ 126 ],
        giveplayerid;
    if ( sscanf( params, "r", giveplayerid ) )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /dcpq [ veikëjo vardas, id ] " );
    if ( pInfo[ playerid ][ pTester ] >= 1 || pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        if ( GetPVarInt( giveplayerid, "ASK_Q" ) == 1 )
        {
            format(string,126,"Administratorius %s atmetë klausimá  %s", GetName( playerid ), GetName( giveplayerid ));
            AdminLog( pInfo[ playerid ][ pMySQLID ], pInfo[ giveplayerid ][ pMySQLID ], string );
            
            format( string, 126, "Dëmesio, Jûsø pateiktas klausimas buvo atmestas moderatoriaus: %s.", GetPlayerFirstName( playerid ) );
            SendClientMessage( giveplayerid, COLOR_MODERATOR, string );
            format( string, 126, "[ModCmd] Moderatorius %s atmetë %s pateiktà klausimà",GetName( playerid ), GetName( giveplayerid ) );
            SendTesterMessage( COLOR_MODERATOR, string );
            DeletePVar( giveplayerid, "ASK_Q" );
            return 1;
        }
        return 1;
    }
    return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs nesate testuotojas, arba administratorius." );
}
CMD:askq( playerid, params[ ] )
{
    new string[ 256 ];
    if ( sscanf( params, "s[256]", string ) )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /askq [KLAUSIMAS] ");
    if ( GetPVarInt( playerid, "ASK_Q" ) == 1 )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, komandà /askq galite naudoti kas vienà minutæ." );

    format           ( string, 256, "** [ModCmd] Autorius %s [ID: %d]: %s", GetName( playerid ), playerid, string );
    SendTesterMessage( COLOR_YELLOW, string );
    SendTesterMessage( COLOR_MODERATOR, "** [ModCmd] Priimti klausimà: /acpq [VEIKËJO ID] Atmesti: /dcpq [VEIKËJO ID]" );
    new counttesters;
    foreach(Player,i)
    {
        if ( pInfo[ i ][ pTester ] >= 1 )
            counttesters ++;
    }
    format           ( string, 126, "Jûsø pateiktas klausimas buvo nusiûstas budintiems moderatoriams, palaukite (Prisijungusiu moderatoriø %d)", counttesters );
    SendClientMessage( playerid, COLOR_MODERATOR, string );

    SetPVarInt( playerid, "ASK_Q", 1 );
    SetTimerEx( "ASK_Q_T", 60000, false, "d", playerid );
    return 1;
}

FUNKCIJA:ClosePVartai( id )
{
    switch ( id )
    {
        case 0:
        {
            MoveObject( vartai[ 0 ][ 0 ], 595.28222656,353.47207642,18.69028854, 0.1,0.00000000,90.00000000,34.96582031 );
            MoveObject( vartai[ 1 ][ 0 ], 606.92742920,361.62338257,18.69028854, 0.1,0.00000000,90.00000000,215.04956055 );
            vartai[ 0 ][ 1 ] = false;
            vartai[ 1 ][ 1 ] = false;
        }
        case 1:
        {
            MoveObject( vartai[ 6 ][ 0 ], -202.20063782,265.40649414,11.85065079, 0.1,0.00000000,90.00000000,345.41210938 );
            MoveObject( vartai[ 7 ][ 0 ], -188.38629150,261.80456543,11.85366344, 0.1,0.00000000,90.00000000,165.41015625 );
            vartai[ 6 ][ 1 ] = false;
            vartai[ 7 ][ 1 ] = false;

        }
        case 2:
        {
            MoveObject( vartai[ 8 ][ 0 ], 1200.39172363,-620.98559570,56.12424469, 0.1,0.00000000,90.00000000,337.97341919 );
            MoveObject( vartai[ 9 ][ 0 ], 1213.55517578,-626.29931641,56.12844849, 0.1,0.00000000,90.00000000,158.01440430 );
            vartai[ 8 ][ 1 ] = false;
            vartai[ 9 ][ 1 ] = false;
        }
        case 3:
        {
            MoveObject( vartai[ 10 ][ 0 ], -949.18688965,-285.37277222,36.20511246, 0.1,0.00000000,270.00000000,349.62197876 );
            MoveObject( vartai[ 11 ][ 0 ], -963.11804199,-282.82247925,36.20383453, 0.1,0.00000000,270.00000000,169.61791992 );
            vartai[ 10 ][ 1 ] = false;
            vartai[ 11 ][ 1 ] = false;
        }
        case 4:
        {
            MoveObject( vartai[ 12 ][ 0 ], -1397.50427, 825.34515, 47.23720, 0.1,0.00000000,270.00000000,137.00000 );
            MoveObject( vartai[ 13 ][ 0 ], -1400.92200, 828.56818, 47.23720, 0.1,0.00000000,270.00000000,-44.00000 );
            vartai[ 12 ][ 1 ] = false;
            vartai[ 13 ][ 1 ] = false;
        }
        case 5:
        {
            MoveObject( vartai[ 14 ][ 0 ], 1695.20422, 443.20917, 30.81520, 0.1,0.00000000,270.00000000,-201.00000 );
            MoveObject( vartai[ 15 ][ 0 ], 1722.53088, 432.85577, 30.81520, 0.1,0.00000000,270.00000000,-21.00000 );
            vartai[ 14 ][ 1 ] = false;
            vartai[ 15 ][ 1 ] = false;
        }
    }
}

FUNKCIJA:ASK_Q_T( playerid )
    return DeletePVar( playerid, "ASK_Q" );

CMD:makemoderator( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 4 )
    {
        new string[ 100 ],
            giveplayerid,
            level;

        if ( sscanf( params, "rd", giveplayerid, level ) )
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /makemoderator [VEIKËJO ID][MODERATORIAUS LYGIS] " );

        if(IsPlayerNPC(giveplayerid)) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite uþdaryti ðio veikëjo, kadangi tai serverio dirbtinis þaidëjas (BOT)");
        if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");

        pInfo[ giveplayerid ][ pTester ] = level;
        SaveAccount( giveplayerid );
        format( string, 100, "AdmWarn: Administratorius (%s) suteikë veikëjui (%s) moderatoriaus statusà. ", GetName( playerid ), GetName( giveplayerid ) );
        SendAdminMessage( COLOR_ADM, string );
        SendClientMessage( giveplayerid, COLOR_MODERATOR, "[ModCmd] Sveikiname, jus buvote priimtas á moderatoriø grupæ. Informacija /modhelp ");
    }
    return 1;
}
CMD:mc( playerid, params[ ] )
{
    new string[ 256 ];
    if ( sscanf( params, "s[256]", string ) )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /tc [ tekstas ] " );

    if ( pInfo[ playerid ][ pTester ] >= 1 || pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        format( string, 256, "[Mod] %s: %s ", GetName( playerid ), string );
        foreach(Player,i)
        {
            if ( pInfo[ i ][ pTester ] >= 1 && GetPVarInt( i, "TESTER_TOG" ) == 0 )
                SendClientMessage( i, COLOR_MODERATOR, string );
        }
        return 1;
    }
    return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite naudotis ðia komanda nebûdami moderatoriumi/Administratoriumi" );
}
CMD:togq( playerid, params[ ] )
{
    #pragma unused params
    if ( pInfo[ playerid ][ pTester ] >= 1 || pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        if ( GetPVarInt( playerid, "TESTER_TOG" ) == 1 )
        {
            SetPVarInt( playerid, "TESTER_TOG", 0 );
            SendClientMessage( playerid, COLOR_MODERATOR, "[TOGq] Serverio veikëjø klausimø praneðimai buvo ájungti." );
            return 1;
        }
        else if ( GetPVarInt( playerid, "TESTER_TOG" ) == 0 )
        {
            SetPVarInt( playerid, "TESTER_TOG", 1 );
            SendClientMessage( playerid, COLOR_MODERATOR, "[TOGq] Serverio veikëjø klausimø praneðimai buvo iðjungti " );
            return 1;
        }
    }
    return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs nesate testuotojas, arba administratorius." );
}
CMD:modhelp( playerid, params[ ] )
{
    #pragma unused params
    if ( pInfo[ playerid ][ pTester ] >= 1 || pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        SendClientMessage( playerid, COLOR_MODERATOR, "|____________________MODERATORIAUS SKYRIUS____________________|" );
        SendClientMessage( playerid, COLOR_FADE1, " /togq /mc /dcpq /acpq /mduty /mkick " );
        SendClientMessage( playerid, COLOR_MODERATOR, "|________________________________________________________________|" );		
        return 1;
    }
    return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite naudotis ðia komanda nebûdami moderatoriumi/Administratoriumi" );
}
CMD:togooc( playerid, params[] )
{
    #pragma unused params
    if(TogChat[playerid][0] == true)
    {
        TogChat[playerid][0] = false;
        SendClientMessage(playerid,COLOR_LIGHTRED,"[TOGooc] Dabar nebematysite jokiø OOC praneðimø savo pokalbiø kanale");
        return 1;
    }
    else if(TogChat[playerid][0] == false)
    {
        TogChat[playerid][0] = true;
        SendClientMessage(playerid,COLOR_LIGHTRED,"[TOGooc] OOC praneðimø rodymas buvo ájungtas ");
        return 1;
    }
    return 1;
}
CMD:togpm( playerid, params[ ] )
{
    #pragma unused params
    if ( pInfo[ playerid ][ pDonator ] >= 2 || pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        if(TogChat[playerid][2] == true)
        {
            TogChat[playerid][2] = false;
            SendClientMessage(playerid,COLOR_LIGHTRED,"[TOGpm] Dabar nebegausite privaèiø þinuèiø, galësite tik siûsti kitiems.");
            return 1;
        }
        else if(TogChat[playerid][2] == false)
        {
            TogChat[playerid][2] = true;
            SendClientMessage(playerid,COLOR_LIGHTRED,"[TOGpm] Privaèiø þinuèiø gaviklis buvo ájungtas.");
            return 1;
        }
    }
    return 1;
}
CMD:togadmin(playerid)
{
    if(TogChat[playerid][3] == true)
    {
        TogChat[playerid][3] = false;
        SendClientMessage(playerid,COLOR_LIGHTRED,"[TOGadmin] Iðjungëte praneðimus apie Administratoriaus veiksmus serveryje.");
        return 1;
    }
    else if(TogChat[playerid][3] == false)
    {
        TogChat[playerid][3] = true;
        SendClientMessage(playerid,COLOR_LIGHTRED,"[TOGadmin] Administratoriø veiksmø praneðimai ájungti.");
        return 1;
    }
    return 1;
}
CMD:tognews(playerid, params[ ] )
{
    #pragma unused params
    if(TogChat[playerid][1] == true)
    {
        TogChat[playerid][1] = false;
        SendClientMessage(playerid,COLOR_LIGHTRED,"[TOGnews] Praneðamø naujienø praneðimai buvo iðjungti.");
        return 1;
    }
    else if(TogChat[playerid][1] == false)
    {
        TogChat[playerid][1] = true;
        SendClientMessage(playerid,COLOR_LIGHTRED,"[TOGnews] Naujienø praneðimai ájungti.");
        return 1;
    }
    return 1;
}

CMD:buysex( playerid, params[ ] )
{
    #pragma unused params
    if(PlayerToPoint(10.0,playerid,-103.9604,-22.6792,1000.7188))
        ShowPlayerDialog(playerid,7,DIALOG_STYLE_LIST,"SEX PREKIØ MENU","\
            1.Roþinis vibratorius \t$300\
            \n2.Maþas baltas vibratorius \t$250\
            \n3.Didelis baltas vibratorius \t$330\
            \n4.Blizgantis vibratorius \t$260"
            ,"Pirkti","Iðjungti");
    return 1;
}
CMD:ucall( playerid, params[ ] )
{
    if ( !NearPhone( playerid ) )
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs ne prie taksafono.");
    if ( Mires[ playerid ] > 0 )
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûsø veikëjas ðiuo metu yra kritinëje arba komos bûsenoje.");
    if ( Mute[ playerid ] == true )
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðiuo metu Jums yra uþdrausta kalbëtis (/mute), norëdami paðalinti draudimà susisiekite su Administratoriumi.");
    if ( MobilePhone[playerid] != INVALID_PLAYER_ID )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Pirma padëkite ragelá /h " );

    new phonenumb,
        string[ 128 ],
        sendername[ 24 ];

    GetPlayerName( playerid, sendername, MAX_PLAYER_NAME );
    if ( sscanf( params, "d", phonenumb ) )
    {
        SendClientMessage( playerid, GRAD,        "KOMANDOS NAUDOJIMAS: /ucall [telefono numeris]");
        SendClientMessage( playerid, COLOR_GREEN, "_________________Los Santos paslaugos_________________");
        SendClientMessage( playerid, COLOR_WHITE, "911 - Pagalbos linija");
        SendClientMessage( playerid, COLOR_WHITE, "816 - Mechanikai, 817 - Taksi, 999 - San News");
        SendClientMessage( playerid, COLOR_GREEN, "____________________________________________");
        return 1;
    }
    if ( phonenumb == pInfo[ playerid ][ pPhone ] )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs negalite skambinti sau!" );
    if ( phonenumb == 911 )
    {
        SendClientMessage( playerid, GRAD, "INFORMACIJA: Naudokite T, kad kalbëtumëte á taksofoná . (/h)angup kad padëtumëte rageli.");
        SendClientMessage( playerid, COLOR_FADE1, "PAGALBOS LINIJA: Su kuo jus sujungti? Policija, medikais? Ar su abu?");
        MobilePhone[playerid] = 911;
        TogglePlayerControllable(playerid, false);
        return 1;
    }
    if(phonenumb == 816)
    {
        SendClientMessage(playerid, GRAD, "INFORMACIJA: Naudokite T, kad kalbëtumëte á taksofoná . (/h)angup kad padëtumëte ragelá.");
        SendClientMessage(playerid, COLOR_FADE1, "Moteriðkas balsas: Laba diena. Mechanikø dirbtuvës klauso. Pasakykite vietà  kur jums reikia mechaniko.");
        MobilePhone[playerid] = 816;
        TogglePlayerControllable(playerid, false);
        return 1;
    }
    if(phonenumb == 817)
    {
        SendClientMessage(playerid, GRAD, "INFORMACIJA: Naudokite T, kad kalbëtumëte i taksofoná . (/h)angup kad padëtumëte rageli.");
        SendClientMessage(playerid, COLOR_FADE1, "Moteriðkas balsas: Laba diena, taksi dispeøterë klauso, pasakykite vieta kur jums reikia taksi.");
        MobilePhone[playerid] = 817;
        TogglePlayerControllable(playerid, false);
        return 1;
    }
    if(phonenumb == 999)
    {
        MobilePhone[playerid] = 999;
        TogglePlayerControllable(playerid, false);
        return 1;
    }
    foreach(Player,i)
    {
        if(phonenumb == pInfo[i][pPhone] && phonenumb > 0 && MobilePhone[i] == INVALID_PLAYER_ID)
        {
            foreach(Player,p2p)
            {
                if ( MobilePhone[ p2p ] == i )
                    return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Telefono numeris uþimtas. " );
            }
            if ( GetPVarInt( i, "PHONE_STATUS" ) == 1 )
                return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Telefonas yra iðjungtas. " );

            if ( pInfo[i][pJail] > 0 )
                return SendClientMessage( playerid, COLOR_GREY, "   Telefono ryðys blokuojamas." );

            SetPVarInt( playerid, "CallOwner", true );
            MobilePhone[playerid] = i;

            SendClientMessage     ( i, COLOR_LIGHTRED2, "Dëmesio, Jûsø kiðenëje skamba mobilusis telefonas. Pakelkite: (/p)ickup.");
            GetPlayerName         ( i, sendername, MAX_PLAYER_NAME);

            TogglePlayerControllable(playerid, false);
            format           ( string, 126, "* %s skamba ir vibruoja kisenëje telefonas.", sendername);
            SendClientMessage( playerid, COLOR_WHITE, "Naudokite T, kad kalbetumete i taksofoná . (/h)angup kad padetumete rageli");
            ProxDetector     ( 20.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

            new Float:x, Float:y, Float:z;
            GetPlayerPos( i, x, y, z );

            PlayerPlaySound( playerid, 3600, 0,0,0 );
            PlaySoundForPlayersInRange( 20600, 10.5, x,y,z );
            RingTone[i] = 10;
            return 1;
        }
    }
    return SendClientMessage( playerid, COLOR_LIGHTRED2, "Klaida, numeris á kurá skambinate ðiuo metu uþimtas." );
}
// Telefonu knyga. PHonebook 


CMD:addcontact(playerid, params[])
{
    new number, name[ MAX_PLAYER_NAME ], query[256];
    if(PlayerPhoneBook[ playerid ][ sizeof(PlayerPhoneBook[])-1][ PhoneNumber ])
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, daugiau konktaktø netelpa á Jûsø knygute.");
    if(sscanf(params,"is[24]", number, name))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Komandos naudojimas: /addcontact [NUMERIS] [VARDAS]");
    query = GetPlayerPhonebookName(playerid, number);
    if(!isnull(query))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Ðis numeris jau yra jûsø kontaktuose.");

    mysql_real_escape_string(name, name);
    format(query, sizeof(query), "INSERT INTO player_phone_contacts (player_id, phone_number, name, entry_date) VALUES (%d, %d, '%s', %d) ON DUPLICATE KEY UPDATE name = VALUES(name), entry_date = VALUES(entry_date)",
        pInfo[ playerid ][ pMySQLID ], number, name, gettime());
    mysql_pquery(DbHandle, query);

    for(new i = 0; i < MAX_PHONEBOOK_ENTRIES; i++)
        if(!PlayerPhoneBook[ playerid ][ i ][ PhoneNumber ])
        {
            PlayerPhoneBook[ playerid ][ i ][ PhoneNumber ] = number;
            strcat(PlayerPhoneBook[ playerid ][ i ][ Name ], name, MAX_PLAYER_NAME);
            break;
        }

    SendClientMessage(playerid, COLOR_NEWS, "Kontaktas buvo sëkmingas pridëtas á Jûsø adresø knygutæ.");
    return 1;
}

CMD:deletecontact(playerid, params[])
{
    new id, query[120];
    if(sscanf(params,"i", id))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Komandos naudojimas: /deletecontact [Eiles Numeris]");
    if(id < 1 || id >= MAX_PHONEBOOK_ENTRIES)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Dëmesio, kontaktø knygoje galimi numeriai yra nuo 1 iki " #MAX_PHONEBOOK_ENTRIES);
    if(!PlayerPhoneBook[ playerid ][ id-1 ][ PhoneNumber ])
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, pasirinktoje vietoje nëra jokio kontakto");

    format(query, sizeof(query), "DELETE FROM player_phone_contacts WHERE player_id = %d AND phone_number = %d LIMIT 1", 
        pInfo[ playerid ][ pMySQLID ], PlayerPhoneBook[ playerid ][ id-1 ][ PhoneNumber ]);
    mysql_pquery(DbHandle, query);

    new i = id -1;
    for(; i < MAX_PHONEBOOK_ENTRIES-1; i++)
    {
        PlayerPhoneBook[ playerid ][ i ][ PhoneNumber ] = PlayerPhoneBook[ playerid ][ i + 1][ PhoneNumber ];
        strcpy(PlayerPhoneBook[ playerid ][ i ][ Name ], PlayerPhoneBook[ playerid ][ i + 1][ Name ], MAX_PLAYER_NAME);
    }
    PlayerPhoneBook[ playerid ][ i ][ PhoneNumber ] = 0;

    SendClientMessage(playerid, COLOR_NEWS, "Kontaktas buvo sëkmingas paðalintas ið adresø knygutës.");
    return 1;
}

CMD:phonebook(playerid)
{
    new query[180],name[MAX_PLAYER_NAME], date[32], number, count = 1, Cache:result;
    format(query, sizeof(query), "SELECT phone_number,name,FROM_UNIXTIME(entry_date) AS date FROM player_phone_contacts WHERE player_id = %d ORDER BY entry_date ASC", pInfo[ playerid ][ pMySQLID ]);
    result = mysql_query(DbHandle, query);
    SendClientMessage(playerid, COLOR_GREEN, "|_____________KONTAKTØ SÀRAÐAS_____________|");
    for(new i = 0; i < cache_get_row_count(); i++)
    {
        number = cache_get_field_content_int(i, "phone_number");
        cache_get_field_content(i, "name", name);
        cache_get_field_content(i, "date", date);
        format(query, sizeof(query), "%d. Vardas: %s Numeris: %d Pridëtas: %s",count++, name, number, date);
        SendClientMessage(playerid, COLOR_WHITE, query);

    }
    cache_delete(result);
    return 1;
}




CMD:call( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pPhone ] == 0 )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Tu neturi mobilaus telefono.");
    if ( Mires[ playerid ] > 0 )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, Jûsø veikëjas ðiuo metu yra kritinëje arba komos bûsenoje.");
    if ( Mute[ playerid ] == true )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, ðiuo metu Jums yra uþdrausta kalbëtis (/mute), norëdami paðalinti draudimà susisiekite su Administratoriumi.");
    if ( MobilePhone[ playerid ] != INVALID_PLAYER_ID )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Pirma padëkite ragelá /h " );
    if ( GetPVarInt( playerid, "PHONE_STATUS" ) == 1 )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûsø telefonas yra iðjungtas. " );
    if ( pInfo[playerid][pJail] > 0 )
        return SendClientMessage( playerid, COLOR_GREY, "   Telefono ryðys blokuojamas." );
    
    new phonenumb,
        string[ 128 ],
        sendername[ 24 ];

    GetPlayerName( playerid, sendername, MAX_PLAYER_NAME );

    if ( sscanf( params, "d", phonenumb ) )
    {
        if(!isnull(params))
        {
            // Patikrinam gal ávedë vardà ið kontaktø sàraðo.
            phonenumb = GetPlayerPhonebookNumber(playerid, params);
        }
        if(!phonenumb || isnull(params))
        {
            SendClientMessage( playerid, GRAD,        "KOMANDOS NAUDOJIMAS: /call [telefono numeris/kontakto vardas]");
            SendClientMessage( playerid, COLOR_GREEN2, "____________Los Santos paslaugos____________");
            SendClientMessage( playerid, COLOR_WHITE, "911 - Pagalbos linija");
            SendClientMessage( playerid, COLOR_WHITE, "816 - Mechanikai, 817 - Taksi, 999 - San News");
            SendClientMessage( playerid, COLOR_GREEN2, "____________________________________________");
            return 1;
        }
    }
    if ( phonenumb == pInfo[ playerid ][ pPhone ] )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs negalite skambinti sau!" );
    if ( phonenumb == 911 )
    {
        SendClientMessage( playerid, GRAD, "INFORMACIJA: Naudokite T, kad kalbëtumëte á telefonà. (/h)angup kad padëtumëte rageli.");
        SendClientMessage( playerid, COLOR_FADE1, "PAGALBOS LINIJA: Su kuo jus sujungti? Policija, medikais? Ar su abu?");
        MobilePhone[playerid] = 911;
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
        cmd_ame(playerid, "iðsitraukia telefonà ið kiðenës ir surenka numerá.");
        PlayerPlaySound( playerid, 3600, 0,0,0 );
        return 1;
    }
    if(phonenumb == 816)
    {
        SendClientMessage(playerid, GRAD, "INFORMACIJA: Naudokite T, kad kalbëtumëte á telefonà. (/h)angup kad padëtumëte ragelá.");
        SendClientMessage(playerid, COLOR_FADE1, "Moteriðkas balsas: Laba diena. Mechanikø dirbtuvës klauso. Pasakykite vietà  kur jums reikia mechaniko.");
        MobilePhone[playerid] = 816;
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
        cmd_ame(playerid, "iðsitraukia telefonà ið kiðenës ir surenka numerá.");
        PlayerPlaySound( playerid, 3600, 0,0,0 );
        return 1;
    }
    if(phonenumb == 817)
    {
        SendClientMessage(playerid, GRAD, "INFORMACIJA: Naudokite T, kad kalbëtumëte i telefonà. (/h)angup kad padëtumëte rageli.");
        SendClientMessage(playerid, COLOR_FADE1, "Moteriðkas balsas: Laba diena, taksi dispeøterë klauso, pasakykite vieta kur jums reikia taksi.");
        MobilePhone[playerid] = 817;
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
        cmd_ame(playerid, "iðsitraukia telefonà ið kiðenës ir surenka numerá.");
        PlayerPlaySound( playerid, 3600, 0,0,0 );
        return 1;
    }
    if(phonenumb == 999)
    {
        MobilePhone[playerid] = 999;
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
        cmd_ame(playerid, "iðsitraukia telefonà ið kiðenës ir surenka numerá.");
        PlayerPlaySound( playerid, 3600, 0,0,0 );
        return 1;
    }
    foreach(Player,i)
    {
        if(phonenumb == pInfo[i][pPhone] && phonenumb > 0 && MobilePhone[i] == INVALID_PLAYER_ID)
        {
            foreach(Player,p2p)
            {
                if ( MobilePhone[ p2p ] == i )
                    return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Telefono numeris uþimtas. " );
            }
            if ( GetPVarInt( i, "PHONE_STATUS" ) == 1 )
                return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Telefonas yra iðjungtas. " );

            if ( pInfo[i][pJail] > 0 )
                return SendClientMessage( playerid, COLOR_GREY, "   Telefono ryðys blokuojamas." );
                
            SetPVarInt( playerid, "CallOwner", true );
            MobilePhone[playerid] = i;

            cmd_ame(playerid, "iðsitraukia telefonà ið kiðenës ir surenka numerá.");

            format           ( string, sizeof(string), "Jûsø telefonas skamba (/p)ickup, skambina: %s", GetNumber( MobilePhone[playerid], pInfo[ playerid ][ pPhone ] ));
            SendClientMessage( i, COLOR_LIGHTRED, string);

            GetPlayerName         ( i, sendername, MAX_PLAYER_NAME);
            SetPlayerSpecialAction( playerid, SPECIAL_ACTION_USECELLPHONE);

            format           ( string, 126, "* %s skamba ir vibruoja kisenëje telefonas.", sendername);
            SendClientMessage( playerid, COLOR_WHITE, "Naudokite T, kad kalbetumete i telefona. (/h)angup kad padetumete rageli");
            ProxDetector     ( 20.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

            new Float:x, Float:y, Float:z;
            GetPlayerPos( i, x, y, z );

            PlayerPlaySound( playerid, 3600, 0,0,0 );
            PlaySoundForPlayersInRange( 20600, 10.5, x,y,z );
            RingTone[i] = 10;
            return 1;
        }
    }
    return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Numeris ðiuo metu uþimtas. " );
}
CMD:pickup( playerid, params[ ] )
{
    #pragma unused params
    if ( MobilePhone[ playerid ] != INVALID_PLAYER_ID )
        return SendClientMessage( playerid, GRAD, "Jums niekas neskambina.");
    if ( pInfo[ playerid ][ pPhone ] == 0 )
        return SendClientMessage( playerid, GRAD, "KLAIDAI: Tu neturi mobilaus telefono.");
    if ( Mires[ playerid ] > 0 )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, Jûsø veikëjas ðiuo metu yra kritinëje arba komos bûsenoje.");
    if ( Mute[ playerid ] == true )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, ðiuo metu Jums yra uþdrausta kalbëtis (/mute), norëdami paðalinti draudimà susisiekite su Administratoriumi.");

    foreach(Player,i)
    {
        if ( MobilePhone[ i ] == playerid )
        {
            MobilePhone[ playerid ] = i;
            RingTone   [ playerid ] = 0;

            SendClientMessage(i,  GRAD, "Jis pakëlë telefono ragelá.");
            cmd_ame(playerid, "iðtraukia telefona ið kiðenës ir atsiliepia.");

            SetPlayerSpecialAction( playerid, SPECIAL_ACTION_USECELLPHONE);
            return 1;
        }
    }
    return SendClientMessage(playerid, GRAD, "Jums pasivaideno, kad jums kaðkas skambino.");
}
CMD:p( playerid, params[] )
    return cmd_pickup( playerid, "" );

CMD:hangup( playerid, params[ ] )
{
    #pragma unused params
    if ( Mires[ playerid ] > 0)
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, Jûsø veikëjas ðiuo metu yra kritinëje arba komos bûsenoje.");
    if ( Mute[ playerid ] == true )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, ðiuo metu Jums yra uþdrausta kalbëtis (/mute), norëdami paðalinti draudimà susisiekite su Administratoriumi.");

    if ( MobilePhone[ playerid ] > MAX_PLAYERS )
    {
        SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
        RemovePlayerAttachedObject( playerid, 3 );
        MobilePhone[ playerid ] = INVALID_PLAYER_ID;
        RingTone   [ playerid ] = 0;
        if ( NearPhone( playerid ) )
            TogglePlayerControllable( playerid, true );
    }
    else if ( MobilePhone[ playerid ] != INVALID_PLAYER_ID && MobilePhone[ playerid ] < MAX_PLAYERS )
    {
        if ( MobilePhone[ MobilePhone[ playerid ] ] == playerid )
        {
            SendClientMessage( MobilePhone[ playerid ], GRAD, "Jis/Ji padëjo telefono ragelá.");

            SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
            RemovePlayerAttachedObject( playerid, 3 );
            SetPlayerSpecialAction( MobilePhone[ playerid ], SPECIAL_ACTION_STOPUSECELLPHONE);
            RemovePlayerAttachedObject( MobilePhone[ playerid ], 3 );

            SetPVarInt( MobilePhone[ playerid ], "CallOwner", false );
            MobilePhone[ MobilePhone[ playerid ] ] = INVALID_PLAYER_ID;
        }
        SetPVarInt( playerid, "CallOwner", false );
        RingTone   [ MobilePhone[ playerid ] ] = 0;
        MobilePhone[ playerid ] = INVALID_PLAYER_ID;
        RingTone   [ playerid ] = 0;

        if ( NearPhone( playerid ) )
            TogglePlayerControllable( playerid, true );

        if ( NearPhone( MobilePhone[ playerid ] ) )
            TogglePlayerControllable( MobilePhone[ playerid ], true );
    }
    else if ( RingTone[ playerid ] != 0 )
    {
        foreach (Player, i)
        {
            if ( PlayerOn[ i ] == true ) continue;
            if ( MobilePhone[ i ] == playerid)
            {
                SendClientMessage( i, GRAD, "Jis/Ji padëjo telefono ragelá." );
                if ( NearPhone( playerid ) )
                    TogglePlayerControllable( playerid , true);

                SetPVarInt( i, "CallOwner", false );
                SetPVarInt( playerid, "CallOwner", false );

                MobilePhone[ i ] = INVALID_PLAYER_ID;
                RingTone   [ i ] = 0;
                RingTone   [ playerid ] = 0;
                break;
            }
        }
    }
    return 1;
}
CMD:h(playerid, params[] )
    return cmd_hangup( playerid, "" );


CMD:payfines( playerid, params[ ] )
{
    #pragma unused params
    if ( !PlayerToPoint( 20.0, playerid, 295.7723,1021.7993,2123.6130 ) )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, norëdami susimokëti baudà turite bûti banke. " );
    if ( (pInfo[ playerid ][ pFines ]/2) > PlayerMoney[ playerid ] )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, Jums nepakanka pinigø sumos, kad susimokëtumëte baudà" );
    if ( pInfo[ playerid ][ pFines ] == 0 )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Jûs neturite jokios skolingos nuobaudos ar nusiþengimo. " );
    GivePlayerMoney( playerid, -(pInfo[ playerid ][ pFines ]/2) );

    new string[ 128 ];
    format           ( string, sizeof(string), "=================================\n\
                                    \nNustatyta bauda: %d$\n\
                                    Sumokëta: %d$\n\
                                    Mokëjimo procentas: 50proc.\n\
                                    \nSumokëta baudø: %d$\n\
                                    ==================================\n",
                                    pInfo[ playerid ][ pFines ],
                                    (pInfo[ playerid ][ pFines ]/2),
                                    pInfo[ playerid ][ pPaydFines ] + (pInfo[ playerid ][ pFines ]/2) );
    ShowPlayerDialog( playerid, 9999, DIALOG_STYLE_MSGBOX, "APMOKËJIMO SUMA", string, "OK", "");

    pInfo[ playerid ][ pPaydFines ] += (pInfo[ playerid ][ pFines ]/2);

    pInfo[ playerid ][ pFines ] = 0;
    SaveAccount( playerid );
    return 1;
}
CMD:fine( playerid, params[ ] )
{
    if ( PlayerFaction( playerid ) != 1)
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo nedirbdami policijos departamente.");
    new price,
        giveplayerid,
        string[ 256 ],
        reason[ 128 ];
    if ( sscanf( params, "uds[128]", giveplayerid, price, reason ) )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /fine [veikëjo id][bauda][prieþastis]" );
    if ( !IsPlayerConnected( giveplayerid ) )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: þaidëjas norimu ID neprisijungæs!");
    if ( !PlayerToPlayer( 10.0, playerid, giveplayerid ) )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite naudoti ðio veiksmo su veikëju, kuris nëra ðalia Jûsø.");
    if ( price < 1 || price > 5000 )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Baudos suma negali bûti didesnë negu $5000 arba maþesnë negu $1.");
    if(GetPVarInt(giveplayerid, "FineOfferMemory"))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðis þaidëjas dar nepatvirtino/neatmetë baudos.");
    

    format(string, sizeof(string), "[LSPD] Iðraðëtæ baudà asmeniui: %s, kurios dydys yra %d$, dabar ðis asmuo privalo sutikti su Jûsø bauda.",GetPlayerNameEx(giveplayerid),price);
    SendClientMessage(playerid,COLOR_POLICE,string);
    format(string, sizeof(string), "[LSPD] Pareigûnas %s iðraðë Jums baudà, kurios suma yra %d$. Jei sutinkate su bauda turite raðyti: /accept fine.",GetPlayerNameEx(playerid),price);
    SendClientMessage(giveplayerid,COLOR_POLICE,string);
    
    new Alloc:mem = malloc(2 + strlen(reason));
    if(!mem)
        return print("ERROR. Klaida. CMD:fine failed in allocating memory.");

    mset(mem, 0, playerid);
    mset(mem, 1, price);
    msets(mem, 2, reason);
    SetPVarInt(giveplayerid, "FineOfferMemory", _:mem);
    SetTimerEx("FineOfferExpires", 15000, false, "i", giveplayerid);
    return 1;
}
forward FineOfferExpires(playerid);
public FineOfferExpires(playerid)
{
    if(GetPVarInt(playerid, "FineOfferMemory"))
        free(Alloc:GetPVarInt(playerid, "FineOfferMemory"));
    DeletePVar(playerid, "FineOfferMemory");
}
CMD:fines( playerid, params[ ] )
{
    if ( PlayerFaction( playerid ) != 1)
        ShowFines(playerid, playerid);
    else
    {
        new giveplayerid;
        if ( sscanf( params, "u", giveplayerid ) )
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /fines [veikëjo id]" );
        if ( !IsPlayerConnected( giveplayerid ) )
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: þaidëjas norimu ID neprisijungæs!");
        if ( !PlayerToPlayer( 10.0, playerid, giveplayerid ) )
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite naudoti ðio veiksmo su veikëju, kuris nëra ðalia Jûsø.");

        ShowFines(playerid, giveplayerid);
    }
    return 1;
}
CMD:vehiclefines( playerid, params[ ] )
{
    if ( PlayerFaction( playerid ) != 1)
    {
        if ( IsPlayerInAnyVehicle( playerid ) )
            ShowVehicleFines(playerid, GetPlayerVehicleID(playerid));
    }
    else
    {
        new giveplayerid;
        if ( sscanf( params, "d", giveplayerid ) )
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /vehiclefines [TR. PRIEMONËS ID]" );
        if ( !doesVehicleExist(giveplayerid) )
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, nurodytas tr. priemonës ID nëra galimas." );
        if ( cInfo[ giveplayerid ][ cOwner ] < 1 )
            return 1;

        ShowVehicleFines(playerid, giveplayerid);
    }
    return 1;
}
CMD:vehiclefine( playerid, params[ ] )
{
    if ( PlayerFaction( playerid ) != 1)
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo nedirbdami policijos departamente.");
    new time,
        giveplayerid,
        string[ 256 ],
        reason[ 128 ];
    if ( sscanf( params, "dds[128]", giveplayerid, time, reason ) )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /vehiclefine [vehicle id][bauda][prieþastis]" );
    if ( !doesVehicleExist(giveplayerid) )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, nurodytas tr. priemonës ID nëra galimas." );
    if ( time < 1 || time > 5000 )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, iðraðomos baudos suma gali bûti tarp 1$ ir 5000$");
    if ( cInfo[ giveplayerid ][ cOwner ] < 1 )
        return 1;
        
    format(string, 256, "INSERT INTO `cartickets` (numbers,crime,reporter,price) VALUES ('%s','%s','%s','%d')",cInfo[ giveplayerid ][ cNumbers ],reason,GetName(playerid),time);
    mysql_pquery(DbHandle, string);
        
    SendClientMessage( playerid, COLOR_POLICE, "[LSPD] Sëkmingai iðraðëtæ baudos lapelá ðiai tr. priemonei." );
    return 1;
}
stock DeclineOffer( playerid )
{
    SendClientMessage( GetPVarInt( playerid, "OFFER_ID" ), GRAD, " ** Jis atmetë jûsø pasiûlimá . " );
    DeletePVar( playerid, "OFFER_ID" );
    DeletePVar( playerid, "OFFER_COAST" );
    DeletePVar( playerid, "OFFER_TYPE" );
    return 1;
}

stock AcceptOffer( playerid )
{
    new giveplayerid = GetPVarInt( playerid, "OFFER_ID" ),
        type = GetPVarInt( playerid, "OFFER_TYPE" ),
        money = GetPVarInt( playerid, "OFFER_COAST" ),
        //tmp = GetPVarInt( playerid, "OFFER_TMP" ),
        string[ 126 ];

    if ( money > PlayerMoney[ playerid ] )
        return DeclineOffer( playerid );

    switch( type )
    {
        case 1:
        {
            GivePlayerJobWeapon ( giveplayerid, 41, 500 );
            SetPVarInt       ( giveplayerid, "OFFER2_ID", playerid );
            SetPVarInt       ( giveplayerid, "OFFER2_COAST", money );
            SetPVarInt       ( giveplayerid, "MECHANIC", 1 );

            format           ( string, 126, "%s priëmë jûsø pasiûlimá . ", GetPlayerNameEx( playerid ) );
            SendClientMessage( giveplayerid, COLOR_WHITE, string );
            SendClientMessage( giveplayerid, COLOR_WHITE, "Atsistokite prie jo automobilio, ir purskite is jo i automobili. " );

            format      ( string, 126, "* %s priëme pasiûlimá  ið %s" ,GetPlayerNameEx( playerid ), GetPlayerNameEx( giveplayerid ) );
            ProxDetector( 15.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
            return 1;
        }
    }
    return 1;
}

stock OfferFor( playerid, giveplayerid, text[], money, type, tmp = -1 )
{
    new string[ 126 ];
    format( string, 126, "%s %s\nJeigu sutinkate spauskite Taip. ",GetPlayerNameEx( giveplayerid ), text );
    ShowPlayerDialog( playerid, 103, DIALOG_STYLE_MSGBOX, "PASIûLIMAS", string, "Taip", "Ne");

    SetPVarInt( playerid, "OFFER_ID", giveplayerid );
    SetPVarInt( playerid, "OFFER_TYPE", type );
    SetPVarInt( playerid, "OFFER_COAST", money );
    SetPVarInt( playerid, "OFFER_TMP", tmp );
    return 1;
}


CMD:tognames( playerid, params[ ] )
{
    #pragma unused params
    if ( GetPVarInt( playerid, "NAMES_SHOW" ) == 0 )
    {
        foreach(Player,i)
        {
            ShowPlayerNameTagForPlayer(playerid, i, 0);
        }
        SendClientMessage( playerid, COLOR_LIGHTRED, "[TOGnames] Kitø veikëjø vardai buvo paslëpti. Norëdami ájungti pakartokite komandà: /tognames. " );
        SetPVarInt( playerid, "NAMES_SHOW", 1 );
        return 1;
    }
    else if ( GetPVarInt( playerid, "NAMES_SHOW" ) == 1 )
    {
        foreach(Player,i)
        {
            ShowPlayerNameTagForPlayer(playerid, i, pInfo[i][pMask]);
        }
        SendClientMessage( playerid, COLOR_WHITE, "[TOGnames] Kitø veikëjø vardø rodymas buvo ájungtas.." );
        SetPVarInt( playerid, "NAMES_SHOW", 0 );
        return 1;
    }
    return 1;
}
CMD:dice(playerid)
{
    if(!IsItemInPlayerInventory(playerid, ITEM_DICE))
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, norëdami naudotis ðia komanda privalote savo invetoriuje turëti loðimø kauliukus. " );

    OnPlayerUseDice(playerid, ITEM_DICE);
    return 1;
}


public OnPlayerCommandReceived(playerid, cmdtext[]) {
    #if defined DEBUG
        printf("[debug] OnPlayerCommandReceived(%s, %s)", GetName(playerid), cmdtext);
    #endif

    if(PlayerOn[playerid] == false)
    {
        SendClientMessage( playerid, GRAD, " Jûs nesate prisijungæs, praðome prisijungti.");
        return 0;
    }
    SetPVarInt( playerid, "Is_AFK", 0 );
    if( GetPVarInt( playerid, "Anti_Spam" ) > 0 )
    {
        //SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Labai jûsø praðome, nenaudokite komandø taip greit. " );
        //return 0;
    }
    SetPVarInt( playerid, "Anti_Spam", 3 );
    return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[ ], success)
{
    LastPlayerCommandTimestamp[ playerid ] = gettime();
    //foreach(new i : Player)
       // if(IsPlayerSpectatingPlayer(i, playerid))
            //UpdateDynamic3DTextLabelText(SpecCommandLabel[ i ], 0x00AA00FF, cmdtext);
    //SetTimerEx("SpecLabelDissapear", 30000, false, "i", playerid);



    if ( !success )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Neþinoma komanda: Jûsø paraðyta komanda neegzistuoja. Pabandykite dar kartà arba naudokitës /askq komanda. " );

    if ( AfkCheck[ playerid ] != 0 )
        AfkCheck[ playerid ] = 0;

    return true;
}

forward SpecLabelDissapear(playerid);
public SpecLabelDissapear(playerid)
{
    foreach(new i : Player)
        if(IsPlayerSpectatingPlayer(i, playerid))
            UpdateDynamic3DTextLabelText(SpecCommandLabel[ i ], 0x00AA00FF, " ");
}

CMD:invite( playerid, params[ ] )
{
    new
        giveplayerid,
        string[ 128 ];
        
    if(pInfo[playerid][pLead] > 0 )
    {
        if ( sscanf( params, "u", giveplayerid ) ) return SendClientMessage( playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /invite [veikëjo ID]" );
        if(!IsPlayerConnected(giveplayerid))  return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
        if(pInfo[ giveplayerid ][ pMember ] > 0 ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjas jau atstovauja kitai frakcijai. ");
        pInfo[ giveplayerid ][ pMember ] = pInfo[ playerid ][ pLead ];
        pInfo[ giveplayerid ][ pRank ] = 1;
        pInfo[ giveplayerid ][ pJob ] = JOB_NONE;
        pInfo[ giveplayerid ][ pJobLevel ] = 0;
        pInfo[ giveplayerid ][ pJobSkill ] = 0;
        format(string,sizeof(string),"Dëmesio, Jûs buvote pakviestas prisijungti á %s. Jus pakvietë prisijungti frakcijos narys: %s.",fInfo[PlayerFaction( playerid )][fName],GetName(playerid));
        SendClientMessage(giveplayerid,COLOR_NEWS, string);
        format(string,sizeof(string),"Jûsø pasirinktas veikëjas %s buvo sëkmingai pridëtas á frakcijos narius.",GetName(giveplayerid));
        SendClientMessage(playerid,COLOR_NEWS, string);
        return 1;
    }
    else
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûs neturite galimybës naudotis ðia komanda.");
}
CMD:setrank( playerid, params[ ] )
{
    new
        giveplayerid,
        rank,
        string[ 128 ];
        
    if(pInfo[playerid][pLead] < 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûs neturite galimybës naudotis ðia komanda.");
    if ( sscanf( params, "ud", giveplayerid, rank ) ) return SendClientMessage( playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /setrank [veikëjo ID] [rangas]" );
    if(IsPlayerNPC(giveplayerid)) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite uþdaryti ðio veikëjo, kadangi tai serverio dirbtinis þaidëjas (BOT)");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
    if(pInfo[giveplayerid][pMember] != pInfo[playerid][pLead]) return SendClientMessage(playerid, COLOR_LIGHTRED,"Klaida, nurodytas veikëjas nepriklauso Jûsø turimai frakcijai.");
    if(rank < 0 || rank > (MAX_FACTION_RANKS-1)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas blogas frakcijos rango numeris.");
    pInfo[giveplayerid][pRank] = rank;
    format(string,sizeof(string),"Sveikiname, Tavo frakcijos vadovas %s pakeitë Jûsø esamà rangà frakcijoje á %d",GetName(playerid),pInfo[giveplayerid][pRank]);
    SendClientMessage(giveplayerid,COLOR_NEWS, string);
    format(string,sizeof(string),"Sëkmingai pakeitëtæ savo frakcijos nario %s rangà á %d, jis buvo informtuotas.",GetName(giveplayerid),pInfo[giveplayerid][pRank]);
    SendClientMessage(playerid,COLOR_NEWS, string);
    return 1;
}
CMD:uninvite( playerid, params[ ] )
{
    new
        giveplayerid,
        string[ 128 ];
        
    if(pInfo[playerid][pLead] > 0 )
    {
        if ( sscanf( params, "u", giveplayerid ) ) return SendClientMessage( playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /uninvite [veikëjo ID]" );
        if(!IsPlayerConnected(giveplayerid))  return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
        if(pInfo[giveplayerid][pMember] != pInfo[playerid][pMember] )
        {
            SendClientMessage(playerid,COLOR_LIGHTRED,"Klaida, nurodytas veikëjas nepriklauso Jûsø turimai frakcijai.");
            return 1;
        }
        if ( pInfo[ giveplayerid ][ pMember ] == 2 || pInfo[ giveplayerid ][ pMember ] == 5 )
        {
            RemovePlayerJobWeapons(giveplayerid);
            ResetPlayerWeapons( giveplayerid );
            SetPlayerArmour( giveplayerid, 0 );
        }

        pInfo[giveplayerid][pMember] = 0;
        pInfo[giveplayerid][pRank] = 0;
        pInfo[giveplayerid][pLead] = 0;
        pInfo[giveplayerid][pSpawn] = DefaultSpawn;
        format(string,sizeof(string),"Sëkmingai paðalinote veikëjà %s ið savo frakcijos, jam bus praneðta apie paðalinimà",GetName(giveplayerid));
        SendClientMessage(playerid,COLOR_NEWS, string);
        format(string,sizeof(string),"Dëmesio, Jûs buvote paðalintas ið savo frakcijos. Jus paðalino veikëjas: %s",GetName(playerid));
        SendClientMessage(giveplayerid,COLOR_NEWS, string);
        return 1;
    }
    else
       return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûs neturite galimybës naudotis ðia komanda.");
}


CMD:setspawn (playerid, params[])
{
    if(isnull(params))
    {
        SetSpawnInfo:
        SendClientMessage(playerid, COLOR_LIGHTRED, "|________VEIKËJO ATSIRADIMO VIETA PRISIJUNGUS________|");
        SendClientMessage(playerid, COLOR_LIGHTRED2, "Atsiradimo vietà taip pat galite redaguoti vartotojo valdymo pulte: ltrp.lt");
        SendClientMessage(playerid, COLOR_WHITE, "KOMANDOS NAUDOJIMAS: /setspawn [VIETA]");
        SendClientMessage(playerid, COLOR_WHITE, "VIETOS: Idlewood, Los Santos, Namas, Frakcija, Verslas, Garaþas");
        SendClientMessage(playerid, COLOR_LIGHTRED2, "_______________________________");
    }
    else
    {
        if(!strcmp(params, "Idlewood", true))
        {
            pInfo[ playerid ][ pSpawn ] = DefaultSpawn;
            SendClientMessage( playerid, COLOR_NEWS,"Vieta sëkmingai nustatyta, dabar prisijungæ á serverá kità kartà atsirasite Idlewood rajone..");
        }
		else if(!strcmp(params, "Los Santos", true))
        {
            pInfo[ playerid ][ pSpawn ] = SpawnLosSantos;
            SendClientMessage( playerid, COLOR_NEWS,"Vieta sëkmingai nustatyta, dabar prisijungæ á serverá kità kartà atsirasite Los Santos Unity Station.");
        }
        else if(!strcmp(params, "Namas", true))
        {
            if( pInfo[ playerid ][ pHouseKey ] > 0 )
            {
                pInfo[ playerid ][ pSpawn ] = SpawnHouse;
                SendClientMessage( playerid, COLOR_NEWS,"Vieta sëkmingai nustatyta, dabar prisijungæ á serverá kità kartà atsirasite nomuojamam/nuosavame name.");
            }
            else
                SendClientMessage( playerid, COLOR_LIGHTRED,"Klaida, Jûs nesinomuojate jokio gyvenamojo namo ar Jums nepriklauso joks namas");
        }
        else if(!strcmp(params, "Frakcija", true))
        {
            if( PlayerFaction( playerid ) > 0 )
            {
                pInfo[ playerid ][ pSpawn ] = SpawnFaction;
                SendClientMessage( playerid, COLOR_NEWS,"Vieta sëkmingai nustatyta, dabar prisijungæ á serverá kità kartà atsirasite frakcijos nustatytoje atsiradimo vietoje.");
            }
            else
                SendClientMessage( playerid, COLOR_LIGHTRED,"Klaida, Jûs nepriklausote jokiai frakcijai. Pasitikrinkite veikëjo informacija komanda /stats.");

        }
        else if(!strcmp(params, "Verslas", true))
        {
            new index = GetPlayerBusinessIndex(playerid);
            if(index == -1)
                return SendClientMessage(playerid, COLOR_LIGHTRED, "Turite stovëti prie verslo kurá norite pasirinkti kaip atsiradimo vietà.");
           	if(!IsPlayerBusinessOwner(playerid, index))
        		return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðis verslas jums nepriklauso.");

            pInfo[ playerid ][ pBSpawn ] = index;
            pInfo[ playerid ][ pSpawn ] = SpawnBusiness;
            SendClientMessage( playerid, COLOR_NEWS,"Vieta sëkmingai nustatyta, dabar prisijungæ á serverá kità kartà atsirasite ðalia savo biznio.");
        }
        else if(!strcmp(params, "Garazas", true) || !strcmp(params, "Garaþas", true))
        {
        	new index = GetPlayerGarageIndex(playerid);
        	if(index == -1)
        		return SendClientMessage(playerid, COLOR_LIGHTRED, "Turite stovëti prie garaþo prie kurio norite atsirasti.");
        	if(!IsPlayerGarageOwner(playerid, index))
        		return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðis garaþas jums nepriklauso.");

        	pInfo[ playerid ][ pBSpawn ] = index;
        	pInfo[ playerid ][ pSpawn ] = SpawnGarage;
        	SendClientMessage(playerid, COLOR_NEWS, "Vieta sëkmingai pakeista. Kità kartà prisijungæ á serverá atsirasite prie garaþo.");
        }
        else 
            goto SetSpawnInfo;
        SaveAccount(playerid);
    }
    return true;
}

CMD:lock(playerid)
{
    new car = GetNearestVehicle(playerid,10.0);
    if(car == INVALID_VEHICLE_ID || cInfo[ car ][ cOwner ] == 0) return 1;
    if(cInfo[car][cLock] == 0 && CheckCarKeys(playerid,car) == 1)
    {
        LockVehicle(car, 1);
        VehicleAlarm(car, 0);
        ShowInfoText(playerid,"~w~AUTOMOBILIS ~r~UZRAKINTAS", 1000);
        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
        return 1;
    }
    else if(cInfo[car][cLock] == 1 && CheckCarKeys(playerid,car) == 1)
    {
        LockVehicle(car, 0);
        VehicleAlarm(car, 0);
        ShowInfoText(playerid,"~w~AUTOMOBILIS ~g~ATRAKINTAS", 1000);
        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
        return 1;
    }
    return 1;
}



CMD:v( playerid, params[ ] )
{
    new idx, select[128], string[ 2048 ], giveplayerid, Float:Kords[ 3 ];
    select = strtok(params, idx);
    if(!strlen(select))
    {
        SendClientMessage(playerid, COLOR_GREEN, "|______________________Tr. Priemoniu komandos ir naudojimas__________________________|");
        SendClientMessage(playerid,COLOR_LIGHTRED2, "  KOMANDOS NAUDOJIMAS: /v [KOMANDA], pavyzdþiui: /v list");
        SendClientMessage(playerid,COLOR_WHITE,"  PAGRINDINËS KOMANDOS: list, get, park, buypark, lock, find, documents ");		
        SendClientMessage(playerid,COLOR_FADE1,"  TR. PRIEMONËS SKOLINIMAS: dubkey takedubkey removedubs getdub ");		
        SendClientMessage(playerid,COLOR_WHITE,"  TOBULINIMAS/TVARKYMAS: register buy alarm buylock buyinsurance buymod");		
        SendClientMessage(playerid,COLOR_FADE1,"  VALDYMAS: /trunk /trunko /bonnet /windows /setbelt /maxspeed /vradio ");				
        SendClientMessage(playerid,COLOR_WHITE,"  KITA: destroy scrap payticket faction buy ");			
        SendClientMessage(playerid, COLOR_GREEN, "|__________________________________________________________________________________|");
        return 1;
    }
    if(!strcmp("destroy",select,true))
    {
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid,COLOR_LIGHTRED,"Dëmesio, norëdami sunaikinti tr. priemonæ privalote sedëti joje.");
        new idcar = GetPlayerVehicleID( playerid );
        if(cInfo[idcar][cOwner] != pInfo[playerid][pMySQLID]) return SendClientMessage(playerid,COLOR_LIGHTRED,"Klaida, ðis automobilis nepriklauso Jums, tad negalite atlikti ðio veiksmo");
        new Query[140];

        foreach(Player,i)
        {
            if ( pInfo[ i ][ pDubKey ] == cInfo[ idcar ][ cID ] )
                pInfo[ i ][ pDubKey ] = 0;
        }
        format( Query, 126, "UPDATE players SET pDubKey = 0 WHERE pDubKey = %d", cInfo[ idcar ][ cID ] );
        mysql_query(DbHandle,  Query, false);

        cInfo[idcar][cVehID] = 0;
        DestroyVehicle(idcar);
        if ( pInfo[ playerid ][ pCarGet ] > 0 )
            pInfo[ playerid ][ pCarGet ] --;

        format(Query,sizeof(Query),"DELETE FROM `vehicles` WHERE `ID` = '%i'", cInfo[ idcar ][ cID ]);
        mysql_query(DbHandle,  Query, false);
        nullVehicle( idcar );
        LoadPlayerVehicles( playerid );

        PayLog( pInfo[ playerid ][ pMySQLID ],16, -2, GetVehicleModel( idcar ) );
        SendClientMessage( playerid, COLOR_LIGHTRED, "Dëmesio, Jûsø pasirinkta tr. priemonë buvo sunaikinta negràþinamai." );
        return 1;
    }
    if(!strcmp("scrap",select,true))
    {
        new
            idcar = INVALID_VEHICLE_ID;

        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            idcar = GetPlayerVehicleID( playerid );
        else
            idcar = GetNearestVehicle( playerid, 5.0 );
        if ( idcar == INVALID_VEHICLE_ID ) return SendClientMessage( playerid, COLOR_LIGHTRED,"Dëmesio, norëdami sunaikinti tr. priemonæ privalote sedëti joje.");
        if(cInfo[idcar][cOwner] != pInfo[playerid][pMySQLID]) return SendClientMessage(playerid,COLOR_LIGHTRED,"Klaida, ðis automobilis nepriklauso Jums, tad negalite atlikti ðio veiksmo");
        new Query[256],
            Kaina1 = GetVehiclePrice( GetVehicleModel( idcar ) ),
            Float:Kaina2 = Kaina1 / 2,
            Float:Kaina3 = 0;

        if(cInfo[idcar][cDuzimai] < 1)
            Kaina3 = Kaina2;
        else
            Kaina3 = Kaina2 / cInfo[idcar][cDuzimai];

        if( Kaina3 < 1 ) return 1;

        GivePlayerMoney(playerid, floatround( Kaina3 ));
        foreach(Player,i)
        {
            if ( pInfo[ i ][ pDubKey ] == cInfo[ idcar ][ cID ] )
                pInfo[ i ][ pDubKey ] = 0;
        }
        format( Query, 126, "UPDATE players SET pDubKey = 0 WHERE pDubKey = %d", cInfo[ idcar ][ cID ] );
        mysql_query(DbHandle,  Query, false);
        
        cInfo[idcar][cVehID] = 0;
        DestroyVehicle(idcar);
        if ( pInfo[ playerid ][ pCarGet ] > 0 )
            pInfo[ playerid ][ pCarGet ] --;

        format(Query,sizeof(Query),"DELETE FROM `vehicles` WHERE `ID` = '%i'", cInfo[ idcar ][ cID ]);
        mysql_query(DbHandle,  Query, false);
        nullVehicle( idcar );
        LoadPlayerVehicles( playerid );

        PayLog( pInfo[ playerid ][ pMySQLID ],16, -2, GetVehicleModel( idcar ) );
        SendClientMessage( playerid, COLOR_LIGHTRED, "Dëmesio, Jûsø pasirinkta tr. priemonë buvo sunaikinta negràþinamai." );
        return 1;
    }
    if(!strcmp("removedubs",select,true))
    {
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid,COLOR_LIGHTRED,"Dëmesio, norëdami atlikti ðá veiksmà privalote sedëti tr. priemonëje.");
        new idcar = GetPlayerVehicleID( playerid );
        if(cInfo[idcar][cOwner] != pInfo[playerid][pMySQLID]) return SendClientMessage(playerid,COLOR_LIGHTRED,"Klaida, ðis automobilis nepriklauso Jums, tad negalite atlikti ðio veiksmo");
        new affected;
        foreach(Player,i)
        {
            if ( pInfo[ i ][ pDubKey ] == cInfo[ idcar ][ cID ] )
            {
                affected ++;
                pInfo[ i ][ pDubKey ] = 0;
            }
        }
        format( string, 126, "UPDATE players SET pDubKey = 0 WHERE pDubKey = %d", cInfo[ idcar ][ cID ] );
        mysql_query(DbHandle,  string, false);
        format( string, 126, "Dublikuotu raktu paðalinimas pavyko. Ið viso buvo panaikinti %d dublikuoti raktai.", cache_affected_rows( ) + affected );
        SendClientMessage( playerid, COLOR_LIGHTRED2, string );
        return 1;
    }
    if(!strcmp("takedubkey",select,true))
    {
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid,COLOR_LIGHTRED,"Dëmesio, norëdami atlikti ðá veiksmà privalote sedëti tr. priemonëje.");
        new idcar = GetPlayerVehicleID( playerid );
        if(cInfo[idcar][cOwner] != pInfo[playerid][pMySQLID]) return SendClientMessage(playerid,COLOR_LIGHTRED,"Klaida, ðis automobilis nepriklauso Jums, tad negalite atlikti ðio veiksmo");
        select = strtok( params, idx );
        if( !strlen( select ) ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /v takedubkey [VEIKËJO ID]");
        giveplayerid  = strval( select );
        if( !IsPlayerConnected( giveplayerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
        if( !PlayerToPlayer( 10, playerid, giveplayerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite naudoti ðio veiksmo su veikëju, kuris nëra ðalia Jûsø.");
        if ( pInfo[ giveplayerid ][ pDubKey ] == cInfo[ idcar ][ cID ] )
        {
            pInfo[ giveplayerid ][ pDubKey ] = 0;
            format( string, 80, "Dëmesio, tr. priemonës savininkas %s pasiimë ið Jûsø savo tr priemonës raktelius.", GetName(playerid) );
            SendClientMessage( giveplayerid, COLOR_NEWS, string );
            format( string, 80, "Sveikiname, Jûs sëkmingai pasiimëte savo tr. priemonës raktelius ið veikëjo %s ", GetName( giveplayerid ) );
            SendClientMessage( playerid, COLOR_NEWS, string );
            return 1;
        }
        return 1;
    }
    else if(!strcmp("dubkey",select,true))
    {
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid,COLOR_LIGHTRED,"Dëmesio, norëdami atlikti ðá veiksmà privalote sedëti tr. priemonëje.");
        new idcar = GetPlayerVehicleID( playerid );
        if(cInfo[idcar][cOwner] != pInfo[playerid][pMySQLID]) return SendClientMessage(playerid,COLOR_LIGHTRED,"Klaida, ðis automobilis nepriklauso Jums, tad negalite atlikti ðio veiksmo");
        select = strtok( params, idx );
        if( !strlen( select ) ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /v dubkey [VEIKËJO ID]");
        giveplayerid  = strval( select );
        if( !IsPlayerConnected( giveplayerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
        if( !PlayerToPlayer( 10, playerid, giveplayerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite naudoti ðio veiksmo su veikëju, kuris nëra ðalia Jûsø.");
        pInfo[ giveplayerid ][ pDubKey ] = cInfo[ idcar ][ cID ];
        format( string, 80, "Dëmesio, tr. priemonës savininkas %s suteikë savo tr. priemonës raktelius, nuo ðiol galësite naudotis ðia tr. priemone", GetName(playerid) );
        SendClientMessage( giveplayerid, COLOR_NEWS, string );
        format( string, 80, "Sveikiname, Jûs sëkmingai suteikëte galimybæ naudotis savo tr. priemonæ veikëjui %s ", GetName( giveplayerid ) );
        SendClientMessage( playerid, COLOR_NEWS, string );
        return 1;
    }
    else if(!strcmp("list",select,true))
    {

        format     ( string, 180, "SELECT cName,cDuzimai,cFuel,cNumbers,cAlarm,cLockType,cInsurance,cVehID FROM `vehicles` WHERE `cOwner` = %d", pInfo[playerid][pMySQLID] );
        new Cache:result = mysql_query(DbHandle,  string );
        new slot = 1;
        SendClientMessage( playerid, COLOR_GREEN, "|______________________JUMS PRIKLAUSANTIS TRANSPORTAS_____________________|" );
        if ( cache_get_row_count( ) )
        {
            for(new i = 0; i < cache_get_row_count(); i++)
            {
                new vName[ 24 ],
                    Duzimai,
                    Fuel,
                    Numbers[ 24 ],
                    Alarm,
                    LockType,
                    Insurance,
                    spawned;

                cache_get_field_content(i, "cName", vName);
                Duzimai = cache_get_field_content_int(i, "cDuzimai");
                Fuel = cache_get_field_content_int(i, "cFuel");
                cache_get_field_content(i, "cNumbers", Numbers);
                Alarm = cache_get_field_content_int(i, "cAlarm");
                LockType = cache_get_field_content_int(i, "cLockType");
                Insurance = cache_get_field_content_int(i, "cInsurance");
                spawned = cache_get_field_content_int(i, "cVehID");



                if ( spawned == 0 ) string = "Ne"; else string = "Taip";
                format( string, 256, "%d. Modelis[%s] Paþeidimai[%d] Degalø bake[%dl.] Numeriai[%s] Signalizacija[lvl:%d] Uþraktas[lvl:%d] Draudimas[%d] Iðkviesta[%s]",
                            slot,
                            vName,
                            Duzimai,
                            Fuel,
                            Numbers,
                            Alarm,
                            LockType,
                            Insurance,
                            string);

                SendClientMessage( playerid, COLOR_WHITE, string );
                slot ++;
            }
        }
        cache_delete(result);

        format     ( string, 140, "SELECT cName,cDuzimai,cFuel,cNumbers,cAlarm,cLockType,cInsurance,cVehID FROM `vehicles` WHERE `id` = %d LIMIT 1;", pInfo[playerid][pDubKey] );
        result = mysql_query(DbHandle,  string );
        SendClientMessage( playerid, COLOR_GREEN, "|______________________GALIMAS KT. TRANSPORTAS_____________________|" );
        if ( cache_get_row_count( ) )
        {
            new vName[ 24 ],
                Duzimai,
                Fuel,
                Numbers[ 24 ],
                Alarm,
                LockType,
                Insurance,
                spawned;

            cache_get_field_content(0, "cName", vName);
            Duzimai = cache_get_field_content_int(0, "cDuzimai");
            Fuel = cache_get_field_content_int(0, "cFuel");
            cache_get_field_content(0, "cNumbers", Numbers);
            Alarm = cache_get_field_content_int(0, "cAlarm");
            LockType = cache_get_field_content_int(0, "cLockType");
            Insurance = cache_get_field_content_int(0, "cInsurance");
            spawned = cache_get_field_content_int(0, "cVehID");

            if ( spawned == 0 ) string = "Ne"; else string = "Taip";

            format( string, 256, "Modelis[%s] Paþeidimai[%d] Degalai[%dl.] Numeriai[%s] Signalizacija[lvl:%d] Uþraktas[lvl:%d] Draudimas[%d] Iðkviesta[%s]",
                vName,
                Duzimai,
                Fuel,
                Numbers,
                Alarm,
                LockType,
                Insurance,
                string);
            SendClientMessage( playerid, COLOR_WHITE, string );
        }
        cache_delete(result);
        return 1;
    }
    else if(!strcmp("documents",select,true))
    {
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid,COLOR_LIGHTRED,"Dëmesio, norëdami atlikti ðá veiksmà privalote sedëti tr. priemonëje.");
        new idcar = GetPlayerVehicleID( playerid );
        if( cInfo[idcar][cOwner] != pInfo[playerid][pMySQLID] && pInfo[ playerid ][ pDubKey ] != cInfo[ idcar ][ cID ] ) return SendClientMessage(playerid,COLOR_LIGHTRED,"Klaida, ði tr. priemonë nepriklauso Jums.");
        select = strtok( params, idx );
        if( !strlen( select ) ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /v documents [þaidëjo id]");
        giveplayerid  = strval( select );
        if( !IsPlayerConnected( giveplayerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
        if( !PlayerToPlayer( 10, playerid, giveplayerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite naudoti ðio veiksmo su veikëju, kuris nëra ðalia Jûsø.");
        format           ( string, 126, "Parodei jam(-ai) %s savo automobilio dokumentus. ", GetName(giveplayerid) );
        SendClientMessage( playerid, COLOR_WHITE, string );

        SendClientMessage( giveplayerid, COLOR_GREEN,"|___________________Tr. priemonës dokumentai______________________|");
        format           ( string, 126, "| Tr. priemonës savininkas: %s | Tr. priemonës modelis: %s",GetVehicleOwnerName( cInfo[ idcar][ cOwner ] ), cInfo[ idcar][ cName ]);
        SendClientMessage( giveplayerid, COLOR_WHITE, string );
        format           ( string, 126, "| Uþrakto lygis: %d | Signalicazijos lygis: %d",cInfo[ idcar ][ cLockType ],cInfo[ idcar ][ cAlarm ]);
        SendClientMessage( giveplayerid, COLOR_WHITE, string );
        format           ( string, 126, "| Draudimas: %d ", cInfo[ idcar ][ cInsurance ]);
        SendClientMessage( giveplayerid, COLOR_WHITE, string );
        format           ( string, 126, "| Numeriai: %s ",  cInfo[ idcar ][ cNumbers ]);
        SendClientMessage( giveplayerid, COLOR_WHITE, string );
        format           ( string, 126, "| Paþeidimai: %d ",    cInfo[ idcar ][ cDuzimai ]);
        SendClientMessage( giveplayerid, COLOR_WHITE, string );
        format           ( string, 126, "| Visa rida: %.0f ",    cInfo[ idcar ][ cKM ]);
        SendClientMessage( giveplayerid, COLOR_WHITE, string );
        return 1;
    }
    else if(!strcmp("get",select,true))
    {
        select = strtok( params, idx );
        new slot = strval( select );
        if(!slot ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /v get [/v list SÀRAÐO NUMERIS]" );
        if(slot < 0 || slot > 20 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Sàraðo numeris negali bût didesnis uþ 20 ar maþesnis uþ vienetà." );
        
        if((pInfo[ playerid ][ pDonator ] < 1 && pInfo[ playerid ][ pCarGet ] > 1 ) || 
            (pInfo[ playerid ][ pDonator ] == 2 && pInfo[ playerid ][ pCarGet ] > 2) || 
            (pInfo[ playerid ][ pDonator ] == 3 && pInfo[ playerid ][ pCarGet ] > 3)) 
            return SendClientMessage( playerid, GRAD, "Tu jau esi iðsispawninàs per daug automobiliø" );
        
        if(pInfo[ playerid ][ pCar ][ slot ] == 0) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, nurodytas tr. priemonës sàraðo numeris neegzistuoja." );
        if(checkArrestedCar( playerid, pInfo[ playerid ][ pCar ][ slot ] ) ) return 1;

        format (string, 80, "SELECT * FROM `vehicles` WHERE `id` = %d LIMIT 1", pInfo[ playerid ][ pCar ][ slot ] );
        new Cache:result = mysql_query(DbHandle,  string );
        // Neturëtø NIEKADA To bût... bet logas sako kad yra buvæ :/ we must know WHY.
        if(!cache_get_row_count())
        {
            SendClientMessage(playerid, COLOR_LIGHTRED,"Ávyko sistemos klaida, susisiekite su Administracija.");
            new str[128];
            format(str,sizeof(str),"ERROR.Klaida. Buvo imama transporto priemonë su MySQL ID %d, taèiau jos nëra. ", pInfo[ playerid ][ pCar ][ slot ]);
            ImpossibleLog(str);
            cache_delete(result);
            return 1;
        }

        new ID,
            vName[ 24 ],
            Owner,
            model,
            Float:Spawn_x,
            Float:Spawn_y,
            Float:Spawn_z,
            Float:Spawn_a,
            color1,
            color2,
            Lock,
            Fuel,
            Numbers[ 24 ],
            factio,
            Wheels,
            Tuning,
            Insurance,
            Duzimai,
            LockType,
            Alarm,
            Trunk[ 512 ],
            Ticket,
            Hidraulik,
            crimes,
            VehIDD,
            Damage[ 50 ],
            Float:KM,
            VW;

        ID = cache_get_field_content_int(0, "id");
        cache_get_field_content(0, "cName", vName);
        Owner = cache_get_field_content_int(0, "cOwner");
        model = cache_get_field_content_int(0, "cModel");
        Spawn_x = cache_get_field_content_float(0, "cSpawn1");
        Spawn_y = cache_get_field_content_float(0, "cSpawn2");
        Spawn_z = cache_get_field_content_float(0, "cSpawn3");
        Spawn_a = cache_get_field_content_float(0, "cAngle");
        color1 = cache_get_field_content_int(0, "cColor1");
        color2 = cache_get_field_content_int(0, "cColor2");
        Lock = cache_get_field_content_int(0, "cLock");
        Fuel = cache_get_field_content_int(0, "cFuel");
        cache_get_field_content(0, "cNumbers", Numbers);
        factio = cache_get_field_content_int(0, "cFaction");
        Wheels = cache_get_field_content_int(0, "cWheels");
        Tuning = cache_get_field_content_int(0, "cTuning");
        Insurance = cache_get_field_content_int(0, "cInsurance");
        Duzimai = cache_get_field_content_int(0, "cDuzimai");
        LockType = cache_get_field_content_int(0, "cLockType");
        Alarm = cache_get_field_content_int(0, "cAlarm");
        cache_get_field_content(0, "cTrunk", Trunk);
        Ticket = cache_get_field_content_int(0, "cTicket");
        Hidraulik = cache_get_field_content_int(0, "cHidraulik");
        crimes = cache_get_field_content_int(0, "cCrimes");
        VehIDD = cache_get_field_content_int(0, "cVehID");
        cache_get_field_content(0, "cDamage", Damage);
        KM = cache_get_field_content_float(0, "cKM");
        VW = cache_get_field_content_int(0, "cVW");


        cache_delete(result);

        if ( VehIDD > 0 ) 
        {
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, pasirinkta tr. priemonë jau yra iðparkuota..");
        }
        new masina = CreateVehicle( model, Spawn_x, Spawn_y, Spawn_z, Spawn_a, color1, color2, -1 );

        new panels,doors,lights,tires,Health;
        sscanf( Damage,"p</>ddddd",panels, doors, lights, tires, Health);
        UpdateVehicleDamageStatus(masina, panels, doors, lights, tires);
        SetVehicleHealth(masina, Health);

        strmid( cInfo[ masina ][ cName    ], vName  , 0, 24, 24 );
        strmid( cInfo[ masina ][ cNumbers ], Numbers, 0, 24, 24 );
        strmid( cInfo[ masina ][ cDamage  ], Damage,  0, 40, 40 );

        cInfo[ masina ][ cOwner     ] = Owner;
        cInfo[ masina ][ cID        ] = ID;
        cInfo[ masina ][ cModel     ] = model;
        cInfo[ masina ][ cSpawn     ][ 0 ] = Spawn_x;
        cInfo[ masina ][ cSpawn     ][ 1 ] = Spawn_y;
        cInfo[ masina ][ cSpawn     ][ 2 ] = Spawn_z;
        cInfo[ masina ][ cSpawn     ][ 3 ] = Spawn_a;
        cInfo[ masina ][ cColor     ][ 0 ] = color1;
        cInfo[ masina ][ cColor     ][ 1 ] = color2;
        cInfo[ masina ][ cLock      ] = Lock;
        cInfo[ masina ][ cFuel      ] = Fuel;
        cInfo[ masina ][ cFaction   ] = factio;
        cInfo[ masina ][ cWheels    ] = Wheels;
        cInfo[ masina ][ cTuning    ] = Tuning;
        cInfo[ masina ][ cInsurance ] = Insurance;
        cInfo[ masina ][ cDuzimai   ] = Duzimai;
        cInfo[ masina ][ cLockType  ] = LockType;
        cInfo[ masina ][ cAlarm     ] = Alarm;
        cInfo[ masina ][ cTicket    ] = Ticket;
        cInfo[ masina ][ cHidraulik ] = Hidraulik;
        cInfo[ masina ][ cCrimes    ] = crimes;
        cInfo[ masina ][ cVehID     ] = masina;
        cInfo[ masina ][ cKM        ] = KM;
        cInfo[ masina ][ cVirtWorld ] = VW;
        UnPackTrunk( masina, Trunk );


        TuneCarMods( masina);
        AddVehicleComponent( masina, cInfo[ masina ][ cWheels ] );
        AddVehicleComponent( masina, cInfo[ masina ][ cHidraulik ] );
        SetVehicleVirtualWorld( masina, VW );
        LoadVehicleCargo(cInfo[ masina ][ cID ], masina);
        LoadVehicleFish(cInfo[ masina ][ cID ], masina);

        SetPlayerCheckPointEx( playerid, CHECKPOINT_CAR, cInfo[ masina ][ cSpawn ][ 0 ],
                                           cInfo[ masina ][ cSpawn ][ 1 ],
                                           cInfo[ masina ][ cSpawn ][ 2 ], 3.0 );
        Engine[ masina ] = false;
        sVehicles[ masina ][ Faction ] = 0;

        format( string, 80, "{000000}%s", cInfo[ masina ][ cNumbers ] );
        SetVehicleNumberPlate( masina, string );
        SendClientMessage( playerid, COLOR_LIGHTRED2, "Jûsø tr. priemonë sëkmingai iðparkuota ir vieta paþymëta raudonu taðku." );
        pInfo[ playerid ][ pCarGet ] ++;
        SaveVehicleEx( masina, "cVehID", masina );
        return 1;
    }
    else if(!strcmp("getdub",select,true))
    {
        if ( pInfo[ playerid ][ pDubKey ] == 0) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite gauti tr. priemonës jei neturite dublikuotu raktu." );
        if ( checkArrestedCar( playerid, pInfo[ playerid ][ pDubKey ] ) ) return 1;

        format (string, 80, "SELECT * FROM `vehicles` WHERE `id` = %d LIMIT 1", pInfo[ playerid ][ pDubKey ] );
        new Cache:result = mysql_query(DbHandle,  string );

        new ID,
            vName[ 24 ],
            Owner,
            model,
            Float:Spawn_x,
            Float:Spawn_y,
            Float:Spawn_z,
            Float:Spawn_a,
            color1,
            color2,
            Lock,
            Fuel,
            Numbers[ 24 ],
            factio,
            Wheels,
            Tuning,
            Insurance,
            Duzimai,
            LockType,
            Alarm,
            Trunk[ 512 ],
            Ticket,
            Hidraulik,
            crimes,
            VehIDD,
            Damage[ 50 ],
            Float:KM,
            VW;

        ID = cache_get_field_content_int(0, "id");
        cache_get_field_content(0, "cName", vName);
        Owner = cache_get_field_content_int(0, "cOwner");
        model = cache_get_field_content_int(0, "cModel");
        Spawn_x = cache_get_field_content_float(0, "cSpawn1");
        Spawn_y = cache_get_field_content_float(0, "cSpawn2");
        Spawn_z = cache_get_field_content_float(0, "cSpawn3");
        Spawn_a = cache_get_field_content_float(0, "cAngle");
        color1 = cache_get_field_content_int(0, "cColor1");
        color2 = cache_get_field_content_int(0, "cColor2");
        Lock = cache_get_field_content_int(0, "cLock");
        Fuel = cache_get_field_content_int(0, "cFuel");
        cache_get_field_content(0, "cNumbers", Numbers);
        factio = cache_get_field_content_int(0, "cFaction");
        Wheels = cache_get_field_content_int(0, "cWheels");
        Tuning = cache_get_field_content_int(0, "cTuning");
        Insurance = cache_get_field_content_int(0, "cInsurance");
        Duzimai = cache_get_field_content_int(0, "cDuzimai");
        LockType = cache_get_field_content_int(0, "cLockType");
        Alarm = cache_get_field_content_int(0, "cAlarm");
        cache_get_field_content(0, "cTrunk", Trunk);
        Ticket = cache_get_field_content_int(0, "cTicket");
        Hidraulik = cache_get_field_content_int(0, "cHidraulik");
        crimes = cache_get_field_content_int(0, "cCrimes");
        VehIDD = cache_get_field_content_int(0, "cVehID");
        cache_get_field_content(0, "cDamage", Damage);
        KM = cache_get_field_content_float(0, "cKM");
        VW = cache_get_field_content_int(0, "cVW");
        cache_delete(result);

        if ( VehIDD > 0 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, tr. priemonë jau yra iðparkuota.");
        new masina = CreateVehicle( model, Spawn_x, Spawn_y, Spawn_z, Spawn_a, color1, color2, -1 );

        new panels,doors,lights,tires,Health;
        sscanf( Damage,"p</>ddddd",panels, doors, lights, tires, Health);
        UpdateVehicleDamageStatus(masina, panels, doors, lights, tires);
        SetVehicleHealth(masina, Health);

        strmid( cInfo[ masina ][ cName    ], vName  , 0, 24, 24 );
        strmid( cInfo[ masina ][ cNumbers ], Numbers, 0, 24, 24 );
        strmid( cInfo[ masina ][ cDamage  ], Damage,  0, 40, 40 );

        cInfo[ masina ][ cOwner     ] = Owner;
        cInfo[ masina ][ cID        ] = ID;
        cInfo[ masina ][ cModel     ] = model;
        cInfo[ masina ][ cSpawn     ][ 0 ] = Spawn_x;
        cInfo[ masina ][ cSpawn     ][ 1 ] = Spawn_y;
        cInfo[ masina ][ cSpawn     ][ 2 ] = Spawn_z;
        cInfo[ masina ][ cSpawn     ][ 3 ] = Spawn_a;
        cInfo[ masina ][ cColor     ][ 0 ] = color1;
        cInfo[ masina ][ cColor     ][ 1 ] = color2;
        cInfo[ masina ][ cLock      ] = Lock;
        cInfo[ masina ][ cFuel      ] = Fuel;
        cInfo[ masina ][ cFaction   ] = factio;
        cInfo[ masina ][ cWheels    ] = Wheels;
        cInfo[ masina ][ cTuning    ] = Tuning;
        cInfo[ masina ][ cInsurance ] = Insurance;
        cInfo[ masina ][ cDuzimai   ] = Duzimai;
        cInfo[ masina ][ cLockType  ] = LockType;
        cInfo[ masina ][ cAlarm     ] = Alarm;
        cInfo[ masina ][ cTicket    ] = Ticket;
        cInfo[ masina ][ cHidraulik ] = Hidraulik;
        cInfo[ masina ][ cCrimes    ] = crimes;
        cInfo[ masina ][ cVehID     ] = masina;
        cInfo[ masina ][ cKM        ] = KM;
        cInfo[ masina ][ cDub       ] = 1;
        cInfo[ masina ][ cVirtWorld ] = VW;
        UnPackTrunk( masina, Trunk );

        TuneCarMods( masina);
        AddVehicleComponent   ( masina, cInfo[ masina ][ cWheels ] );
        AddVehicleComponent   ( masina, cInfo[ masina ][ cHidraulik ] );
        SetVehicleVirtualWorld( masina, VW );
        LoadVehicleCargo(cInfo[ masina ][ cID ], masina);

        SetPlayerCheckPointEx( playerid, CHECKPOINT_CAR, cInfo[ masina ][ cSpawn ][ 0 ],
                                           cInfo[ masina ][ cSpawn ][ 1 ],
                                           cInfo[ masina ][ cSpawn ][ 2 ], 3.0 );
        Engine[ masina ] = false;
        sVehicles[ masina ][ Faction ] = 0;

        if ( IsPlayerConnected( GetCarOwner( masina ) ) )
            pInfo[ GetCarOwner( masina ) ][ pCarGet ] ++;

        format( string, 80, "{000000}%s", cInfo[ masina ][ cNumbers ] );
        SetVehicleNumberPlate( masina, string );
        SendClientMessage( playerid, COLOR_LIGHTRED2, "Jûsø tr. priemonë sëkmingai iðparkuota ir vieta paþymëta raudonu taðku." );
        SaveVehicleEx( masina, "cVehID", masina );
        return 1;
    }
    else if(!strcmp("park",select,true))
    {
        new idcar = INVALID_VEHICLE_ID;
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            idcar = GetPlayerVehicleID( playerid );
        else
            idcar = GetNearestVehicle( playerid, 5.0 );
        if ( idcar == INVALID_VEHICLE_ID ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, aplink Tave nëra jokios tr. priemonës");

        if(cInfo[idcar][cOwner] != pInfo[playerid][pMySQLID] && pInfo[ playerid ][ pDubKey ] != cInfo[ idcar ][ cID ]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Tai ne jûsø automobilis!");
        new Float:CarHP;
        GetVehicleHealth( idcar, CarHP );
        if ( CarHP < 500 )
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Dëmesio, Jûsø tr. priemonë yra pernelyg daug sudauþytà, kad galëtumëte jà uþparkuoti." );

        if(!PlayerToPoint(10.0,playerid,cInfo[idcar][cSpawn][0],cInfo[idcar][cSpawn][1],cInfo[idcar][cSpawn][2]))
            return SendChatMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs negalite èia parkuoti, nes tai nëra transporto priemonës parkavimo vieta (norëdami nusipirkti parkavimo vietà , raðykite /v buypark)");

        new panels,doors,lights,tires;
        GetVehicleDamageStatus(idcar,panels,doors,lights,tires);
        format( cInfo[ idcar ][ cDamage ], 50, "%d/%d/%d/%d/%d/", panels, doors, lights, tires, floatround( CarHP) );
        cInfo[ idcar ][ cVirtWorld ] = GetVehicleVirtualWorld( idcar );

        cInfo[idcar][cVehID] = 0;
        DestroyVehicle(idcar);
        if ( pInfo[ playerid ][ pCarGet ] > 0 )
            pInfo[ playerid ][ pCarGet ] --;

        SaveCar(idcar);
        nullVehicle( idcar );
        SendClientMessage(playerid,COLOR_LIGHTRED2," Jûsø tr. priemonë buvo sëkmingai priparkuota. Norëdami gauti raðykite /v get.");
        PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
   
        return 1;
    }
    else if(!strcmp("buypark",select,true))
    {
        new idcar = INVALID_VEHICLE_ID;
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            idcar = GetPlayerVehicleID( playerid );
        else
            idcar = GetNearestVehicle( playerid, 5.0 );
        if ( idcar == INVALID_VEHICLE_ID ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, aplink Tave nëra jokios tr. priemonës");

        if(cInfo[idcar][cOwner] != pInfo[playerid][pMySQLID]) return SendClientMessage(playerid,COLOR_LIGHTRED,"Klaida, ði tr. priemonë nepriklauso Jums.");
        if(PlayerMoney[ playerid ] < 400) return SendClientMessage(playerid,COLOR_LIGHTRED,"Klaida, Jums nepakanka pakankamai pinigø, kad galëtumëte nusipirkti parkavimo vietà. Kaina: 400$");

        GetVehiclePos(idcar,cInfo[idcar][cSpawn][0],cInfo[idcar][cSpawn][1],cInfo[idcar][cSpawn][2]);
        GetVehicleZAngle(idcar,cInfo[idcar][cSpawn][3]);
        pInfo[playerid][pCarGet] --;
        cInfo[idcar][cVehID] = 0;

        new panels,doors,lights,tires, Float:Health;
        GetVehicleDamageStatus(idcar, panels, doors, lights, tires);
        GetVehicleHealth( idcar, Health );
        format( cInfo[ idcar ][ cDamage ], 50, "%d/%d/%d/%d/%d/", panels, doors, lights, tires, floatround( Health) );
        cInfo[ idcar ][ cVirtWorld ] = GetVehicleVirtualWorld( idcar );

        DestroyVehicle(idcar);
        SaveCar(idcar);
        nullVehicle( idcar );
        GivePlayerMoney(playerid, -400);
        SendClientMessage(playerid,COLOR_LIGHTRED2," Nauja tr. priemonës parkavimo vieta sëkmingai nustatyta. Dabar naudodami /v get, tr. priemonæ gausite èia.");
        PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
        Engine[idcar] = false;
        return 1;
    }
    else if(!strcmp("register",select,true))
    {
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
            return SendClientMessage(playerid,COLOR_LIGHTRED,"Dëmesio, norëdami atlikti ðá veiksmà privalote sedëti tr. priemonëje.");
        new veh = GetPlayerVehicleID( playerid );
        if(cInfo[veh][cOwner] != pInfo[playerid][pMySQLID])
            return SendClientMessage(playerid,COLOR_LIGHTRED,"Klaida, ði tr. priemonë nepriklauso Jums.");

        if(PlayerMoney[ playerid ] < 350)
            return SendClientMessage(playerid,COLOR_LIGHTRED,"Dëmesio, tr. priemonës registracija kainuoja 350$.");

        new numers = 10 + cInfo[veh][cID],
            leters[][2] = {
                {"A"},
                {"B"},
                {"C"},
                {"D"},
                {"E"},
                {"F"},
                {"G"},
                {"H"},
                {"I"},
                {"J"},
                {"K"},
                {"L"},
                {"M"},
                {"N"},
                {"O"},
                {"P"},
                {"Q"},
                {"R"},
                {"S"},
                {"T"},
                {"U"},
                {"V"},
                {"Y"},
                {"Z"}
            };

        format( cInfo[ veh ][ cNumbers ], 24, "%s%s%s%d",leters[ random( sizeof( leters ) ) ],
                                                          leters[ random( sizeof( leters ) ) ],
                                                          leters[ random( sizeof( leters ) ) ],
                                                          numers);

        format(string,256,"Sëkmingai uþregistravote tr. priemonæ Los Santos miesto automobiliø registre, Jûsø tr. priemonës numeriai: %s",cInfo[veh][cNumbers]);

        SendClientMessage(playerid,COLOR_LIGHTRED2,string);
        GivePlayerMoney(playerid,-350);
        cInfo[ veh ][ cCrimes     ] = 0;

        SaveCar( veh );
        format( string, 24, "{000000}%s", cInfo[ veh ][ cNumbers ] );
        SetVehicleNumberPlate(veh, string );
        return 1;
    }
    else if(!strcmp("payticket",select,true))
    {
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid,COLOR_LIGHTRED,"Dëmesio, norëdami atlikti ðá veiksmà privalote sedëti tr. priemonëje.");
        new idcar = GetPlayerVehicleID( playerid );
        if(cInfo[idcar][cOwner] != pInfo[playerid][pMySQLID]) return SendClientMessage(playerid,COLOR_LIGHTRED,"Klaida, ði tr. priemonë nepriklauso Jums.");
        if(PlayerMoney[ playerid ] < cInfo[ idcar ][ cTicket ]) return SendClientMessage(playerid,COLOR_LIGHTRED,"Klaida, Jums nepakanka pinigø, kad susimokëtumëte baudà.");
        format           ( string, 64, "Sëkmingai susimokëjote baudà, kuri Jums kainavo: %d$. Kità kartà bûkite atsargesni.",cInfo[ idcar ][ cTicket ] );
        SendClientMessage( playerid, COLOR_GREEN, string );
        GivePlayerMoney(playerid, -cInfo[ idcar ][ cTicket ]);
        cInfo[ idcar ][ cTicket ] = 0;
        SaveCar( idcar );
        return 1;
    }
    else if(!strcmp("find",select,true))
    {
        select = strtok( params, idx );
        new slot = strval( select );
        if ( slot == 0 )
            return SendClientMessage( playerid, COLOR_LIGHTRED,"Teisingas komandos naudojimas:/v find [/v list SÀRAÐO NUMERIS] " );
        if ( slot < 0 || slot > 20 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Dëmesio, nurodytas sàraðo numeris neturi bûti didesnis uþ 20 ar maþesnis uþ 1" );

        foreach(Vehicles,tacke)
        {
            if ( cInfo[ tacke ][ cOwner ] == pInfo[ playerid ][ pMySQLID ] && pInfo[ playerid ][ pCar ][ slot ] == cInfo[ tacke ][ cID ])
            {
                if ( cInfo[ tacke ][ cVehID ] != 0 )
                {
                    if(cInfo[ tacke ][cAlarm] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite naudotis ðia galimybæ, kadangi Jûsø tr.priemonëje nëra ámontuoto GPS siûstuvo.");
                    if ( VGaraze[ tacke ] == false )
                    {
                        GetVehiclePos( tacke, Kords[ 0 ], Kords[ 1 ],Kords[ 2 ] );
                        SetPlayerCheckPointEx( playerid, CHECKPOINT_CAR, Kords[ 0 ], Kords[ 1 ], Kords[ 2 ], 3.0 );
                        SendClientMessage( playerid, COLOR_LIGHTRED2, "[GPS] Pasirinkta tr. priemonë paþymëta þemëlapyje raudonu taðku." );
                        return 1;
                    }
                    else
                    {
                        foreach(Garages,g)
                        {
                            if ( gInfo[ g ][ gID ] == cInfo[ tacke ][ cVirtWorld ] )
                            {
                                SetPlayerCheckPointEx( playerid, CHECKPOINT_CAR, gInfo[ g ][ gVehicleEnter ][ 0 ], gInfo[ g ][ gVehicleEnter ][ 1 ],gInfo[ g ][ gVehicleEnter ][ 2 ], 3.0 );
                                SendClientMessage( playerid, COLOR_LIGHTRED2, "[GPS] Jûsø tr. priemonë yra pastatytà garaþe, kurio kordinates paþymëjome raudonu taðku" );
                                return 1;
                            }
                        }
                    }
                    return 1;
                }
            }
        }
        return 1;
    }
    // buycar
    else if(!strcmp("buy",select,true))
    {
        if(pInfo[ playerid ][ pCar ][ 20 ] > 0) 
            return SendClientMessage(playerid,COLOR_LIGHTRED,"Dëmesio, Jûs jau pasiekëte maksimalø 20 automobiliø limità.");

        foreach(VehicleShopIterator, i)
        {
            if(!IsPlayerInRangeOfPoint(playerid, 5.0, VehicleShops[ i ][ PosX ], VehicleShops[ i ][ PosY ], VehicleShops[ i ][ PosZ ]))
                continue;

            for(new j = 0; j < MAX_VEHICLE_SHOP_VEHICLES; j++)
                if(VehicleShops[ i ][ VehicleModels ][ j ])
                    format(string, sizeof(string),"%s%s - $%d\n", string, aVehicleNames[ VehicleShops[ i ][ VehicleModels ][ j ] - 400 ], VehicleShops[ i ][ VehiclePrices ][ j ]);
            CurrentPlayerVehicleShop[ playerid ] = i;
            ShowPlayerDialog(playerid, DIALOG_VEHICLE_SHOP, DIALOG_STYLE_LIST, VehicleShops[ i ][ Name ], string, "Pirkti", "Atðaukti");
            return 1;
        }
        SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, jûs neesate prie transporto parduotuvës.");
    }

    else if(!strcmp("lock",select,true))
    {
        new car = GetNearestVehicle(playerid,10.0);
        if(car == INVALID_VEHICLE_ID || cInfo[ car ][ cOwner ] == 0) return 1;
        if(cInfo[car][cLock] == 0 && CheckCarKeys(playerid,car) == 1)
        {
            LockVehicle(car, 1);
            VehicleAlarm(car, 0);
            ShowInfoText(playerid,"~w~AUTOMOBILIS ~r~UZRAKINTAS", 1000);
            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
            return 1;
        }
        else if(cInfo[car][cLock] == 1 && CheckCarKeys(playerid,car) == 1)
        {
            LockVehicle(car, 0);
            VehicleAlarm(car, 0);
            ShowInfoText(playerid,"~w~AUTOMOBILIS ~g~ATRAKINTAS", 1000);
            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
            return 1;
        }
        return 1;
    }
    else if(!strcmp("faction",select,true))
    {
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid,COLOR_LIGHTRED,"Dëmesio, norëdami atlikti ðá veiksmà privalote sedëti tr. priemonëje.");
        new idcar = GetPlayerVehicleID( playerid );
        if(cInfo[idcar][cOwner] != pInfo[playerid][pMySQLID]) return SendClientMessage(playerid,COLOR_LIGHTRED,"Klaida, ði tr. priemonë nepriklauso Jums.");
        select = strtok(params, idx);
        if(!strlen(select)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /v faction [frakcijos id]");
        giveplayerid  = strval(select);
        if(pInfo[playerid][pMember] != giveplayerid ) return SendClientMessage(playerid,COLOR_LIGHTRED, "Klaida, Tu nperiklausai ðiai frakcijai.");
        cInfo[idcar][cFaction] = giveplayerid;
        format(string,256,"Jûs priskyrëte savo automobilá ðiai frakcijai: %d",giveplayerid);
        SendClientMessage(playerid,COLOR_WHITE,string);
        return 1;
    }
    else if(!strcmp("buyinsurance",select,true))
    {
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid,COLOR_LIGHTRED,"Dëmesio, norëdami atlikti ðá veiksmà privalote sedëti tr. priemonëje.");
        new idcar = GetPlayerVehicleID( playerid );
        if(cInfo[idcar][cOwner] != pInfo[playerid][pMySQLID]) return SendClientMessage(playerid,COLOR_LIGHTRED,"Klaida, ði tr. priemonë nepriklauso Jums.");
        new insprice = 800;

        insprice += cInfo[ idcar ][ cDuzimai   ] * 300;
        insprice += cInfo[ idcar ][ cInsurance ] * 100;

        if ( PlayerMoney[ playerid ] < insprice)
        {
            format           ( string, 126, "Klaida, neturite pakankamai grynøjø pinigø, kadangi draudimo kaina yra %d$. Uþ kiekviena paþeidimà papildomai %d$.",insprice,insprice += cInfo[ idcar ][ cDuzimai   ] * 200),
            SendClientMessage( playerid, COLOR_LIGHTRED, string );
            return 1;
        }
        GivePlayerMoney  ( playerid, -insprice );
        format           ( string, 126, "Draudimo pratæsimas vienieriems metams Jums kainavo %d$.", insprice);
        SendClientMessage( playerid, COLOR_GREEN, string);
        cInfo[ idcar ][ cInsurance ] ++;
        SaveCar(idcar);
        return 1;
    }
    else if(!strcmp("buyalarm",select,true))
    {
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid,COLOR_LIGHTRED,"Dëmesio, norëdami atlikti ðá veiksmà privalote sedëti tr. priemonëje.");
        new idcar = GetPlayerVehicleID( playerid );
        if(cInfo[idcar][cOwner] != pInfo[playerid][pMySQLID]) return SendClientMessage(playerid,COLOR_LIGHTRED,"Klaida, ði tr. priemonë nepriklauso Jums.");
        new nearestplaya = GetNearestPlayer(playerid,10.0);
        if(!IsPlayerConnected(nearestplaya)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Dëmesio, norëdami ádiegti atnaujinimus á tr. priemonæ turite praðyti mechaniko paslaugø.");
        if(pInfo[nearestplaya][pJob] != JOB_MECHANIC) return SendClientMessage(playerid, COLOR_LIGHTRED, "Dëmesio, norëdami ádiegti atnaujinimus á tr. priemonæ turite praðyti mechaniko paslaugø.");
        select = strtok(params, idx);
        if(!strlen(select))
        {
            SendClientMessage(playerid,COLOR_LIGHTRED, "Teisingas komandos naudojimas: /v buyalarm [id]");
            SendClientMessage(playerid,COLOR_FADE1,"Pasirinkite norima signalizacijos lygi.");
            SendClientMessage(playerid,COLOR_FADE1,"1. Paprasta signalizacija - $400");
            SendClientMessage(playerid,COLOR_FADE1,"2. Paprasta signalizacija su GPS ryðiu - $850");
            SendClientMessage(playerid,COLOR_FADE1,"3. Profesonali signalizacija su GPS ir PD ryðiu - $2100");
            SendClientMessage(playerid,COLOR_FADE1,"4. Pro. Signalizacija su GPS, policijos ir asmeniniu praneðikliu - $3000");
            return 1;
        }
        giveplayerid = strval(select);
        if(giveplayerid == 1)
        {
            if(PlayerMoney[ playerid ] < 400) return SendClientMessage(playerid, COLOR_LIGHTRED, "Dëmesio Jums nepakanka grynøjø pinigø ðiam atnaujinimui. ($1500).");
            GivePlayerMoney(playerid,-400);
            cInfo[idcar][cAlarm] = 1;
            SendClientMessage(playerid,COLOR_LIGHTRED2,"Sveikiname, 1 lygio signalizacija buvo sëkmingai ádiegta á Jûsø tr. priemonæ.");
            SaveCar(idcar);
            return 1;
        }
        else if(giveplayerid == 2)
        {
            if(PlayerMoney[ playerid ] < 850) return SendClientMessage(playerid, COLOR_LIGHTRED, "Dëmesio Jums nepakanka grynøjø pinigø ðiam atnaujinimui. ($3000).");
            GivePlayerMoney(playerid,-850);
            cInfo[idcar][cAlarm] = 2;
            SendClientMessage(playerid,COLOR_LIGHTRED2,"Sveikiname, 2 lygio signalizacija buvo sëkmingai ádiegta á Jûsø tr. priemonæ.");
            SaveCar(idcar);
            return 1;
        }
        else if(giveplayerid == 3)
        {
            if(PlayerMoney[ playerid ] < 2100) return SendClientMessage(playerid, COLOR_LIGHTRED, "Dëmesio Jums nepakanka grynøjø pinigø ðiam atnaujinimui. ($6000).");
            GivePlayerMoney(playerid,-2100);
            cInfo[idcar][cAlarm] = 3;
            SendClientMessage(playerid,COLOR_LIGHTRED2,"Sveikiname, 3 lygio signalizacija buvo sëkmingai ádiegta á Jûsø tr. priemonæ.");
		    SaveCar(idcar);
            return 1;
        }
        else if(giveplayerid == 4)
        {
            if(PlayerMoney[ playerid ] < 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "Dëmesio Jums nepakanka grynøjø pinigø ðiam atnaujinimui. ($9000).");
            GivePlayerMoney(playerid,-3000);
            cInfo[idcar][cAlarm] = 4;
            SendClientMessage(playerid,COLOR_LIGHTRED2,"Sveikiname, 4 lygio signalizacija buvo sëkmingai ádiegta á Jûsø tr. priemonæ.");
            SaveCar(idcar);
            return 1;
        }
        return 1;
    }
    else if(!strcmp("buylock",select,true))
    {
        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid,COLOR_LIGHTRED,"Dëmesio, norëdami atlikti ðá veiksmà privalote sedëti tr. priemonëje.");
        new idcar = GetPlayerVehicleID( playerid );
        if(cInfo[idcar][cOwner] != pInfo[playerid][pMySQLID]) return SendClientMessage(playerid,COLOR_LIGHTRED,"Klaida, ði tr. priemonë nepriklauso Jums.");
        new nearestplaya = GetNearestPlayer(playerid,10.0);
        if(!IsPlayerConnected(nearestplaya)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: ðalia jûsø nëra automechaniko.");
        if(pInfo[nearestplaya][pJob] != JOB_MECHANIC) return SendClientMessage(playerid, COLOR_LIGHTRED, "Dëmesio, norëdami ádiegti atnaujinimus á tr. priemonæ turite praðyti mechaniko paslaugø.");
        select = strtok(params, idx);
        if(!strlen(select))
        {
            SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /v buylock [id]");
            SendClientMessage(playerid,COLOR_FADE1,"Pasirinkite norima uþrakto lygi.");
            SendClientMessage(playerid,COLOR_FADE1,"1. Neþinomos firm. spynos uþraktas - $200");
            SendClientMessage(playerid,COLOR_FADE1,"2. Originalus spynos uþraktas - $500");
            SendClientMessage(playerid,COLOR_FADE1,"3. Sustiprintas spynos uþraktas - $1100");
            SendClientMessage(playerid,COLOR_FADE1,"4. Titaninis spynos uþraktas - $1600");
            SendClientMessage(playerid,COLOR_FADE1,"5. Titaninis spynos uþraktas su el. rakteliu - $2100");
            return 1;
        }
        giveplayerid = strval(select);
        if(giveplayerid == 1)
        {
            if(PlayerMoney[ playerid ] < 200) return SendClientMessage(playerid, COLOR_LIGHTRED, "Dëmesio Jums nepakanka grynøjø pinigø ðiam atnaujinimui. ($500).");
            GivePlayerMoney(playerid,-200);
            cInfo[idcar][cLockType] = 1;
            SendClientMessage(playerid,COLOR_LIGHTRED2,"Sveikiname, 1 lygio uþraktas buvo sëkmingai ádiegtas á Jûsø tr. priemonæ.");
            return 1;
        }
        else if(giveplayerid == 2)
        {
            if(PlayerMoney[ playerid ] < 500) return SendClientMessage(playerid, COLOR_LIGHTRED, "Dëmesio Jums nepakanka grynøjø pinigø ðiam atnaujinimui. ($1000).");
            GivePlayerMoney(playerid,-500);
            cInfo[idcar][cLockType] = 2;
            SendClientMessage(playerid,COLOR_LIGHTRED2,"Sveikiname, 2 lygio uþraktas buvo sëkmingai ádiegtas á Jûsø tr. priemonæ.");
            return 1;
        }
        else if(giveplayerid == 3)
        {
            if(PlayerMoney[ playerid ] < 1100) return SendClientMessage(playerid, COLOR_LIGHTRED, "Dëmesio Jums nepakanka grynøjø pinigø ðiam atnaujinimui. ($1500).");
            GivePlayerMoney(playerid,-1100);
            cInfo[idcar][cLockType] = 3;
            SendClientMessage(playerid,COLOR_LIGHTRED2,"Sveikiname, 3 lygio uþraktas buvo sëkmingai ádiegtas á Jûsø tr. priemonæ.");
            return 1;
        }
        else if(giveplayerid == 4)
        {
            if(PlayerMoney[ playerid ] < 1600) return SendClientMessage(playerid, COLOR_LIGHTRED, "Dëmesio Jums nepakanka grynøjø pinigø ðiam atnaujinimui. ($2000).");
            GivePlayerMoney(playerid,-1600);
            cInfo[idcar][cLockType] = 4;
            SendClientMessage(playerid,COLOR_LIGHTRED2,"Sveikiname, 4 lygio sëkmingai imontuota á jûsø automobilá.");
            return 1;
        }
        else if(giveplayerid == 5)
        {
            if(PlayerMoney[ playerid ] < 2100) return SendClientMessage(playerid, COLOR_LIGHTRED, "Dëmesio Jums nepakanka grynøjø pinigø ðiam atnaujinimui. ($2500).");
            GivePlayerMoney(playerid,-2100);
            cInfo[idcar][cLockType] = 5;
            SendClientMessage(playerid,COLOR_LIGHTRED2,"Sveikiname, 5 lygio uþraktas buvo sëkmingai ádiegtas á Jûsø tr. priemonæ.");
            return 1;
        }
    }
    else if(!strcmp("sellto",select,true))
    {
        new idcar = INVALID_VEHICLE_ID;
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            idcar = GetPlayerVehicleID( playerid );
        else
            idcar = GetNearestVehicle( playerid, 6.0 );
        if ( idcar == INVALID_VEHICLE_ID ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, aplink Tave nëra jokios tr. priemonës");

        if(cInfo[idcar][cOwner] != pInfo[playerid][pMySQLID]) return SendClientMessage(playerid,COLOR_LIGHTRED,"Klaida, ði tr. priemonë nepriklauso Jums.");
        select = strtok(params, idx);
        if(!strlen(select)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /v sellto [þaidëjo id][kaina]");
        giveplayerid = strval(select);
        if(!IsPlayerConnected(giveplayerid))  return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
        select = strtok(params, idx);
        new price = strval(select);
        if(price < 0 || price > 99999999) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Kaina negali buti maþesnë negu 0 ir didesnë negu 99999999.");
        format(string,256,"Jûs siulote jam %s,kad jis nupirktu jûsø automobilá uþ: $%d.",GetPlayerNameEx(giveplayerid),price);
        SendClientMessage(playerid,COLOR_WHITE,string);
        format(string,256,"Automobilio savininkas %s siûlo jums nupirkti jo automobilá uþ: $%d, jeigu sutinkate,raðykite /accept car.",GetPlayerNameEx(playerid),price);
        SendClientMessage(giveplayerid,COLOR_WHITE,string);
        Offer[giveplayerid][0] = playerid;
        OfferPrice[giveplayerid][0] = price;
        OfferID[ giveplayerid ][ 0 ] = idcar;
        return 1;
    }
    else
    {
        SendClientMessage(playerid, COLOR_LIGHTRED, "__________________________Tr. Priemoniu komandos ir naudojimas__________________________");
        SendClientMessage(playerid,COLOR_LIGHTRED2, "  KOMANDOS NAUDOJIMAS: /v [komanda], pavyzdþiui: /v list");
        SendClientMessage(playerid,GRAD,"  PAGRINDINES: list, get, park, find, buy, dubkey, takedubkey, removedubs");
        SendClientMessage(playerid,GRAD,"  PAGRINDINES: faction, documents, getdub, payticket");
        SendClientMessage(playerid,GRAD,"  TOBULINIMAS: register, buyalarm, buylock, buyinsurance");
        SendClientMessage(playerid,GRAD,"  KITOS: /vradio, /trunk, /trunko, /bonnet, /windows, /setbelt, /maxspeed");
        return 1;
    }
    return 1;
}
stock LoadVehicleCargo(sqlid, vehicleid, bool:isStatic = false)
{
    new query[100],cargoid, amount, Cache:result;
    for(new i = 0; i < MAX_TRUCKER_CARGO_OBJECTS; i++)
        cInfo[ vehicleid ][ objectai ][ i ] = -1;
    format(query,sizeof(query),"SELECT cargo_id, amount FROM vehicle_cargo WHERE vehicle_id = %d AND is_static = %d",
		sqlid, isStatic);
    result = mysql_query(DbHandle, query);
    for(new i = 0; i < cache_get_row_count(); i++)
    {
        cargoid = cache_get_field_content_int(i, "cargo_id");
        amount = cache_get_field_content_int(i, "amount");
		for(new j = 0; j < amount; j++)
			AddCargoToVehicle(vehicleid, cargoid,true);
	}
    cache_delete(result);
}





CMD:accept( playerid, params[ ] )
{
    new idx, accept[128], string[ 128 ], giveplayerid, Float:Kords[ 3 ], IP[ 16 ], IP2[ 16 ];
    accept = strtok(params, idx);
    if(!strlen(accept))
    {
        SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /accept [þodis]");
        SendClientMessage(playerid,GRAD,"PAGALBA: car, house, biz, live, license, bk, garage, sup, frisk, blindfold");
        return 1;
    }
    if(!strcmp("car",accept,true))
    {
        if(Offer[playerid][0] == 255) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Niekas tau nesiulo pirkti naujo automobilio.");
        if(OfferPrice[playerid][0] > PlayerMoney[ playerid ]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Neturi pakankamai pinigø, kad galetum nupirkti jo automobilá.");
        if(!IsPlayerConnected(Offer[playerid][0]))
        {
            SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
            Offer[playerid][0] = 255;
            return 1;
        }
        if(!PlayerToPlayer(5, playerid,Offer[playerid][0]))
        {
            SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: þaidëjas nëra prie jûsø.");
            Offer[playerid][0] = 255;
            return 1;
        }

        if(GetPlayerState(Offer[playerid][0]) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid,GRAD,"Pardavëjas turi sëdëti savo automobilyje.");
        new idof = OfferID[ playerid ][ 0 ];

        GetPlayerIp( playerid, IP, 16 );
        GetPlayerIp( Offer[playerid][0], IP2, 16 );
        
        if( !strcmp( IP, IP2, true ) || pInfo[ playerid ][ pUcpID ] == pInfo[ Offer[playerid][0] ][ pUcpID ] )
            return true;

        if ( cInfo[ idof ][ cOwner ] != pInfo[ Offer[ playerid ][ 0 ] ][ pMySQLID ] )
        {
            SendClientMessage( Offer[ playerid ][ 0 ], COLOR_LIGHTRED, "Perspëjimas: Tai ne jûsø automobilis.");
            Offer[ playerid ][ 0 ] = 255;
            return 1;
        }

        format(string,sizeof(string),"%s nupirko jûsø automobilá uþ $%d.",GetPlayerNameEx(playerid),OfferPrice[playerid][0]);
        SendClientMessage(Offer[playerid][0],COLOR_NEWS,string);
        format(string,sizeof(string),"Jûs nupirkote ið jo %s automobilá uþ $%d.",GetPlayerNameEx(Offer[playerid][0]),OfferPrice[playerid][0]);
        SendClientMessage(playerid,COLOR_NEWS,string);

        GivePlayerMoney(Offer[playerid][0],OfferPrice[playerid][0]);
        GivePlayerMoney(playerid,-OfferPrice[playerid][0]);

        PayLog( pInfo[ Offer[ playerid ][ 0 ] ][ pMySQLID ],4, pInfo[ playerid ][ pMySQLID ], OfferPrice[playerid][0] );
        PayLog( pInfo[ playerid ][ pMySQLID ],3, pInfo[ Offer[ playerid ][ 0 ] ][ pMySQLID ], OfferPrice[playerid][0] );
        cInfo[ idof ][ cOwner ] = pInfo[ playerid ][ pMySQLID ];
        cInfo[ idof ][ cVehID ] = 0;

        SaveCar( idof );

        DestroyVehicle(OfferID[ playerid ][ 0 ]);
        nullVehicle   (OfferID[ playerid ][ 0 ]);
            
        pInfo[Offer[playerid][0]][pCarGet] --;

        LoadPlayerVehicles( playerid );
        LoadPlayerVehicles( Offer[playerid][0] );

        SaveAccount( playerid );
        SaveAccount( Offer[ playerid ][ 0 ] );
        PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
        Offer[playerid][0] = 255;
        OfferPrice[playerid][0] = 0;
        OfferID[playerid][0] = 0;
        return 1;
    }
    else if(!strcmp("house",accept,true))
    {
        if(Offer[playerid][1] == 255) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Niekas tau nesiulo pirkti namo");
        if(OfferPrice[playerid][1] > PlayerMoney[ playerid ]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Neturi pakankamai pinigø, kad galetum nupirkti ðá namà .");
        if(!IsPlayerConnected(Offer[playerid][1]))
        {
            SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
            Offer[playerid][1] = 255;
            return 1;
        }
        if(!PlayerToPlayer(5, playerid,Offer[playerid][1]))
        {
            SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: þaidëjas nëra prie jûsø.");
            Offer[playerid][1] = 255;
            return 1;
        }
        
        GetPlayerIp( playerid, IP, 16 );
        GetPlayerIp( Offer[playerid][1], IP2, 16 );

        if( !strcmp( IP, IP2, true ) || pInfo[ playerid ][ pUcpID ] == pInfo[ Offer[playerid][1] ][ pUcpID ] )
            return true;
            
        format(string,sizeof(string),"%s nupirko Jûsø namà  uþ $%d.",GetPlayerNameEx(playerid),OfferPrice[playerid][1]);
        SendClientMessage(Offer[playerid][1],COLOR_NEWS,string);
        format(string,sizeof(string),"Jûs nupirkote ið jo %s namà  uþ $%d.",GetPlayerNameEx(Offer[playerid][1]),OfferPrice[playerid][1]);
        SendClientMessage(playerid,COLOR_NEWS,string);
        pInfo[Offer[playerid][2]][pSpawn] = DefaultSpawn;
        GivePlayerMoney(Offer[playerid][1],OfferPrice[playerid][1]);
        GivePlayerMoney(playerid,-OfferPrice[playerid][1]);
        PayLog( pInfo[ Offer[ playerid ][ 1 ] ][ pMySQLID ],6, pInfo[ playerid ][ pMySQLID ], OfferPrice[playerid][1] );
        PayLog( pInfo[ playerid ][ pMySQLID ],1, pInfo[ Offer[ playerid ][ 1 ] ][ pMySQLID ], OfferPrice[playerid][1] );
        hInfo[OfferID[playerid][1]][hOwner] = pInfo[ playerid ][ pMySQLID ];
        UpdateHouseInfoText(OfferID[playerid][1]);
        SaveHouse(OfferID[playerid][1]);
        SaveAccount( playerid );
        SaveAccount( Offer[ playerid ][ 1 ] );
        PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
        Offer[playerid][1] = 255;
        OfferPrice[playerid][1] = 0;
        OfferID[playerid][1] = 0;
        return 1;
    }
    else if(!strcmp("biz",accept,true))
    {
        if(Offer[playerid][2] == 255) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Niekas tau nesiulo pirkti verslo.");
        if(OfferPrice[playerid][2] > PlayerMoney[ playerid ]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Neturi pakankamai pinigø, kad galetum nupirkti ðá verslà.");
        if(!IsPlayerConnected(Offer[playerid][2]))
        {
            SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
            Offer[playerid][2] = 255;
            return 1;
        }
        if(!PlayerToPlayer(5, playerid,Offer[playerid][2]))
        {
            SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: þaidëjas nëra prie jûsø.");
            Offer[playerid][2] = 255;
            return 1;
        }
        
        GetPlayerIp( playerid, IP, 16 );
        GetPlayerIp( Offer[playerid][2], IP2, 16 );

        if( !strcmp( IP, IP2, true ) || pInfo[ playerid ][ pUcpID ] == pInfo[ Offer[playerid][2] ][ pUcpID ] )
            return true;
        
        format(string,sizeof(string),"%s nupirko jûsø verslà uþ $%d.",GetPlayerNameEx(playerid),OfferPrice[playerid][2]);
        SendClientMessage(Offer[playerid][2],COLOR_NEWS,string);
        format(string,sizeof(string),"Jûs nupirkote ið jo %s verslà uþ $%d.",GetPlayerNameEx(Offer[playerid][2]),OfferPrice[playerid][2]);
        SendClientMessage(playerid,COLOR_NEWS,string);
        pInfo[Offer[playerid][2]][pSpawn] = DefaultSpawn;
        GivePlayerMoney(Offer[playerid][2],OfferPrice[playerid][2]);
        GivePlayerMoney(playerid,-OfferPrice[playerid][2]);
        PayLog( pInfo[ Offer[ playerid ][ 2 ] ][ pMySQLID ],5, pInfo[ playerid ][ pMySQLID ], OfferPrice[playerid][2] );
        PayLog( pInfo[ playerid ][ pMySQLID ],2, pInfo[ Offer[ playerid ][ 2 ] ][ pMySQLID ], OfferPrice[playerid][2] );        
        bInfo[ OfferID[playerid][2] ][ bOwner ] = pInfo[ playerid ][ pMySQLID ];
        UpdateBusinessEntrance(OfferID[playerid][2]);
        SaveBusiness(OfferID[playerid][2]);
        PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
        SaveAccount( playerid );
        SaveAccount( Offer[ playerid ][ 2 ] );
        Offer[playerid][2] = 255;
        OfferPrice[playerid][2] = 0;
        OfferID[playerid][2] = 0;
        return 1;
    }
    else if(!strcmp("live",accept,true))
    {
        if(Offer[playerid][4] == 255) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Niekas tau nesiulo tiesioginio pokalbio.");
        if(!PlayerToPlayer(5, playerid,Offer[playerid][4])) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Tu nesi ðialia prië tau siulanøio þmogaus");
        if(!IsPlayerConnected(Offer[playerid][4]))
        {
            SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
            Offer[playerid][4] = 255;
            return 1;
        }
        TalkingLive[playerid] = Offer[playerid][4];
        TalkingLive[Offer[playerid][4]] = playerid;
        format(string,sizeof(string),"%s priëmë ið jûsø pasiûlimá .",GetPlayerNameEx(playerid));
        SendClientMessage(Offer[playerid][4],COLOR_NEWS,string);
        format(string,sizeof(string),"Jûs priëmëte pasiûlimá  ið %s",GetPlayerNameEx(Offer[playerid][2]));
        SendClientMessage(playerid,COLOR_NEWS,string);
        Offer[playerid][4] = 255;
        return 1;
    }
    else if(!strcmp("license",accept,true))
    {
        if(Offer[playerid][5] == 255) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Niekas tau nesiulo licenzijos.");
        if(!PlayerToPlayer(5, playerid,Offer[playerid][5])) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Tu nesi ðialia prië tau siulanøio þmogaus");
        if(OfferPrice[playerid][3] > PlayerMoney[ playerid ])
        {
            SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Neturi pakankamai pinigø.");
            Offer[playerid][5] = 255;
            return 1;
        }
        if(!IsPlayerConnected(Offer[playerid][5]))
        {
            SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
            Offer[playerid][5] = 255;
            return 1;
        }

        pInfo[ playerid ][ pLicWeapon] = 1;
        GivePlayerMoney( playerid, -OfferPrice[ playerid ][ 3 ]);
        Biudzetas += OfferPrice[ playerid ][ 3 ] / 4*3;
        pInfo[ Offer[ playerid ][ 5 ] ][ pPayCheck ] += OfferPrice[ playerid ][ 3 ]/4;

        format           ( string, sizeof(string), "%s priëmë ið jûsø pasiûlimá .", GetPlayerNameEx(playerid) );
        SendClientMessage( Offer[ playerid ][ 5 ],COLOR_NEWS,string);
        format           ( string, sizeof(string), "Jûs priëmëte pasiûlimá  ið %s",GetPlayerNameEx(Offer[playerid][5]));
        SendClientMessage( playerid, COLOR_NEWS, string);

        Offer     [ playerid ][ 5 ] = 255;
        OfferPrice[ playerid ][ 3 ] = 0;
        OfferID   [ playerid ][ 3 ] = 0;
        return 1;
    }
    else if(!strcmp("fight",accept,true))
    {
        if(Mires[playerid] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûsø veikëjas ðiuo metu yra kritinëje arba komos bûsenoje.");
        if(Offer[playerid][6] == 255) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Niekas tau nesiulo tiesioginio pokalbio.");
        if(CheckBox() == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Bokso salë uþimta, palaukite.");
        if(!PlayerToPlayer(5, playerid,Offer[playerid][6])) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Tu nesi ðialia prië tau siulanøio þmogaus");
        if(!IsPlayerConnected(Offer[playerid][6]))
        {
            SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
            Offer[playerid][6] = 255;
            return 1;
        }
        format(string,sizeof(string),"%s priëmë ið jûsø pasiølimá .",GetPlayerNameEx(playerid));
        SendClientMessage(Offer[playerid][6],COLOR_NEWS,string);
        format(string,sizeof(string),"Jûs priëmëte pasiûlimá  ið %s",GetPlayerNameEx(Offer[playerid][6]));
        SendClientMessage(playerid,COLOR_NEWS,string);

        SetPlayerPos(playerid,768.7744,-66.8329,1001.5692);
        SetPlayerFacingAngle(playerid,137.2355);
        SetPlayerPos(Offer[playerid][6],764.6347,-70.4305,1001.5692);
        SetPlayerFacingAngle(Offer[playerid][6],313.6439);

        SetPlayerHealth(playerid,150);
        SetPlayerHealth(Offer[playerid][6],150);
        format(string, sizeof(string), "[MG NEWS] Bokso varþybos prasideda, ringe %s kovos priëð %s, kova prasidës uz 15 sekundþiu.",  GetPlayerNameEx(playerid), GetPlayerNameEx(Offer[playerid][6]));
        SendNEWS(COLOR_NEWS,string);
        Boxing[playerid] = true;
        Boxing[Offer[playerid][6]] = true;
        Offer[playerid][6] = 255;
        BoxStart = 15;
        TogglePlayerControllable(playerid, false);
        TogglePlayerControllable(Offer[playerid][6], false);
        return 1;
    }
    else if ( !strcmp( "bk", accept, true ) )
    {
        if ( !UsePDCMD( playerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo nedirbdami policijos departamente." );
        string = strtok(params, idx);
        giveplayerid = strval( string );
        if ( pInfo[ giveplayerid ][ pBackup ] == 0 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, Jûs ðiuo metu nekvietëte jokio pastiprinimo. " );

        GetPlayerPos( giveplayerid, Kords[ 0 ], Kords[ 1 ], Kords[ 2 ] );
        SetPlayerCheckPointEx( playerid, CHECKPOINT_BACKUP, Kords[ 0 ], Kords[ 1 ], Kords[ 2 ], 5.0 );
        SetPVarInt( playerid, "BACKUP", giveplayerid );
        return 1;
    }
    else if ( !strcmp( "sup", accept, true ) )
    {
        string = strtok(params, idx);
        giveplayerid = strval( string );
        if ( !IsPlayerConnected( giveplayerid ) )
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje. " );

        new type = GetPVarInt( giveplayerid, "OFER_SUP");
        SetPVarInt( giveplayerid, "OFER_SUP", 0 );

        if ( !PlayerToPlayer( 1.0, playerid, giveplayerid ) )
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs nesate ðalia to þaidëjo. " );

        if ( type == 0 )
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: þaidëjas jums nieko nesiølo. " );

        new Float:x,
            Float:y,
            Float:z,
            Float:a;

        GetPlayerPos        ( giveplayerid, x, y, z );
        GetPlayerFacingAngle( giveplayerid, a );
            
        x += (0.8 * floatsin(-a, degrees) );
        y += (0.8 * floatcos(-a, degrees) );
            
        SetPlayerPos( playerid, x, y, z );
        SetPlayerFacingAngle( playerid, a+180 );

        switch ( type )
        {
            case 1:
            {
                OnePlayAnim( giveplayerid,"GANGS","hndshkba",4.0,0,0,0,0,0);
                OnePlayAnim( playerid,"GANGS","hndshkba",4.0,0,0,0,0,0);
            }
            case 2:
            {
                OnePlayAnim( giveplayerid,"GANGS","hndshkda",4.0,0,0,0,0,0);
                OnePlayAnim( playerid,"GANGS","hndshkda",4.0,0,0,0,0,0);
            }
            case 3:
            {
                OnePlayAnim( giveplayerid,"GANGS","hndshkfa_swt",4.0,0,0,0,0,0);
                OnePlayAnim( playerid,"GANGS","hndshkfa_swt",4.0,0,0,0,0,0);
            }
            case 4:
            {
                if ( !strcmp( "Vyras", pInfo[ playerid ][ pSex ], true ) )
                    OnePlayAnim(playerid, "KISSING", "Playa_Kiss_02", 3.0, 0, 0, 0, 0, 0);
                else if ( !strcmp( "Moteris", pInfo[ playerid ][ pSex ], true ) )
                    OnePlayAnim(playerid, "BD_Fire", "grlfrd_kiss_03", 2.0, 0, 0, 0, 0, 0);
                if ( !strcmp( "Vyras", pInfo[ giveplayerid ][ pSex ], true ) )
                    OnePlayAnim(giveplayerid, "KISSING", "Playa_Kiss_02", 3.0, 0, 0, 0, 0, 0);
                else if ( !strcmp( "Moteris", pInfo[ giveplayerid ][ pSex ], true ) )
                    OnePlayAnim(giveplayerid, "BD_Fire", "grlfrd_kiss_03", 2.0, 0, 0, 0, 0, 0);
            }
            default:
            {
                OnePlayAnim( giveplayerid,"GANGS","hndshkfa_swt",4.0,0,0,0,0,0);
                OnePlayAnim( playerid,"GANGS","hndshkfa_swt",4.0,0,0,0,0,0);
            }
        }
        return 1;
    }
    else if(!strcmp("garage",accept,true))
    {
        if(Offer[playerid][7] == 255) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Niekas tau nesiulo pirkti garaþo");
        if(OfferPrice[playerid][7] > PlayerMoney[ playerid ]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Neturi pakankamai pinigø, kad galetum nupirkti ðá garaþá .");
        if(!IsPlayerConnected(Offer[playerid][7]))
        {
            SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
            Offer[playerid][7] = 255;
            return 1;
        }
        if(!PlayerToPlayer(5, playerid,Offer[playerid][7]))
        {
            SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: þaidëjas nëra prie jûsø.");
            Offer[playerid][7] = 255;
            return 1;
        }
        
        GetPlayerIp( playerid, IP, 16 );
        GetPlayerIp( Offer[playerid][7], IP2, 16 );

        if( !strcmp( IP, IP2, true ) || pInfo[ playerid ][ pUcpID ] == pInfo[ Offer[playerid][7] ][ pUcpID ] )
            return true;
        
        format(string,sizeof(string),"%s nupirko Jûsø garaþà uþ $%d.",GetPlayerNameEx(playerid),OfferPrice[playerid][7]);
        SendClientMessage(Offer[playerid][7],COLOR_NEWS,string);
        format(string,sizeof(string),"Jûs nupirkote ið jo %s garaþà uþ $%d.",GetPlayerNameEx(Offer[playerid][7]),OfferPrice[playerid][7]);
        SendClientMessage(playerid,COLOR_NEWS,string);
        GivePlayerMoney(Offer[playerid][7],OfferPrice[playerid][7]);
        GivePlayerMoney(playerid,-OfferPrice[playerid][7]);
        PayLog( pInfo[ Offer[ playerid ][ 7 ] ][ pMySQLID ],13, pInfo[ playerid ][ pMySQLID ], OfferPrice[playerid][7] );
        PayLog( pInfo[ playerid ][ pMySQLID ],12, pInfo[ Offer[ playerid ][ 7 ] ][ pMySQLID ], OfferPrice[playerid][7] );        gInfo[OfferID[playerid][7]][gOwner] = pInfo[ playerid ][ pMySQLID ];
        UpdateGarageEntrance(OfferID[playerid][7]);
        SaveGarage(OfferID[playerid][7]);
        SaveAccount( playerid );
        SaveAccount( Offer[ playerid ][ 7 ] );
        PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
        Offer[playerid][7] = 255;
        OfferPrice[playerid][7] = 0;
        OfferID[playerid][7] = 0;
        return 1;
    }
    else if ( !strcmp( "frisk", accept, true ) )
    {
        string = strtok(params, idx);
        giveplayerid = strval( string );
        if ( GetPVarInt( playerid, "APIESKA" ) != giveplayerid )
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jis nepraðo leidimo apieðkoti jûsø. " );
        if ( !PlayerToPlayer   ( 5.0, playerid, giveplayerid ) )
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite naudoti ðio veiksmo veikëjui, kuris nëra ðalia Jûsø..");

        SendClientMessage( giveplayerid, COLOR_GREEN2, "_____________________ Turimi daiktai __________________");
        format( string, 56, "Pinigø: %d ", PlayerMoney[ playerid ] );
        SendClientMessage( giveplayerid, COLOR_WHITE, string );

        ShowPlayerInvInfoForPlayer(playerid, giveplayerid);
        for ( new i = 0; i < 11; i++ )
        {
            new wep,
                ammo,
                wepname[ 24 ];
            GetPlayerWeaponData( playerid, i, wep, ammo );
            if ( wep > 0 )
            {
                GetWeaponName    ( wep, wepname, 24 );
                format           ( string, 50," Ginklas %s ðoviniø %d ", wepname, ammo );
                SendClientMessage( giveplayerid, COLOR_FADE1, string );
            }
        }
        format      ( string, 70, "* %s apiëðko %s ." ,GetPlayerNameEx( giveplayerid ), GetPlayerNameEx( playerid ) );
        ProxDetector( 20.0, giveplayerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
        return 1;
    }
    else if(!strcmp(accept, "fine", true))
    {
        new Alloc:mem = Alloc:GetPVarInt(playerid, "FineOfferMemory"),
            sellerid,
            price,
            query[256];
        if(!mem)
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Niekas tau nesiûlo baudos.");

        sellerid = mget(mem, 0);
        price = mget(mem, 1);
        mgets(string, sizeof string, mem, 2);
        free(mem);
        DeletePVar(playerid, "FineOfferMemory");

        if(!IsPlayerConnected(sellerid))
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
        if(!IsPlayerInRangeOfPlayer(playerid, sellerid, 4.0))
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Tu nesi ðialia prië tau siølanèio þmogaus");
        ///if(GetPlayerMoney(playerid) < price)
        // pasirod moketi turi visada :|
         //   return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jums neuþtenka pinigø.");

        mysql_real_escape_string(string, string);
        format(query, sizeof(query), "INSERT INTO `tickets` (name,crime,reporter,price) VALUES ('%s','%s','%s','%d')",GetPlayerNameEx(playerid),string,GetName(sellerid),price);
        mysql_query(DbHandle, query, false);

        format( query, sizeof(query), " ** Jûs iðraðëte baudos lapelá %s'ui. ",GetPlayerNameEx(playerid) );
        SendClientMessage( sellerid, COLOR_WHITE, query );

        SendClientMessage(playerid, COLOR_WHITE, " ** Sumokëjote baudà.");

        GivePlayerMoney(playerid, -price);
        return 1;
    }
    else if(!strcmp(accept, "blindfold", true))
    {
        string = strtok(params, idx);
        new targetid = strval(string);

        if(Offer[ playerid ][ 8 ] == INVALID_PLAYER_ID)
            SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: jums nieko nesiûlo uþriðti raiðèio.");

        else if(Offer[ playerid ][ 8 ] != targetid)
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Jis nepraðo leidimo uþriðti jums raiðtá ant akiø.");

        else if(!IsPlayerConnected(Offer[ playerid ][ 8 ]))
            SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");

        else if(!IsPlayerInRangeOfPlayer(playerid, Offer[ playerid ][ 8 ], 5.0))
            SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: þaidëjas nëra prie jûsø.");

        else 
        {
            format(string, sizeof(string), " uþriða %s raiðtá ant galvos uþdengdamas akis.", GetPlayerNameEx(playerid));
            cmd_me(targetid, string);

            TextDrawShowForPlayer(playerid, BlindfoldTextdraw);
            SetPlayerCameraPos(playerid, 0.0, 0.0, 1000.0);
            SetPlayerCameraLookAt(playerid, 0.0, 0.0, 1005.0);
            IsBlindfolded[ playerid ] = true;
        }
        Offer[ playerid ][ 8 ] = INVALID_PLAYER_ID;
    }
    return 1;
}
CMD:takejob( playerid, params[ ] )
{
    for ( new i = 0; i < MAX_JOBS; i++ )
    {
        if ( PlayerToPoint( 5.0, playerid, pJobs[ i ][ Job_x ], pJobs[ i ][ Job_y ], pJobs[ i ][ Job_z ] ) )
        {
            if ( PlayerFaction( playerid ) < 8 && PlayerFaction( playerid ) != 0 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs jau esate frakcijoje/darbuovëtëje." );
            if ( pInfo[ playerid ][ pJob    ] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs jau turite darbà ." );
            SendClientMessage( playerid, COLOR_WHITE, "* Jûs ásidarbinote, jeigu reikia daugiau pagalbos raðykite /help." );
            pInfo[ playerid ][ pJob ] = i;
            pInfo[ playerid ][ pJobContr ] = pJobs[ i ][ Contr ];
            return 1;
        }
    }
    return 1;
}
CMD:learnfight( playerid, params[ ] )
{
    if(PlayerToPoint(25.0,playerid, 770.3773,-70.6785,1000.7243))
    {
            ShowPlayerDialog(playerid,10,DIALOG_STYLE_LIST,"Kovos stiliai","\
            1. Gatvës kovos stilius $500\n\
            2. Kung Fu kovos stilius $500\n\
            3. Bokso kovos stilius $500\n","Iðmokti","Atðaukti");
            return 1;
    }
    else SendClientMessage(playerid, COLOR_LIGHTRED, "Jûs ne sporto salëje.");
    return 1;
}
CMD:stop( playerid, params[ ] )
{
    if(VehicleLoadTimer[ playerid ] != -1)
    {
        new vehicleid = GetPVarInt(playerid,"vehicleid");
        if(IsValidVehicle(vehicleid) && IsVehicleLoaded[ vehicleid ])
            IsVehicleLoaded[ vehicleid ] = false;
        // Jei tai buvo priekaba, leidziam kurti vilkika.
        if(IsValidVehicle(GetTrailerPullingVehicle(vehicleid)))
            IsVehicleLoaded[ GetTrailerPullingVehicle(vehicleid) ] = false;
        KillTimer(VehicleLoadTimer[ playerid ]);
		PlayerTextDrawHide(playerid, InfoText[playerid]);
        VehicleLoadTimer[ playerid ] = -1;
		VehicleLoadTime[ playerid ] = 0;
        return 1;
    }
    if ( LaikoTipas[ playerid ] == 0 ) return 1;
    Laikas    [ playerid ] = 0;
    LaikoTipas[ playerid ] = 0;

    if ( Checkpoint[ playerid ] != CHECKPOINT_NONE )
    {
        DisablePlayerCheckpoint( playerid );
        Checkpoint[ playerid ] = CHECKPOINT_NONE;
    }
    if(CheckUnfreeze(playerid))
        TogglePlayerControllable(playerid,true);
    

    return 1;
}
CMD:canceloffer( playerid, params[ ] )
{
    new
        giveplayerid,
        string[ 64 ];
        
    if ( sscanf( params, "u", giveplayerid ) ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /canceloffer [þaidëjo id]");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
    for(new i = 0; i > 5; i ++)
    {
        if(Offer[giveplayerid][i] == playerid)
        {
            SendClientMessage(playerid,GRAD,"Jûs atðaukëte pasiûlimá .");
            format(string,sizeof(string),"%s atðaukë savo pasiûlimá .",GetPlayerNameEx(playerid));
            SendClientMessage(giveplayerid,GRAD,string);
            Offer[giveplayerid][i] = 255;
            return 1;
        }
    }
    return 1;
}
CMD:lic( playerid, params[ ] )
{
    cmd_licenses( playerid, params );
    return 1;
}
CMD:licenses( playerid, params[ ] )
{
    new
        giveplayerid,
        string[ 126 ];
        
    if ( sscanf( params, "u", giveplayerid ) ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /licenses [þaidëjo id]");
    if(Mires[playerid] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûsø veikëjas ðiuo metu yra kritinëje arba komos bûsenoje.");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
    if(!PlayerToPlayer(5, playerid,giveplayerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Tu nesi prie pasirinkto þaidëjo.");
    new text[15];

    format(string,126,"|________%s licencijos________|",GetName(playerid));
    SendClientMessage(giveplayerid,COLOR_GREEN,string);
    if(pInfo[playerid][pLicMoto] == 1) text = "Iðlaikyta"; else text = "Neiðlaikyta";
    format(string, 126, "Motociklo licencija: %s", text);
    SendClientMessage(giveplayerid, COLOR_FADE1, string);

    if(pInfo[playerid][pLicCar] == 1) text = "Iðlaikyta"; else text = "Neiðlaikyta";
    format(string, 126, "Automobilio licencija: %s", text);
    SendClientMessage(giveplayerid, COLOR_FADE1, string);

    format(string, 126, "* Vairavimo áspëjimai: %d ", pInfo[ playerid ][ pDriverWarn ] );
    SendClientMessage( giveplayerid, COLOR_WHITE, string );

    if(pInfo[playerid][pLicBoat] == 1) text = "Iðlaikyta"; else text = "Neiðlaikyta";
    format(string, 126, "Laivybos licencija: %s", text);
    SendClientMessage(giveplayerid, COLOR_FADE1, string);

    if(pInfo[playerid][pLicHeli] == 1) text = "Iðlaikyta"; else text = "Neiðlaikyta";
    format(string, 126, "Pilotavimo licencija: %s", text);
    SendClientMessage(giveplayerid, COLOR_WHITE, string);

    if(pInfo[playerid][pLicWeapon] == 1) text = "Iðlaikyta"; else text = "Neiðlaikyta";
    format(string, 126, "Ginklo licencija: %s", text);
    SendClientMessage(giveplayerid, COLOR_FADE1, string);
    return 1;
}
CMD:die( playerid, params[ ] )
{
    if ( Mires[ playerid ] == 0 ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs ne komos busenoje.");
    if ( Mires[ playerid ] > 420 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Dar nepraëjo 3 minutës po jûsø mirties. " );
    StopLoopingAnim( playerid, false );
    SetPlayerHealth( playerid, 0 );
    TogglePlayerControllable(playerid, 0);
    DestroyDynamic3DTextLabel( DeathLabel[playerid] );
    return 1;
}
CMD:repair( playerid, params[ ] )
{
    new
        veh,
        string[ 126 ];
    if(pInfo[playerid][pJob] != JOB_MECHANIC) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, norëdami atlikti ðá veiksmà, privalote bûti auto mechaniku.");
    if(!IsPlayerInAnyVehicle( playerid )) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, norëdami atlikti ðá veiksmà privalote sedëti tr. priemonëje.");
    veh = GetPlayerVehicleID( playerid );
    if ( Engine[ veh ] == true )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Pradedant taisyti tr. priemonæ turi bûti uþgesintas variklis." );

    if(PlayerToPoint(60.0, playerid, 1655.4087,-1798.4670,13.5455 ))
    {
        new Float:VD;
        GetVehicleHealth( veh, VD );

        VD = VD/5;

        if ( PlayerMoney[ playerid ] < VD )
        {
            format( string, 126, "[Mechanikas] Dëmesio, ðios tr. priemonë sutvarkymo kainà nuo þalos yra %d$", floatround(VD) );
            SendClientMessage( playerid, COLOR_LIGHTRED2, string );
            return 1;
        }
        StartTimer(playerid,120,1);
        return 1;
    }
    else
        SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, komanda galite naudoti tik mechaniko dirbtuvëse.");
    return 1;
}
CMD:repaint( playerid, params[ ] )
{
    new
        veh = GetPlayerVehicleID( playerid ),
        color,
        color2;
    if(pInfo[playerid][pJob] != JOB_MECHANIC) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, norëdami atlikti ðá veiksmà, privalote bûti auto mechaniku.");
    if(GetPlayerState( playerid ) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, norëdami atlikti ðá veiksmà privalote sedëti tr. priemonëje.");
    if ( Engine[ veh ] == true )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Pradedant taisyti tr. priemonæ turi bûti uþgesintas variklis." );
    if(PlayerToPoint(60.0, playerid, 1655.4087,-1798.4670,13.5455 ))
    {
        if ( PlayerMoney[ playerid ] < 450 )
            return SendClientMessage( playerid, COLOR_LIGHTRED2, "[Mechanikas] Dëmesio tr. priemonës perdaþymas kainuos 450$" );

        if ( sscanf( params, "dd", color, color2 ) ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /repaint [SPALVA1][SPALVA2]");

        SetPVarInt( playerid, "PAINT1", color );
        SetPVarInt( playerid, "PAINT2", color2 );
        StartTimer(playerid,180,2);
        return 1;
    }
    else
        SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs ne auto mechaniko dirbtuvëse.");
    return 1;
}
CMD:addwheels( playerid, params[ ] )
{
    if(pInfo[playerid][pJob] != JOB_MECHANIC) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, norëdami atlikti ðá veiksmà, privalote bûti auto mechaniku.");
    if(GetPlayerState( playerid ) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, norëdami atlikti ðá veiksmà privalote sedëti tr. priemonëje.");
    new idcar = GetPlayerVehicleID( playerid );
    if ( Engine[ idcar ] == true )
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Pradedant taisyti tr. priemonæ turi bûti uþgesintas variklis." );
    if(IsVehicleBike( GetVehicleModel( idcar ) ) ) return 1;
    if(cInfo[ idcar ][ cOwner ] == 0 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: áiems automobiliams dëti modifikacijas draudþiama. ");
    if(PlayerToPoint(60.0, playerid, 1655.4087,-1798.4670,13.5455 ))
    ShowPlayerDialog(playerid,9,DIALOG_STYLE_LIST,"Ratlankiai","\
        1.Offroad\n\
        2.Mega\n\
        3.Wires\n\
        4.Twist\n\
        5.Grove\n\
        6.Import\n\
        7.Atomic\n\
        8.Ahab\n\
        9.Virtual\n\
        10.Access\n\
        11.Trance\n\
        12.Shadow\n\
        13.Rimshine\n\
        14.Classic\n\
        15.Cutter\n\
        16.Switch\n\
        17.Dollar\n\
        18.Hidraulika\n\
        Nuimti Hidraulikà\n\
        Nuimti ratus\n\
        Nuimti tunigà ","Uþdëti","Atðaukti");
    else
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs ne auto mechaniko dirbtuvëse." );
    return 1;
}
CMD:fix( playerid, params[ ] )
{
    new
        veh = GetPlayerVehicleID( playerid ),
        colorr,
        colorr2;
    if(GetPlayerState( playerid ) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, norëdami atlikti ðá veiksmà privalote sedëti tr. priemonëje.");
    new Float:health;
    GetVehicleHealth(veh, health);
    if(health > 700) return SendClientMessage(playerid, COLOR_LIGHTRED, "Apgailestaujame, bet Jûsø tr. priemonës bûkle yra pakankamai gera, todël jos netavarkysime.");
    if ( Engine[ veh ] == true ) return SendClientMessage( playerid, -1, "{FF6347}Perspëjimas: Automobilio variklis turi bûti uþgesintas." );
    if(PlayerToPoint(8.0, playerid, 2075.5986,-1831.0374,13.5545 ))
    {
        if ( PlayerMoney[ playerid ] < 500 )
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Automobilio perdaþymas kainuoja $ 500." );

        if ( sscanf( params, "dd", colorr, colorr2 ) ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /fix [SPALVA1] [SPALVA2]");

        cInfo[ veh ][ cColor ][ 0 ] = colorr;
        cInfo[ veh ][ cColor ][ 1 ] = colorr2;

        ChangeVehicleColor( veh, colorr, colorr2 );
        SendClientMessage( playerid, COLOR_LIGHTRED2, "Sveikiname, Jûsø tr. priemonë buvo perdaþytà á Jûsø pasirinkta spalvà. Tikimës Jums patiks!" );
        RemovePlayerWeapon( playerid, 41 );
        SetVehicleHealth(veh, 1000);
        RepairVehicle(veh);
        GivePlayerMoney( playerid, -500 );

        SaveVehicleEx(veh, "cColor1", colorr);
        SaveVehicleEx(veh, "cColor2", colorr2);
        return 1;
    }
    return 1;
}
CMD:anims( playerid, params[ ] )
{
    SendClientMessage(playerid,COLOR_GREEN,"________________________ Animacijos ________________________");
    SendClientMessage(playerid,COLOR_WHITE,"/fall /injured /push /handsup /kiss /cell /slapass /bomb /drunk /laugh /facepalm");
    SendClientMessage(playerid,COLOR_FADE1,"/basketball /medic /spraycan /robman /taichi /lookout /sit /lay /sup /crossarms");
    SendClientMessage(playerid,COLOR_WHITE,"/deal /crack /smoke /bar /hike /dance /fuck /lean /walk /rap /caract /sex");
    SendClientMessage(playerid,COLOR_FADE1,"/tired /box /scratch /hide /vomit /eats /cop /stance /wave /rap /skick /aload");
    SendClientMessage(playerid,COLOR_WHITE,"/flag /giver /look /show /shout /endchat /face /gsign /dj /loudtalk");
    SendClientMessage(playerid,COLOR_FADE1,"/rem /lift /place /yes /no /bag /wank /pee /riot /walk /knife /bat");
    SendClientMessage(playerid,COLOR_WHITE,"/lebelly /leface /ahouse /talk");
    SendClientMessage(playerid,COLOR_GREEN,"____________________________________________________________");
    return true;
}
CMD:gsign( playerid, params[ ] )
{
    new
        animid;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /gsign [1-9]");
    switch ( animid )
    {
        case 1: LoopingAnim(playerid,"GHANDS","gsign2",4.1,1,1,1,1,1);
        case 2: LoopingAnim(playerid,"GHANDS","gsign3",4.1,1,1,1,1,1);
        case 3: LoopingAnim(playerid,"GHANDS","gsign4",4.1,1,1,1,1,1);
        case 4: LoopingAnim(playerid,"GHANDS","gsign5",4.1,1,1,1,1,1);
        case 5: LoopingAnim(playerid,"GHANDS","gsign1LH",4.1,1,1,1,1,1);
        case 6: LoopingAnim(playerid,"GHANDS","gsign2LH",4.1,1,1,1,1,1);
        case 7: LoopingAnim(playerid,"GHANDS","gsign3LH",4.1,1,1,1,1,1);
        case 8: LoopingAnim(playerid,"GHANDS","gsign4LH",4.1,1,1,1,1,1);
        case 9: LoopingAnim(playerid,"GHANDS","gsign5LH",4.1,1,1,1,1,1);
    }
    return 1;
}
//-----------------------------------[InCarAnims]----------------------------------------------
CMD:caract( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
    {
        SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Ðis veiksmas galimas tik automobilyje.");
        return 1;
    }
    new
        animid;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /caract [1-7]");
    switch ( animid )
    {
        case 1: LoopingAnim(playerid,"PED","TAP_HAND",4.0,1,0,0,0,0);
        case 2: LoopingAnim(playerid,"CAR", "sit_relaxed", 4.0, 1, 0, 0, 0, 0);
        case 3: LoopingAnim(playerid,"CAR", "tap_hand", 4.0, 1, 0, 0, 0, 0);
        case 4: BackAnim(playerid,"CAR_CHAT", "carfone_in", 4.0,0,1,1,1,0,3);
        case 5: LoopingAnim(playerid,"CAR_CHAT", "carfone_loopa", 4.0, 1, 0, 0, 0, 0);
        case 6: LoopingAnim(playerid,"CAR_CHAT", "carfone_loopb", 4.0, 1, 0, 0, 0, 0);
        case 7: OnePlayAnim(playerid,"DRIVEBYS","Gang_DrivebyLHS",3.0,0,0,0,0,0);
        default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /caract [1-7]");
    }
    return 1;
}
//------------------------------------[OnFootAnims]--------------------------------------------
CMD:scratch( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    LoopingAnim(playerid,"MISC","Scratchballs_01",3.0,1,0,0,0,0);
    return 1;
}
CMD:giver( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    OnePlayAnim(playerid,"KISSING","gift_give",3.0,0,0,0,0,0);
    return 1;
}
CMD:facepalm( playerid, params[ ] )
{
    #pragma unused params

    if ( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT )
        LoopingAnim(playerid, "MISC", "plyr_shkhead",4.1,0,1,1,0,0);
    else
        SendClientMessage( playerid, COLOR_LIGHTRED, "Naudotis ðiomis animacijomis galite tik tada, kada Jûsø veikëjas yra ant kojø. ");

    return true;
}
CMD:dj(playerid, params[])
{
    if(GetPlayerState(playerid) != 1) return SendClientMessage(playerid, COLOR_GREY, "Animacijá  galima naudoti stovint ant kojø.");
    new
        animid;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /dj [1-4]");
    switch(animid)
    {
        case 1: LoopingAnim(playerid, "SCRATCHING", "scdldlp", 4.0, 1, 0, 0, 0, 0);
        case 2: LoopingAnim(playerid, "SCRATCHING", "scdlulp", 4.0, 1, 0, 0, 0, 0);
        case 3: LoopingAnim(playerid, "SCRATCHING", "scdrdlp", 4.0, 1, 0, 0, 0, 0);
        case 4: LoopingAnim(playerid, "SCRATCHING", "scdrulp", 4.0, 1, 0, 0, 0, 0);
        default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /dj [1-4]");
    }
    return 1;
}
CMD:face( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    new
        animid;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /face [1-6]");
    switch ( animid )
    {
        case 1: LoopingAnim(playerid,"PED","facanger",3.0,1,1,1,1,1);
        case 2: LoopingAnim(playerid,"PED","facgum",3.0,1,1,1,1,1);
        case 3: LoopingAnim(playerid,"PED","facsurp",3.0,1,1,1,1,1);
        case 4: LoopingAnim(playerid,"PED","facsurpm",3.0,1,1,1,1,1);
        case 5: LoopingAnim(playerid,"PED","factalk",3.0,1,1,1,1,1);
        case 6: LoopingAnim(playerid,"PED","facurios",3.0,1,1,1,1,1);
        default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /face [1-6]");
    }
    return 1;
}
CMD:endchat( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    new
        animid;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /endchat [1-3]");
    switch ( animid )
    {
        case 1: OnePlayAnim(playerid,"PED","endchat_01",8.0,0,0,0,0,0);
        case 2: OnePlayAnim(playerid,"PED","endchat_02",8.0,0,0,0,0,0);
        case 3: OnePlayAnim(playerid,"PED","endchat_03",8.0,0,0,0,0,0);
        default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /endchat [1-3]");
    }
    return 1;
}
CMD:show( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    LoopingAnim(playerid,"ON_LOOKERS","point_loop",3.0,1,0,0,0,0);
    return 1;
}
CMD:shout( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    new
        animid;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /shout [1-3]");
    switch ( animid )
    {
        case 1: BackAnim(playerid,"ON_LOOKERS","shout_loop",3.0,1,0,0,0,0,6);
        case 2: LoopingAnim(playerid,"ON_LOOKERS","shout_01",3.0,1,0,0,0,0);
        case 3: LoopingAnim(playerid,"ON_LOOKERS","shout_02",3.0,1,0,0,0,0);
        default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /shout [1-3]");
    }
    return 1;
}
CMD:look( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    new
        animid;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /look [1-3]");
    switch ( animid )
    {
        case 1: LoopingAnim(playerid,"ON_LOOKERS","lkup_loop",3.0,1,0,0,0,0);
        case 2: LoopingAnim(playerid,"ON_LOOKERS","lkaround_loop",3.0,1,0,0,0,0);
        case 3: LoopingAnim(playerid,"PED","flee_lkaround_01",3.0,1,1,1,1,1);
        default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /look [1-3]");
    }
    return 1;
}
CMD:flag( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    OnePlayAnim(playerid,"CAR","flag_drop",3.0,0,0,0,0,0);
    return 1;
}
CMD:cell( playerid, params[ ] )
{
	if(Freezed[ playerid ])
		return 1;
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    ClearAnimations(playerid);
    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
    BackOut[playerid] = 2;
    return 1;
}
CMD:handsup(playerid)
{
	if(Freezed[ playerid ])
		return 1;
		
    if(GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT )
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);
    else
        SendClientMessage( playerid, COLOR_LIGHTRED, "Naudotis ðiomis animacijomis galite tik tada, kada Jûsø veikëjas yra ant kojø. ");
    return true;
}
CMD:drunk( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    new
        animid;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /drunk [1-3]");
    switch ( animid )
    {
        case 1: LoopingAnim(playerid,"PED","WALK_DRUNK",4.1,1,1,1,1,1);
        case 2: LoopingAnim(playerid,"PAULNMAC", "pnm_loop_a", 3.0, 1, 0, 0, 0, 0);
        case 3: LoopingAnim(playerid,"PAULNMAC", "pnm_loop_b", 3.0, 1, 0, 0, 0, 0);
        default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /drunk [1-3]");
    }
    return 1;
}
CMD:bomb( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    new
        animid;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /bomb [1-2]");
    switch ( animid )
    {
        case 1: LoopingAnim(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
        case 2: OnePlayAnim(playerid,"MISC", "plunger_01", 2.0, 0, 0, 0, 0, 0);
        default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /bomb [1-2]");
    }
    return 1;
}
CMD:laugh( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    OnePlayAnim(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0);
    return 1;
}
CMD:lookout( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    new
        animid;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /lookout [1-2]");
    switch ( animid )
    {
        case 1: OnePlayAnim(playerid, "FOOD", "eat_vomit_sk", 4.0,0,0,0,0,0);
        case 2: OnePlayAnim(playerid, "PED", "handscower", 4.0,0,1,1,1,1);
        default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /lookout [1-2]");
    }
    return 1;
}
CMD:sex(playerid, params[])
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
        return SendClientMessage( playerid, COLOR_LIGHTRED, "Naudotis ðiomis animacijomis galite tik tada, kada Jûsø veikëjas yra ant kojø.");
    

    new id;

    if (sscanf(params, "d", id)) 
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /sex [1-7]");

    switch(id)
    {
        case 1: LoopingAnim(playerid, "BLOWJOBZ", "BJ_COUCH_START_W", 4.0, 0, 1, 1, 1, 0);
        case 2: LoopingAnim(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.0, 0, 1, 1, 1, 0);
        case 3: LoopingAnim(playerid, "BLOWJOBZ", "BJ_COUCH_END_W", 4.0, 0, 1, 1, 1, 0);
        case 4: LoopingAnim(playerid, "BLOWJOBZ", "BJ_COUCH_START_P", 4.0, 0, 1, 1, 1, 0);
        case 5: LoopingAnim(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.0, 0, 1, 1, 1, 0);
        case 6: LoopingAnim(playerid, "BLOWJOBZ", "BJ_COUCH_END_P", 4.0, 0, 1, 1, 1, 0);
        case 7: LoopingAnim(playerid, "BLOWJOBZ", "BJ_STAND_START_W", 4.0, 0, 1, 1, 1, 0);
        default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /sex [1-7]");
    }
    return 1;
}
CMD:robman( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    new
        animid;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /robman [1-2]");
    switch ( animid )
    {
        case 1: LoopingAnim(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0); // Rob
        case 2: LoopingAnim(playerid,"PED", "gang_gunstand", 4.0,1,0,0,0,0);
        default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /robman [1-2]");
    }
    return 1;
}
CMD:crossarms( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    new
        animid;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /crossarms [1-2]");
    switch ( animid )
    {
        case 1: LoopingAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1);
        case 2: LoopingAnim(playerid,"OTB", "wtchrace_loop", 4.0, 1, 0, 0, 0, 0);
        default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /crossarms [1-2]");
    }
    return 1;
}
CMD:lay( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    new
        animid;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /lay [1-10]");
    switch ( animid )
    {
        case 1: LoopingAnim(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
        case 2: LoopingAnim(playerid,"BEACH", "parksit_w_loop", 4.0, 1, 0, 0, 0, 0);
        case 3: LoopingAnim(playerid,"BEACH","parksit_m_loop", 4.0, 1, 0, 0, 0, 0);
        case 4: LoopingAnim(playerid,"BEACH","lay_bac_loop", 4.0, 1, 0, 0, 0, 0);
        case 5: LoopingAnim(playerid,"BEACH","sitnwait_loop_w", 4.0, 1, 0, 0, 0, 0);
        case 6: BackAnim(playerid,"SUNBATHE","Lay_Bac_in",3.0,0,1,1,1,0,5);
        case 7: LoopingAnim(playerid,"SUNBATHE","batherdown",3.0,0,1,1,1,0);
        case 8: BackAnim(playerid,"SUNBATHE","parksit_m_in",3.0,0,1,1,1,0,1);
        case 9: LoopingAnim(playerid,"CAR", "Fixn_Car_Loop", 4.0, 1, 0, 0, 0, 0);
        case 10: LoopingAnim(playerid, "CRACK", "CRCKIDLE4", 4.0, 1, 0, 0, 0, 0);
        default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /lay [1-9]");
    }
    return 1;
}
CMD:hide( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    new
        animid;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /hide [1-2]");
    switch ( animid )
    {
        case 1: LoopingAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0);
        case 2: LoopingAnim(playerid,"ON_LOOKERS","panic_hide",3.0,1,0,0,0,0);
        default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /hide [1-2]");
    }
    return 1;
}
CMD:vomit( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    OnePlayAnim(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0); // Vomit BAH!
    return 1;
}
CMD:eats( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0); // Eat Burger
    return 1;
}
CMD:wave( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    new
        animid;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /wave [1-5]");
    switch ( animid )
    {
        case 1: LoopingAnim(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0);
        case 2: OnePlayAnim(playerid,"BD_Fire", "BD_GF_Wave", 4.0, 0, 0, 0, 0, 0);
        case 3: LoopingAnim(playerid,"RIOT","RIOT_CHANT",4.0,1,1,1,1,0);
        case 4: OnePlayAnim(playerid,"WUZI", "Wuzi_Follow", 5.0, 0, 0, 0, 0, 0);
        case 5: OnePlayAnim(playerid,"KISSING", "gfwave2", 4.0, 0, 0, 0, 0, 0);
        default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /wave [1-5]");
    }
    return 1;
}
CMD:slapass( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    new
        animid;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /slapass [1-2]");
    switch ( animid )
    {
        case 1: OnePlayAnim(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);
        case 2: LoopingAnim(playerid,"MISC","Bitchslap",4.0,1,0,0,0,0);
        default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /slap [1-2]");
    }
    return 1;
}
CMD:deal( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    OnePlayAnim(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0); // Deal Drugs
    return 1;
}
CMD:smoke( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    new
        animid;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /smoke [1-6]");
    switch ( animid )
    {
        case 1: LoopingAnim(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0); // male
        case 2: LoopingAnim(playerid,"SMOKING", "F_smklean_loop", 4.0, 1, 0, 0, 0, 0); //female
        case 3: LoopingAnim(playerid,"SMOKING","M_smkstnd_loop", 4.0, 1, 0, 0, 0, 0); // standing-fucked
        case 4: OnePlayAnim(playerid,"SMOKING","M_smk_out", 4.0, 0, 0, 0, 0, 0); // standing
        case 5: OnePlayAnim(playerid,"SMOKING","M_smk_in",3.0,0,0,0,0,0);
        case 6: OnePlayAnim(playerid,"SMOKING","M_smk_tap",3.0,0,0,0,0,0);
        default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /smoke [1-6]");
    }
    return 1;
}
CMD:bar( playerid, params[ ] )
{
    if ( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT )
    {
        new
            id;

        if ( sscanf( params, "d", id ) )
            SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /bar [1-12]");
        else
        {
            switch ( id )
            {
                case 1: LoopingAnim( playerid, "BAR", "Barcustom_get", 3.1, 0, 1, 1, 1, 1);
                case 2: LoopingAnim( playerid, "BAR", "Barcustom_loop", 3.1, 1, 1, 1, 1, 1);
                case 3: LoopingAnim( playerid, "BAR", "Barcustom_order", 3.1, 0, 1, 1, 1, 1);
                case 4: LoopingAnim( playerid, "BAR", "BARman_idle", 3.1, 0, 1, 1, 1, 1);
                case 5: LoopingAnim( playerid, "BAR", "Barserve_bottle", 3.1, 0, 1, 1, 1, 1);
                case 6: LoopingAnim( playerid, "BAR", "Barserve_give", 3.1, 0, 1, 1, 1, 1);
                case 7: LoopingAnim( playerid, "BAR", "Barserve_glass", 3.1, 0, 1, 1, 1, 1);
                case 8: LoopingAnim( playerid, "BAR", "Barserve_in", 3.1, 0, 1, 1, 1, 1);
                case 9: LoopingAnim( playerid, "BAR", "Barserve_loop", 3.1, 1, 1, 1, 1, 1);
                case 10: LoopingAnim( playerid, "BAR", "Barserve_order", 3.1, 0, 1, 1, 1, 1);
                case 11: LoopingAnim( playerid, "BAR", "dnk_stndF_loop", 3.1, 1, 1, 1, 1, 1);
                case 12: LoopingAnim( playerid, "BAR", "dnk_stndM_loop", 3.1, 1, 1, 1, 1, 1);
                default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /bar [1-12]");
            }
        }
    }
    return true;
}
CMD:hike( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    new
        animid;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /hike [1-3]");
    switch ( animid )
    {
        case 1: LoopingAnim(playerid,"MISC","hiker_pose",4.0,1,0,0,0,0);
        case 2: LoopingAnim(playerid,"MISC","hiker_pose_l",4.0,1,0,0,0,0);
        case 3: OnePlayAnim(playerid,"PED","idle_taxi",3.0,0,0,0,0,0);
        default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /hike [1-3]");
    }
    return 1;
}
CMD:fuck( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    new
        animid;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /fuck [1-2]");
    switch ( animid )
    {
        case 1: OnePlayAnim(playerid,"PED","fucku",4.0,0,0,0,0,0);
        case 2: OnePlayAnim(playerid,"RIOT","RIOT_FUKU",2.0,0,0,0,0,0);
        default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /fuck [1-2]");
    }
    return 1;
}
CMD:taichi( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    LoopingAnim(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,0);
    return 1;
}
CMD:sit( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    new
        animid;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /sit [1-6]");
    switch ( animid )
    {
        case 1: BackAnim(playerid,"PED","SEAT_down",4.1,0,0,0,1,-1,8);
        case 2: LoopingAnim(playerid,"MISC","seat_lr",2.0,1,0,0,0,0);
        case 3: LoopingAnim(playerid,"MISC","seat_talk_01",2.0,1,0,0,0,0);
        case 4: LoopingAnim(playerid,"MISC","seat_talk_02",2.0,1,0,0,0,0);
        case 5 : LoopingAnim( playerid, "PED", "SEAT_idle", 4.1, 0, 0, 0, 1, 1 );
        case 6 : LoopingAnim( playerid, "CRACK", "crckidle1", 3.1, 0, 1, 1, 1, 1);
        default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /sit [1-6]");
    }
    return 1;
}
CMD:talk( playerid, params[ ] )
{
    #pragma unused params

    if ( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT )
        LoopingAnim( playerid, "PED", "IDLE_CHAT", 4.0, 1, 0, 0, 1, 1 );
    else
        SendClientMessage( playerid, COLOR_LIGHTRED, "Naudotis ðiomis animacijomis galite tik tada, kada Jûsø veikëjas yra ant kojø. ");

    return true;
}
CMD:fall( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    new
        animid;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /fall [1-3]");
    switch ( animid )
    {
        case 1: LoopingAnim(playerid,"PED","KO_skid_front",4.1,0,1,1,1,0);
        case 2: LoopingAnim(playerid, "PED","FLOOR_hit_f", 4.0, 1, 0, 0, 0, 0);
        case 3: LoopingAnim(playerid,"PED","KO_skid_back",4.1,0,1,1,1,0);
        default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /fall [1-2]");
    }
    return 1;
}
CMD:kiss( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    new
        animid;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /kiss [1-2]");
    switch ( animid )
    {
        case 1: OnePlayAnim(playerid, "KISSING", "Playa_Kiss_02", 3.0, 0, 0, 0, 0, 0);
        case 2: OnePlayAnim(playerid, "BD_Fire", "grlfrd_kiss_03", 2.0, 0, 0, 0, 0, 0);
        default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /kiss [1-2]");
    }
    return 1;
}
CMD:injured( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    new
        animid;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /injured [1-4]");
    switch ( animid )
    {
        case 1: LoopingAnim(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
        case 2: LoopingAnim(playerid, "WUZI", "CS_Dead_Guy", 4.0, 1, 1, 1, 1, 1);
        case 3: LoopingAnim(playerid, "PED", "gas_cwr", 4.0, 1, 1, 1, 1, 1);
        case 4: LoopingAnim(playerid, "FINALE", "FIN_Cop1_Loop", 4.0, 1, 0, 0, 0, 0);
        default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /injured [1-4]");
    }
    return 1;
}
CMD:rap( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    new
        animid;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /rap [1-11]");
    switch ( animid )
    {
        case 1 : LoopingAnim( playerid, "RAPPING", "RAP_A_Loop", 4.0, 1, 1, 1, 1, 1 );
        case 2 : LoopingAnim( playerid, "RAPPING", "RAP_C_Loop", 4.0, 1, 1, 1, 1, 1 );
        case 3 : LoopingAnim( playerid, "GANGS", "prtial_gngtlkA", 4.0, 1, 1, 1, 1, 1 );
        case 4 : LoopingAnim( playerid, "GANGS", "prtial_gngtlkB", 4.0, 1, 1, 1, 1, 1 );
        case 5 : LoopingAnim( playerid, "GANGS", "prtial_gngtlkC", 4.0, 1, 1, 1, 1, 1 );
        case 6 : LoopingAnim( playerid, "GANGS", "prtial_gngtlkD", 4.0, 1, 1, 1, 1, 1 );
        case 7 : LoopingAnim( playerid, "GANGS", "prtial_gngtlkE", 4.0, 1, 1, 1, 1, 1 );
        case 8 : LoopingAnim( playerid, "GANGS", "prtial_gngtlkF", 4.0, 1, 1, 1, 1, 1 );
        case 9 : LoopingAnim( playerid, "GANGS", "prtial_gngtlkG", 4.0, 1, 1, 1, 1, 1 );
        case 10 : LoopingAnim( playerid, "GANGS", "prtial_gngtlkH", 4.0, 1, 1, 1, 1, 1 );
        case 11 : LoopingAnim(playerid, "RAPPING", "RAP_B_Loop", 4.0, 1, 1, 1, 1, 1 );
        default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /rap [1-11]");
    }
    return 1;
}
CMD:push( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    new
        animid;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /push [1-2]");
    switch ( animid )
    {
        case 1: OnePlayAnim(playerid,"GANGS","shake_cara",4.0,0,0,0,0,0);
        case 2: OnePlayAnim(playerid,"GANGS","shake_carSH",4.0,0,0,0,0,0);
        default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /push [1-2]");
    }
    return 1;
}
CMD:spraycan(playerid)
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    OnePlayAnim(playerid,"SPRAYCAN","spraycan_full",4.0,0,0,0,0,0);
    return 1;
}
CMD:skick( playerid, params[ ] )
{
    if ( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT )
    {
        new
            id;

        if ( sscanf( params, "d", id ) ) SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /skick [1-4]");
        else
        {
            switch ( id )
            {
                case 1 : LoopingAnim( playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0 );
                case 2 : LoopingAnim( playerid, "FIGHT_D", "FightD_2", 4.0, 0, 1, 1, 0, 0 );
                case 3 : LoopingAnim( playerid, "FIGHT_C", "FightC_M", 4.0, 0, 1, 1, 0, 0 );
                case 4 : LoopingAnim( playerid, "FIGHT_D", "FightD_G", 4.0, 0, 0, 0, 0, 0 );
                default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /skick [1-4]");
            }
        }
    }
    else
        SendClientMessage( playerid, COLOR_LIGHTRED, "Naudotis ðiomis animacijomis galite tik tada, kada Jûsø veikëjas yra ant kojø. ");

    return true;
}
CMD:medic( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    OnePlayAnim(playerid,"MEDIC","CPR",4.0,0,0,0,0,0);
    return 1;
}
CMD:tired( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    new
        animid;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /tired [1-2]");
    switch ( animid )
    {
        case 1: LoopingAnim(playerid,"PED","IDLE_tired",3.0,1,0,0,0,0);
        case 2: OnePlayAnim(playerid,"FAT","Idle_Tired",3.0,1,0,0,0,0);
        default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /tired [1-2]");
    }
    return 1;
}
CMD:box( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    LoopingAnim(playerid,"GYMNASIUM","GYMshadowbox",4.0,1,1,1,1,0);
    return 1;
}
CMD:leface( playerid, params[ ] )
{
    #pragma unused params

    if ( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT )
        LoopingAnim( playerid, "PED", "KO_shot_face", 4.0, 0, 1, 1, 1, 0 );
    else
        SendClientMessage( playerid, COLOR_LIGHTRED, "Naudotis ðiomis animacijomis galite tik tada, kada Jûsø veikëjas yra ant kojø. ");

    return true;
}
CMD:lebelly( playerid, params[ ] )
{
    #pragma unused params

    if ( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT )
        LoopingAnim( playerid, "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0 );
    else
        SendClientMessage( playerid, COLOR_LIGHTRED, "Naudotis ðiomis animacijomis galite tik tada, kada Jûsø veikëjas yra ant kojø. ");

    return true;
}
CMD:crack( playerid, params[ ] )
{
    if ( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT )
    {
        new
            id;

        if ( sscanf( params, "d", id ) ) SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /crack [1-6]");
        else
        {
            switch ( id )
            {
                case 1 : LoopingAnim( playerid, "CRACK", "crckdeth1", 4.0, 1, 0, 0, 0, 0 );
                case 2 : LoopingAnim( playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0 );
                case 3 : LoopingAnim( playerid, "CRACK", "crckdeth3", 4.0, 1, 0, 0, 0, 0 );
                case 4 : LoopingAnim( playerid, "CRACK", "crckidle2", 4.0, 0, 0, 0, 0, 0 );
                case 5 : LoopingAnim( playerid, "CRACK", "crckidle3", 4.0, 1, 0, 0, 0, 0 );
                case 6 : LoopingAnim( playerid, "CRACK", "crckidle4", 4.0, 1, 0, 0, 0, 0 );
                default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /crack [1-6]");
            }
        }
    }
    else
        SendClientMessage( playerid, COLOR_LIGHTRED, "Naudotis ðiomis animacijomis galite tik tada, kada Jûsø veikëjas yra ant kojø. ");

    return true;
}
CMD:bat( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    new
        animid;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /bat [1-2]");
    switch(animid) {
        case 1: LoopingAnim(playerid, "CRACK", "Bbalbat_Idle_01", 4.0, 1, 0, 0, 0, 0);
        case 2: LoopingAnim(playerid, "CRACK", "Bbalbat_Idle_02", 4.0, 1, 0, 0, 0, 0);
        default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /bat [1-2]");
    }
    return true;
}
CMD:ahouse( playerid, params[ ] )
{
    if ( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT )
    {
        new
            id;

        if ( sscanf( params, "d", id ) ) SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /ahouse [1-6]");
        else
        {
            switch ( id )
            {
                case 1: LoopingAnim(playerid, "INT_HOUSE", "BED_In_L", 4.1, 0, 1, 1, 1, 1);
                case 2: LoopingAnim(playerid, "INT_HOUSE", "BED_In_R", 4.1, 0, 1, 1, 1, 1);
                case 3: LoopingAnim(playerid, "INT_HOUSE", "BED_Out_L", 4.1, 0, 1, 1, 1, 1);
                case 4: LoopingAnim(playerid, "INT_HOUSE", "BED_Out_R", 4.1, 0, 1, 1, 1, 1);
                case 5: LoopingAnim(playerid, "INT_HOUSE", "LOU_Loop", 4.1, 0, 1, 1, 1, 1);
                case 6: LoopingAnim(playerid, "INT_HOUSE", "LOU_Out", 4.1, 0, 1, 1, 1, 1);
                default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /ahouse [1-6]");
            }
        }
    }
    else
        SendClientMessage( playerid, COLOR_LIGHTRED, "Naudotis ðiomis animacijomis galite tik tada, kada Jûsø veikëjas yra ant kojø. ");

    return true;
}
CMD:cop( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    new
        animid;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /cop [1-19]");
    switch ( animid )
    {
        case 1: LoopingAnim(playerid,"SWORD", "sword_IDLE", 4.0, 0, 1, 1, 1, -1);
        case 2: LoopingAnim(playerid,"POLICE","CopTraf_away",4.0,1,0,0,0,0);
        case 3: LoopingAnim(playerid,"POLICE","CopTraf_come",4.0,1,0,0,0,0);
        case 4: LoopingAnim(playerid,"POLICE","CopTraf_left",4.0,1,0,0,0,0);
        case 5: LoopingAnim(playerid,"POLICE","CopTraf_stop",4.0,1,0,0,0,0);
        case 6: LoopingAnim(playerid,"POLICE","Cop_move_fwd",4.0,1,1,1,1,1);
        case 7: LoopingAnim(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1);
        case 8: OnePlayAnim(playerid, "COP_AMBIENT", "Copbrowse_in", 4.1, 0, 0, 0, 0, 0);
        case 9: OnePlayAnim(playerid, "COP_AMBIENT", "Copbrowse_loop", 4.1, 0, 0, 0, 0, 0);
        case 10: OnePlayAnim(playerid, "COP_AMBIENT", "Copbrowse_nod", 4.1, 0, 0, 0, 0, 0);
        case 11: OnePlayAnim(playerid, "COP_AMBIENT", "Copbrowse_out", 4.1, 0, 0, 0, 0, 0);
        case 12: OnePlayAnim(playerid, "COP_AMBIENT", "Copbrowse_shake", 4.1, 0, 0, 0, 0, 0);
        case 13: OnePlayAnim(playerid, "COP_AMBIENT", "Coplook_in", 4.1, 0, 0, 0, 0, 0);
        case 14: OnePlayAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.1, 0, 0, 0, 0, 0);
        case 15: OnePlayAnim(playerid, "COP_AMBIENT", "Coplook_nod", 4.1, 0, 0, 0, 0, 0);
        case 16: OnePlayAnim(playerid, "COP_AMBIENT", "Coplook_out", 4.1, 0, 0, 0, 0, 0);
        case 17: OnePlayAnim(playerid, "COP_AMBIENT", "Coplook_shake", 4.1, 0, 0, 0, 0, 0);
        case 18: OnePlayAnim(playerid, "COP_AMBIENT", "Coplook_think", 4.1, 0, 0, 0, 0, 0);
        case 19: OnePlayAnim(playerid, "COP_AMBIENT", "Coplook_watch", 4.1, 0, 0, 0, 0, 0);
        default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /cop [1-19]");
    }
    return 1;
}

CMD:stance( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    new
        animid;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /stance [1-16]");
    if(animid == 1) LoopingAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
    else if(animid == 2) LoopingAnim(playerid,"PED","WOMAN_IDLESTANCE",4.0,1,0,0,0,0);
    else if(animid == 3) LoopingAnim(playerid,"PED","CAR_HOOKERTALK",4.0,1,0,0,0,0);
    else if(animid == 4) LoopingAnim(playerid,"FAT","FatIdle",4.0,1,0,0,0,0);
    else if(animid == 5) LoopingAnim(playerid,"WUZI","Wuzi_Stand_Loop",4.0,1,0,0,0,0);
    else if(animid == 6) LoopingAnim(playerid,"GRAVEYARD","mrnf_loop",4.0,1,0,0,0,0);
    else if(animid == 7) LoopingAnim(playerid,"GRAVEYARD","mrnm_loop",4.0,1,0,0,0,0);
    else if(animid == 8) LoopingAnim(playerid,"GRAVEYARD","prst_loopa",4.0,1,0,0,0,0);
    else if(animid == 9) LoopingAnim(playerid,"PED","idlestance_fat",4.0,1,0,0,0,0);
    else if(animid == 10) LoopingAnim(playerid,"PED","idlestance_old",4.0,1,0,0,0,0);
    else if(animid == 11) LoopingAnim(playerid,"PED","turn_l",4.0,1,0,0,0,0);
    else if(animid == 12) LoopingAnim( playerid, "DEALER", "DEALER_IDLE_01", 4.0, 0, 1, 1, 1, 0 );
    else if(animid == 13) LoopingAnim( playerid, "DEALER", "DEALER_IDLE_02", 4.0, 0, 1, 1, 1, 0 );
    else if(animid == 14) LoopingAnim( playerid, "DEALER", "DEALER_IDLE_03", 4.0, 0, 1, 1, 1, 0 );
    else if(animid == 15) LoopingAnim( playerid, "DEALER", "DRUGS_BUY", 4.0, 0, 1, 1, 1, 0 );
    else if(animid == 16) LoopingAnim( playerid, "DEALER", "shop_pay", 4.0, 0, 1, 1, 1, 0 );
    else SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /stance [1-16]");
    return 1;
}
CMD:basketball( playerid, params[ ] )
{
    if ( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT )
    {
        new
            id;

        if ( sscanf( params, "d", id ) ) SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /basketball [1-5]");
        else
        {
            switch ( id )
            {
                case 1 : LoopingAnim( playerid, "BSKTBALL", "BBALL_idleloop", 4.0, 1, 0, 0, 0, 0 );
                case 2 : LoopingAnim( playerid, "BSKTBALL", "BBALL_Jump_Shot", 4.0, 0, 0, 0, 0, 0 );
                case 3 : LoopingAnim( playerid, "BSKTBALL", "BBALL_pickup", 4.0, 0, 0, 0, 0, 0 );
                case 4 : LoopingAnim( playerid, "BSKTBALL", "BBALL_run", 4.1, 1, 1, 1, 1, 1 );
                case 5 : LoopingAnim( playerid, "BSKTBALL", "BBALL_def_loop", 4.0, 1, 0, 0, 0, 0 );
                default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /basketball [1-5]");
            }
        }
    }
    else
        SendClientMessage( playerid, COLOR_LIGHTRED, "Naudotis ðiomis animacijomis galite tik tada, kada Jûsø veikëjas yra ant kojø. ");

    return true;
}
CMD:lean( playerid, params[ ] )
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    new
        animid;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /lean [1-2]");
    switch ( animid )
    {
        case 1: LoopingAnim(playerid,"GANGS","leanIDLE",4.0,0,1,1,1,0);
        case 2: LoopingAnim(playerid,"MISC","Plyrlean_loop",4.0,0,1,1,1,0);
        default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /lean [1-2]");
    }
    return 1;
}
CMD:mkick( playerid, params[ ] )
{
    new
        giveplayerid,
        gMessage[ 64 ];
        
    if ( pInfo[ playerid ][ pTester ] <= 0 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs nesate testuotojas, kad naudotumët ðiá  komanda." );
    if(sscanf(params,"us[64]",giveplayerid, gMessage)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /tkick [þaidëjo id][preiþastis]");
    if(IsPlayerNPC(giveplayerid)) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite uþdaryti ðio veikëjo, kadangi tai serverio dirbtinis þaidëjas (BOT)");
    if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
    if ( strfind( gMessage, "'", true ) != -1 ) return 1;
    mysql_real_escape_string(gMessage,gMessage);
    KickPlayer( GetName(playerid), giveplayerid, gMessage );
    return 1;
}
CMD:dance( playerid, params[ ] )
{
    if (GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT )
    {
        new
            id;

        if ( sscanf( params, "d", id ) ) SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /dance [1-13]");
        else
        {
            switch ( id )
            {
                case 1 : SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DANCE1 );
                case 2 : SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DANCE2 );
                case 3 : SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DANCE3 );
                case 4 : SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DANCE4 );
                case 5: LoopingAnim(playerid, "DANCING", "dance_loop", 4.1, 1, 1, 1, 1, 1);
                case 6: LoopingAnim(playerid, "DANCING", "DAN_Down_A", 4.1, 1, 1, 1, 1, 1);
                case 7: LoopingAnim(playerid, "DANCING", "DAN_Left_A", 4.1, 1, 1, 1, 1, 1);
                case 8: LoopingAnim(playerid, "DANCING", "DAN_Loop_A", 4.1, 1, 1, 1, 1, 1);
                case 9: LoopingAnim(playerid, "DANCING", "DAN_Right_A", 4.1, 1, 1, 1, 1, 1);
                case 10: LoopingAnim(playerid, "DANCING", "DAN_Up_A", 4.1, 1, 1, 1, 1, 1);
                case 11: LoopingAnim(playerid, "DANCING", "dnce_M_a", 4.1, 1, 1, 1, 1, 1);
                case 12: LoopingAnim(playerid, "DANCING", "dnce_M_b", 4.1, 1, 1, 1, 1, 1);
                case 13: LoopingAnim(playerid, "DANCING", "dnce_M_c", 4.1, 1, 1, 1, 1, 1);
                default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /dance [1-13]");
            }
        }
    }
    else
        SendClientMessage( playerid, COLOR_LIGHTRED, "Naudotis ðiomis animacijomis galite tik tada, kada Jûsø veikëjas yra ant kojø. ");

    return true;
}
CMD:benchpress(playerid, params[])
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Naudotis ðiomis animacijomis galite tik tada, kada Jûsø veikëjas yra ant kojø.");

    new number;
    if(sscanf(params,"i", number))
    {
        benchpress_usage:
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Naudojimas /benchpress [1 - 7]");
    }


    switch(number)
    {
        case 1: OnePlayAnim(playerid, "benchpress", "gym_bp_celebrate", 4.1, 0, 0, 0, 0, 0);
        case 2: LoopingAnim(playerid, "benchpress", "gym_bp_down", 4.1, 1, 0, 0, 0, 0);
        case 3: OnePlayAnim(playerid, "benchpress", "gym_bp_getoff", 4.1, 0, 0, 0, 0, 0);
        case 4: OnePlayAnim(playerid, "benchpress", "gym_bp_geton", 4.1, 0, 0, 0, 0, 0);
        case 5: LoopingAnim(playerid, "benchpress", "gym_bp_up_A", 4.1, 1, 0, 0, 0, 0);       
        case 6: LoopingAnim(playerid, "benchpress", "gym_bp_up_B", 4.1, 1, 0, 0, 0, 0);       
        case 7: LoopingAnim(playerid, "benchpress", "gym_bp_up_smooth", 4.1, 1, 0, 0, 0, 0);  
        default: goto benchpress_usage;
    }
    return 1;
}

CMD:camera(playerid, params[])
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Naudotis ðiomis animacijomis galite tik tada, kada Jûsø veikëjas yra ant kojø.");

    new number;
    if(sscanf(params,"i", number))
    {
        camera_usage:
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Naudojimas /camera [1 - 14]");
    }

    switch(number)
    {
        case 1: OnePlayAnim(playerid, "CAMERA", "camcrch_cmon", 4.1, 0, 0, 0, 0, 0);
        case 2: LoopingAnim(playerid, "CAMERA", "camcrch_idleloop", 4.1, 1, 0, 0, 1, 1); 
        case 4: OnePlayAnim(playerid, "CAMERA", "camcrch_to_camstnd", 4.1, 0, 0, 0, 0, 0);
        case 5: OnePlayAnim(playerid, "CAMERA", "camstnd_cmon", 4.1, 0, 0, 0, 0, 0);
        case 6: LoopingAnim(playerid, "CAMERA", "camstnd_idleloop", 4.1, 1, 0, 0, 0, 0); 
        case 7: LoopingAnim(playerid, "CAMERA", "camstnd_lkabt", 4.1, 1, 0, 0, 0, 0);       
        case 8: OnePlayAnim(playerid, "CAMERA", "camstnd_to_camcrch", 4.1, 0, 0, 0, 0, 0);
        case 9: OnePlayAnim(playerid, "CAMERA", "piccrch_in", 4.1, 0, 0, 0, 0, 0);
        case 10: OnePlayAnim(playerid, "CAMERA", "piccrch_out", 4.1, 0, 0, 0, 0, 0);
        case 11: OnePlayAnim(playerid, "CAMERA", "piccrch_take", 4.1, 0, 0, 0, 0, 0);
        case 12: OnePlayAnim(playerid, "CAMERA", "picstnd_in", 4.1, 0, 0, 0, 0, 0);
        case 13: OnePlayAnim(playerid, "CAMERA", "picstnd_out", 4.1, 0, 0, 0, 0, 0);
        case 14: LoopingAnim(playerid, "CAMERA", "picstnd_take", 4.1, 1, 1, 1, 1, 1);
        default: goto camera_usage;
    }
    return 1;
}

CMD:carry(playerid, params[])
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Naudotis ðiomis animacijomis galite tik tada, kada Jûsø veikëjas yra ant kojø.");

    new number;
    if(sscanf(params,"i", number))
    {
        carry_usage:
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Naudojimas /carry [1 - 6]");
    }

    switch(number)
    {
        case 1: OnePlayAnim(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0);
        case 2: OnePlayAnim(playerid, "CARRY", "liftup05", 4.1, 0, 0, 0, 0, 0);
        case 3: OnePlayAnim(playerid, "CARRY", "liftup105", 4.1, 0, 0, 0, 0, 0);
        case 4: OnePlayAnim(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0);
        case 5: OnePlayAnim(playerid, "CARRY", "putdwn05", 4.1, 0, 0, 0, 0, 0);
        case 6: OnePlayAnim(playerid, "CARRY", "putdwn105", 4.1, 0, 0, 0, 0, 0);
        default: goto carry_usage;
    }
    return 1;
}



CMD:pee(playerid, params[])
{
    if ( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT )
    {
        SetPlayerSpecialAction( playerid, 68 );
    }
    else
        SendClientMessage( playerid, COLOR_LIGHTRED, "Naudotis ðiomis animacijomis galite tik tada, kada Jûsø veikëjas yra ant kojø. ");

    return true;
}
CMD:knife( playerid, params[ ] )
{
    if ( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT )
    {
        new
            id;

        if ( sscanf( params, "d", id ) ) SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /knife [1-4]");
        else
        {
            switch ( id )
            {
                case 1 : LoopingAnim( playerid, "KNIFE", "KILL_Knife_Ped_Damage", 4.0, 0, 1, 1, 1, 0 );
                case 2 : LoopingAnim( playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0 );
                case 3 : LoopingAnim( playerid, "KNIFE", "KILL_Knife_Player", 4.0, 0, 0, 0, 0, 0 );
                case 4 : LoopingAnim( playerid, "KNIFE", "KILL_Partial", 4.0, 0, 1, 1, 1, 1 );
                default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /knife [1-4]");
            }
        }
    }
    else
        SendClientMessage( playerid, COLOR_LIGHTRED, "Naudotis ðiomis animacijomis galite tik tada, kada Jûsø veikëjas yra ant kojø. ");

    return true;
}
CMD:hit( playerid, params[ ] )
{
    if ( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT )
    {
        new
            id;

        if ( sscanf( params, "d", id ) ) SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /hit [1-3]");
        else
        {
            switch ( id )
            {
                case 1 : LoopingAnim( playerid, "FIGHT_D", "FightD_3", 4.0, 0, 1, 1, 0, 0 );
                case 2 : LoopingAnim( playerid, "FIGHT_B", "FightB_G", 4.0, 0, 0, 0, 0, 0 );
                case 3 : LoopingAnim( playerid, "PED", "BIKE_elbowL", 4.0, 0, 0, 0, 0, 0 );
                default: SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /hit [1-3]");
            }
        }
    }
    else
        SendClientMessage( playerid, COLOR_LIGHTRED, "Naudotis ðiomis animacijomis galite tik tada, kada Jûsø veikëjas yra ant kojø. ");

    return true;
}
CMD:loudtalk( playerid, params[ ] )
{
    #pragma unused params

    if ( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT )
        LoopingAnim( playerid, "RIOT", "RIOT_shout", 4.0, 1, 0, 0, 0, 0 );
    else
        SendClientMessage( playerid, COLOR_LIGHTRED, "Naudotis ðiomis animacijomis galite tik tada, kada Jûsø veikëjas yra ant kojø. ");

    return true;
}
CMD:aload( playerid, params[ ] )
{
    new
        id;
    if( sscanf( params, "d", id) )
        SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /aload [1-2]");
    else
    {
        switch(id)
        {
            case 1:
                LoopingAnim( playerid, "COLT45", "colt45_reload", 4.0, 0, 1, 1, 1, 1);
            case 2:
                LoopingAnim( playerid, "UZI", "UZI_reload", 4.0, 0, 1, 1, 1, 1);
        }
    }
    return true;
}
CMD:wank( playerid, params[ ] )
{
    #pragma unused params
    if ( GetPlayerState( playerid ) == PLAYER_STATE_ONFOOT )
        LoopingAnim( playerid, "PAULNMAC", "wank_loop", 4.1, 1, 1, 1, 1, 1);
    else
        SendClientMessage( playerid, COLOR_LIGHTRED, "Naudotis ðiomis animacijomis galite tik tada, kada Jûsø veikëjas yra ant kojø. ");

    return true;
}
CMD:walk( playerid, params[ ] )
{
    new
        animid;
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    if(sscanf(params,"d",animid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /walk [0 - 14]");
    if(animid == 1) LoopingAnim(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
    else if(animid == 2) LoopingAnim(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
    else if(animid == 3) LoopingAnim(playerid,"FAT","FatWalk",4.1,1,1,1,1,1);
    else if(animid == 4) LoopingAnim(playerid,"WUZI","CS_Wuzi_pt1",4.1,1,1,1,1,1);
    else if(animid == 5) LoopingAnim(playerid,"WUZI","Wuzi_walk",3.0,1,1,1,1,1);
    else if(animid == 6) LoopingAnim(playerid,"POOL","Pool_walk",3.0,1,1,1,1,1);
    else if(animid == 7) LoopingAnim(playerid,"PED","Walk_player",3.0,1,1,1,1,1);
    else if(animid == 8) LoopingAnim(playerid,"PED","Walk_old",3.0,1,1,1,1,1);
    else if(animid == 9) LoopingAnim(playerid,"PED","Walk_fatold",3.0,1,1,1,1,1);
    else if(animid == 10) LoopingAnim(playerid,"PED","woman_walkfatold",3.0,1,1,1,1,1);
    else if(animid == 11) LoopingAnim(playerid,"PED","woman_walknorm",3.0,1,1,1,1,1);
    else if(animid == 12) LoopingAnim(playerid,"PED","woman_walkold",3.0,1,1,1,1,1);
    else if(animid == 13) LoopingAnim(playerid,"PED","woman_walkpro",3.0,1,1,1,1,1);
    else if(animid == 14) LoopingAnim(playerid,"PED","woman_walkshop",3.0,1,1,1,1,1);
    else SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /walk [1-14]");
    return 1;
}
CMD:walkstyle( playerid, params[ ] )
{
    new
        walkstyle;
        
    if(pInfo[ playerid ][ pDonator ] < 1 ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs neesate rëmëjas. ");
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
    if(sscanf(params,"d",walkstyle)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /walkstyle [0 - 8]");
    if(walkstyle < 0 || walkstyle > 8) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /walkstyle [0 - 8]");
    SendClientMessage(playerid,GRAD,"Stilius sëkmingai pakeistas");
    if(walkstyle == 0) pInfo[ playerid ][ pWalkStyle ] = 0;
    else if(walkstyle == 1) pInfo[ playerid ][ pWalkStyle ] = 1;
    else if(walkstyle == 2) pInfo[ playerid ][ pWalkStyle ] = 2;
    else if(walkstyle == 3) pInfo[ playerid ][ pWalkStyle ] = 3;
    else if(walkstyle == 4) pInfo[ playerid ][ pWalkStyle ] = 4;
    else if(walkstyle == 5) pInfo[ playerid ][ pWalkStyle ] = 5;
    else if(walkstyle == 6) pInfo[ playerid ][ pWalkStyle ] = 6;
    else if(walkstyle == 7) pInfo[ playerid ][ pWalkStyle ] = 7;
    else if(walkstyle == 8) pInfo[ playerid ][ pWalkStyle ] = 8;
    return 1;
}
CMD:talkstyle(playerid, params[])
{
    new talkstyle;
        
    if(pInfo[ playerid ][ pDonator ] < 1 ) 
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs neesate rëmëjas. ");

    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) 
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite keisti kalbëjimo stiliaus bûdamas transporto priemonëje.");

    if(sscanf(params,"d",talkstyle) || talkstyle < 0 || talkstyle > 4) 
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /talkstyle [0 - 4]");

    SendClientMessage(playerid,GRAD,"Stilius sëkmingai pakeistas");
    pInfo[ playerid ][ pTalkStyle ] = talkstyle;
    return 1;
}
CMD:cartax( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 4 )
    {
        #pragma unused params
        new giveplayerid,
            string[ 126 ];
        if ( sscanf( params, "i", giveplayerid ) )
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /cartax [ 1 - 99 ] " );

        if ( giveplayerid < 0 || giveplayerid > 100 )
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Mokestis uþ automobilius negali bût didesnis negu 100.");

        cartax = giveplayerid;
        format         ( string, 126, " Kilometro kaina buvo nustatyta á %d", giveplayerid);
        SaveMisc();
    }
    return 1;
}
CMD:biztax( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 4 )
    {
        #pragma unused params
        new giveplayerid,
            string[ 126 ];
        if ( sscanf( params, "i", giveplayerid ) )
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /cartax [ 1 - 99 ] " );

        if ( giveplayerid < 0 || giveplayerid > 100 )
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Mokestis uþ automobilius negali bût didesnis negu 100.");

        biztax = giveplayerid;
        format         ( string, 126, " Kilometro kaina buvo nustatyta á %d", giveplayerid);
        SaveMisc();
    }
    return 1;
}
CMD:housetax( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 4 )
    {
        #pragma unused params
        new giveplayerid,
            string[ 126 ];
        if ( sscanf( params, "i", giveplayerid ) )
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /cartax [ 1 - 99 ] " );

        if ( giveplayerid < 0 || giveplayerid > 100 )
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Mokestis uþ automobilius negali bût didesnis negu 100.");

        housetax = giveplayerid;
        format         ( string, 126, " Kilometro kaina buvo nustatyta á %d", giveplayerid);
        SaveMisc();
    }
    return 1;
}
CMD:pos(playerid)
{
    if(!IsPlayerAdmin(playerid) && !pInfo[ playerid ][ pAdmin ])
        return 0;

    new Float:x, Float:y, Float:z, string[64];
    GetPlayerPos(playerid, x, y, z);
    format(string, sizeof(string), "Jûsø koordinatës: x - %f y - %f z - %f", x, y, z);
    SendClientMessage(playerid, COLOR_NEWS, string);
    return 1;
}

CMD:goto( playerid, params [ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        new
            giveplayerid,
            Float:Kords[3];
        if ( sscanf( params, "u", giveplayerid ) )
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /goto [þaidëjo id]");
        if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
        new idcar = GetPlayerVehicleID( playerid );
        GetPlayerPos(giveplayerid,Kords[0],Kords[1],Kords[2]);
        if(!IsPlayerInAnyVehicle(playerid))
        {
            SetPlayerPos(playerid,Kords[0],Kords[1]+2,Kords[2]);
            SetPlayerInterior(playerid,GetPlayerInterior(giveplayerid));
            SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(giveplayerid));
        }
        else
            SetVehiclePos(idcar,Kords[0],Kords[1],Kords[2]+2);
        SendClientMessage(playerid,GRAD,"Sëkmingai nusiteleportavai.");
    }
    return 1;
}
CMD:gethere( playerid, params [ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        new
            giveplayerid,
            Float:Kords[3];
        if ( sscanf( params, "u", giveplayerid ) )
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /gethere [þaidëjo id]");
        if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
        if(IsPlayerNPC(giveplayerid)) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite uþdaryti ðio veikëjo, kadangi tai serverio dirbtinis þaidëjas (BOT)");
        GetPlayerPos(playerid,Kords[0],Kords[1],Kords[2]);
        if(!IsPlayerInAnyVehicle(giveplayerid))
        {
            SetPlayerPos(giveplayerid,Kords[0],Kords[1]+2,Kords[2]);
            SetPlayerInterior(giveplayerid,GetPlayerInterior(playerid));
            SetPlayerVirtualWorld(giveplayerid,GetPlayerVirtualWorld(playerid));
        }
        else
        {
            SetVehiclePos(GetPlayerVehicleID(giveplayerid),Kords[0],Kords[1]+2,Kords[2]);
            SetVehicleVirtualWorld( GetPlayerVehicleID(giveplayerid), GetPlayerVirtualWorld(playerid) );
        }
        SendClientMessage(giveplayerid,GRAD,"Jûs buvote nuteleportuotas ðalia administratoriaus.");
    }
    return 1;
}
CMD:adminduty( playerid, params [ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
        cmd_aduty(playerid, "");
    return 1;
}
CMD:aduty( playerid, params [ ] )
{
    new string[ 256 ];

    static DutyStartTimestamp[ MAX_PLAYERS ];
    if(pInfo[ playerid ][ pAdmin ] >= 1)
    {
        if(AdminDuty[playerid] == false)
        {
            AdminDuty[playerid] = true;
            DutyStartTimestamp[ playerid ] = gettime();
            SetPlayerHealth(playerid, 999);
            SetPlayerArmour(playerid, 999);
            AdminON[playerid] = Create3DTextLabel("BUDINTIS\nAdministratorius\nAð galiu padëti.",COLOR_GREEN,0.0,0.0,0.7,20.0, 0 );
            Attach3DTextLabelToPlayer(AdminON[playerid], playerid, 0.0, 0.0, 0.7);
            format(string, sizeof(string), "AdmWarn: [ID:%d]%s ásijungë budinèio Administratoriaus statusà.", playerid,GetName(playerid));
            SendAdminMessage(COLOR_ADM,string);
            SetPlayerColor( playerid, TEAM_ADMIN_COLOR );
            SetPlayerAttachedObject( playerid, 3, 19270, 4, -0.018133, -0.025358, 0.0, 0.0, 259.281860, 0.0, 1.0, 1.0, 1.0 );
        }
        else if(AdminDuty[playerid] == true)
        {
            Delete3DTextLabel(AdminON[playerid]);
            AdminDuty[playerid] = false;
            SetPlayerArmour(playerid, 0);
            SetPlayerHealth(playerid, 100);
            format(string, sizeof(string), "AdmWarn: [ID:%d]%s iðjungë budinèio Administratoriaus statusà.", playerid, GetName(playerid));
            SendAdminMessage(COLOR_ADM,string);
            SetPlayerColor(playerid, TEAM_HIT_COLOR);
            RemovePlayerAttachedObject(playerid, 3);

            mysql_format(DbHandle, string, sizeof(string), "SELECT longest_watch FROM admin_watch_duty WHERE admin_id = %d",
                GetPlayerSqlId(playerid));
            new Cache:result = mysql_query(DbHandle, string);

            new duration = gettime() - DutyStartTimestamp[ playerid ];
            if(cache_get_row_count())
            {
                mysql_format(DbHandle, string, sizeof(string), "UPDATE admin_watch_duty SET total_watch_time = total_watch_time + %d",
                    duration);

                if(cache_get_field_content_int(0, "longest_watch") < duration)
                    mysql_format(DbHandle, string, sizeof(string),"%s, longest_watch = %d ", 
                        string, duration);

                mysql_format(DbHandle, string, sizeof(string), "%s WHERE admin_id = %d", string, GetPlayerSqlId(playerid));
            }
            else 
                mysql_format(DbHandle, string, sizeof(string), "INSERT INTO admin_watch_duty (admin_id, first_watch, last_watch, longest_watch, total_watch_time) \
                    VALUES (%d, %d, %d, %d, %d)",
                    GetPlayerSqlId(playerid), DutyStartTimestamp[ playerid ], DutyStartTimestamp[ playerid ], duration, duration);

            cache_delete(result);
            mysql_pquery(DbHandle, string);
        }
    }
    return 1;
}
CMD:setskin( playerid, params [ ] )
{
    new
        giveplayerid,
        skinas,
        string[ 126 ];
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        if ( sscanf( params, "ud", giveplayerid, skinas ) )
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /setskin [þaidëjoID][skino id]");
        if( !IsPlayerConnected( giveplayerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
        if ( IsPlayerNPC( giveplayerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /setskin [þaidëjoID][skino id]");
        if ( skinas < 1 || skinas > 299 || skinas == 149 || skinas == 86) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: neteisingai nurodytas iðvaizdos ID.");
        SetPlayerSkin   ( giveplayerid, skinas );
        pInfo[ giveplayerid ][ pSkin ] = skinas;
        format          ( string, 126, "AdmWarn: Administratorius (%s) pakeitë veikëjui (%s) iðvaizdà (ID %d)",GetName(playerid), GetName(giveplayerid), skinas);
        SendAdminMessage( COLOR_ADM, string);
        return 1;
    }
    return 1;
}
CMD:slap( playerid, params [ ] )
{
    new
        giveplayerid,
        string[ 126 ],
        Float:Kords[ 3 ];
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        if ( sscanf( params, "u", giveplayerid ) )
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /slap [þaidëjoID]");
        if(!IsPlayerConnected( giveplayerid )) return SendClientMessage( playerid, GRAD," {FF6347}Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
        if(IsPlayerNPC(giveplayerid)) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite uþdaryti ðio veikëjo, kadangi tai serverio dirbtinis þaidëjas (BOT)");
        GetPlayerPos    ( giveplayerid, Kords[ 0 ], Kords[ 1 ], Kords[ 2 ] );
        new Float: HP;
        GetPlayerHealth ( giveplayerid, HP );
        format          ( string, sizeof(string), "AdmWarn: Administratorius (%s) panaudojo komandà (/slap) veikëjui (%s)",GetName(playerid), GetName( giveplayerid ) );
        SendAdminMessage( COLOR_ADM, string );
        SetPlayerPos    ( giveplayerid, Kords[ 0 ], Kords[ 1 ], Kords[ 2 ] + 5 );
        SetPlayerHealth ( giveplayerid, HP - 5 );
        PlayerPlaySound ( giveplayerid, 1130, Kords[ 0 ], Kords[ 1 ], Kords[ 2 ] + 5);
        return 1;
    }
    return 1;
}
CMD:freeze( playerid, params [ ] )
{
    new
        giveplayerid,
        string[ 126 ];
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        if ( sscanf( params, "u", giveplayerid ) )
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /freeze [þaidëjoID]");
        if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid,GRAD," {FF6347}Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
        if( !Freezed[giveplayerid] )
        {
            ShowInfoText(giveplayerid,"~w~ UZSALDYTAS",1000);
            TogglePlayerControllable(giveplayerid, false);
            Freezed[giveplayerid] = true;
            format(string,sizeof(string),"AdmWarn: Administratorius (%s) uþðaldë (/freeze) veikëjà (%s)",GetName(playerid),GetName(giveplayerid));
            SendAdminMessage(COLOR_ADM,string);
        }
        else
        {
            ShowInfoText(giveplayerid,"~w~ ATSALDYTAS",1000);
            TogglePlayerControllable(giveplayerid, true);
            Freezed[giveplayerid] = false;
            format(string,sizeof(string),"AdmWarn: Administratorius (%s) atðaldë (/unfreeze) veikëjà (%s)",GetName(playerid),GetName(giveplayerid));
            SendAdminMessage(COLOR_ADM,string);
        }
    }
    return 1;
}
CMD:noooc( playerid, params [ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        if(OOCDisabled == true)
        {
            OOCDisabled = false;
            SendClientMessageToAll(COLOR_LIGHTRED,"AdmCmd serverio Administratorius áðjungë globalø OOC kanalà - /o");
        }
        else if(OOCDisabled == false)
        {
            OOCDisabled = true;
            SendClientMessageToAll(COLOR_LIGHTRED,"AdmCmd serverio Administratorius ájungë globalø OOC kanalà - /o");
        }
    }
    return 1;
}
CMD:kickall( playerid, params [ ] )
{
    new
        gMessage[ 64 ],
        string[ 216 ];

    if ( pInfo[ playerid ][ pAdmin ] >= 3 )
    {
        if ( sscanf( params, "s[64]", gMessage ) )
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /kickall [preiþastis]");
        foreach(Player,i)
        {
            if( i != playerid && !IsPlayerNPC(i) )
                SetTimerEx("KicknPlayer", 100, false, "d", i );
        }
        format( string, 216, "AdmCmd %s iðmetë visus þaidëjus ið serverio, priëþastis: %s", GetName( playerid ), gMessage);
        SendClientMessageToAll( COLOR_LIGHTRED, string);
        return 1;
    }
    return 1;
}
CMD:kick( playerid, params [ ] )
{
    new
        giveplayerid,
        gMessage[ 64 ];
        
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        if ( sscanf( params, "us[64]", giveplayerid, gMessage ) )
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /kick [þaidëjo id][preiþastis]");
        if(IsPlayerNPC(giveplayerid)) 
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite uþdaryti ðio veikëjo, kadangi tai serverio dirbtinis þaidëjas (BOT)");
        if(!IsPlayerConnected(giveplayerid))    
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
        if (strfind(gMessage, "'", true ) != -1) 
            return 1;
        mysql_real_escape_string(gMessage,gMessage);
        KickPlayer( GetName(playerid), giveplayerid, gMessage );
        return 1;
    }
    return 1;
}
CMD:ban( playerid, params [ ] )
{
    new
        giveplayerid,
        gMessage[ 64 ];
        
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        if ( sscanf( params, "us[64]", giveplayerid, gMessage ) )
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /ban [þaidëjo id][preiþastis]");
        if(IsPlayerNPC(giveplayerid)) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite uþdaryti ðio veikëjo, kadangi tai serverio dirbtinis þaidëjas (BOT)");
        if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid,GRAD,"þaidëjas norimu ID neprisijungæs!");
        if ( strfind( gMessage, "'", true ) != -1 ) return 1;
        mysql_real_escape_string(gMessage,gMessage);
        BanPlayer(GetName(playerid),giveplayerid,gMessage);
        return 1;
    }
    return 1;
}
CMD:jail( playerid, params [ ] )
{
    new
        giveplayerid,
        time,
        gMessage[ 128 ];
        
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        if ( sscanf( params, "uds[128]", giveplayerid, time, gMessage ) )
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /jail [þaidëjo id][minutës][prieþastis]");
        if(IsPlayerNPC(giveplayerid)) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite uþdaryti ðio veikëjo, kadangi tai serverio dirbtinis þaidëjas (BOT)");
        if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid,GRAD,"þaidëjas norimu ID neprisijungæs!");
        if( time > 9999 ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Nejailink þmogaus daugiau nei 9999.");
        if ( strfind( gMessage, "'", true ) != -1 ) return 1;
        mysql_real_escape_string(gMessage,gMessage);
        Jail( GetName(playerid), giveplayerid, time, gMessage );
        return 1;
    }
    return 1;
}
CMD:warn( playerid, params [ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        new giveplayerid,
            string[ 256 ],
            reason[ 256 ];

        if ( sscanf( params, "ds[256]", giveplayerid, reason ) )
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /warn [þaidëjo id][prieþastis]");
        if ( strfind( reason, "'", true ) != -1 ) return 1;
        format(string, sizeof(string), "Administratorius %s áspëjo þaidëja %s, prieþastis: %s", GetName( playerid ), GetName(giveplayerid),reason);
        SendClientMessageToAll(COLOR_LIGHTRED, string);
        mysql_real_escape_string( reason, reason );

        pInfo[giveplayerid][pWarn] ++;
        
        format(string,sizeof(string), "INSERT INTO `nuobaudos` (Kas, Ka, Kam, Priezastis) VALUES('%d', 'áspëjo', '%d', '%s')", pInfo[ playerid ][ pMySQLID ], pInfo[ giveplayerid ][ pMySQLID ], reason);
        mysql_query(DbHandle, string, false);
        
        format( string,sizeof(string), "INSERT INTO warns (id,admin,reason) VALUES (%d,'%s','%s')", pInfo[ giveplayerid ][ pMySQLID ], GetName( playerid ), reason );
        mysql_query(DbHandle,  string, false);

        if(pInfo[giveplayerid][pWarn] >= 3)
        {
            pInfo[ giveplayerid ][ pWarn ] = 0;
            BanPlayer("áspëjimø sistema",giveplayerid,"3 áspëjimai");
        }
    }
    return 1;
}
CMD:whipe( playerid, params [ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 5 )
    {
        new
            reason[ 256 ],
            reason2[ 256 ],
            string[ 256 ],
            string2[ 256 ],
            inv[ 256 ],
            inv2[ MAX_HOUSETRUNK_SLOTS ][ 2 ],
            idx,
            id,
            id2;

        reason2 = strtok(params, idx);
        if (!reason2[0])
            SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /whipe [tipas]");
        else
        {
            if(!strcmp(reason2,"guns",true))
            {
                new Cache:result = mysql_query(DbHandle,  "SELECT `id`, `cTrunk` FROM `vehicles`" );
                
                for(new i = 0; i < cache_get_row_count(); i++)
                {
                    format(string2, 256, "");
                    id = cache_get_field_content_int(i, "id");
                    cache_get_field_content(i, "cTrunk", inv);

                    sscanf( inv, "p</>dddddddddddddddddddddddd",
                        inv2[ 0 ][ 0 ],
                        inv2[ 0 ][ 1 ],
                        inv2[ 1 ][ 0 ],
                        inv2[ 1 ][ 1 ],
                        inv2[ 2 ][ 0 ],
                        inv2[ 2 ][ 1 ],
                        inv2[ 3 ][ 0 ],
                        inv2[ 3 ][ 1 ],
                        inv2[ 4 ][ 0 ],
                        inv2[ 4 ][ 1 ],
                        inv2[ 5 ][ 0 ],
                        inv2[ 5 ][ 1 ],
                        inv2[ 6 ][ 0 ],
                        inv2[ 6 ][ 1 ],
                        inv2[ 7 ][ 0 ],
                        inv2[ 7 ][ 1 ],
                        inv2[ 8 ][ 0 ],
                        inv2[ 8 ][ 1 ],
                        inv2[ 9 ][ 0 ],
                        inv2[ 9 ][ 1 ],
                        inv2[ 10 ][ 0 ],
                        inv2[ 10 ][ 1 ],
                        inv2[ 11 ][ 0 ],
                        inv2[ 11 ][ 1 ]);
                    for(new k = 0; k < MAX_TRUNK_SLOTS; k++)
                    {
                        if( inv2[ k ][ 0 ] < 51 )
                            format(string2, 256, "%s0/0/", string2);
                        else
                            format(string2, 256, "%s%d/%d/", string2, inv2[ k ][ 0 ], inv2[ k ][ 1 ]);
                    }
                    format( reason, 256, "UPDATE `vehicles` SET `cTrunk` = '%s' WHERE `id` = %d", string2, id );
                    mysql_query(DbHandle,  reason, false);
                }
                format(string, 256, "");
                format(string2, 256, "");
                format(reason, 256, "");
                format(inv, 256, "");
                cache_delete(result);

                result = mysql_query(DbHandle,  "SELECT `hID`, `Inventory` FROM `houses`" );
                for(new j = 0; j < cache_get_row_count(); j++)
                {
                    format(string2, 256, "");
                    id = cache_get_field_content_int(j, "hID");
                    cache_get_field_content(j, "Inventory", inv);
                    sscanf( inv, "p</>dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd",
                        inv2[ 0 ][ 0 ],
                        inv2[ 0 ][ 1 ],
                        inv2[ 1 ][ 0 ],
                        inv2[ 1 ][ 1 ],
                        inv2[ 2 ][ 0 ],
                        inv2[ 2 ][ 1 ],
                        inv2[ 3 ][ 0 ],
                        inv2[ 3 ][ 1 ],
                        inv2[ 4 ][ 0 ],
                        inv2[ 4 ][ 1 ],
                        inv2[ 5 ][ 0 ],
                        inv2[ 5 ][ 1 ],
                        inv2[ 6 ][ 0 ],
                        inv2[ 6 ][ 1 ],
                        inv2[ 7 ][ 0 ],
                        inv2[ 7 ][ 1 ],
                        inv2[ 8 ][ 0 ],
                        inv2[ 8 ][ 1 ],
                        inv2[ 9 ][ 0 ],
                        inv2[ 9 ][ 1 ],
                        inv2[ 10 ][ 0 ],
                        inv2[ 10 ][ 1 ],
                        inv2[ 11 ][ 0 ],
                        inv2[ 11 ][ 1 ],
                        inv2[ 12 ][ 0 ],
                        inv2[ 12 ][ 1 ],
                        inv2[ 13 ][ 0 ],
                        inv2[ 13 ][ 1 ],
                        inv2[ 14 ][ 0 ],
                        inv2[ 14 ][ 1 ],
                        inv2[ 15 ][ 0 ],
                        inv2[ 15 ][ 1 ],
                        inv2[ 16 ][ 0 ],
                        inv2[ 16 ][ 1 ],
                        inv2[ 17 ][ 0 ],
                        inv2[ 17 ][ 1 ],
                        inv2[ 18 ][ 0 ],
                        inv2[ 18 ][ 1 ],
                        inv2[ 19 ][ 0 ],
                        inv2[ 19 ][ 1 ],
                        inv2[ 20 ][ 0 ],
                        inv2[ 20 ][ 1 ],
                        inv2[ 21 ][ 0 ],
                        inv2[ 21 ][ 1 ],
                        inv2[ 22 ][ 0 ],
                        inv2[ 22 ][ 1 ],
                        inv2[ 23 ][ 0 ],
                        inv2[ 23 ][ 1 ],
                        inv2[ 24 ][ 0 ],
                        inv2[ 24 ][ 1 ],
                        inv2[ 25 ][ 0 ],
                        inv2[ 25 ][ 1 ],
                        inv2[ 26 ][ 0 ],
                        inv2[ 26 ][ 1 ],
                        inv2[ 27 ][ 0 ],
                        inv2[ 27 ][ 1 ],
                        inv2[ 28 ][ 0 ],
                        inv2[ 28 ][ 1 ],
                        inv2[ 29 ][ 0 ],
                        inv2[ 29 ][ 1 ]);
                    for(new i = 0; i < MAX_HOUSETRUNK_SLOTS; i++)
                    {
                        if( inv2[ i ][ 0 ] < 51 )
                            format(string2, 256, "%s0/0/", string2);
                        else
                            format(string2, 256, "%s%d/%d/", string2, inv2[ i ][ 0 ], inv2[ i ][ 1 ]);
                    }
                    format( reason, 256, "UPDATE `houses` SET `Inventory` = '%s' WHERE `hID` = %d", string2, id );
                    mysql_query(DbHandle,  reason, false);
                }
                cache_delete(result);

                format(string, 256, "");
                format(string2, 256, "");
                format(reason, 256, "");
                format(inv, 256, "");

                result = mysql_query(DbHandle,  "SELECT `id`, `Inventory` FROM `garazai`" );
                
                for(new j = 0; j < cache_get_row_count(); j++)
                {
                    format(string2, 256, "");
                    id = cache_get_field_content_int(j, "id");
                    cache_get_field_content(j, "Inventory", inv);

                    sscanf( inv, "p</>dddddddddddddddddddd",
                        inv2[ 0 ][ 0 ],
                        inv2[ 0 ][ 1 ],
                        inv2[ 1 ][ 0 ],
                        inv2[ 1 ][ 1 ],
                        inv2[ 2 ][ 0 ],
                        inv2[ 2 ][ 1 ],
                        inv2[ 3 ][ 0 ],
                        inv2[ 3 ][ 1 ],
                        inv2[ 4 ][ 0 ],
                        inv2[ 4 ][ 1 ],
                        inv2[ 5 ][ 0 ],
                        inv2[ 5 ][ 1 ],
                        inv2[ 6 ][ 0 ],
                        inv2[ 6 ][ 1 ],
                        inv2[ 7 ][ 0 ],
                        inv2[ 7 ][ 1 ],
                        inv2[ 8 ][ 0 ],
                        inv2[ 8 ][ 1 ],
                        inv2[ 9 ][ 0 ],
                        inv2[ 9 ][ 1 ]);
                    for(new i = 0; i < MAX_GARAGETRUNK_SLOTS; i++)
                    {
                        if( inv2[ i ][ 0 ] < 51 )
                            format(string2, 256, "%s0/0/", string2);
                        else
                            format(string2, 256, "%s%d/%d/", string2, inv2[ i ][ 0 ], inv2[ i ][ 1 ]);
                    }
                    format( reason, 256, "UPDATE `garazai` SET `Inventory` = '%s' WHERE `id` = %d", string2, id );
                    mysql_query(DbHandle,  reason, false);
                }
                format(string, 256, "");
                format(string2, 256, "");
                format(reason, 256, "");
                format(inv, 256, "");
                cache_delete(result);

                mysql_pquery(DbHandle,  "DELETE FROM `AC`" );
                mysql_pquery(DbHandle,  "UPDATE `players` SET `Weapons` = '0/0/0/0/0/0/0/0/'" );

                result = mysql_query(DbHandle,  "SELECT `id`, `Inventory` FROM `players`" );
                for(new j = 0; j < cache_get_row_count(); j++)
                {
                    format(string2, 256, "");
                    id = cache_get_field_content_int(j, "id");
                    cache_get_field_content(j, "Inventory", inv);
                    sscanf( inv, "p</>dddddddddddd",
                        inv2[ 0 ][ 0 ],
                        inv2[ 0 ][ 1 ],
                        inv2[ 1 ][ 0 ],
                        inv2[ 1 ][ 1 ],
                        inv2[ 2 ][ 0 ],
                        inv2[ 2 ][ 1 ],
                        inv2[ 3 ][ 0 ],
                        inv2[ 3 ][ 1 ],
                        inv2[ 4 ][ 0 ],
                        inv2[ 4 ][ 1 ],
                        inv2[ 5 ][ 0 ],
                        inv2[ 5 ][ 1 ]);
                    for(new i = 0; i < INVENTORY_SLOTS; i++)
                    {
                        if( inv2[ i ][ 0 ] < 51 )
                            format(string2, 256, "%s0/0/", string2);
                        else
                            format(string2, 256, "%s%d/%d/", string2, inv2[ i ][ 0 ], inv2[ i ][ 1 ]);
                    }
                    format( reason, 256, "UPDATE `players` SET `Inventory` = '%s' WHERE `id` = %d", string2, id );
                    mysql_query(DbHandle,  reason, false);
                }
                cache_delete(result);
                SendClientMessage(playerid,GRAD,"Ginklø whipe atliktas");
            }
            else if(!strcmp(reason2,"items",true))
            {
                reason2 = strtok( params, idx );
                id2 = strval( reason2 );
                if ( id2 > 211 || id2 < 1 )      return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: blogas daikto ID..");
                new Cache:result = mysql_query(DbHandle,  "SELECT `id`, `cTrunk` FROM `vehicles`" );
                
                for(new j = 0; j < cache_get_row_count(); j++)
                {
                    format(string2, 256, "");
                    id = cache_get_field_content_int(j, "id");
                    cache_get_field_content(j, "cTrunk", inv);
                    sscanf( inv, "p</>dddddddddddddddddddddddd",
                        inv2[ 0 ][ 0 ],
                        inv2[ 0 ][ 1 ],
                        inv2[ 1 ][ 0 ],
                        inv2[ 1 ][ 1 ],
                        inv2[ 2 ][ 0 ],
                        inv2[ 2 ][ 1 ],
                        inv2[ 3 ][ 0 ],
                        inv2[ 3 ][ 1 ],
                        inv2[ 4 ][ 0 ],
                        inv2[ 4 ][ 1 ],
                        inv2[ 5 ][ 0 ],
                        inv2[ 5 ][ 1 ],
                        inv2[ 6 ][ 0 ],
                        inv2[ 6 ][ 1 ],
                        inv2[ 7 ][ 0 ],
                        inv2[ 7 ][ 1 ],
                        inv2[ 8 ][ 0 ],
                        inv2[ 8 ][ 1 ],
                        inv2[ 9 ][ 0 ],
                        inv2[ 9 ][ 1 ],
                        inv2[ 10 ][ 0 ],
                        inv2[ 10 ][ 1 ],
                        inv2[ 11 ][ 0 ],
                        inv2[ 11 ][ 1 ]);
                    for(new i = 0; i < MAX_TRUNK_SLOTS; i++)
                    {
                        if( inv2[ i ][ 0 ] == id2 )
                            format(string2, 256, "%s0/0/", string2);
                        else
                            format(string2, 256, "%s%d/%d/", string2, inv2[ i ][ 0 ], inv2[ i ][ 1 ]);
                    }
                    format( reason, 256, "UPDATE `vehicles` SET `cTrunk` = '%s' WHERE `id` = %d", string2, id );
                    mysql_query(DbHandle,  reason, false);
                }
                format(string, 256, "");
                format(string2, 256, "");
                format(reason, 256, "");
                format(inv, 256, "");
                cache_delete(result);

                result = mysql_query(DbHandle,  "SELECT `id`, `Inventory` FROM `garazai`" );
                for(new j = 0; j < cache_get_row_count(); j++)
                {
                    format(string2, 256, "");
                    id = cache_get_field_content_int(j, "id");
                    cache_get_field_content(j, "Inventory", inv);
                    sscanf( inv, "p</>dddddddddddddddddddd",
                        inv2[ 0 ][ 0 ],
                        inv2[ 0 ][ 1 ],
                        inv2[ 1 ][ 0 ],
                        inv2[ 1 ][ 1 ],
                        inv2[ 2 ][ 0 ],
                        inv2[ 2 ][ 1 ],
                        inv2[ 3 ][ 0 ],
                        inv2[ 3 ][ 1 ],
                        inv2[ 4 ][ 0 ],
                        inv2[ 4 ][ 1 ],
                        inv2[ 5 ][ 0 ],
                        inv2[ 5 ][ 1 ],
                        inv2[ 6 ][ 0 ],
                        inv2[ 6 ][ 1 ],
                        inv2[ 7 ][ 0 ],
                        inv2[ 7 ][ 1 ],
                        inv2[ 8 ][ 0 ],
                        inv2[ 8 ][ 1 ],
                        inv2[ 9 ][ 0 ],
                        inv2[ 9 ][ 1 ]);
                    for(new i = 0; i < MAX_GARAGETRUNK_SLOTS; i++)
                    {
                        if( inv2[ i ][ 0 ] == id2 )
                            format(string2, 256, "%s0/0/", string2);
                        else
                            format(string2, 256, "%s%d/%d/", string2, inv2[ i ][ 0 ], inv2[ i ][ 1 ]);
                    }
                    format( reason, 256, "UPDATE `garazai` SET `Inventory` = '%s' WHERE `id` = %d", string2, id );
                    mysql_query(DbHandle,  reason, false);
                }
                format(string, 256, "");
                format(string2, 256, "");
                format(reason, 256, "");
                format(inv, 256, "");
                cache_delete(result);
                format(string, 256, "DELETE FROM `AC` WHERE `WeaponID` = %d", id2);
                mysql_query(DbHandle,  string, false);
                format(string, 256, "");
                result = mysql_query(DbHandle,  "SELECT `hID`, `Inventory` FROM `houses`" );
                for(new j = 0; j < cache_get_row_count(); j++)
                {
                    format(string2, 256, "");
                    id = cache_get_field_content_int(j, "hID");
                    cache_get_field_content(j, "Inventory", inv);
                    sscanf( inv, "p</>dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd",
                        inv2[ 0 ][ 0 ],
                        inv2[ 0 ][ 1 ],
                        inv2[ 1 ][ 0 ],
                        inv2[ 1 ][ 1 ],
                        inv2[ 2 ][ 0 ],
                        inv2[ 2 ][ 1 ],
                        inv2[ 3 ][ 0 ],
                        inv2[ 3 ][ 1 ],
                        inv2[ 4 ][ 0 ],
                        inv2[ 4 ][ 1 ],
                        inv2[ 5 ][ 0 ],
                        inv2[ 5 ][ 1 ],
                        inv2[ 6 ][ 0 ],
                        inv2[ 6 ][ 1 ],
                        inv2[ 7 ][ 0 ],
                        inv2[ 7 ][ 1 ],
                        inv2[ 8 ][ 0 ],
                        inv2[ 8 ][ 1 ],
                        inv2[ 9 ][ 0 ],
                        inv2[ 9 ][ 1 ],
                        inv2[ 10 ][ 0 ],
                        inv2[ 10 ][ 1 ],
                        inv2[ 11 ][ 0 ],
                        inv2[ 11 ][ 1 ],
                        inv2[ 12 ][ 0 ],
                        inv2[ 12 ][ 1 ],
                        inv2[ 13 ][ 0 ],
                        inv2[ 13 ][ 1 ],
                        inv2[ 14 ][ 0 ],
                        inv2[ 14 ][ 1 ],
                        inv2[ 15 ][ 0 ],
                        inv2[ 15 ][ 1 ],
                        inv2[ 16 ][ 0 ],
                        inv2[ 16 ][ 1 ],
                        inv2[ 17 ][ 0 ],
                        inv2[ 17 ][ 1 ],
                        inv2[ 18 ][ 0 ],
                        inv2[ 18 ][ 1 ],
                        inv2[ 19 ][ 0 ],
                        inv2[ 19 ][ 1 ],
                        inv2[ 20 ][ 0 ],
                        inv2[ 20 ][ 1 ],
                        inv2[ 21 ][ 0 ],
                        inv2[ 21 ][ 1 ],
                        inv2[ 22 ][ 0 ],
                        inv2[ 22 ][ 1 ],
                        inv2[ 23 ][ 0 ],
                        inv2[ 23 ][ 1 ],
                        inv2[ 24 ][ 0 ],
                        inv2[ 24 ][ 1 ],
                        inv2[ 25 ][ 0 ],
                        inv2[ 25 ][ 1 ],
                        inv2[ 26 ][ 0 ],
                        inv2[ 26 ][ 1 ],
                        inv2[ 27 ][ 0 ],
                        inv2[ 27 ][ 1 ],
                        inv2[ 28 ][ 0 ],
                        inv2[ 28 ][ 1 ],
                        inv2[ 29 ][ 0 ],
                        inv2[ 29 ][ 1 ]);
                    for(new i = 0; i < MAX_HOUSETRUNK_SLOTS; i++)
                    {
                        if( inv2[ i ][ 0 ] == id2 )
                            format(string2, 256, "%s0/0/", string2);
                        else
                            format(string2, 256, "%s%d/%d/", string2, inv2[ i ][ 0 ], inv2[ i ][ 1 ]);
                    }
                    format( reason, 256, "UPDATE `houses` SET `Inventory` = '%s' WHERE `hID` = %d", string2, id );
                    mysql_query(DbHandle,  reason, false);
                }
                format(string, 256, "");
                format(string2, 256, "");
                format(reason, 256, "");
                format(inv, 256, "");
                cache_delete(result);

                result = mysql_query(DbHandle,  "SELECT `id`, `Inventory` FROM `players`" );
                for(new j = 0; j < cache_get_row_count() ;j++)
                {
                    format(string2, 256, "");
                    id = cache_get_field_content_int(j, "id");
                    cache_get_field_content(j, "Inventory", inv);
                    sscanf( inv, "p</>dddddddddddd",
                        inv2[ 0 ][ 0 ],
                        inv2[ 0 ][ 1 ],
                        inv2[ 1 ][ 0 ],
                        inv2[ 1 ][ 1 ],
                        inv2[ 2 ][ 0 ],
                        inv2[ 2 ][ 1 ],
                        inv2[ 3 ][ 0 ],
                        inv2[ 3 ][ 1 ],
                        inv2[ 4 ][ 0 ],
                        inv2[ 4 ][ 1 ],
                        inv2[ 5 ][ 0 ],
                        inv2[ 5 ][ 1 ]);
                    for(new i = 0; i < INVENTORY_SLOTS; i++)
                    {
                        if( inv2[ i ][ 0 ] == id2 )
                            format(string2, 256, "%s0/0/", string2);
                        else
                            format(string2, 256, "%s%d/%d/", string2, inv2[ i ][ 0 ], inv2[ i ][ 1 ]);
                    }
                    format( reason, 256, "UPDATE `players` SET `Inventory` = '%s' WHERE `id` = %d", string2, id );
                    mysql_query(DbHandle,  reason, false);
                }
                format(string, 256, "");
                format(string2, 256, "");
                format(reason, 256, "");
                format(inv, 256, "");
                cache_delete(result);

                result = mysql_query(DbHandle,  "SELECT `id`, `Weapons` FROM `players`" );
                
                for(new j = 0; j < cache_get_row_count(); j++)
                {
                    format(string2, 256, "");
                    id = cache_get_field_content_int(j, "id");
                    cache_get_field_content(j, "Weapons", inv);
                    sscanf( inv, "p</>dddd",
                        inv2[ 0 ][ 0 ],
                        inv2[ 0 ][ 1 ],
                        inv2[ 1 ][ 0 ],
                        inv2[ 1 ][ 1 ]);
                    for(new i = 0; i < MAX_SAVED_WEAPONS; i++)
                    {
                        if( inv2[ i ][ 0 ] == id2 )
                            format(string2, 256, "%s0/0/", string2);
                        else
                            format(string2, 256, "%s%d/%d/", string2, inv2[ i ][ 0 ], inv2[ i ][ 1 ]);
                    }
                    format( reason, 256, "UPDATE `players` SET `Weapons` = '%s' WHERE `id` = %d", string2, id );
                    mysql_query(DbHandle,  reason, false);
                }
                cache_delete(result);
                SendClientMessage(playerid,GRAD,"Daikto whipe atliktas");
            }
            else
                SendClientMessage(playerid,COLOR_RED,"Blogas tipas");
        }
    }
    return 1;
}

CMD:serverguns( playerid, params [ ] )
{
    if( pInfo[ playerid ][ pAdmin ] >= 3 )
    {
        #pragma unused params
        new
            string[ 256 ],
            inv[ 256 ],
            inv2[ MAX_HOUSETRUNK_SLOTS ][ 2 ],
            inv3[ 47 ],
            id, Cache:result;

        result = mysql_query(DbHandle,  "SELECT `cModel`,`cTrunk` FROM `vehicles`" );
        
        for(new j = 0; j < cache_get_row_count(); j++)
        {
            id = cache_get_field_content_int(j, "cModel");
            cache_get_field_content(j, "cTrunk", inv);
            sscanf( inv, "p</>dddddddddddddddddddddddd",
                inv2[ 0 ][ 0 ],
                inv2[ 0 ][ 1 ],
                inv2[ 1 ][ 0 ],
                inv2[ 1 ][ 1 ],
                inv2[ 2 ][ 0 ],
                inv2[ 2 ][ 1 ],
                inv2[ 3 ][ 0 ],
                inv2[ 3 ][ 1 ],
                inv2[ 4 ][ 0 ],
                inv2[ 4 ][ 1 ],
                inv2[ 5 ][ 0 ],
                inv2[ 5 ][ 1 ],
                inv2[ 6 ][ 0 ],
                inv2[ 6 ][ 1 ],
                inv2[ 7 ][ 0 ],
                inv2[ 7 ][ 1 ],
                inv2[ 8 ][ 0 ],
                inv2[ 8 ][ 1 ],
                inv2[ 9 ][ 0 ],
                inv2[ 9 ][ 1 ],
                inv2[ 10 ][ 0 ],
                inv2[ 10 ][ 1 ],
                inv2[ 11 ][ 0 ],
                inv2[ 11 ][ 1 ]);
            for(new i = 0; i < GetVehicleTrunkSlots( id ); i++)
            {
                if( inv2[ i ][ 0 ] < 51 && inv2[ i ][ 0 ] > 0 )
                    inv3[ inv2[ i ][ 0 ] ]++;
            }
        }
        cache_delete(result);

        result = mysql_query(DbHandle,  "SELECT `id`, `Inventory` FROM `garazai`" );
        
        for(new j = 0; j < cache_get_row_count(); j++)
        {
            id = cache_get_field_content_int(j, "id");
            cache_get_field_content(j, "Inventory", inv);
            sscanf( inv, "p</>dddddddddddddddddddd",
                inv2[ 0 ][ 0 ],
                inv2[ 0 ][ 1 ],
                inv2[ 1 ][ 0 ],
                inv2[ 1 ][ 1 ],
                inv2[ 2 ][ 0 ],
                inv2[ 2 ][ 1 ],
                inv2[ 3 ][ 0 ],
                inv2[ 3 ][ 1 ],
                inv2[ 4 ][ 0 ],
                inv2[ 4 ][ 1 ],
                inv2[ 5 ][ 0 ],
                inv2[ 5 ][ 1 ],
                inv2[ 6 ][ 0 ],
                inv2[ 6 ][ 1 ],
                inv2[ 7 ][ 0 ],
                inv2[ 7 ][ 1 ],
                inv2[ 8 ][ 0 ],
                inv2[ 8 ][ 1 ],
                inv2[ 9 ][ 0 ],
                inv2[ 9 ][ 1 ]);
            for(new i = 0; i < MAX_GARAGETRUNK_SLOTS; i++)
            {
                if( inv2[ i ][ 0 ] < 51 && inv2[ i ][ 0 ] > 0 )
                    inv3[ inv2[ i ][ 0 ] ]++;
            }
        }
        cache_delete(result);

        result = mysql_query(DbHandle,  "SELECT `Inventory` FROM `houses`" );
        
        for(new j = 0; j < cache_get_row_count(); j++)
        {
            cache_get_row(j, 0, inv);
            sscanf( inv, "p</>dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd",
                    inv2[ 0 ][ 0 ],
                    inv2[ 0 ][ 1 ],
                    inv2[ 1 ][ 0 ],
                    inv2[ 1 ][ 1 ],
                    inv2[ 2 ][ 0 ],
                    inv2[ 2 ][ 1 ],
                    inv2[ 3 ][ 0 ],
                    inv2[ 3 ][ 1 ],
                    inv2[ 4 ][ 0 ],
                    inv2[ 4 ][ 1 ],
                    inv2[ 5 ][ 0 ],
                    inv2[ 5 ][ 1 ],
                    inv2[ 6 ][ 0 ],
                    inv2[ 6 ][ 1 ],
                    inv2[ 7 ][ 0 ],
                    inv2[ 7 ][ 1 ],
                    inv2[ 8 ][ 0 ],
                    inv2[ 8 ][ 1 ],
                    inv2[ 9 ][ 0 ],
                    inv2[ 9 ][ 1 ],
                    inv2[ 10 ][ 0 ],
                    inv2[ 10 ][ 1 ],
                    inv2[ 11 ][ 0 ],
                    inv2[ 11 ][ 1 ],
                    inv2[ 12 ][ 0 ],
                    inv2[ 12 ][ 1 ],
                    inv2[ 13 ][ 0 ],
                    inv2[ 13 ][ 1 ],
                    inv2[ 14 ][ 0 ],
                    inv2[ 14 ][ 1 ],
                    inv2[ 15 ][ 0 ],
                    inv2[ 15 ][ 1 ],
                    inv2[ 16 ][ 0 ],
                    inv2[ 16 ][ 1 ],
                    inv2[ 17 ][ 0 ],
                    inv2[ 17 ][ 1 ],
                    inv2[ 18 ][ 0 ],
                    inv2[ 18 ][ 1 ],
                    inv2[ 19 ][ 0 ],
                    inv2[ 19 ][ 1 ],
                    inv2[ 20 ][ 0 ],
                    inv2[ 20 ][ 1 ],
                    inv2[ 21 ][ 0 ],
                    inv2[ 21 ][ 1 ],
                    inv2[ 22 ][ 0 ],
                    inv2[ 22 ][ 1 ],
                    inv2[ 23 ][ 0 ],
                    inv2[ 23 ][ 1 ],
                    inv2[ 24 ][ 0 ],
                    inv2[ 24 ][ 1 ],
                    inv2[ 25 ][ 0 ],
                    inv2[ 25 ][ 1 ],
                    inv2[ 26 ][ 0 ],
                    inv2[ 26 ][ 1 ],
                    inv2[ 27 ][ 0 ],
                    inv2[ 27 ][ 1 ],
                    inv2[ 28 ][ 0 ],
                    inv2[ 28 ][ 1 ],
                    inv2[ 29 ][ 0 ],
                    inv2[ 29 ][ 1 ]);
            for(new i = 0; i < MAX_HOUSETRUNK_SLOTS; i++)
            {
                if( inv2[ i ][ 0 ] < 51 && inv2[ i ][ 0 ] > 0 )
                    inv3[ inv2[ i ][ 0 ] ]++;
            }
        }
        cache_delete(result);

        result = mysql_query(DbHandle,  "SELECT `Inventory` FROM `players` WHERE `Member` != 2" );
        
        for(new j = 0; j < cache_get_row_count(); j++)
        {
            cache_get_field_content(j, "Inventory", inv);
            sscanf( inv, "p</>dddddddddddddddd",
                inv2[ 0 ][ 0 ],
                inv2[ 0 ][ 1 ],
                inv2[ 1 ][ 0 ],
                inv2[ 1 ][ 1 ],
                inv2[ 2 ][ 0 ],
                inv2[ 2 ][ 1 ],
                inv2[ 3 ][ 0 ],
                inv2[ 3 ][ 1 ],
                inv2[ 4 ][ 0 ],
                inv2[ 4 ][ 1 ],
                inv2[ 5 ][ 0 ],
                inv2[ 5 ][ 1 ],
                inv2[ 6 ][ 0 ],
                inv2[ 6 ][ 1 ],
                inv2[ 7 ][ 0 ],
                inv2[ 7 ][ 1 ]);
            for(new i = 0; i < INVENTORY_SLOTS; i++)
            {
                if( inv2[ i ][ 0 ] < 51 && inv2[ i ][ 0 ] > 0 )
                    inv3[ inv2[ i ][ 0 ] ]++;
            }
        }
        cache_delete(result);

        result = mysql_query(DbHandle,  "SELECT `Weapons` FROM `players` WHERE `Member` != 2" );
        
        for(new j = 0; j < cache_get_row_count(); j++)
        {
            cache_get_field_content(j, "Weapons", inv);
            sscanf( inv, "p</>dddddddd",
                inv2[ 0 ][ 0 ],
                inv2[ 0 ][ 1 ],
                inv2[ 1 ][ 0 ],
                inv2[ 1 ][ 1 ],
                inv2[ 2 ][ 0 ],
                inv2[ 2 ][ 1 ],
                inv2[ 3 ][ 0 ],
                inv2[ 3 ][ 1 ]);
            for(new i = 0; i < MAX_SAVED_WEAPONS; i++)
            {
                if( inv2[ i ][ 0 ] < 51 && inv2[ i ][ 0 ] > 0 )
                    inv3[ inv2[ i ][ 0 ] ]++;
            }
        }
        cache_delete(result);

        SendClientMessage( playerid, COLOR_GREEN2, "________________________Serverio ginklai________________________");
        new gunname[32];
        for(new i = 16; i < 44; i++)
        {
            if( inv3[ i ] > 0 )
            {
                GetWeaponName(i,gunname,sizeof(gunname));
                format(string, 256, "%s - %d", gunname, inv3[ i ]);
                SendClientMessage( playerid, COLOR_WHITE, string);
            }
        }
    }
    return 1;
}
CMD:checkgun( playerid, params [ ] )
{
    if( pInfo[ playerid ][ pAdmin ] >= 3 )
    {
        #pragma unused params
        new
            query[ 128 ],
            string[ 256 ],
            inv[ 256 ],
            inv2[ MAX_HOUSETRUNK_SLOTS ][ 2 ],
            name[ MAX_PLAYER_NAME+1 ],
            name2,
            inv3,
            id,
            id2;

        if ( sscanf( params, "d", id ) )
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /checkgun [ginklo ID]");

        if( id < 1 || id == 19 || id == 20 || id == 21 || id > 43 )
            return SendClientMessage( playerid, COLOR_WHITE, "Neleistinas ginklas ! ");
            
        new Cache:result = mysql_query(DbHandle,  "SELECT `cModel`,`id`,`cTrunk` FROM `vehicles`" );
        
        for(new j =0; j < cache_get_row_count(); j++)
        {
            new bool:found;
            id2 = cache_get_field_content_int(j, "cModel");
            name2 = cache_get_field_content_int(j, "id");
            cache_get_field_content(j, "cTrunk", inv);
            sscanf( inv, "p</>dddddddddddddddddddddddd",
                inv2[ 0 ][ 0 ],
                inv2[ 0 ][ 1 ],
                inv2[ 1 ][ 0 ],
                inv2[ 1 ][ 1 ],
                inv2[ 2 ][ 0 ],
                inv2[ 2 ][ 1 ],
                inv2[ 3 ][ 0 ],
                inv2[ 3 ][ 1 ],
                inv2[ 4 ][ 0 ],
                inv2[ 4 ][ 1 ],
                inv2[ 5 ][ 0 ],
                inv2[ 5 ][ 1 ],
                inv2[ 6 ][ 0 ],
                inv2[ 6 ][ 1 ],
                inv2[ 7 ][ 0 ],
                inv2[ 7 ][ 1 ],
                inv2[ 8 ][ 0 ],
                inv2[ 8 ][ 1 ],
                inv2[ 9 ][ 0 ],
                inv2[ 9 ][ 1 ],
                inv2[ 10 ][ 0 ],
                inv2[ 10 ][ 1 ],
                inv2[ 11 ][ 0 ],
                inv2[ 11 ][ 1 ]);
            for(new i = 0; i < GetVehicleTrunkSlots( id2 ); i++)
            {
                if( inv2[ i ][ 0 ] == id )
                {
                    found = true;
                    inv3++;
                }
            }
            if( found )
            {
                found = false;
                foreach(Vehicles,car)
                {
                    if( cInfo[ car ][ cID ] == name2 )
                    {
                        format(query, sizeof(query), "Ginklo savininko maðinos ID: %d", car );
                        SendClientMessage(playerid, COLOR_GREY, query);
                        found = true;
                        break;
                    }
                }
                if( !found )
                {
                    format(query, sizeof(query), "Ginklo savininko maðinos SQL ID: %d", name2 );
                    SendClientMessage(playerid, COLOR_GREY, query);
                }
            }
        }
        cache_delete(result);

        result = mysql_query(DbHandle,  "SELECT `hID`,`Inventory` FROM `houses`" );
        
        for(new j = 0; j <cache_get_row_count(); j++)
        {
            new bool:found;
            name2 = cache_get_field_content_int(j, "hID");
            cache_get_field_content(j, "Inventory", inv);

            sscanf( inv, "p</>dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd",
                    inv2[ 0 ][ 0 ],
                    inv2[ 0 ][ 1 ],
                    inv2[ 1 ][ 0 ],
                    inv2[ 1 ][ 1 ],
                    inv2[ 2 ][ 0 ],
                    inv2[ 2 ][ 1 ],
                    inv2[ 3 ][ 0 ],
                    inv2[ 3 ][ 1 ],
                    inv2[ 4 ][ 0 ],
                    inv2[ 4 ][ 1 ],
                    inv2[ 5 ][ 0 ],
                    inv2[ 5 ][ 1 ],
                    inv2[ 6 ][ 0 ],
                    inv2[ 6 ][ 1 ],
                    inv2[ 7 ][ 0 ],
                    inv2[ 7 ][ 1 ],
                    inv2[ 8 ][ 0 ],
                    inv2[ 8 ][ 1 ],
                    inv2[ 9 ][ 0 ],
                    inv2[ 9 ][ 1 ],
                    inv2[ 10 ][ 0 ],
                    inv2[ 10 ][ 1 ],
                    inv2[ 11 ][ 0 ],
                    inv2[ 11 ][ 1 ],
                    inv2[ 12 ][ 0 ],
                    inv2[ 12 ][ 1 ],
                    inv2[ 13 ][ 0 ],
                    inv2[ 13 ][ 1 ],
                    inv2[ 14 ][ 0 ],
                    inv2[ 14 ][ 1 ],
                    inv2[ 15 ][ 0 ],
                    inv2[ 15 ][ 1 ],
                    inv2[ 16 ][ 0 ],
                    inv2[ 16 ][ 1 ],
                    inv2[ 17 ][ 0 ],
                    inv2[ 17 ][ 1 ],
                    inv2[ 18 ][ 0 ],
                    inv2[ 18 ][ 1 ],
                    inv2[ 19 ][ 0 ],
                    inv2[ 19 ][ 1 ],
                    inv2[ 20 ][ 0 ],
                    inv2[ 20 ][ 1 ],
                    inv2[ 21 ][ 0 ],
                    inv2[ 21 ][ 1 ],
                    inv2[ 22 ][ 0 ],
                    inv2[ 22 ][ 1 ],
                    inv2[ 23 ][ 0 ],
                    inv2[ 23 ][ 1 ],
                    inv2[ 24 ][ 0 ],
                    inv2[ 24 ][ 1 ],
                    inv2[ 25 ][ 0 ],
                    inv2[ 25 ][ 1 ],
                    inv2[ 26 ][ 0 ],
                    inv2[ 26 ][ 1 ],
                    inv2[ 27 ][ 0 ],
                    inv2[ 27 ][ 1 ],
                    inv2[ 28 ][ 0 ],
                    inv2[ 28 ][ 1 ],
                    inv2[ 29 ][ 0 ],
                    inv2[ 29 ][ 1 ]);
            for(new i = 0; i < MAX_HOUSETRUNK_SLOTS; i++)
            {
                if( inv2[ i ][ 0 ] == id )
                {
                    found = true;
                    inv3++;
                }
            }
            if( found )
            {
                format(query, sizeof(query), "Ginklo savininko namo ID: %d", name2 );
                SendClientMessage(playerid, COLOR_GREY, query);
            }
        }
        cache_delete(result);

        result = mysql_query(DbHandle,  "SELECT `Name`,`Inventory` FROM `players` WHERE `Member` != 2" );
        
        for(new k = 0; k < cache_get_row_count(); k++)
        {
            new bool:found;
            cache_get_field_content(k, "Name", name);
            cache_get_field_content(k, "Inventory", inv);
            sscanf( inv, "p</>dddddddddddd",
                inv2[ 0 ][ 0 ],
                inv2[ 0 ][ 1 ],
                inv2[ 1 ][ 0 ],
                inv2[ 1 ][ 1 ],
                inv2[ 2 ][ 0 ],
                inv2[ 2 ][ 1 ],
                inv2[ 3 ][ 0 ],
                inv2[ 3 ][ 1 ],
                inv2[ 4 ][ 0 ],
                inv2[ 4 ][ 1 ],
                inv2[ 5 ][ 0 ],
                inv2[ 5 ][ 1 ]);
            for(new i = 0; i < INVENTORY_SLOTS; i++)
            {
                if( inv2[ i ][ 0 ] == id )
                {
                    found = true;
                    inv3++;
                }
            }
            if( found )
            {
                format(query, sizeof(query), "Ginklo savininkas (Inventorius): %s", name );
                SendClientMessage(playerid, COLOR_GREY, query);
            }
        }
        cache_delete(result);

        result = mysql_query(DbHandle,  "SELECT `Name`,`Weapons` FROM `players` WHERE `Member` != 2" );
        
        for(new j = 0; j <cache_get_row_count(); j++)
        {
            new bool:found;
            cache_get_field_content(j, "Name", name);
            cache_get_field_content(j, "Weapons", inv);
            sscanf( inv, "p</>dddddddd",
                inv2[ 0 ][ 0 ],
                inv2[ 0 ][ 1 ],
                inv2[ 1 ][ 0 ],
                inv2[ 1 ][ 1 ],
                inv2[ 2 ][ 0 ],
                inv2[ 2 ][ 1 ],
                inv2[ 3 ][ 0 ],
                inv2[ 3 ][ 1 ]);
            for(new i = 0; i < MAX_SAVED_WEAPONS; i++)
            {
                if( inv2[ i ][ 0 ] == id )
                {
                    found = true;
                    inv3++;
                }
            }
            if( found )
            {
                format(query, sizeof(query), "Ginklo savininkas (Rankos): %s", name );
                SendClientMessage(playerid, COLOR_GREY, query);
            }
        }
        cache_delete(result);
        SendClientMessage( playerid, COLOR_GREEN2, "________________________Serverio ginklai________________________");
        new gunname[32];
        GetWeaponName(id,gunname,sizeof(gunname));
        format(string, 256, "%s - %d", gunname, inv3);
        SendClientMessage( playerid, COLOR_WHITE, string);
    }
    return 1;
}
CMD:makeleader(playerid, params[])
{
    new
        fact,
        giveplayerid,
        string[ 128 ];
    if( pInfo[ playerid ][ pAdmin ] >= 4 )
    {
        if ( sscanf( params, "ud", giveplayerid, fact ) ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /makeleader [þaidëjo id][frakcija]");
        if ( !IsPlayerConnected(giveplayerid) ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
        if ( IsPlayerNPC( giveplayerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /makeleader [þaidëjoID][frackija]");
        if ( fact < 1 || fact > sizeof fInfo ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Frakcija gali bûti nuo 1 iki 15 " );
        new fact2 = FactionMySQLID( fact );

        pInfo[giveplayerid][pLead] = fact2;
        pInfo[giveplayerid][pMember] = fact2;
        pInfo[giveplayerid][pRank] = 13;
        strmid(fInfo[fact][fLeader], GetName(giveplayerid), 0, 54, 54);

        RemovePlayerJobWeapons(giveplayerid);
        SetPlayerArmour( giveplayerid, 0 );

        format(string, sizeof(string), "NAUJIENA: Administratorius %s, suteikë Jums frakcijos vadovo pareigas frakcijai: %s ",GetName(playerid),fInfo[fact][fName]);
        SendClientMessage(giveplayerid,COLOR_NEWS,string);
        format(string, sizeof(string), "INFORMACIJA: Jûs paskyrëte þaidëjá  %s frakcijos %s vadovu.",GetName(giveplayerid),fInfo[fact][fName]);
        SendClientMessage(playerid,GRAD,string);
        SaveFactions(fact);
    }
    return 1;
}
CMD:setstatcar(playerid, params[])
{
    if( pInfo[ playerid ][ pAdmin ] >= 4 )
    {
        new id,
            id2,
            string[ 126 ];
            
        if ( sscanf( params, "dd", id, id2 ) )
        {
            SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /setstatcar [Kodas][Kodas2]");
            SendClientMessage(playerid,GRAD,"KODAI: 1 Sudauþymai | 2 Draudimas");
            return 1;
        }

        new idcar = GetPlayerVehicleID( playerid );
        if(!IsPlayerInAnyVehicle(playerid) || cInfo[ idcar ][ cOwner ] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: jûs nesëdite transporto priemonëje arba tr. priemonë priklauso serveriui.");
        switch(id)
        {
            case 1:
            {
                cInfo[idcar][cDuzimai] = id2;
                format(string,126,"Tr. priemonës %d sunaikinimø kiekis buvo pakeistas á %d",idcar,id2);
            }
            case 2:
            {
                cInfo[idcar][cInsurance] = id2;
                format(string,126,"Tr. priemonës %d draudimo kiekis buvo pakeistas á %d",idcar,id2);
            }
        }
        AdminLog( pInfo[ playerid ][ pMySQLID ], cInfo[ idcar ][ cOwner ], string );
        SendClientMessage(playerid,COLOR_FADE1,string);
    }
    return 1;
}
CMD:setstat(playerid, params[])
{
    if( pInfo[ playerid ][ pAdmin ] >= 4 )
    {
        new id,
            id2,
            giveplayerid,
            string[ 126 ];

        if ( sscanf( params, "udd", giveplayerid, id, id2 ) )
        {
            SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /setstat [þaidëjo id][Kodas][Kodas2]");
            SendClientMessage(playerid,GRAD,"KODAI: 1 Lygis | 2 Bankas | 3 Nuomos Raktas | 4 Darbas | 5 Mirtys");
            SendClientMessage(playerid,GRAD,"KODAI: 6 Tel.Nr. | 7 darbo Lygis");
            return 1;
        }
        if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
        switch(id)
        {
            case 1:
            {
                pInfo[giveplayerid][pLevel] = id2;
                SetPlayerScore( giveplayerid, pInfo[ giveplayerid ][ pLevel ] );
                format(string,126,"þaidëjo %s lygis buvo pakeistas á %d",GetName(giveplayerid),id2);
            }
            case 2:
            {
                pInfo[giveplayerid][pBank] = id2;
                format(string,126,"þaidëjo %s banko sá skaita buvo pakeistas á %d",GetName(giveplayerid),id2);
            }
            case 3:
            {
                pInfo[giveplayerid][pSpawn] = DefaultSpawn;
                pInfo[giveplayerid][pHouseKey] = id2;
                format(string,126,"þaidëjo %s nuomos raktas buvo pakeistas á %d",GetName(giveplayerid),id2);
            }
            case 4:
            {
                if( id2 > 0 && id2 < MAX_JOBS && pInfo[ giveplayerid ][ pMember ] == 0 )
                {
                    pInfo[ giveplayerid ][ pJob ] = id2;
                    pInfo[ giveplayerid ][ pJobLevel ] = 0;
                    pInfo[ giveplayerid ][ pJobSkill ] = 0;
                    format(string,126,"þaidëjo %s darbas buvo pakeistas á %d",GetName(giveplayerid),id2);
                }
                else 
                    return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, netinkamas darbo ID arba ðis þaidëjas jau turi darbà.");
            }
            case 5:
            {
                pInfo[giveplayerid][pDeaths] = id2;
                format(string,126,"þaidëjo %s mirtys buvo pakeisto á %d",GetName(giveplayerid),id2);
            }
            case 6:
            {
                pInfo[giveplayerid][pPhone] = id2;
                format(string,126,"þaidëjo %s telefono numeris buvo pakeistas á %d",GetName(giveplayerid),id2);
            }
            case 7:
            {
                pInfo[giveplayerid][pJobLevel] = id2;
                format(string,126,"þaidëjo %s darbo Lygis buvo pakeistas á %d",GetName(giveplayerid),id2);
            }
        }
        SendClientMessage(playerid,COLOR_FADE1,string);
        AdminLog( pInfo[ playerid ][ pMySQLID ],pInfo[ giveplayerid ][ pMySQLID ], string );
    }
    return 1;
}
CMD:auninvite(playerid, params[])
{
    if(pInfo[ playerid ][ pAdmin ] >= 4)
    {
        new
            userID;

        if(sscanf(params, "u", userID))
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /auninvite [playerid]");
        else
        {
            if(userID == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Ðis þaidëjas nëra prisijungæs.");

            pInfo[ userID ][ pJob ] = 0;
            pInfo[ userID ][ pJobLevel ] = 0;
            pInfo[ userID ][ pJobSkill ] = 0;
            pInfo[ userID ][ pJobHours ] = 0;
            ResetPlayerWeapons( userID );
            RemovePlayerJobWeapons(userID);
            pInfo[userID][pLead   ] = 0;
            pInfo[userID][pMember ] = 0;
            pInfo[userID][pRank   ] = 0;
            pInfo[userID][pSpawn  ] = DefaultSpawn;
            
            new
                string[128];

            format(string, sizeof(string), "NAUJIENA: Administratorius %s iðmetë jûs ið visø darbø.",GetName(playerid));
            SendClientMessage(userID,COLOR_NEWS,string);
            format(string, sizeof(string), "INFORMACIJA: Jûs panaikinote ið visø nefrakciniø darbø %s",GetName(userID));
            SendClientMessage(playerid,GRAD,string);
        }
    }

    return 1;
}
CMD:forcelogout(playerid, params[])
{
    if( pInfo[ playerid ][ pAdmin ] >= 3 )
    {
        new
            playerLID;

        if(sscanf(params, "u", playerLID))
            return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /forcelogout [ þaidëjo vardas/ id ] ");

        if(playerLID == INVALID_PLAYER_ID)
            return SendClientMessage(playerid, COLOR_GREY, "Toks ID nëra rastas, ðis þaidëjas nëra prisijungæs.");

        if(!AdminDuty[playerid])
            return SendClientMessage(playerid, COLOR_GREY, "Jûs turite bûti AOD, kad galëtumëte atjungti þaidëjá .");

        format(szMessage, sizeof(szMessage), "Jûs buvote atjungtas nuo administratoriaus %s.", GetName( playerid ));
        SendClientMessage(playerid, COLOR_WHITE, szMessage);

        SaveAccount(playerLID);
        PlayerOn[playerLID] = false;

        SendClientMessage(playerLID, COLOR_GREY, "Jûs buvote atjungtas.");
        ShowPlayerLoginDialog(playerid);
    }
    return 1;
}
CMD:togglefading(playerid)
{
    if(!pInfo[ playerid ][ pAdmin ])
        return 0;

    if(PlayerFading)
        SendClientMessage(playerid, -1, "Uþtemimo efetktas iðjungtas.");
    else 
        SendClientMessage(playerid, -1, "Uþtemimo efektas ájungtas");
    PlayerFading = !PlayerFading;
    return 1;
}

CMD:npcrecord(playerid, params[])
{
    if(pInfo[ playerid ][ pAdmin ] < 4 && !IsPlayerAdmin(playerid))
        return 0;

    if(IsPlayerDataRecorded[ playerid ])
    {
        IsPlayerDataRecorded[ playerid ] = false;
        StopRecordingPlayerData(playerid);
        SendClientMessage(playerid, COLOR_NEWS, "Áraðymas sëkmingai baigtas. Failas yra scriptfiles direktorijoje.");
    }
    else 
    {
        if(isnull(params))
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, teisingas naudojimas /npcrecord [Failo pavadinimas kuriame bus áraðas]");

        new type, string[133];
        format(string, sizeof(string), "%s.rec", params);

        if(fexist(string))
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, áraðas su tokiu pavadinimu jau egzistuoja.");

        if(IsPlayerInAnyVehicle(playerid))
            type = PLAYER_RECORDING_TYPE_DRIVER;
        else 
            type = PLAYER_RECORDING_TYPE_ONFOOT;

        StartRecordingPlayerData(playerid, type, params);
        SendClientMessage(playerid, COLOR_NEWS, "Áraðinëjimas pradëtas. Já pabaigti galite vël paraðæ /npcrecord");
        IsPlayerDataRecorded[ playerid ] = true;
    }   
    return 1;
}

CMD:amenu(playerid)
{
    if ( pInfo[ playerid ][ pAdmin ] >= 4 )
    {
        ShowPlayerDialog(playerid,19,DIALOG_STYLE_LIST,"Administratoriaus meniu",
                                                                "- Namai\n\
                                                                 - Bizniai\n\
                                                                 - Frakcijos\n\
                                                                 - Tr. priemonës\n\
                                                                 - Serverio áëjimai\n\
                                                                 - Skelbti balsavimà \n\
                                                                 - Automobiliø turgus\n\
                                                                 - Garaþai\n\
                                                                 - Industrijos\n\
                                                                 - Interjerai\n\
                                                                 - Ávairios koordinatës\n\
                                                                 - Grafiti","Rinktis","Atðaukti");
    }
    return 1;
}
CMD:hideadmins( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 3 )
    {
        #pragma unused params
        switch ( GetPVarInt( playerid, "hideadmin" ) )
        {
            case true:
            {
                SetPVarInt( playerid, "hideadmin", false );
                SendClientMessage(playerid,GRAD,"Dabar tave matys adminø sá raðe.");
            }
            case false:
            {
                SetPVarInt( playerid, "hideadmin", true );
                SendClientMessage(playerid,GRAD,"Dabar tave nematys adminø sá raðe.");
            }
        }
    }
    return 1;
}
CMD:checkflist(playerid, params[])
{
    if( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        new
            fid,
            string[ 100 ];
        if( sscanf( params,"d", fid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /checkflist [FRAKCIJOS ID ]" );
        if ( fid > sizeof ( fInfo ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: netinkamas frakcijos ID " );

        foreach(Player, pid )
        {
            if( PlayerFaction( pid ) == fid )
            {
                format(string, sizeof(string), "%d [%s] %s", pInfo[ pid ][ pRank ], GetPlayerRangName( pid ), GetName( pid ));
                SendClientMessage(playerid, COLOR_WHITE, string);
            }
        }
    }
    return 1;
}
CMD:fon( playerid, params[ ] )
{
    new
        string[ 126 ];
    if( pInfo[ playerid ][ pAdmin ] >= 0)
    {
        new id;
        if ( sscanf( params, "d", id ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /fon [FRAKCIJOS ID] "),
		SendClientMessage( playerid, COLOR_LIGHTRED, "FRAKCIJOS ID: 1 - policijos departamentas, 2 - medicinos departamentas");
        if ( id < 1 || id > sizeof fInfo ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: netinkamas frakcijos ID " );

        format( string, 126, "Frakcijoje: %s, ðiuo metu yra prisijungusiu þmoniø: %d ",fInfo[ id ][ fName ], IsOnlineFactionMembers( id ) );
        SendClientMessage( playerid, COLOR_LIGHTRED2, string );
    }
    else
    {
        if(PlayerFaction( playerid ) == 1)
        {
            format( string, 126, "Frakcijoje: %s, ðiuo metu yra prisijungusiu þmoniø: %d ", fInfo[ 2 ][ fName ], IsOnlineFactionMembers( 2 ) );
            SendClientMessage( playerid, COLOR_LIGHTRED2, string );
        }
        else if( PlayerFaction( playerid ) == 2 )
        {
            format( string, 126, "Frakcijoje: %s, ðiuo metu yra prisijungusiu þmoniø: %d ", fInfo[ 1 ][ fName ], IsOnlineFactionMembers( 1 ) );
            SendClientMessage( playerid, COLOR_LIGHTRED2, string );
        }
    }
    return 1;
}
stock IsOnlineFactionMembers( id )
{
    new count;
    foreach(Player,i)
    {
        if ( id == PlayerFaction( i ) )
            count ++;
    }
    return count;
}
CMD:checkjail( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        new giveplayerid,
            string[ 126 ];
        if ( sscanf( params, "u", giveplayerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /checkjail [ þaidëjo vardas/ id ] ");
        if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
        else if ( pInfo[ giveplayerid ][ pJailTime ] > 0 )
        {
            format( string, 126, "þaidëjui %s liko dar prasëdëti %d minuøiø.", GetName( giveplayerid ), pInfo[ giveplayerid ][ pJailTime ] / 60 );
            SendClientMessage( playerid, COLOR_WHITE, string );
        }
        else
            SendClientMessage( playerid, COLOR_WHITE, "þaidëjas nesëdi kalëjime." );
    }
    return 1;
}
CMD:masked( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        #pragma unused params
        new string[ 64 ];
        SendClientMessage( playerid, COLOR_GREEN2, "_____þaidëjai ðiuo metu uþsidëjà kaukes_____");
        foreach(Player,playa)
        {
            if ( pInfo[ playa ][ pMask ] == 0 )
            {
                format( string, sizeof(string), "ID: %d, MySQL ID: %d %s", playa, pInfo[ playa ][ pMySQLID ], GetName( playa ) );
                SendClientMessage( playerid, COLOR_WHITE, string );
            }
        }
    }
    return 1;
}
CMD:are( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        new giveplayerid,
            string[ 126 ],
            adminname[ 24 ];
        if ( sscanf( params, "u", giveplayerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /are [þaidëjo id]");
        if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
        if ( GetPVarInt( giveplayerid, "REPORTED" ) == 0 )
            return SendClientMessage( playerid, GRAD, "þaidëjas nieko nepraneðë." );
        DeletePVar( giveplayerid, "REPORTED" );
        GetPlayerName( playerid, adminname, 24 );

        format(string,126,"Administratorius %s patvirtino /report ið veikëjo %s", GetName( playerid ), GetName( giveplayerid ));
        AdminLog( pInfo[ playerid ][ pMySQLID ], pInfo[ giveplayerid ][ pMySQLID ], string );
            
        format           ( string, 126, "Dëmesio, Administratorius pavirtino Jûsø praneðimà (/report) ir tuojaus susisieks su Jumis. Bûkite kantrûs.",adminname );
        SendClientMessage( giveplayerid, COLOR_GREEN, string );

        format           ( string, 126, "AdmWarn: Administratorius (%s) patvirtino praneðimà (/report) ið (%s) ", adminname, GetName( giveplayerid ));
        SendAdminMessage ( COLOR_ADM, string );

        mysql_format(DbHandle, string, sizeof(string), "UPDATE admin_watch_duty SET reports_accepted = reports_accepted + 1 WHERE admin_id = %d",
            GetPlayerSqlId(playerid));
        mysql_pquery(DbHandle, string);
    }
    return 1;
}
CMD:dre( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        new giveplayerid,
            reason[ 126 ],
            string[ 126 ];
        if ( sscanf( params, "us[126]", giveplayerid, reason ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /dre [þaidëjo id][ preizastis ]");
        if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
        if ( GetPVarInt( giveplayerid, "REPORTED" ) == 0 )
            return SendClientMessage( playerid, GRAD, "þaidëjas nieko nepraneðë arba /report buvo priimtas kito Administratoriaus." );
        DeletePVar( giveplayerid, "REPORTED" );

        format(string,126,"Administratorius %s atmetë reportá  %s", GetName( playerid ), GetName( giveplayerid ));
        AdminLog( pInfo[ playerid ][ pMySQLID ], pInfo[ giveplayerid ][ pMySQLID ], string );

        format           ( string, 126, "Dëmesio, Administratorius %s atmetë Jûsø praneðimà (/report) nes: %s ", GetName( playerid ), reason );
        SendClientMessage( giveplayerid, COLOR_GREEN, string );
        format           ( string, 126, "AdmWarn: Administratorius (%s) atmetë praneðimà (/report) ið (%s)", GetName( playerid ), GetName( giveplayerid ) );
        SendAdminMessage ( COLOR_ADM, string );

        mysql_format(DbHandle, string, sizeof(string), "UPDATE admin_watch_duty SET reports_rejected = reports_rejected + 1 WHERE admin_id = %d",
            GetPlayerSqlId(playerid));
        mysql_pquery(DbHandle, string);
    }
    return 1;
}
CMD:gotohouse( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 4 )
    {
        new tmp;
        if ( sscanf( params, "d", tmp ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /gotohouse [namo id]");
        SetPlayerPos( playerid, hInfo[ tmp ][ hEnter ][ 0 ],
                                hInfo[ tmp ][ hEnter ][ 1 ],
                                hInfo[ tmp ][ hEnter ][ 2 ]);
        SendClientMessage( playerid, COLOR_WHITE, "[AdmCmd] Persikeletë á nurodytà vietà: gyvenamasis namas");
    }
    return 1;
}
CMD:gotobiz( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 4 )
    {
        new tmp;
        if ( sscanf( params, "d", tmp ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /gotobiz [biznio id]");
        SetPlayerPos( playerid, bInfo[ tmp ][ bEnter ][ 0 ],
                                bInfo[ tmp ][ bEnter ][ 1 ],
                                bInfo[ tmp ][ bEnter ][ 2 ]);
        SendClientMessage( playerid, COLOR_WHITE, "[AdmCmd] Persikeletë á nurodytà vietà: biznis/verslas");
    }
    return 1;
}
CMD:gotogarage(playerid, params[])
{
    if(!IsPlayerAdmin(playerid) && !pInfo[ playerid ][ pAdmin ])
        return 0;

    new index, string[60];

    if(sscanf(params, "i", index))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas /gotogarage [Garaþo ID]");

    if(!IsValidGarage(index))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, garaþo su tokiu ID nëra.");

    new Float:x, Float:y, Float:z, Float:angle;

    new vehicleid = GetPlayerVehicleID(playerid);
    if(vehicleid)
    {
        GetGarageVehicleEntrancePos(index, x, y ,z, angle);
        SetVehicleZAngle(vehicleid, angle);
        SetVehiclePos(vehicleid, x, y ,z);
        LinkVehicleToInterior(vehicleid, GetGarageEntranceInteriorID(index));
        SetVehicleVirtualWorld(vehicleid, GetGarageEntranceVirtualWorld(index));
        foreach(new i : Player)
            if(IsPlayerInVehicle(i, vehicleid))
            {
                SetPlayerVirtualWorld(i, GetGarageEntranceVirtualWorld(index));
                SetPlayerInterior(i, GetGarageEntranceInteriorID(index));
            }
    }
    else 
    {
        GetGarageEntrancePos(index, x,y ,z);
        SetPlayerPos(playerid, x, y, z);
        Unfreeze[ playerid ] = 2;
        TogglePlayerControllable(playerid, false);
        SetPlayerVirtualWorld(playerid, GetGarageEntranceVirtualWorld(index));
        SetPlayerInterior(playerid, GetGarageEntranceInteriorID(index));
        SetPlayerFacingAngle(playerid, angle);
    }
    format(string, sizeof(string), "Sëkmingai nusikëlëte prie garaþo kurio ID %d", index);
    SendClientMessage(playerid, COLOR_NEWS, string);
    return 1;
}

CMD:serverstats(playerid)
{
    if(!IsPlayerAdmin(playerid) && pInfo[ playerid ][ pAdmin ] < 4)
        return 0;

    new playerCount, botCount, string[ 2048 ];
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            if(IsPlayerNPC(i))
                botCount++;
            else 
                playerCount++;
        }
    }

    mysql_stat(string);

    format(string, sizeof(string), "\t\tMySQL\n\n\
        %s\n\
        Nebaitos uþklausos: %d\n\
        Þaidëjø serveryje:%d\n\
        NPC serveryje:%d\n\n\
        Dinaminiø objektø: %d\n\
        Dinaminiø pickup: %d\n\
        Dinaminiø CP: %d\n\
        Dinaminiø þemëlapio ikonø: %d\n\
        Dinaminiø teksto etikeèiø: %d\n\
        Dinaminiø vietø: %d\n\
        Matomø dinaminiø objektø: %d\n\
        Matomø dinaminiø pickup: %d\n\
        Matomø dinaminiø CP: %d\n\
        Matomø dinaminiø þemëlapio ikonø: %d\n\
        Matomø dinaminiø teksto etikeèiø: %d\n\
        Matomø dinaminiø vietø: %d\n",
        string,
        mysql_unprocessed_queries(),
        playerCount,
        botCount,
        Streamer_CountItems(STREAMER_TYPE_OBJECT),
        Streamer_CountItems(STREAMER_TYPE_PICKUP),
        Streamer_CountItems(STREAMER_TYPE_CP),
        Streamer_CountItems(STREAMER_TYPE_MAP_ICON),
        Streamer_CountItems(STREAMER_TYPE_3D_TEXT_LABEL),
        Streamer_CountItems(STREAMER_TYPE_AREA),
        Streamer_GetVisibleItems(STREAMER_TYPE_OBJECT),
        Streamer_GetVisibleItems(STREAMER_TYPE_PICKUP),
        Streamer_GetVisibleItems(STREAMER_TYPE_CP),
        Streamer_GetVisibleItems(STREAMER_TYPE_MAP_ICON),
        Streamer_GetVisibleItems(STREAMER_TYPE_3D_TEXT_LABEL),
        Streamer_GetVisibleItems(STREAMER_TYPE_AREA)
    );
    ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Info", string, "Gerai", "");
    return 1;
}

CMD:setweather( playerid, params[ ] )
{
    if(pInfo[playerid][pAdmin] >= 2)
    {
        new tmp,
            string[ 128 ];
        if ( sscanf( params, "d", tmp ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /setweather [oro id]");
        format          ( string, sizeof(string), "AdmWarn: Administratorius (%s) pakeitë serverio orà: ID %d", GetName( playerid ), tmp );
        SendAdminMessage( COLOR_ADM, string );
        SetWeather( tmp );
    }
    return 1;
}
CMD:dtc( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 2 )
    {
        #pragma unused params
        new car = GetNearestVehicle( playerid, 5.0 );
        if ( car != INVALID_VEHICLE_ID )
        {
            if ( cInfo[ car ][ cOwner ] > 0 )
            {
                new panels,doors,lights,tires, Float:CarHP;
                GetVehicleHealth( car, CarHP );
                
                if ( CarHP < 300 )
                    return SendClientMessage( playerid, GRAD, "Automobilis yra pernelyg daug sudauþytas, todël negalite jo parkuoti. " );
                
                GetVehicleDamageStatus(car,panels,doors,lights,tires);
                format( cInfo[ car ][ cDamage ], 50, "%d/%d/%d/%d/%d/", panels, doors, lights, tires, floatround( CarHP) );
                cInfo[ car ][ cVirtWorld ] = GetVehicleVirtualWorld( car );

                cInfo[car][cVehID] = 0;
                DestroyVehicle(car);
                
                new carowner = GetCarOwner( car );
                if ( IsPlayerConnected( carowner ) )
                    pInfo[ carowner ][ pCarGet ] --;

                SaveCar(car);
                nullVehicle( car );
                SendClientMessage( playerid, COLOR_WHITE, "Tr. priemonë priverstinai priparkuota.");
                return 1;
            }
        }
        else
            SendClientMessage( playerid, COLOR_WHITE, "Jûs turite stovëti/bûti ðalia tr. priemonës norëdami já  atstatyti á pradinà vietà .");
    }
    return 1;
}
CMD:rtc( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        #pragma unused params
        new car = GetNearestVehicle( playerid, 5.0 );
        if ( car != INVALID_VEHICLE_ID )
        {
            SetVehicleToRespawn( car );
            if ( cInfo[ car ][ cVirtWorld ] > 0 && cInfo[ car ][ cOwner ] > 0 )
                SetVehicleVirtualWorld( car, cInfo[ car ][ cVirtWorld ] );
            else SetVehicleVirtualWorld( car, 0 );
            cInfo[ car ][ cFuel ] = GetVehicleFuelTank( GetVehicleModel( car ) );
            SendClientMessage( playerid, COLOR_WHITE, "Tr. priemonë grá þinta á savo pradinà atsiradimo vietà . Degalai atstatyti.");
            return 1;
        }
        else
            SendClientMessage( playerid, COLOR_WHITE, "Jûs turite stovëti/bûti ðalia tr. priemonës norëdami já  atstatyti á pradinà vietà .");
    }
    return 1;
}
CMD:rc(playerid, params[])
{
    if(pInfo[ playerid ][ pAdmin ] < 1)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, jûs neesate administratorius.");
    
    new vehicleid;
    if(sscanf(params, "i", vehicleid))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /rc [ maðinos ID ] ");

    if(!IsValidVehicle(vehicleid))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Su tokiu ID maðina neegzistuoja. ");

    if(IsVehicleUsed(vehicleid))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Transporto priemonë nëra tuðèia!");

    SetVehicleToRespawn(vehicleid);
    SetVehicleVirtualWorld(vehicleid, 0);
    return 1;
}
CMD:rjc( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        new string[ 126 ],
            frakcija;
        if ( sscanf( params, "d", frakcija ) )
        {
            SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /rjc [DARBO ID] " );
            return 1;
        }
        if ( frakcija < 0 || frakcija >= MAX_JOBS ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: darbo numeris yra per didelis. " );
        new bool:Used[ MAX_VEHICLES ] = { false, ... };
        foreach(Player,i)
        {
            if ( GetPlayerState( i ) == PLAYER_STATE_DRIVER )
            Used[ GetPlayerVehicleID( i ) ] = true;
        }
        foreach(Vehicles, veh )
        {
            if ( sVehicles[ veh ][ Job ] == frakcija )
            {
                if ( Used[ veh ] == false )
                {
                    SetVehicleToRespawn( veh );
                    SetVehicleVirtualWorld( veh, 0 );
                }
            }
        }
        format                ( string, 126, "AdmCmd buvo atstatytos visos darbo %s tr. priemonës. ", pJobs[ frakcija ][ Name ] );
        SendClientMessageToAll( COLOR_LIGHTRED, string);
    }
    return 1;
}
CMD:rfc( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 2 )
    {
        new string[ 126 ],
            frakcija;
        if ( sscanf( params, "d", frakcija ) )
        {
            SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /rfc [ frakcija ] " );
            return 1;
        }
        if ( frakcija < 0 || frakcija >= sizeof( fInfo ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: frakcijos numeris yra per didelis. " );
        if ( fInfo[ frakcija ][ fID ] == 0 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: tokia frakcija neegzistuoja. " );
        new bool:Used[ MAX_VEHICLES ] = { false, ... };
        foreach(Player,i)
        {
            if ( GetPlayerState( i ) == PLAYER_STATE_DRIVER )
            Used[ GetPlayerVehicleID( i ) ] = true;
        }
        foreach(Vehicles, veh )
        {
            if ( sVehicles[ veh ][ Faction ] == FactionMySQLID( frakcija ) )
            {
                if ( Used[ veh ] == false )
                {
                    SetVehicleToRespawn( veh );
                    SetVehicleVirtualWorld( veh, 0 );
                }
            }
        }
        format                ( string, 126, "AdmCmd buvo atstatytos visos frakcijos %s tr. priemonës. ", fInfo[ frakcija ][ fName ] );
        SendClientMessageToAll( COLOR_LIGHTRED, string);
    }
    return 1;
}

CMD:olddriver(playerid, params[])
{
    if(!pInfo[ playerid ][ pAdmin ] && !IsPlayerAdmin(playerid))
        return 0;


    new string[100], vehicleid;

    if(sscanf(params, "i", vehicleid))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /olddriver [Tr. priemonës ID]");

    if(!IsValidVehicle(vehicleid))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Tokios transporto priemonës nëra.");

    if(LastVehicleDriverSqlId[ vehicleid ])
    {
        new id = FindPlayerSqlIdServerID(LastVehicleDriverSqlId[ vehicleid ]);
        format(string, sizeof(string), "Paskutinis ðioje transporto priemonëje sedëjo %s.", GetSqlIdName(LastVehicleDriverSqlId[ vehicleid ]));
        if(id != INVALID_PLAYER_ID)
            format(string, sizeof(string),"%s Jo serverio ID: %d", string, id);
        else 
            strcat(string, " Ðis þaidëjas jau yra atsijungæs.");
        SendClientMessage(playerid, COLOR_WHITE, string);
    }
    else 
    {
        SendClientMessage(playerid, COLOR_WHITE, "Ðioje transporto priemonëje nuo jos sukûrimo dar niekas nesedëjo.");
    }
    return 1;
}

CMD:gotocar( playerid, params[ ] )
{
    new
        id,
        Float:Kords[ 3 ];
        
    if(pInfo[playerid][pAdmin] >= 2)
    {
        if ( sscanf( params, "d", id ) )
        {
            SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /gotocar [Automobilis]" );
            return 1;
        }
        GetVehiclePos(id,Kords[0],Kords[1],Kords[2]);
        SetPlayerPos(playerid,Kords[0],Kords[1],Kords[2]+2);
        SetPlayerVirtualWorld( playerid, GetVehicleVirtualWorld( id ) );
        SendClientMessage(playerid,GRAD,"[AdmCmd] Persikelëte á nurodytà vietà: tr. priemonë");
        return 1;
    }
    return 1;
}
CMD:mute( playerid, params[ ] )
{
    new
        giveplayerid,
        string[ 126 ];
    if(pInfo[playerid][pAdmin] >= 2)
    {
        if ( sscanf( params, "u", giveplayerid ) )
        {
            SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /unmute [þaidëjoID]" );
            return 1;
        }
        if(!IsPlayerConnected( giveplayerid )) return SendClientMessage( playerid, GRAD,"þaidëjas norimu ID neprisijungæs!");

        if( Mute[ giveplayerid ] )
        {
            format          ( string, 126, "AdmWarn: Administratorius (%s) leido kalbëti (/unmute) veikëjui (%s) ",GetName(playerid), GetName( giveplayerid ) );
            SendAdminMessage( COLOR_ADM, string );

            Mute[ giveplayerid ] = false;
        }
        else
        {
            format          ( string, 126, "AdmWarn: Administratorius (%s) uþdraudë kalbëti (/mute) veikëjui (%s) ",GetName(playerid), GetName( giveplayerid ) );
            SendAdminMessage( COLOR_ADM, string );

            Mute[ giveplayerid ] = true;
        }
    }
    return 1;
}
CMD:setarmour( playerid, params[ ] )
{
    new
        giveplayerid,
        Armor,
        string[ 126 ];
    if(pInfo[playerid][pAdmin] >= 3)
    {
        if ( sscanf( params, "ud", giveplayerid, Armor ) )
        {
            SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /setarmour [þaidëjoID][armor]" );
            return 1;
        }
        if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
        SetPlayerArmour ( giveplayerid, Armor );
        format          ( string, 126 ,"AdmWarn: Administratorius (%s) nustatë veikëjui (%s) ðarvø lygi: %d",GetName(playerid),GetName(giveplayerid),Armor);
        SendAdminMessage( COLOR_ADM, string );
        return 1;
    }
    return 1;
}
CMD:sethp( playerid, params[ ] )
{
    new
        giveplayerid,
        HP,
        string[ 126 ];
    if(pInfo[playerid][pAdmin] >= 3)
    {
        if ( sscanf( params, "ud", giveplayerid, HP ) )
        {
            SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /sethp [þaidëjoID][hp]" );
            return 1;
        }
        if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
        if ( IsPlayerNPC( giveplayerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /sethp [þaidëjoID][hp]");
        SetPlayerHealth ( giveplayerid, HP );
        format          ( string, 126 ,"AdmWarn: Administratorius (%s) pakeitë veikëjo (%s) gyvybiø skaièiø: %d",GetName(playerid),GetName(giveplayerid),HP);
        SendAdminMessage( COLOR_ADM, string );
        return 1;
    }
    return 1;
}
CMD:rac(playerid)
{
    if(pInfo[playerid][pAdmin] < 2)
        return 0;

    foreach(Vehicles,veh)
    {
        if (!IsVehicleUsed(veh) && VGaraze[ veh ] == false)
        {
            SetVehicleToRespawn( veh );
            if ( cInfo[ veh ][ cVirtWorld ] > 0 && cInfo[ veh ][ cOwner ] > 0 )
                SetVehicleVirtualWorld( veh, cInfo[ veh ][ cVirtWorld ] );
            else SetVehicleVirtualWorld( veh, 0 );
        }
    }
    SendClientMessageToAll(COLOR_LIGHTRED, "AdmCmd buvo atstatytos visos nenaudojamos serverio tr. priemonës");
    return 1;
}

stock IsVehicleUsed(vehicleid)
{
    if(IsVehicleTrailer(GetVehicleModel(vehicleid)))
    {
        new veh = GetTrailerPullingVehicle(vehicleid);
        if(veh != INVALID_VEHICLE_ID)
            return IsVehicleUsed(veh);
    }
    foreach(Player,i)
    {
        if(GetPlayerVehicleID(i) == vehicleid)
            return true;
    }
    return false;
}

CMD:apkills( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        #pragma unused params
        if ( GetPVarInt( playerid, "AP_KILLS" ) == 0 )
        {
            SendClientMessage( playerid, COLOR_WHITE, "Dabar nebematysite serverio þaidëjø atliekamø nuþudymu." );
            SetPVarInt( playerid, "AP_KILLS", 1 );
            return 1;
        }
        else if ( GetPVarInt( playerid, "AP_KILLS" ) == 1 )
        {
            SendClientMessage( playerid, COLOR_WHITE, "Dabar matysite serverio þaidëjø atliekamus nuþudimus" );
            SetPVarInt( playerid, "AP_KILLS", 0 );
            return 1;
        }
    }
    return 1;
}
CMD:check( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        new giveplayerid;
        if ( sscanf( params, "u", giveplayerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /check [þaidëjo id]");
        if ( !IsPlayerConnected(giveplayerid) )  return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje. ");
        ShowStats(playerid,giveplayerid);
    }
    return 1;
}
CMD:lockacc( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        new giveplayerid,
            string[ 256 ],
            reason[ 128 ];
        if ( sscanf( params, "us[126]", giveplayerid, reason ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /lockacc [þaidëjo id][Prieþastis]");
        if ( !IsPlayerConnected(giveplayerid) )  return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje. ");
        if ( strfind( reason, "'", true ) != -1 ) return 1;
        mysql_real_escape_string(reason,reason);

        format( string, sizeof(string), "INSERT INTO `nuobaudos` (Kas, Ka, Kam, Priezastis) VALUES('%d', 'uþrakino sá skaitá ', '%d', '%s')", pInfo[ playerid ][ pMySQLID ], pInfo[ giveplayerid ][ pMySQLID ], reason);
        mysql_pquery(DbHandle, string);
        format( string, sizeof(string), "INSERT INTO acclock (id,admin,reason) VALUES (%d,'%s','%s')", pInfo[ giveplayerid ][ pMySQLID ], GetName( playerid ), reason );
        mysql_pquery(DbHandle,  string );
        format( string, sizeof(string), "Uþrakinta sàskaita, %s", reason );
        KickPlayer( GetName( playerid ), giveplayerid, string );
    }
    return 1;
}
CMD:setint( playerid, params[ ] )
{
    if(pInfo[playerid][pAdmin] >= 1)
    {
        new giveplayerid,
            inter,
            string[ 50 ];
        if ( sscanf( params, "ud", giveplayerid, inter ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /setint [þaidëjo id][Interjeras] ");
        if ( !IsPlayerConnected(giveplayerid) )  return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje. ");
        SetPlayerInterior( giveplayerid, inter );
        format          ( string, 50, "Pakeitei %s jo interjera á %d ", GetName(giveplayerid), inter );
        SendClientMessage( playerid, COLOR_FADE1, string );
    }
    return 1;
}
CMD:setvw( playerid, params[ ] )
{
    if( pInfo[playerid][pAdmin] >= 1 )
    {
        new giveplayerid,
            inter,
            string[ 50 ];
        if ( sscanf( params, "ud", giveplayerid, inter ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /setvw [þaidëjo id][Virtualus Pasaulis] ");
        if ( !IsPlayerConnected(giveplayerid) )  return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje. ");
        SetPlayerVirtualWorld( giveplayerid, inter );
        format          ( string, 50, "Pakeitei %s jo virtualu pasauli á %d ", GetName(giveplayerid), inter );
        SendClientMessage( playerid, COLOR_FADE1, string );
    }
    return 1;
}
CMD:specoff( playerid, params[ ] )
{
    if( pInfo[playerid][pAdmin] >= 1 )
    {
        if( GetPlayerState( playerid ) == PLAYER_STATE_SPECTATING )
        {
            TogglePlayerSpectating(playerid, false);
            SetCameraBehindPlayer(playerid);
            SetPlayerSkin(playerid, pInfo[ playerid ][ pSkin ]);
            PlayerSpectatedPlayer[ playerid ] = INVALID_PLAYER_ID;
            DestroyDynamic3DTextLabel(SpecCommandLabel[ playerid ]);
        }
    }
    return 1;
}
CMD:spec( playerid, params[ ] )
{
    if( pInfo[playerid][pAdmin] >= 1 )
    {
        new giveplayerid;
        if ( sscanf( params, "u", giveplayerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /spec [þaidëjo id] ");
        if ( !IsPlayerConnected(giveplayerid) )  return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje. ");

        TogglePlayerSpectating( playerid, true );
        SetPlayerInterior     ( playerid, GetPlayerInterior( giveplayerid ) );
        SetPlayerVirtualWorld ( playerid, GetPlayerVirtualWorld( giveplayerid ) );
        
        if ( IsPlayerInAnyVehicle( giveplayerid ) )
            PlayerSpectateVehicle( playerid, GetPlayerVehicleID( giveplayerid ) );
        else
            PlayerSpectatePlayer( playerid, giveplayerid );

        PlayerSpectatedPlayer[ playerid ] = giveplayerid;

        //SpecCommandLabel[ playerid ] = CreateDynamic3DTextLabel(" ", 0x00000044, 0.0, 0.0, 0.0, 10.0, .attachedplayer = giveplayerid);
            
        if(!IsPlayerInAnyVehicle(playerid))
        {
            new string[128], count, weaponid, ammo;
            for(new i = 0; i < 13; i++)
            {   
                GetPlayerWeaponData(playerid, i, weaponid, ammo);
                if(weaponid && ammo)
                {
                    count++;
                    format(string, sizeof(string),"%s|%d|%d", string, weaponid, ammo);
                }
            }
            SetPVarString(playerid, "SpectateWeaponString", string);
            SetPVarInt(playerid, "SpectateWeaponCount", count);
        }
        ResetPlayerWeapons(playerid);
    }
    return 1;
}
CMD:intvw( playerid, params[ ] )
{
    if(pInfo[playerid][pAdmin] >= 1)
    {
        #pragma unused params
        new string[ 60 ];
        format           ( string, 60, " Jusø interioras: %d, Virtualus pasaulis: %d", GetPlayerInterior( playerid ), GetPlayerVirtualWorld( playerid ) );
        SendClientMessage( playerid, COLOR_WHITE, string );
    }
    return 1;
}
CMD:afrisk(playerid, params[])
{
    if(!pInfo[ playerid ][ pAdmin ])
        return 0;

    new targetid,
        string[20 + MAX_ITEM_NAME ];

    if(sscanf(params, "u", targetid))
        return SendClientMessage(playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /frisk [þaidëjo id/dalis vardo]");

    if(!IsPlayerConnected(targetid))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");

    if(IsPlayerInventoryEmpty(targetid))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, þaidëjas neturi nei vieno daikto.");


    ShowPlayerInvInfoForPlayer(targetid, playerid);

    SendClientMessage( playerid, COLOR_GREEN2, "_____________________ Laikomi ginklai __________________");

    for(new i = 0; i < 11; i++)
    {
        new wep,
            ammo,
            wepname[ 24 ];
        GetPlayerWeaponData(targetid, i, wep, ammo);
        if ( wep > 0 )
        {
            GetWeaponName(wep, wepname, sizeof(wepname));
            format(string, sizeof(string)," Ginklas %s ðoviniø %d ", wepname, ammo);
            SendClientMessage(playerid, COLOR_FADE1, string);
        }
    }
    return 1;
}
CMD:aheal( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        new string[ 126 ],
            giveplayerid;
        if ( sscanf( params, "u", giveplayerid ) ) return SendClientMessage( playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /aheal [þaidëjo id]" );
        if ( !IsPlayerConnected( giveplayerid ) )  return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
        SetPlayerHealth( giveplayerid, 100);
        new idcar = GetPlayerVehicleID( giveplayerid );
        RepairVehicle( idcar );
        SetVehicleHealth ( idcar, 1000.0);
        format          ( string, 126 ,"AdmWarn: Administratorius (%s) pagydë (/aheal) veikëjà (%s)", GetName( playerid ), GetName( giveplayerid ) );
        SendAdminMessage( COLOR_ADM, string );
        if(Mires[giveplayerid] > 0)
        {
            Mires[giveplayerid] = 0;
            TogglePlayerControllable( giveplayerid, true);
            ApplyAnimation          ( giveplayerid, "CRACK", "null", 0.0, 0, 0, 0, 0, 0);
            UpdatePlayerInfoText( playerid );
            DestroyDynamic3DTextLabel( DeathLabel[giveplayerid] );
            return 1;
        }
    }
    return 1;
}
CMD:aproperty( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        new giveplayerid,
            string[ 126 ];
        if ( sscanf( params, "u", giveplayerid ) ) return SendClientMessage( playerid , COLOR_LIGHTRED, "Teisingas komandos naudojimas: /aproperty [þaidëjo id]" );
        if ( !IsPlayerConnected( giveplayerid ) )  return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
        new
            zone[ MAX_ZONE_NAME ];

        SendClientMessage( playerid, COLOR_LIGHTRED, "________Turimi namai________");
        foreach(Houses,h)
        {
            if ( hInfo[h][hOwner] == pInfo[ giveplayerid ][ pMySQLID ] )
            {
                Get2DZone( hInfo[ h ][ hEnter ][ 0 ], hInfo[ h ][ hEnter ][ 1 ], zone, MAX_ZONE_NAME );
                format( string, 126, "Namas(ID:%d) Vertë: %d Vieta: %s", h, hInfo[ h ][ hPrice ], zone );
                SendClientMessage( playerid, COLOR_WHITE, string );
            }
        }
        SendClientMessage( playerid, COLOR_LIGHTRED, "________Turimi verslai________");
        for(new i = 0; i < GetBusinessCount(); i++)
        {
            if ( bInfo[ i ][ bOwner ] == pInfo[ giveplayerid ][ pMySQLID ] )
            {
                Get2DZone( bInfo[ i ][ bEnter ][ 0 ], bInfo[ i ][ bEnter ][ 1 ], zone, MAX_ZONE_NAME );
                format( string, 126, "Verlsas(ID:%d) Vertë: %d Vieta: %s", i, bInfo[ i ][ bPrice ], zone );
                SendClientMessage( playerid, COLOR_WHITE, string );
            }
        }
        SendClientMessage( playerid, COLOR_LIGHTRED, "________Turimi garaþài________");
        foreach(Garages,h)
        {
            if ( pInfo[ giveplayerid ][ pMySQLID ] == gInfo[ h ][ gOwner ] )
            {
                Get2DZone( gInfo[ h ][ gEntrance ][ 0 ], gInfo[ h ][ gEntrance ][ 1 ], zone, MAX_ZONE_NAME );
                format( string, 126, "Garaþas(ID:%d) Vertë: %d Vieta: %s", h, gInfo[ h ][ gPrice ], zone );
                SendClientMessage( playerid, COLOR_WHITE, string );
            }
        }
        SendClientMessage( playerid, COLOR_LIGHTRED, "________Turimi automobiliai________");
        format           ( string, 140, "SELECT cName,cNumbers,cVehID FROM `vehicles` WHERE `cOwner` = %d", pInfo[ giveplayerid ][ pMySQLID ] );
        new Cache:result = mysql_query(DbHandle,  string );
        new slot = 1;
        for(new i = 0; i < cache_get_row_count(); i++)
        {
            new vName[ 24 ],
                Numbers[ 24 ],
                spawned;

            cache_get_field_content(i, "cName", vName);
            cache_get_field_content(i, "cNumbers", Numbers);
            spawned = cache_get_field_content_int(i, "cVehID");
            format( string, 126, "Maðina(ID:%d): %s Numeriai: %s Serverio ID: %d", slot, vName, Numbers, spawned);
            SendClientMessage( playerid, COLOR_WHITE, string );
            slot++;
        }
        cache_delete(result);
    }
    return 1;
}
CMD:ahelp( playerid, params[ ] )
{
    if( pInfo[playerid][pAdmin] >= 1 )
    {
        #pragma unused params

        SendClientMessage( playerid, COLOR_LIGHTRED, "|____________________________ADMINISTRATORIAUS SKYRIUS____________________________|");
        if ( pInfo[ playerid ][ pAdmin ] >= 1 )
        {
            SendClientMessage( playerid, COLOR_WHITE, "[AdmLvl 1] /kick /ban /warn /jail /noooc /adminduty /gethere /check /afrisk /fon "),
            SendClientMessage( playerid, COLOR_FADE1, "[AdmLvl 1] /freeze /slap /spec /specoff /setint /setvw /intvw /masked /aheal /spawn ");
            SendClientMessage( playerid, COLOR_WHITE, "[AdmLvl 1] /mark /lockacc /rc  /setskin  /aproperty /apkills /fon ");
            SendClientMessage( playerid, COLOR_FADE1, "[AdmLvl 1] PERSIKËLIMAS: /gotols /gotofc /gotobb /gotopc /goto /gotomark");
            SendClientMessage( playerid, COLOR_WHITE, "[AdmLvl 1] TR. PRIEMONËS: /getoldcar /rtc /rfc /rjc /rc");				
        }
        if ( pInfo[ playerid ][ pAdmin ] >= 2 )
            SendClientMessage( playerid, COLOR_FADE1, "[AdmLvl 2] /dtc /gotocar /mute/rac ");
        if ( pInfo[ playerid ][ pAdmin ] >= 3 )
            SendClientMessage( playerid, COLOR_WHITE, "[AdmLvl 3] /sethp /setarmour /forcelogout /hideadmins /serverguns /giveitem /checkgun /kickall ");
        if ( pInfo[ playerid ][ pAdmin ] >= 4 )
        {
            SendClientMessage( playerid, COLOR_FADE1, "[AdmLvl 4] /auninvite /givemoney /giveweapon /amenu /intmenu"),
            SendClientMessage( playerid, COLOR_WHITE, "[AdmLvl 4] /makeleader /setstat /setstatcar /gotohouse /gotobiz");			
            SendClientMessage( playerid, COLOR_FADE1, "[AdmLvl 4] /makeadmin /makemoderator /cartax /housetax /biztax");
        }
    }
    return 1;
}
CMD:getoldcar( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        new car;
        if ( sscanf( params, "d", car ) )
        {
            if ( OldCar[ playerid ] == 0 )
                return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /getoldcar [ automobilio id ] " );
            new Float: T[ 3 ];

            GetPlayerPos( playerid, T[ 0 ], T[ 1 ], T[ 2 ] );
            SetVehiclePos( OldCar[ playerid ], T[ 0 ], T[ 1 ], T[ 2 ] );
            SetVehicleVirtualWorld( OldCar[ playerid ], GetPlayerVirtualWorld(playerid) );
            return 1;
        }
        if(!IsValidVehicle(car))
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, tokios transporto priemonës nëra.");
        new Float: T[ 3 ];

        GetPlayerPos( playerid, T[ 0 ], T[ 1 ], T[ 2 ] );
        SetVehiclePos( car, T[ 0 ], T[ 1 ], T[ 2 ] );
        SetVehicleVirtualWorld( car, GetPlayerVirtualWorld(playerid) );
    }
    return 1;
}
CMD:gotopc( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        #pragma unused params
        if ( !IsPlayerInAnyVehicle( playerid ) )
        SetPlayerPos( playerid, 2292.1936,26.7535,25.9974);
        else SetVehiclePos( GetPlayerVehicleID( playerid ), 2292.1936,26.7535,25.9974);
        SetPlayerInterior    ( playerid, 0);
        SetPlayerVirtualWorld( playerid, 0);
        SendClientMessage    ( playerid, GRAD, "[AdmCmd] Persikeletë á nurodytà vietà: Palomino Creek");
    }
    return 1;
}
CMD:gotols( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        #pragma unused params
        if ( !IsPlayerInAnyVehicle( playerid ) )
        SetPlayerPos( playerid, 1540.1237, -1675.2844, 13.5500);
        else SetVehiclePos( GetPlayerVehicleID( playerid ), 1540.1237, -1675.2844, 13.5500);
        SetPlayerInterior    ( playerid, 0);
        SetPlayerVirtualWorld( playerid, 0);
        SendClientMessage    ( playerid, GRAD, "[AdmCmd] Persikeletë á nurodytà vietà: Los Santos.");
    }
    return 1;
}
CMD:gotomg( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        #pragma unused params
        if ( !IsPlayerInAnyVehicle( playerid ) )
        SetPlayerPos( playerid, 1313.8589,314.4103,19.4098);
        else SetVehiclePos( GetPlayerVehicleID( playerid ), 1313.8589,314.4103,19.4098);
        SetPlayerInterior    ( playerid, 0);
        SetPlayerVirtualWorld( playerid, 0);
        SendClientMessage    ( playerid, GRAD, "[AdmCmd] Persikeletë á nurodytà vietà: Montgomery.");
    }
    return 1;
}
CMD:gotobb( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        #pragma unused params
        if ( !IsPlayerInAnyVehicle( playerid ) )
        SetPlayerPos( playerid, 230.9343,-146.9140,1.4297);
        else SetVehiclePos( GetPlayerVehicleID( playerid ), 230.9343,-146.9140,1.4297);
        SetPlayerInterior    ( playerid, 0);
        SetPlayerVirtualWorld( playerid, 0);
        SendClientMessage    ( playerid, GRAD, "[AdmCmd] Persikeletë á nurodytà vietà: Blueberry");
    }
    return 1;
}
CMD:gotodl( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        #pragma unused params
        if ( !IsPlayerInAnyVehicle( playerid ) )
            SetPlayerPos( playerid, 641.5609,-559.9846,16.0626 );
        else
            SetVehiclePos( GetPlayerVehicleID( playerid ), 641.5609,-559.9846,16.0626 );
        SetPlayerInterior    ( playerid, 0 );
        SetPlayerVirtualWorld( playerid, 0 );
        SendClientMessage    ( playerid, GRAD, "[AdmCmd] Persikeletë á nurodytà vietà: Dillimore");
    }
    return 1;
}
CMD:gotofc( playerid, params[ ] )
{

    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        #pragma unused params
        if ( !IsPlayerInAnyVehicle( playerid ) )
            SetPlayerPos( playerid, -183.3534,1034.6022,19.7422 );
        else
            SetVehiclePos( GetPlayerVehicleID( playerid ), -183.3534,1034.6022,19.7422 );
        SetPlayerInterior    ( playerid, 0 );
        SetPlayerVirtualWorld( playerid, 0 );
        SendClientMessage    ( playerid, GRAD, "[AdmCmd] Persikeletë á nurodytà vietà: Fort Carson");
    }
    return true;
}
CMD:gotopos(playerid, params[])
{
    if(!IsPlayerAdmin(playerid) && !pInfo[ playerid ][ pAdmin ])
        return 0;

    new Float:x, Float:y, Float:z;
    if(sscanf(params,"fff", x, y, z))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas naudojimas /gotopos [X] [Y] [Z]");

    SetPlayerPos(playerid, x, y, z);
    SendClientMessage(playerid, COLOR_NEWS, "Sëkmingai persikëlëte á koordinates.");
    return 1;
}
CMD:gotolb( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        #pragma unused params
        if ( !IsPlayerInAnyVehicle( playerid ) )
            SetPlayerPos( playerid, -837.1216,1537.0032,22.5471 );
        else
            SetVehiclePos( GetPlayerVehicleID( playerid ), -837.1216,1537.0032,22.5471 );
        SetPlayerInterior    ( playerid, 0 );
        SetPlayerVirtualWorld( playerid, 0 );
        SendClientMessage    ( playerid, GRAD, "[AdmCmd] Persikeletë á nurodytà vietà: Las Barrancas");
    }
    return true;
}
CMD:mark( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        #pragma unused params
        GetPlayerPos( playerid, pInfo[ playerid ][ pCrashPos ][ 0 ],
                                pInfo[ playerid ][ pCrashPos ][ 1 ],
                                pInfo[ playerid ][ pCrashPos ][ 2 ]);
        pInfo[ playerid ][ pInt ] = GetPlayerInterior( playerid );
        pInfo[ playerid ][ pVirWorld ] = GetPlayerVirtualWorld( playerid );
        SendClientMessage( playerid, COLOR_WHITE, "[AdmCmd] Pozicija sëkmingai iðsaugota.");
    }
    return 1;
}
CMD:gotomark( playerid, params[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 1 )
    {
        #pragma unused params
        if ( !IsPlayerInAnyVehicle( playerid ) )
        SetPlayerPos( playerid, pInfo[ playerid ][ pCrashPos ][ 0 ],
                                pInfo[ playerid ][ pCrashPos ][ 1 ],
                                pInfo[ playerid ][ pCrashPos ][ 2 ]);
        else SetVehiclePos( GetPlayerVehicleID( playerid ),
                                pInfo[ playerid ][ pCrashPos ][ 0 ],
                                pInfo[ playerid ][ pCrashPos ][ 1 ],
                                pInfo[ playerid ][ pCrashPos ][ 2 ]);
        SetPlayerInterior    ( playerid, pInfo[ playerid ][ pInt ]);
        SetPlayerVirtualWorld( playerid, pInfo[ playerid ][ pVirWorld ]);
        SendClientMessage    ( playerid, GRAD, "[AdmCmd] Persikeletë á nurodytà vietà: /mark vieta.");
    }
    return 1;
}
CMD:givemoney(playerid,params[])
{
    if ( pInfo[ playerid ][ pAdmin ] >= 4 )
    {
        new giveplayerid,
            mn,
            string[126];
        if ( sscanf( params, "ud", giveplayerid,mn ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /givemoney [þaidëjo id][pinigai]");
        if ( !IsPlayerConnected( giveplayerid ) )      return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");

        GivePlayerMoney ( giveplayerid, mn );
        format          ( string, 126, "AdmWarn: Administratorius (%s) suteikë (/givemoney) veikëjui (%d) sumà: %s$",GetName(playerid),mn,GetName(giveplayerid));
        SendAdminMessage( COLOR_ADM, string );
        format          ( string, 56, "OOC suteikë pinigø suma: %d$", mn );
        AdminLog        ( pInfo[ playerid ][ pMySQLID ], pInfo[ giveplayerid ][ pMySQLID ], string );
    }
    return 1;
}
CMD:giveitem(playerid,params[])
{
    if(pInfo[ playerid ][ pAdmin ] < 4)
        return 0;

    new giveplayerid,
        itemid,
        amount,
        string[160];

    if(sscanf(params,"uii", giveplayerid, itemid, amount))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /giveitem [þaidëjo id/dalis vardo] [DaiktoID] [Kiekis(0 atëmimui)]");

    if(!IsPlayerConnected(giveplayerid))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");

    if(!IsValidItem(itemid))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: blogas daikto ID..");

    if(amount < 0)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: minimalus kiekis 1. Ávedus 0, daiktas bus atimtas.");


    if(!amount)
    {
        if(!IsItemInPlayerInventory(giveplayerid, itemid))
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, þaidëjas tokio daikto neturi.");

        format(string, sizeof(string), "AdmWarn: Administratorius (%s) atemë (%s) ið veikëjo (%s)",GetName(playerid), GetItemName(itemid), GetName(giveplayerid));
        SendAdminMessage(COLOR_LIGHTRED, string);
        GivePlayerItem(giveplayerid, itemid, -GetPlayerItemAmount(giveplayerid, itemid));
    }
    else 
    {
        if(IsItemDrug(itemid))
        {
            NarkLog(pInfo[ playerid ][ pMySQLID ], 6, pInfo[ giveplayerid ][ pMySQLID ], GetItemName(itemid), amount);
            NarkLog(pInfo[ giveplayerid ][ pMySQLID ], 5, pInfo[ playerid ][ pMySQLID ], GetItemName(itemid), amount);
        }
        if((IsPlayerInventoryFull(giveplayerid) && !IsItemStackable(itemid)) || (IsPlayerInventoryFull(giveplayerid) && IsItemStackable(itemid) && !IsItemInPlayerInventory(giveplayerid, itemid)))
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, þaidëjo inventorius pilnas.");

        if(itemid == ITEM_PHONE)
        {
            new more = random(32) * 1000;
            pInfo[giveplayerid][pPhone] = 110000 + pInfo[ giveplayerid ][ pMySQLID ] + more;
        }
        format(string, sizeof(string), "AdmWarn: Administratorius (%s) suteikë (%s), kiekis (%d) veikëjui (%s)",GetName(playerid),GetItemName(itemid),amount,GetName(giveplayerid));
        SendAdminMessage(COLOR_ADM, string );
        format(string, sizeof(string), "Davë daiktà: %s", GetItemName(itemid));
        AdminLog(pInfo[ playerid ][ pMySQLID ], pInfo[ giveplayerid ][ pMySQLID ], string );
        GivePlayerItem(giveplayerid, itemid, amount);
    }
    return 1;
}
CMD:giveweapon(playerid,params[])
{
    if ( pInfo[ playerid ][ pAdmin ] >= 4 )
    {
        new giveplayerid,
            mn,
            ammo,
            string[126],
            wepname[ 24 ];
        if ( sscanf( params, "ddd", giveplayerid, mn, ammo ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /giveweapon [þaidëjo id][Ginklas][Ammo]");

        if ( mn < 0 )      return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: blogas ginklo ID..");
        if ( ammo < 0 )      return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: blogas kulkø skaiøius..");
        if ( IsPlayerHaveManyGuns( giveplayerid, mn ) ) return true;
        
        if( mn == 19 || mn == 45 || mn == 44 || mn == 46 || mn == 39 ||
            mn == 38 || mn == 36 || mn == 35 || mn > 46 || mn == 18)
            return SendClientMessage( playerid, COLOR_WHITE, "Neleistinas ginklas ! ");

        if ( !IsPlayerConnected( giveplayerid ) )      return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");
        if ( IsPlayerInAnyVehicle( giveplayerid ) )    return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: þmogus yra tr. priemonëje." );

        if( ammo > 0 )
        {
            GivePlayerWeapon( giveplayerid, mn, ammo );
            GetWeaponName   ( mn, wepname, 24);
            format          ( string, 126, "AdmWarn: Administratorius (%s) suteikë ginklà (%s) su %d kulkomis, veikëjui (%s)",GetName(playerid),wepname,ammo,GetName(giveplayerid));
            SendAdminMessage( COLOR_ADM, string );
            GunLog          ( pInfo[ playerid ][ pMySQLID ], 6, pInfo[ giveplayerid ][ pMySQLID ], GetItemName( mn ), ammo );
            GunLog          ( pInfo[ giveplayerid ][ pMySQLID ], 5, pInfo[ playerid ][ pMySQLID ], GetItemName( mn ), ammo );
        }
        else
        {
            RemovePlayerWeapon( giveplayerid, mn );
            GetWeaponName   ( mn, wepname, 24);
            format          ( string, 126, "AdmWarn: Administratorius (%s) atëmë ginklà (%s) ið veikëjo (%s)",GetName(playerid),wepname,GetName(giveplayerid));
            SendAdminMessage( COLOR_ADM, string );
        }
    }
    return 1;
}
CMD:makeadmin(playerid,params[])
{
    if ( pInfo[ playerid ][ pAdmin ] >= 4 )
    {
        new giveplayerid,
            admin,
            string[126];
        if ( sscanf( params, "ud", giveplayerid, admin ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas: /makeadmin [þaidëjo id][Lygis]");
        if ( !IsPlayerConnected( giveplayerid ) )          return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, nurodytas veikëjo ID negalimas, kadangi toks ID nëra prisijungæs serveryje.");

        pInfo[ giveplayerid ][ pAdmin ] = admin;
        format          ( string, 126, "AdmWarn: Administratorius (%s) suteikë veikëjui (%s) %d lygio Administratoriaus statusà.",GetName(playerid),GetName(giveplayerid),admin);
        SendAdminMessage( COLOR_ADM, string );
    }
    return 1;
}


stock GetVehiclePlayerCount(vehicleid)
{
    new count;
    foreach(new i : Player)
        if(IsPlayerInVehicle(i, vehicleid))
            count++;
    return count;
}
stock HasVehicleDriver(vehicleid)
{
    foreach(new i : Player)
        if(IsPlayerInVehicle(i, vehicleid) && !GetPlayerVehicleSeat(i))
            return true;
    return false;
}
stock GetVehicleDriver(vehicleid)
{
    foreach(new i : Player)
        if(IsPlayerInVehicle(i, vehicleid) && !GetPlayerVehicleSeat(i))
            return i;
    return INVALID_PLAYER_ID;
}

stock GetVehicleOwnerName( id )
{
    new name[MAX_PLAYER_NAME+1],
        string[ 256 ];
    
    format(string, sizeof(string), "SELECT `Name` FROM `players` WHERE `id` = %d", id );
    new Cache:result = mysql_query(DbHandle, string);
    cache_get_field_content(0, "Name", name);
    cache_delete(result);
    return name;
}
stock AcesToSVehicle( vehicleid, playerid )
{
    printf("AcesToSVehicle(%d, %d). Player faction:%d Vehicle faction:%d Vehicle Rank:%d",
        vehicleid, playerid, 
        pInfo[ playerid ][ pMember ],
        sVehicles[ vehicleid ][ Faction ],
        sVehicles[ vehicleid ][ Rang ]);
    if ( cInfo[ vehicleid ][ cOwner ] != 0 ) return true;
    if ( sVehicles[ vehicleid ][ Faction ] > 0 && sVehicles[ vehicleid ][ Faction ] == pInfo[ playerid ][ pMember ] && sVehicles[ vehicleid ][ Rang ] <= pInfo[ playerid ][ pRank ] ) return true;
    else if ( sVehicles[ vehicleid ][ Job ] > 0 && pInfo[ playerid ][ pJob ] == sVehicles[ vehicleid ][ Job ] ) return true;
    else if ( sVehicles[ vehicleid ][ Faction ] == 0 && sVehicles[ vehicleid ][ Job ] == 0 ) return true;
    else return false;
}
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
    #if defined DEBUG 
        printf("OnPlayerEnterVehicle(%s, %d, %d)",GetName(playerid), vehicleid, ispassenger);
    #endif
    new Float:Kords[3];
    SetPVarInt( playerid, "FALSE_ENTER", 1 );
    if(cInfo[vehicleid][cLock] == 1)
    {
        GetPlayerPos( playerid, Kords[ 0 ], Kords[ 1 ], Kords[ 2 ] );
        SetPlayerPos( playerid, Kords[ 0 ], Kords[ 1 ], Kords[ 2 ] +0.1 );
        SetVehicleParamsForPlayer( vehicleid, playerid, 0, cInfo[ vehicleid ][ cLock ] );
        SetPVarInt( playerid, "FALSE_ENTER", 0 );
    }


    if ( !ispassenger )
    {
        if ( isLicCar( vehicleid ) ) return 1;

        if ( !AcesToSVehicle( vehicleid, playerid ) )
        {
            GetPlayerPos( playerid, Kords[ 0 ], Kords[ 1 ], Kords[ 2 ] );
            SetPlayerPos( playerid, Kords[ 0 ], Kords[ 1 ], Kords[ 2 ]+1 );
        }

        new model = GetVehicleModel( vehicleid );
        if ( pInfo[ playerid ][ pLicHeli ] == 0 && IsAPlane( model ) )
        {
            GetPlayerPos( playerid, Kords[ 0 ], Kords[ 1 ], Kords[ 2 ] );
            SetPlayerPos( playerid, Kords[ 0 ], Kords[ 1 ], Kords[ 2 ]+1 );
            SendClientMessage( playerid, GRAD, "Jûs neturite teisës valdyti arba nemokate valdyti lëktuvo." );
        }
        if ( pInfo[ playerid ][ pLicBoat ] == 0 && IsABoat( model ) )
        {
            GetPlayerPos( playerid, Kords[ 0 ], Kords[ 1 ], Kords[ 2 ] );
            SetPlayerPos( playerid, Kords[ 0 ], Kords[ 1 ], Kords[ 2 ]+1 );
            SendClientMessage( playerid, GRAD, "Jûs neturite teisës valdyti arba nemokate valdyti laivo." );
        }
        new ocupy = IsVehicleOcupied( vehicleid );
        if ( ocupy != INVALID_PLAYER_ID )
        {
            new string[ 126 ];
            format( string, sizeof(string), "Dëmesio, Jûsø tr. priemonæ ið Jûsø atëmë veikëjas: %s (ID:%d)", GetName( playerid ), playerid );
            SendClientMessage( ocupy, COLOR_WHITE, string );
        }
    }
    return 1;
}
stock IsVehicleOcupied( vehicleid )
{
    foreach(Player,i)
    {
        if ( IsPlayerInVehicle( i, vehicleid ) && GetPlayerVehicleSeat( i ) == 0 )
            return i;
    }
    return INVALID_PLAYER_ID;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    #if defined DEBUG
        printf("[debug] OnPlayerExitVehicle(%s, %d)", GetName(playerid), vehicleid);
    #endif
    return 1;
}

forward PlayerReturnToTrashVehicle(playerid,vehicleid);
public PlayerReturnToTrashVehicle(playerid,vehicleid)
{
    if(IsPlayerInVehicle(playerid, vehicleid))
        return 1;

    EndTrashMission(playerid);
    SendClientMessage(playerid, GRAD,"Nespëjote gráþti á transporto priemonà, todël misija buvo baigta.");
    return 1;
}

stock isLicCar( vehicleid )
{
    if ( cInfo[ vehicleid ][ cOwner ] != 0 ) return false;
    if ( sVehicles[ vehicleid ][ Faction ] == -1 ) return true;
    else return false;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    #if defined DEBUG
        printf("OnPlayerStateChange(%s, %d, %d)", GetName(playerid), newstate, oldstate);
    #endif
    SetPVarInt( playerid, "PLAYER_STATE", newstate );

    if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
    {
        if(!IsDriveByWeapon(GetPlayerWeapon(playerid)))
        {
            SetPlayerArmedWeapon(playerid, 0);
        }
        LastVehicleDriverSqlId[ GetPlayerVehicleID(playerid) ] = GetPlayerSqlId(playerid);
    }


    if(newstate == PLAYER_STATE_DRIVER)
    {
        new veh = GetPlayerVehicleID( playerid );
         // Anticheat test 
        new vehicleid = veh;
        if(!TabCanPlayerEnterFactionVehicle(playerid, vehicleid))
        {
            new string[180];
            format(string, sizeof(string), "[OnPlayerStateChange]Zaidejas %s ilipo i masina(ID:%d SqlID:%d Owner:%d Lock:%d) i kuria iltip negalejo. (Zaidejo darbo sql id:%d). Newstate:%d oldstate:%d",
                GetName(playerid), vehicleid, sVehicles[ vehicleid ][ Id ], cInfo[ vehicleid ][ cOwner ], cInfo[ vehicleid ][ cOwner ], fInfo[PlayerFaction(playerid)][fID], newstate, oldstate);
            ACTestLog(string);
        }
        // End of anticheat test 

        ShowPlayerInfoText( playerid );
        SetPVarInt( playerid, "PLAYER_VEH_MODEL", GetVehicleModel( veh ) );
        if ( cInfo[ veh ][ cLock ] == 1 && GetPVarInt( playerid, "FALSE_ENTER" ) == 0 )
            return KickPlayer( "AC", playerid, "álipo á uþrakinta tr. priemone." );


        DeletePVar( playerid, "FALSE_ENTER" );
        if ( cInfo[ veh ][ cOwner ] == 0 && sVehicles[ veh ][ Job ] > 0 )
        {

        }


        if ( Audio_IsClientConnected( playerid ) )
        {
            Audio_StopRadio( playerid );
            if ( VehicleRadio[ veh ] != 99 )
            {
                SetPlayerRadio( playerid, VehRadio[ veh ] );
                SetPlayerRadioVolume( playerid, GetPVarInt( playerid, "VOLUME" ) );
            }
        }
        else if ( Audio_IsClientConnected( playerid ) == 0 )
        {
            if ( VehicleRadio[ veh ] != 99 )
                SetPlayerRadio( playerid, VehRadio[ veh ] );
        }

        OldCar[ playerid ] = veh;

        if ( isLicCar( veh ) )
        {
            SendClientMessage( playerid, COLOR_LIGHTRED2,"** Los Santos Driver License Center "),
            SendClientMessage( playerid, COLOR_LIGHTRED2,"** KAINORAÐTIS: Automobilio - 1200$ | Motociklo - 900$ | Laivybos - 300$ |Skraidymo - 5600$"),				
            SendClientMessage( playerid, COLOR_WHITE," ** Norëdami pradëti egzaminà licencijai ágyti raðykite komandà: /takelesson ");
            return 1;
        }
        
        if(sVehicles[ veh ][ Job ] == JOB_TRASH)
        {
            KillTimer(TrashTimer[ playerid ]);
            if(TrashMission[ playerid]  == TRASH_MISSION_NONE)
            {
                new string[128];
                format(string,sizeof(string),"~n~~n~~n~Rinkite siuksles ið pazymetø tasku~n~Naudokite /takegarbage ju paemimui~n~Siame sunkvezimyje yra %d maisai",TrashBagsInTrashVehicle[ veh ]);
                GameTextForPlayer(playerid, string, 3000, 7);
                SendClientMessage(playerid, COLOR_NEWS, string);
            }
            // Returninam nes nenorim kad sakytu "SPAUSKITE ALT"
            return 1;

        }
    

        if(Engine[veh] == false && VehicleHasEngine( GetVehicleModel( veh ) ) )
            ShowInfoText(playerid, "~w~SPAUSKITE ~r~ALT~n~~w~Kad uzvestumete automobili.", 2000);

        if( !VehicleHasEngine( GetVehicleModel( veh ) ) )
            VehicleEngine( veh, 1 );

        if ( pInfo[ playerid ][ pMySQLID ] == cInfo[ veh ][ cOwner ] && cInfo[ veh ][ cTicket ] > 0)
        {
            new string[ 126 ];
            format           ( string, 126, "Jûs nesate sumokëjàs automobilio baudos, kurios suma lygi $%d", cInfo[ veh ][ cTicket ] );
            SendClientMessage( playerid, COLOR_WHITE, string );
            return 1;
        }
    }
    else if(newstate == PLAYER_STATE_ONFOOT)
    {
        UpdatePlayerInfoText(playerid);

        new veh = OldCar[ playerid ];
        if(sVehicles[ veh ][ Job ] == JOB_TRASH && pInfo[ playerid ][ pJob ] == JOB_TRASH)
        {
            if(TrashMission[ playerid ] != TRASH_MISSION_NONE)
            {
                // PAdidinta iki 90 sekundziu Mantyvdo nurodymais.
                TrashTimer[ playerid ] = SetTimerEx("PlayerReturnToTrashVehicle", 90000, false, "ii",playerid,veh);
                GameTextForPlayer(playerid, "~n~~n~~n~Turite grizti i automobili per 90 sekundziu~n~, kitaip misija baigsis.",5000, 7);
            }
            else 
                SetVehicleToRespawn(veh);
            
            return 1;
        }
    }
    if(oldstate == PLAYER_STATE_DRIVER)
    {
        if ( VehicleRadio[ OldCar[ playerid ] ] != 99 )
            StopPlayerRadio( playerid );

        Check_VHP( OldCar[ playerid ], 1 );
        if(GetPVarInt(playerid,"used") == 1)
        {
            SetCameraBehindPlayer(playerid);
            DestroyPlayerObject(playerid,vehview[playerid]);
            SetPVarInt(playerid,"used",0);
        }
        if ( Belt[ playerid ] == true )
        {
            new string[ 126 ];
            format      ( string, 126, "* %s iðlipdamas atsisegë saugos dirþà .", GetPlayerNameEx( playerid ) );
            ProxDetector( 15.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
            Belt[ playerid ] = false;
        }
        if ( Checkpoint[ playerid ] == CHECKPOINT_LIC )
        {
            DisablePlayerCheckpoint( playerid );
            Checkpoint[ playerid ] = CHECKPOINT_NONE;
            SetVehicleToRespawn( OldCar[ playerid ] );
            SetPVarInt( playerid, "LIC_TYPE", 0 );
            SetPVarInt( playerid, "LIC_TIME", 0 );
        }
    }
    if(oldstate == PLAYER_STATE_PASSENGER)
    {
        if ( VehicleRadio[ OldCar[ playerid ] ] != 99 )
            StopPlayerRadio( playerid );

        if(GetPVarInt(playerid,"used") == 1)
        {
            SetCameraBehindPlayer(playerid);
            DestroyPlayerObject(playerid,vehview[playerid]);
            SetPVarInt(playerid,"used",0);
        }

        if ( Belt[ playerid ] == true )
        {
            new string[ 126 ];
            format( string, 126, "* %s atsisega saugos dirþà ir iðlipa ið tr. priemonës.", GetPlayerNameEx( playerid ) );
            ProxDetector( 15.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
            Belt[ playerid ] = false;
        }
    }
    if(newstate == PLAYER_STATE_PASSENGER)
    {
        new veh = GetPlayerVehicleID( playerid );

        if(IsVehicleSeatUsedForCargo(veh, GetPlayerVehicleSeat(playerid)))
        {
            RemovePlayerFromVehicle(playerid);
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite sësti èia, kadangi èia pridëtà kroviniø.");
        }

        if ( Audio_IsClientConnected( playerid ) )
        {
            Audio_StopRadio( playerid );
            if ( VehicleRadio[ veh ] != 99 )
            {
                SetPlayerRadio( playerid, VehRadio[ veh ] );
                SetPlayerRadioVolume( playerid, GetPVarInt( playerid, "VOLUME" ) );
            }
        }
        else if ( Audio_IsClientConnected( playerid ) == 0 )
        {
            if ( VehicleRadio[ veh ] != 99 )
                SetPlayerRadio( playerid, VehRadio[ veh ] );
        }

        OldCar[ playerid ] = veh;
    }
    return 1;
}
public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
    if (pInfo[ playerid ][ pAdmin ] >= 1)
    {
        MapAndreas_FindZ_For2DCoord(fX, fY, fZ);
        if (IsPlayerInAnyVehicle(playerid))
            return SetVehiclePos(GetPlayerVehicleID(playerid), fX, fY, fZ+1);
        else
            return SetPlayerPos(playerid, fX, fY, fZ+1);
    }
    return 1;
}

stock IsVehicleSeatUsedForCargo(vehicleid, seat)
{
    // priekines vietose nebuna kroviniu
    if(seat < 2)
        return false;
    new model = GetVehicleModel(vehicleid);

    switch(model)
    {
        case 413, 459, 482, 440, 498:
        {
            if(GetVehicleCargoCount(vehicleid))
                return true;
        }
    }
    return false;
}

GetVehicleCargoCount(vehicleid,cargoid = -1)
{
    new count = 0;
    for(new i = 0; i < sizeof VehicleCargo[]; i++)
    {
        if(VehicleCargo[ vehicleid ][ i ][ Amount ])
			if(cargoid == -1)
				count += VehicleCargo[ vehicleid ][ i ][ Amount ];
			else 
				if(VehicleCargo[ vehicleid ][ i ][ CargoId ] ==cargoid)
					return VehicleCargo[ vehicleid ][ i ][ Amount ];
    }
    return count;
}

public OnPlayerEnterCheckpoint(playerid)
{
    #if defined DEBUG
        printf("[debug] OnPlayerEnterCheckpoint(%s)", GetName(playerid));
    #endif
    
    switch(Checkpoint[playerid])
    {
        case CHECKPOINT_CAR:
        {
            DisablePlayerCheckpoint(playerid);
            Checkpoint[playerid] = CHECKPOINT_NONE;
            PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
            return 1;
        }
		
		case CHECKPOINT_SHIP:
		{
			DisablePlayerCheckpoint(playerid);
            Checkpoint[playerid] = CHECKPOINT_NONE;
            PlayerPlaySound(playerid, 1057, 2774.0313,-2417.8794,13.6462);
            return 1;
		}
  
        case CHECKPOINT_TRASH_DROPOFF:
        {
            new vehicleid = GetPVarInt(playerid, "TrashMission_Vehicle");
            pInfo[ playerid ][ pPayCheck ] += TRASH_MISSION_COMPLETED_BONUS;
            CurrentTrashCp[ playerid ]  = 0;
            ShowMissionTrashObjects(playerid, TrashMission[ playerid ] );
            TrashMission[ playerid ] = TRASH_MISSION_NONE;
            cmd_ame(playerid, "pasuka automobilio raktelá ir iðjungia variklá.");
            SendClientMessage(playerid, GRAD, "Baigëte misijà. Jums prie algos buvo pridëti " #TRASH_MISSION_COMPLETED_BONUS "$ Norëdami pradëti dar vienà misijà: /startmission");
            
            VehicleEngine(vehicleid, 0);
            Engine[vehicleid] = false;
            TrashBagsInTrashVehicle[ vehicleid ] = 0;
            DisablePlayerCheckpoint( playerid );
            Checkpoint[ playerid ] = CHECKPOINT_NONE;
        }
        case CHECKPOINT_BACKUP:
        {
            DisablePlayerCheckpoint( playerid );
            Checkpoint[ playerid ] = CHECKPOINT_NONE;
            SetPVarInt( playerid, "BACKUP", INVALID_PLAYER_ID );
        }
        case CHECKPOINT_LIC:
        {
            new veh = GetPlayerVehicleID( playerid ),
                Float:VehHealth;
            GetVehicleHealth( veh, VehHealth );
            switch( GetPVarInt( playerid, "LIC_TYPE" ) )
            {
                case 1:
                {
                    if ( GetPVarInt( playerid, "LIC_CP" ) == 38)
                    {
                        if ( PlayerMoney[ playerid ] > 1119 )
                        {
                            new mistakes = GetPVarInt( playerid, "LIC_MISTAKE" ),
                                string[ 256 ];
                            if ( mistakes > 0 )
                                format( string, 256, "\tVirðijote greitá %d kartà (-us)\n", mistakes );
                            if ( VehHealth < 900 )
                                format( string, 256, "%s\tAutomobilis buvo apgadinta\n",string );
                            if ( strlen( string ) > 0 )
                            {
                                format( string, 256, "{FFFFFF}Jûs padarëte ðiais klaidas:\n%s\nTodël egzaminas skubiai nutraukiamas. ", string );
                                ShowPlayerDialog( playerid, 9999, DIALOG_STYLE_MSGBOX , "Egzaminas neiðlaikytas", string, "Iðjungti", "");
                                SetVehicleToRespawn( veh );
                                Checkpoint[ playerid ] = CHECKPOINT_NONE;
                                SetPVarInt             ( playerid, "LIC_TIME", 0 );
                                DisablePlayerCheckpoint( playerid );
                                return 1;
                            }
                            pInfo[ playerid ][ pLicCar ] = 1;
                            GivePlayerItem(playerid, ITEM_TEORIJA, -1);
							SendClientMessage(playerid, COLOR_LIGHTRED2,"** Los Santos Driver License Center "),		
							SendClientMessage(playerid, COLOR_WHITE," ** Jûs sëkmingai iðsilaikëte vairavimo testà ir ágijote licencija vairuoti automobilá. ");
                            GivePlayerMoney( playerid, -1200 ); //Teisiø kainà.
                            PlayerPlaySound( playerid, 1057, 0.0, 0.0, 0.0);
                            SetPVarInt     ( playerid, "LIC_TIME", 0 );
                            DisablePlayerCheckpoint( playerid );
                            Checkpoint[ playerid ] = CHECKPOINT_NONE;
                            SetVehicleToRespawn( veh );
                            return 1;
                        }
                        else
                        {
                            SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, neturite pakankamai pinigø, kad galëtumëte laikyti egzaminà. Egzaminas kainuojà 1200$ " );
                            return 1;
                        }
                    }
                    SetPVarInt     ( playerid, "LIC_CP", GetPVarInt( playerid, "LIC_CP" ) + 1 );
                    ShowInfoText   ( playerid,"~w~Vaziuokite i tolimesni zymekli",3000 );
                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 0.0);
                    DisablePlayerCheckpoint(playerid);
                    Checkpoint[playerid] = CHECKPOINT_NONE;
                    setLicenseCp   ( playerid );
                    return 1;
                }
                case 2:
                {
                    if ( GetPVarInt( playerid, "LIC_CP" ) == 38 )
                    {
                        if ( PlayerMoney[ playerid ] > 899 )
                        {
                            new mistakes = GetPVarInt( playerid, "LIC_MISTAKE" ),
                                string[ 256 ];
                            if ( mistakes > 0 )
                                format( string, 256, "\tVirðijote greitá %d kartà (-us)\n", mistakes );
                            if ( VehHealth < 900 )
                                format( string, 256, "%s\tMotociklas buvo apgadintas\n",string );
                            if ( strlen( string ) > 0 )
                            {
                                format( string, 256, "{FFFFFF}Jûs padarëte ðiais klaidas:\n%s\nTodël egzaminas skubiai nutraukiamas.", string );
                                ShowPlayerDialog( playerid, 9999, DIALOG_STYLE_MSGBOX , "Vairavimo testas neiðlaikytas", string, "Iðjungti", "");
                                SetVehicleToRespawn( veh );
                                GivePlayerItem(playerid, ITEM_TEORIJA, -1);
                                Checkpoint[ playerid ] = CHECKPOINT_NONE;
                                SetPVarInt             ( playerid, "LIC_TIME", 0 );
                                DisablePlayerCheckpoint( playerid );
                                return 1;
                            }
                            SetVehicleToRespawn( veh );
                            pInfo[ playerid ][ pLicMoto ] = 1;
							SendClientMessage( playerid, COLOR_LIGHTRED2,"** Los Santos Driver License Center "),		
							SendClientMessage( playerid, COLOR_WHITE," ** Jûs sëkmingai iðsilaikëte motociklo vairavimo testà ir ágijote licencija vairuoti motocikla. ");
                            GivePlayerMoney( playerid, -900 );//Motociklo teisiø kainà
                            PlayerPlaySound( playerid, 1057, 0.0, 0.0, 0.0);
                            SetPVarInt     ( playerid, "LIC_TIME", 0 );
                            DisablePlayerCheckpoint( playerid );
                            Checkpoint[ playerid ] = CHECKPOINT_NONE;
                            return 1;
                        }
                        else
                        {
                            SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, neturite pakankamai pinigø, kad galëtumëte laikyti egzaminà. Egzaminas kainuojà 900$ " );
                            return 1;
                        }
                    }
                    SetPVarInt     ( playerid, "LIC_CP", GetPVarInt( playerid, "LIC_CP" ) + 1 );
                    ShowInfoText   ( playerid,"~w~Vaziuokite i tolimesni zymekli",3000 );
                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 0.0);
                    DisablePlayerCheckpoint(playerid);
                    Checkpoint[playerid] = CHECKPOINT_NONE;
                    setLicenseCp   ( playerid );
                    return 1;
                }
                case 4:
                {
                    if ( GetPVarInt( playerid, "LIC_CP" ) == 13 )
                    {
                        if ( PlayerMoney[ playerid ] >= 299 )
                        {
                            new
                                string[ 256 ];
                            if ( VehHealth < 900 )
                                format( string, 256, "%s\tValtis buvo apgadinta\n",string );
                            if ( strlen( string ) > 0 )
                            {
                                format( string, 256, "{FFFFFF}Jûs padarëte ðiais klaidas:\n%s\nTodël egzaminas skubiai nutraukiamas.", string );
                                ShowPlayerDialog( playerid, 9999, DIALOG_STYLE_MSGBOX , "Laivybos egzaminas nutrauktas", string, "Iðjungti", "");
                                SetVehicleToRespawn( veh );
                                GivePlayerItem(playerid, ITEM_TEORIJA, -1);

                                Checkpoint[ playerid ] = CHECKPOINT_NONE;
                                SetPVarInt             ( playerid, "LIC_TIME", 0 );
                                DisablePlayerCheckpoint( playerid );
                                return 1;
                            }
                            SetVehicleToRespawn( veh );
                            pInfo[ playerid ][ pLicBoat ] = 1;
							SendClientMessage( playerid, COLOR_LIGHTRED2,"** Los Santos License Center "),		
							SendClientMessage( playerid, COLOR_WHITE," ** Sëkmingai iðsilaikëte laivybos egzaminà ir ágijote licencija plaukti/valdyti bet koká laivà. ");
                            GivePlayerMoney( playerid, -300 );
                            PlayerPlaySound( playerid, 1057, 0.0, 0.0, 0.0);
                            SetPVarInt     ( playerid, "LIC_TIME", 0 );
                            DisablePlayerCheckpoint( playerid );
                            Checkpoint[ playerid ] = CHECKPOINT_NONE;
                            return 1;
                        }
                        else
                        {
                            SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, neturite pakankamai pinigø, kad galëtumëte laikyti egzaminà. Egzaminas kainuojà 300$ " );
                            return 1;
                        }
                    }
                    SetPVarInt( playerid, "LIC_CP", GetPVarInt( playerid, "LIC_CP" ) + 1 );
                    ShowInfoText( playerid,"~w~Plaukite i kita zymekli",3000 );
                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 0.0);
                    DisablePlayerCheckpoint(playerid);
                    Checkpoint[playerid] = CHECKPOINT_NONE;
                    setLicenseCp( playerid );
                    return 1;
                }
            }
        }
        case CHECKPOINT_TLC:
        {
            DisablePlayerCheckpoint( playerid );
            Checkpoint[ playerid ] = CHECKPOINT_NONE;
            return 1;
        }
    }
    return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
    return 1;
}


public OnPlayerEnterRaceCheckpoint(playerid)
{
    switch( Checkpoint[ playerid ] )
    {
        case CHECKPOINT_LIC:
        {
            switch( GetPVarInt( playerid, "LIC_TYPE" ) )
            {
                case 3:
                {
                    if ( GetPVarInt( playerid, "LIC_CP" ) == 14 )
                    {
                        new veh = GetPlayerVehicleID( playerid ),
                            Float:VehHealth;
                        GetVehicleHealth( veh, VehHealth );
                        if ( PlayerMoney[ playerid ] >= 5599)
                        {
                            new string[ 256 ];
                            if ( VehHealth < 900 )
                                format( string, 256, "%s\tLëktuvas buvo apdauþytas\n ",string );
                            if ( strlen( string ) > 0 )
                            {
                                format( string, 256, "{FFFFFF}Jûs padarëte ðiais klaidas:\n%s\nTodël neiðlaikëte skraidymo testo. ", string );
                                ShowPlayerDialog( playerid, 9999, DIALOG_STYLE_MSGBOX , "Skraidymo testas neiðlaikytas", string, "Iðjungti", "");
                                SetVehicleToRespawn( veh );
                                GivePlayerItem(playerid, ITEM_TEORIJA, -1);

                                Checkpoint[ playerid ] = CHECKPOINT_NONE;
                                SetPVarInt             ( playerid, "LIC_TIME", 0 );
                                DisablePlayerCheckpoint( playerid );
                                return 1;
                            }
                            SetVehicleToRespawn( veh );
                            pInfo[ playerid ][ pLicHeli ] = 1;
							SendClientMessage( playerid, COLOR_LIGHTRED2,"** Los Santos Piloting License Center "),		
							SendClientMessage( playerid, COLOR_WHITE," ** Jûs sëkmingai iðsilaikëte vairavimo testà ir ágijote licencija vairuoti. ");
                            GivePlayerMoney            ( playerid, -5600 );
                            PlayerPlaySound            ( playerid, 1057, 0.0, 0.0, 0.0);
                            SetPVarInt                 ( playerid, "LIC_TIME", 0 );
                            Data_SetPlayerLocation(playerid, "license_pilot_end");
                            DisablePlayerRaceCheckpoint( playerid );
                            Checkpoint[ playerid ] = CHECKPOINT_NONE;
                            return 1;
                        }
                        else
                        {
                            SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, neturite pakankamai pinigø, kad galëtumëte laikyti egzaminà. Egzaminas kainuojà 5600$ " );
                            return 1;
                        }
                    }
                    SetPVarInt      ( playerid, "LIC_CP", GetPVarInt( playerid, "LIC_CP" ) + 1 );
                    ShowInfoText    ( playerid,"~w~Skriskite i kita zymekli",3000 );
                    PlayerPlaySound ( playerid, 1057, 0.0, 0.0, 0.0);
                    DisablePlayerCheckpoint(playerid);
                    Checkpoint[playerid] = CHECKPOINT_NONE;
                    setLicenseCp    ( playerid );
                    return 1;
                }
            }
        }
    }
    return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
    if ( GetPVarInt( playerid, "LIC_CP" ) == 12 && GetPVarInt( playerid, "LIC_TYPE" ) == 3 )
        DisablePlayerRaceCheckpoint(playerid);
    return 1;
}

public OnRconCommand(cmd[])
{
    return 1;
}

public OnPlayerRequestSpawn(playerid)
{
    return 1;
}

public OnObjectMoved(objectid)
{
    return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
    return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
    return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
    #if defined DEBUG
        printf("[debug] OnVehicleMod(%s, %d, %d)", GetName(playerid), vehicleid, componentid);
    #endif
    KickPlayer( "AC", playerid, "Tuninguoja automobilá, tuningavimo salone." );
    SetVehicleToRespawn( vehicleid );
    return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
    #if defined DEBUG
        printf("[debug] OnVehiclePaintjob(%s, %d, %d)", GetName(playerid), vehicleid, paintjobid);
    #endif
    return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
    #if defined DEBUG
        printf("[debug] OnVehicleRespray(%s, %d, %d, %d)", GetName(playerid), vehicleid, color1, color2);
    #endif
    return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
    return 1;
}

public OnPlayerExitedMenu(playerid)
{
    return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
    #if defined DEBUG
        printf("[debug] OnPlayerInteriorChange(%s, %d, %d)", GetName(playerid), newinteriorid, oldinteriorid);
    #endif
    CancelEdit(playerid);
    return 1;
}
public OnPlayerEnterDynamicArea(playerid, areaid)
{
    new plstate = GetPVarInt( playerid, "PLAYER_STATE" );
    foreach(Audio3D,ip)
    {
        if ( aInfo[ ip ][ aArea ] == areaid &&
             aInfo[ ip ][ aObjekt ] > 0 &&
             plstate == PLAYER_STATE_ONFOOT )
            return Set3DAudioForPlayer( playerid, aInfo[ ip ][ aStation ], ip);
    }
    return 1;
}
public OnPlayerLeaveDynamicArea(playerid, areaid)
{
    return 1;
}

FUNKCIJA:Mechaniku( playerid, left )
{
    new Keys,
        ud,
        lr,
        Car = GetNearestVehicle( playerid, 5.0 );
    GetPlayerKeys( playerid, Keys, ud, lr );
    if ( Car != INVALID_VEHICLE_ID && GetPlayerWeapon( playerid ) == 41)
    {
        new string[ 56 ],
            give = GetPVarInt( playerid, "OFFER2_ID" ),
            money = GetPVarInt( playerid, "OFFER2_COAST" );
        if ( !IsPlayerConnected( give ) )
            return 1;

        if ( Keys == KEY_FIRE )
        {
            format( string, 56, "PERDAZOMA %d", left );
            GameTextForPlayer( playerid, string, 500, 3 );
            left --;
        }
        else
        {
            format( string, 56, "DAR LIKO %d", left );
            GameTextForPlayer( playerid, string, 500, 3 );
        }
        if ( left > 0 )
                SetTimerEx("Mechaniku", 500, false, "dd", playerid, left );
        else if ( left == 0 )
        {
            ChangeVehicleColor( Car, GetPVarInt( playerid, "COLOR_1" ),GetPVarInt( playerid, "COLOR_2" ) );
            SendClientMessage( playerid, COLOR_WHITE, " ** Automobilis sëkmingai perdaþytas norima spalva " );
            RemovePlayerWeapon( playerid, 41 );

            GivePlayerMoney( playerid, money );
            GivePlayerMoney( give, -money );

            SendClientMessage( give, COLOR_WHITE, " ** Jûsø automobilis buvo sëkmingai perdaþytas. " );

            DeletePVar( playerid, "OFFER2_ID" );
            DeletePVar( playerid, "OFFER2_COAST" );
            return 1;
        }
    }
    else
    {
        RemovePlayerWeapon( playerid, 41 );
        return true;
    }
    return 1;
}
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    //Anti CuffedJump
    if(newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED) 
        ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);

    if( PRESSED(KEY_CROUCH) && GetPlayerCameraMode(playerid) == 55 )
    {
        SetPlayerArmedWeapon(playerid, 0);
        PutPlayerInVehicle(playerid, GetPlayerVehicleID ( playerid ), GetPlayerVehicleSeat(playerid));
    }

    if ( PRESSED( KEY_SPRINT ) )
    {
        if(gPlayerUsingLoopingAnim[playerid] == true)
        {
            gPlayerUsingLoopingAnim[playerid] = false;
            ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
        }
        if(IsOnePlayAnim[playerid] == true)
        {
            ClearAnimations(playerid);
            IsOnePlayAnim[playerid] = false;
        }
        if(BackOut[playerid] == 1)
        {
            ApplyAnimation(playerid,"SUNBATHE","parksit_m_out",3.0,0,0,0,0,0);
        }
        if(BackOut[playerid] == 2)
        {
            SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
            RemovePlayerAttachedObject( playerid, 3 );
        }
        if(BackOut[playerid] == 4)
        {
            ApplyAnimation(playerid,"CAR_CHAT","carfone_out",3.0,0,0,0,0,0);
        }
        if(BackOut[playerid] == 5)
        {
            ApplyAnimation(playerid,"SUNBATHE","Lay_Bac_out",3.0,0,0,0,0,0);
        }
        if(BackOut[playerid] == 6)
        {
            ApplyAnimation(playerid,"ON_LOOKERS","shout_out",3.0,0,0,0,0,0);
        }
        if(BackOut[playerid] == 7)
        {
            ApplyAnimation(playerid,"ON_LOOKERS","pointup_out",3.0,0,0,0,0,0);
        }
        if(BackOut[playerid] == 8)
        {
            ApplyAnimation(playerid,"PED","seat_up",3.0,0,0,0,0,0);
        }
        BackOut[playerid] = 0;
    }
    if(!IsPlayerInAnyVehicle(playerid) && newkeys & KEY_SECONDARY_ATTACK)
    {
        if ( Ruko[ playerid ] > 0 )
        {
            SetPlayerSpecialAction( playerid, SPECIAL_ACTION_NONE);
            Ruko[ playerid ] = 0;
        }
        new Float:pos[3];
        GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
        if(pos[1] < -1301.4 && pos[1] > -1303.2417 && pos[0] < 1786.2131 && pos[0] > 1784.1555)    // He is using the elevator button
            ShowElevatorDialog(playerid);
        else    // Is he in a floor button?
        {
            if(pos[1] > -1301.4 && pos[1] < -1299.1447 && pos[0] < 1785.6147 && pos[0] > 1781.9902)
            {
                // He is most likely using it, check floor:
                new i=20;
                while(pos[2] < GetDoorsZCoordForFloor(i) + 3.5 && i > 0)
                    i --;

                if(i == 0 && pos[2] < GetDoorsZCoordForFloor(0) + 2.0)
                    i = -1;

                if(i <= 19)
                {
                    CallElevator(playerid, i + 1);
                    GameTextForPlayer(playerid, "~r~Liftas iskviestas.", 3500, 4);
                }
            }
        }
    }
    if ( PRESSED( KEY_WALK ) && pInfo [playerid][pWalkStyle] == 1)
    {
        if ( !IsPlayerInAnyVehicle( playerid ) )
            LoopingAnim(playerid,"PED","WALK_Gang1",4.1,1,1,1,1,1);
    }
    if ( PRESSED( KEY_WALK ) && pInfo [playerid][pWalkStyle] == 2)
    {
        if ( !IsPlayerInAnyVehicle( playerid ) )
            LoopingAnim(playerid,"PED","WALK_Gang2",4.1,1,1,1,1,1);
    }
    if ( PRESSED( KEY_WALK ) && pInfo [playerid][pWalkStyle] == 3)
    {
        if ( !IsPlayerInAnyVehicle( playerid ) )
            LoopingAnim(playerid,"PED","WALK_FatWalk",4.1,1,1,1,1,1);
    }
    if ( PRESSED( KEY_WALK ) && pInfo [playerid][pWalkStyle] == 4)
    {
        if ( !IsPlayerInAnyVehicle( playerid ) )
            LoopingAnim(playerid,"PED","Wuzi_walk",3.0,1,1,1,1,1);
    }
    if ( PRESSED( KEY_WALK ) && pInfo [playerid][pWalkStyle] == 5)
    {
        if ( !IsPlayerInAnyVehicle( playerid ) )
            LoopingAnim(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1);
    }
    if ( PRESSED( KEY_WALK ) && pInfo [playerid][pWalkStyle] == 6)
    {
        if ( !IsPlayerInAnyVehicle( playerid ) )
            LoopingAnim(playerid,"PED","Walk_player",4.1,1,1,1,1,1);
    }
    if ( PRESSED( KEY_WALK ) && pInfo [playerid][pWalkStyle] == 7)
    {
        if ( !IsPlayerInAnyVehicle( playerid ) )
            LoopingAnim(playerid,"PED","woman_walknorm",4.1,1,1,1,1,1);
    }
    if ( PRESSED( KEY_WALK ) && pInfo [playerid][pWalkStyle] == 8)
    {
        if ( !IsPlayerInAnyVehicle( playerid ) )
            LoopingAnim(playerid,"PED","woman_walkpro",4.1,1,1,1,1,1);
    }
    if ( PRESSED( KEY_YES ) )
        cmd_inv( playerid, "" );
    if ( PRESSED( KEY_ACTION ) )
    {
        if ( IsPlayerInAnyVehicle( playerid ) )
        {

            if ( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER )
                return 1;
            new engine, lights, alarm, doors, bonnet, boot, objective,
                vehicleid = GetPlayerVehicleID( playerid );

            GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

            if ( lights == 1 )
                return SetVehicleParamsEx(vehicleid, engine, 0, alarm, doors, bonnet, boot, objective);
            else
                return SetVehicleParamsEx(vehicleid, engine, 1, alarm, doors, bonnet, boot, objective);
        }
        return 1;
    }
    
    if ( HOLDING( KEY_FIRE ) )
    {
        if ( GetPVarInt( playerid, "MECHANIC" ) == 1 && GetPlayerWeapon( playerid ) == 41 )
        {
            new car = GetNearestVehicle( playerid, 5.0 );
            if ( car != INVALID_VEHICLE_ID )
            {
                DeletePVar( playerid, "MECHANIC" );
                SetTimerEx("Mechaniku", 500, false, "dd", playerid, 30 );
            }
        }
    }
    if( newkeys == KEY_SECONDARY_ATTACK )
    {
        new veh = GetPlayerVehicleID(playerid);
        if( IsPlayerInAnyVehicle(playerid) && StartingEngine[playerid] == false && Engine[veh] == false && Laikas[playerid] == 0)
        {
            RemovePlayerFromVehicle(playerid);
            StartingEngine[playerid] = false;
            return 1;
        }
    }
    if(IsKeyJustDown(KEY_FIRE,newkeys,oldkeys))
    {
        new veh = GetPlayerVehicleID(playerid),
            string[ 126 ];

        if ( GetPVarInt( playerid, "MOKESTIS" ) >= BENZO_KAINA )
        {
            StopFillUp(playerid);
        }
        
        new
            bool:found = false;
                
        foreach(Player, x)
        {
            if(pInfo[ x ][ pAdmin ] >= 1 && AdminDuty[ x ])
            {
                found = true;
                break;
            }
        }
        
        if( !isLicCar( veh ) && Engine[veh] == false && VehicleHasEngine(GetVehicleModel(veh)) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            if(cInfo[ veh ][ cOwner ] > 0 && CheckCarKeys(playerid,veh) == 0)
            {
                if ( pInfo[ playerid ][ pJob ] != JOB_JACKER )
                    return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite naudoti ðio veiksmo nedirbdami automobiliu vagimi." );
                if( !found )
                    return true;
                    
                if(IsItemInPlayerInventory(playerid, ITEM_TOLKIT))
                {
                    if(cInfo[veh][cLockType] == 0) StartTimer(playerid,60,6);
                    else StartTimer(playerid,120*cInfo[veh][cLockType],6);
                    format(string,126,"** %s ið árankiø dëþutës iðsitraukia reples, atsuktuvà ir bando ardyti spinelæ, kad uþvestu automobilá.",GetPlayerNameEx(playerid));
                    ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    CJLog( pInfo[ playerid ][ pMySQLID ], cInfo[veh][cID], "Bando uþvesti tr. priemonæ vogdamas" );
                    if(cInfo[veh][cAlarm] == 1 || cInfo[veh][cAlarm] == 2)
                    {
                        format(string,126,"** Pypsi tr. priemonës signalizacija (( %s ))",cInfo[veh][cName]);
                        ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        VehicleAlarm(veh, 1);
                        return 1;
                    }
                    else if(cInfo[veh][cAlarm] == 3)
                    {
                        new zone[30];
                        GetPlayer2DZone(playerid, zone, 30);
                        format(string,126,"** Pypsi tr. priemonës signalizacija (( %s ))",cInfo[veh][cName]);
                        ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        SendTeamMessage(1, COLOR_LIGHTRED, "|________________Ávykio praneðimas________________|");
                        SendTeamMessage(1, COLOR_WHITE, "|Dispeèerinë: Automobilio signalizacija praneða apie ásilauþimá .");
                        format(string, 126, "|Vieta: Automobilio GPS imtuvas praneða, kad automobilis yra rajone %s",zone);
                        SendTeamMessage(1, COLOR_WHITE, string);
                        VehicleAlarm(veh, 1);
                        return 1;
                    }
                    else if(cInfo[veh][cAlarm] == 4)
                    {
                        new zone[30],
                            CarOwner = GetCarOwner(veh);
                        GetPlayer2DZone(playerid, zone, 30);
                        format(string,126,"** Pypsi tr. priemonës signalizacija (( %s ))",cInfo[veh][cName]);
                        ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        SendTeamMessage(1, COLOR_LIGHTRED, "|________________Ávykio praneðimas________________|");
                        SendTeamMessage(1, COLOR_WHITE, "|Dispeèerinë: Automobilio signalizacija praneða apie ásilauþimá .");
                        format(string, 126, "|Vieta: Automobilio GPS imtuvas praneða, kad automobilis yra rajone %s",zone);
                        SendTeamMessage(1, COLOR_WHITE, string);
                        if(!IsPlayerConnected(CarOwner)) return 1;
                        SendClientMessage(CarOwner, COLOR_WHITE, "SMS: á Jûsø automobilá bando kaþkas ásilauþti, siuntëjas: Jûsu Automobilis");
                        SetVehicleParamsForPlayer(veh,CarOwner,1,cInfo[veh][cLock]);
                        PlayerPlaySound(CarOwner, 1052, 0.0, 0.0, 0.0);
                        VehicleAlarm(veh, 1);
                        return 1;
                    }
                }
                else return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, neturite árankiø dëþutës, kad galëtumëte pradëti vogti. ");
            }
            if(StartingEngine[playerid] == true || Laikas[playerid] > 0) return 1;

            // Vienintelis bûdas uþkurti ðiukðliaveþá yra /startmission, NEBENT misija jau pradeta.
            if(sVehicles[ veh ][ Job ] == JOB_TRASH && TrashMission[ playerid ] == TRASH_MISSION_NONE)
                return 1;
            // Kol transporto priemonës ar ju priekabos kraunamos, jø uþkurti negalima.
            if(IsVehicleLoaded [ veh ] || (IsValidVehicle(GetVehicleTrailer(veh)) && IsVehicleLoaded[ GetVehicleTrailer(veh) ]))
                return SendClientMessage(playerid, GRAD, "Jûsø automobilis kraunamas. Niekur vaþiuot negalite.");

            StartingEngine[playerid] = true;
            cmd_ame(playerid, "pasuka automobilio raktelá ir bando uþvesti variklá.");
            if( cInfo[ veh ][ cDuzimai   ] == 0 )
                SetTimerEx( "StartEngine", 1500, false, "dd", playerid, veh );
            if( cInfo[ veh ][ cDuzimai   ] >= 1 )
                SetTimerEx( "StartEngine", 1600, false, "dd", playerid, veh );
            if( cInfo[ veh ][ cDuzimai   ] > 4 )
                SetTimerEx( "StartEngine", 2000, false, "dd", playerid, veh );
            if( cInfo[ veh ][ cDuzimai   ] > 6 )
                SetTimerEx( "StartEngine", 2400, false, "dd", playerid, veh );
            if( cInfo[ veh ][ cDuzimai   ] > 8 )
                SetTimerEx( "StartEngine", 3000, false, "dd", playerid, veh );
            return 1;
        }
        else if( !isLicCar( veh ) && Engine[veh] == true && VehicleHasEngine(GetVehicleModel(veh)) && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER)
        {
            if( StartingEngine[playerid] == true || Laikas[playerid] > 0 ) return 1;
            Engine[veh] = false;
            cmd_ame(playerid, "pasuka automobilio raktelá ir iðjungia variklá.");
            VehicleEngine(veh, 0 );
            return 1;
        }
    }
    return 1;
    
}

FUNKCIJA:StartEngine(playerid,veh)
{
    if(!IsPlayerInAnyVehicle(playerid)) return StartingEngine[playerid] = false;
    if(GetPlayerVehicleID(playerid) != veh) return StartingEngine[playerid] = false;
    if(StartingEngine[playerid] == false) return 1;
    new CarDuzimai = cInfo[veh][cDuzimai],
        RandomStart = random(CarDuzimai + 1),
        Float:Damage;
    GetVehicleHealth( veh, Damage );

    if( cInfo[ veh ][ cFuel ] <= 0 || cInfo[ veh ][ cInsurance ] < 0 || Damage < 400)
    {
        SendClientMessage( playerid, COLOR_RED, "Uþvedimas nepavyko!" );
        StartingEngine[playerid] = false;
        VehicleEngine(veh, 0 );
        return 1;
    }
    switch(RandomStart)
    {
        case 0 .. 5:
        {
            SendClientMessage( playerid, COLOR_WHITE, "Tr. priemonës variklis sëkmingai uþvestas." );
            VehicleEngine(veh, 1 );
            StartingEngine[playerid] = false;
            Engine[veh] = true;
            return 1;
        }
        case 6 .. 100:
        {
            SendClientMessage( playerid, COLOR_RED, "Uþvedimas nepavyko!" );
            StartingEngine[playerid] = false;
            VehicleEngine(veh, 0 );
            return 1;
        }
    }
    return 1;
}
public OnRconLoginAttempt(ip[], password[], success)
{
    return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
    #if defined DEBUG 
        printf("OnPlayerTakeDamage(%s, %s, %f, %d, %d)", GetName(playerid), GetName(issuerid), amount, weaponid, bodypart);
    #endif
    if ( issuerid == INVALID_PLAYER_ID ) 
        return 1;

    new Float:stat[2];
    GetPlayerHealth(playerid, stat[0]);
    GetPlayerArmour(playerid, stat[1]);

    // Tazeris zalos daryti neturi.
    if( GetPVarInt( issuerid, "TAZER_MODE" )) 
    {
        SetPlayerHealth(playerid, stat[ 0 ] + amount);
        return 1;
    }

    // Jei turi str bonusu reikia padidint zala su melee ginklais.
    if(pInfo[ issuerid ][ pStrengthLevel ] && IsMeleeWeapon(weaponid))
    {
        new Float:extraDMG = amount / pInfo[ issuerid ][ pStrengthLevel ] / 10.0;
        if(extraDMG <= stat[1]) 
            SetPlayerArmour(playerid, stat[1] - extraDMG);
        else 
        {
            extraDMG -= stat[1];
            SetPlayerArmour(playerid, 0.0);
            SetPlayerHealth(playerid, stat[0] - extraDMG);
        }
    }
    return 1;
}

stock IsMeleeWeapon(weaponid)
{
    switch(weaponid)
    {
        case 0 ..15: return true;
    }
    return false;
}
stock IsDriveByWeapon(weaponid)
{
    // Ginklai su kuriais leidþiamas drive-by
	switch(weaponid)
	{
		case 25, 26, 27, 28, 29, 30, 31, 32: return true;
		default: return false;
	}
	return false;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
    printf("OnPlayerWeaponShot");
    if(!IsPlayerWeaponInMemory(playerid, weaponid))
    {
        SendClientMessage(playerid, COLOR_LIGHTRED, "-.- Naujas AC norëjo kà tik tave uþblokuoti, ðiaip ne taip iðgelbëjau...");
        new string[128];
        format(string, sizeof(string),"Weapons.p : OnPlayerWeaponShot(%d, %d, %d, %d, %f, %f, %f)", playerid, weaponid, hittype, hitid, fX, fY, fZ);
        ACTestLog(string);
    }
    return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
    #if defined DEBUG 
        printf("[debug] OnPlayerGiveDamage(%d, %d, %f, %d, %d)", playerid, damagedid, amount, weaponid, bodypart);
    #endif
    if ( damagedid == INVALID_PLAYER_ID ) return 1;
    new
        ShooterWep = weaponid;
    if( PlayerFaction( playerid ) == 1 )
    {
        switch( ShooterWep )
        {
            case 25:
            {
                ApplyAnimation( damagedid, "PED", "KO_skid_front", 4.1, 0, 1, 1, 1, 0);
                ApplyAnimation( damagedid, "PED", "KO_skid_front", 4.1, 0, 1, 1, 1, 0);
            }
        }
    }
    if ( GetPVarInt( playerid, "TAZER_MODE" ) == 1 )
    {
        if ( ShooterWep != 23 ) return SetPVarInt( playerid, "TAZER_MODE", 0 );

        if( !PlayerToPlayer   ( 7.0, playerid, damagedid ) )
            return 1;

        new string[ 126 ],
            name[ 24 ];
        GetPlayerName( damagedid, name, 24 );

        SendClientMessage( damagedid, COLOR_WHITE, "* Tave paðovë elektros ðoku." );
        format           ( string, 126 , "* Tu paðovei elektros ðoku %s, jis gulës apie 30 sekundþiu.", name );
        SendClientMessage( playerid, COLOR_WHITE, string);
        format           ( string, 126 , "* %s iððauna elektros ðokà nutaikæs á %s ir nukreèia su didele átampa.", GetPlayerNameEx( playerid ) , name);
        ProxDetector     ( 20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
        ShowInfoText     ( damagedid, "~r~Nukrestas soko!", 2500);
        TogglePlayerControllable( damagedid, 0 );
        ApplyAnimation( damagedid, "CRACK", "crckdeth2", 4.0, 1, 1, 1, 1, 1);
        SetTimerEx( "TazerTime", 30000, false, "i", damagedid );

        RemovePlayerWeapon( playerid, 23 );
        return 1;
    }
    if( Boxing[ damagedid ] == true )
    {
        new Float:HP;

        GetPlayerHealth( damagedid, HP );
        if ( !PlayerToPoint( 50.0, damagedid, 772.7922, -71.4917, 1000.5853 ) )
            BoxEnd( damagedid );

        if ( HP < 15 )
            BoxEnd( damagedid );
    }
    new string[ 32 ];
    for(new i = 0; i < 46; i++)
    {
        format(string, 32, "%d", i);
        if( GetPVarInt( damagedid, string ) != 0 ) break;

        SetTimerEx( "NullWeapons", 1000*120, false, "d", playerid );

    }
    format(string, 32, "%d", weaponid);
    SetPVarInt(damagedid, string, GetPVarInt(damagedid, string) + 1);
    return 1;
}

public OnPlayerUpdate(playerid)
{   
    OnLookupComplete(playerid);
    SetPVarInt( playerid, "Is_AFK", 1 );

    new gunid = GetPlayerWeapon(playerid),
        str[80],
        wepname[ 24 ],
        Float:X2,
        Float:Y2,
        Float:Z2;

    GetWeaponName( gunid, wepname, sizeof(wepname) );

    if( gunid == 19 || gunid == 20 || gunid == 21 || gunid == 26 || gunid == 27 || GetSlotByID( gunid ) == 7 || GetSlotByID( gunid ) == 8 || GetSlotByID( gunid ) == 12 )
    {
        format( str, sizeof(str), "Neleistinai gautas ginklas (%s)", wepname);
        TogglePlayerControllable(playerid, 0);
        ResetPlayerWeapons( playerid );
        ClearWeaponsFromPlayerInventory(playerid);
        BanPlayer( "AC", playerid, str );
        return 1;
    }
    new iCurWeap = GetPlayerWeapon(playerid); // Return the player's current weapon
    if(iCurWeap != GetPVarInt(playerid, "iCurrentWeapon")) // If he changed weapons since the last update
    {
        // Lets call a callback named OnPlayerChangeWeapon
        OnPlayerChangeWeapon(playerid, GetPVarInt(playerid, "iCurrentWeapon"), iCurWeap);
        SetPVarInt(playerid, "iCurrentWeapon", iCurWeap); // Update the weapon variable
    }
    for(new i = 0; i < MAX_ROADBLOCKS; i++)
    {
        if( !IsValidDynamicObject(RoadBlocks[ i ]) ) continue;
        if( RID[ i ] != 1 ) continue;
        GetDynamicObjectPos(RoadBlocks[ i ], X2, Y2, Z2);
        if( IsPlayerInRangeOfPoint( playerid, 2.0, X2, Y2, Z2 ) )
        {
            new panels, doors, lights, tires;
            new carid = GetPlayerVehicleID( playerid );
            GetVehicleDamageStatus( carid, panels, doors, lights, tires );
            tires = encode_tires( 1, 1, 1, 1 );
            UpdateVehicleDamageStatus( carid, panels, doors, lights, tires );
            break;
        }
    }
    return 1;
}


CMD:togacmsg(playerid, params[])
{
    if(!pInfo[ playerid ][ pAdmin ])
        return 0;

    if(ShowACTestMsg[ playerid ])
        SendClientMessage(playerid, COLOR_NEWS, "Nuo  ðiol nebematysite Test AC þinuèiø.");
    else 
        SendClientMessage(playerid, COLOR_NEWS, "Vël matysite Test AC þinutes.");
    ShowACTestMsg[ playerid ] = !ShowACTestMsg[ playerid ];
    return 1;
}

stock OnPlayerChangeWeapon(playerid, oldweapon, newweapon)
{
    new
        weapons[ 2 ];
        //eile[ 128 ],
        //string[ 140 ];

    //RemovePlayerAttachedObject( playerid, 8 );
    //RemovePlayerAttachedObject( playerid, 9 );

    GetPlayerWeaponData( playerid, GetSlotByID( oldweapon ), weapons[ 0 ], weapons[ 1 ] );

    if( !IsPlayerInAnyVehicle( playerid ) )
    {
        /*
        if( weapons[ 1 ] < 1)
        {
            format( eile, sizeof( eile ), "DELETE FROM `AC` WHERE `ID` = %d AND `WeaponID` = %d", pInfo[ playerid ][ pMySQLID ], oldweapon );
            mysql_query(DbHandle,  eile, false);
            format(string, sizeof( string ), "%dbone", oldweapon );
            SetPVarFloat ( playerid, string, 0 );
        }
        */
        if(IsWeaponHasAmmo(newweapon))
        {
            CheckWeaponCheat(playerid, newweapon, 0);
            /*
            if(!IsPlayerWeaponInDB(playerid, newweapon))
            {
                if(GetPVarInt(playerid, "PossibleWeaponCheat"))
                {
                    format(string ,sizeof(string),"OnPlayerChangeWeapon. Þaidëjas %s bande panaudoti ginkla neregistruota DB(%d). ANTRAS KARTAS.", GetName(playerid), newweapon);
                    ACTestLog(string);

                    GetWeaponName(newweapon, string, sizeof(string));
                    format(string, sizeof(string), "[AntiCheat testas]Þaidëjas %s GALIMAI(ne 100% tikslu) cheatino ginklà %s.(Ðias þinutes galima iðjungti su /togacmsg)", GetName(playerid), string);
                    foreach(new i : Player) 
                    {
                        if(IsPlayerAdmin(i) || pInfo[ i ][ pAdmin ] && ShowACTestMsg[ i ])
                            SendClientMessage(i, 0xff76a1d3, string);
                    }
                }
                else 
                {
                    format(string ,sizeof(string),"OnPlayerChangeWeapon. Þaidëjas %s bande panaudoti ginkla neregistruota DB(%d)", GetName(playerid), newweapon);
                    ACTestLog(string);
                    SetPVarInt(playerid, "PossibleWeaponCheat", true);
                }
            }
            else 
            {
                if(GetPVarInt(playerid, "PossibleWeaponCheat"))
                    DeletePVar(playerid, "PossibleWeaponCheat");
            }

            // Weapons.p test 
            static DidNewACBan[MAX_PLAYERS] = {false, ...};

            if(!IsPlayerWeaponInMemory(playerid ,newweapon))
            {
                DidNewACBan[ playerid ] = true;
                SendClientMessage(playerid, COLOR_LIGHTRED, "Ech, naujas AC dabar tave bûtø uþblokavæs... ");
                format(string, sizeof(string), "Weapons.p Weapon cheated? Val:%d weaponid:%d", IsPlayerWeaponInMemory(playerid, newweapon), newweapon);
                ACTestLog(string);
            }
            else
                DidNewACBan[ playerid ] = false;
            // End of weapons.p test

            new val = CheckWeaponCheat( playerid, newweapon, 0 );
            if(val) // it banned someone :(
            {
                if(!DidNewACBan[ playerid ])
                {
                    SendClientMessage(playerid, COLOR_PURPLE, "Ha, uþbanino tave. Naujas AC to nebûtø padaræs :P");
                    DidNewACBan[ playerid ] =false;
                }
                GetPlayerName(playerid, string ,sizeof(string));
                format(string, sizeof(string), "Þaidëjas %s buvo uþblokuotas uþ ginklo %d cheat. Params: oldweapon:%d newweapon:%d. Old wep data: ID:%d Ammo:%d", 
                    string, newweapon, oldweapon, newweapon, weapons[ 0 ], weapons[ 1 ]);
                ACTestLog(string);
            }
            */
        }


        // Jei senasis ginklas buvo uþdëtas kaip objektas, reikia já uþdëti.
        if(oldweapon)
        {
            for(new i = 0; i < MAX_PLAYER_ATTACHED_WEAPONS; i++)
            {
                if(PlayerAttachedWeapons[ playerid ][ i ][ WeaponId ] == oldweapon)
                    SetPlayerAttachedObject(playerid, PlayerAttachedWeapons[ playerid ][ i ][ ObjectSlot ], GunObjects[ oldweapon ], 1,  0.199999, -0.139999, 0.030000, 0.500007, -115.000000, 0.000000, 1.000000, 1.000000, 1.000000);
            }
        }
        // Jei naujasis ginklas uþdëtas kaip objektas, paslepiam objektà nes iðsitraukë realø ginklà.
        if(newweapon)
        {
            for(new i = 0; i < MAX_PLAYER_ATTACHED_WEAPONS; i++)
            {
                if(PlayerAttachedWeapons[ playerid ][ i ][ WeaponId ] == newweapon)
                    RemovePlayerAttachedObject(playerid, PlayerAttachedWeapons[ playerid ][ i ] [ ObjectSlot ]);
            }
        }

    }
    return true;
}


stock IsPlayerSpectatingPlayer(playerid, spectatee)
{
    if(PlayerSpectatedPlayer[ playerid ] == spectatee)
        return true;
    else 
        return false;
}
stock IsPlayerHaveManyGuns( playerid, wepid )
{
    new
        count = 0;

    for ( new i = 0; i < 13; i++ )
    {
        new data[ 2 ];
        GetPlayerWeaponData( playerid, i, data[ 0 ], data[ 1 ] );
        if( wepid == data[ 0 ] ) return false;
        if( GetSlotByID( data[ 0 ] ) == 2 || GetSlotByID( data[ 0 ] ) == 4 || GetSlotByID( data[ 0 ] ) == 5 || GetSlotByID( data[ 0 ] ) == 6 )
            count++;
    }

    if(count >= MAX_SAVED_WEAPONS)
        return true;

    return false;
}


public OnPlayerStreamIn(playerid, forplayerid)
{
    ShowPlayerNameTagForPlayer(forplayerid, playerid, pInfo[playerid][pMask]);
    return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
    return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
    SetVehicleParamsForPlayer(vehicleid,forplayerid,0,cInfo[vehicleid][cLock]);
    return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
    return 1;
}

public OnPlayerModelSelection(playerid, response, listid, modelid)
{
    if ( listid == skinlist )
    {
        if ( response )
        {
            SetPlayerSkin   ( playerid, modelid );
            pInfo[ playerid ][ pSkin ] = modelid;
        }
    }
    return 1;
}

public OnPlayerModelSelectionEx(playerid, response, extraid, modelid)
{
    return 1;
}



public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    printf("[debug] OnDialogResponse(%s, %d, %d, %d, %s)", GetName(playerid), dialogid, response, listitem, inputtext);
    new string[4096];

    if( dialogid == 0 )
    {
        if( response )
        {
            new buffer[129];
            WP_Hash(buffer, sizeof(buffer), inputtext);
            MySQL_Load_Player( playerid, buffer);
            return 1;
        }
        else
            Kick( playerid );
        return 1;
    }
    if(dialogid == DIALOG_SECRET_QUESTION)
    {
        if(!response)
            return Kick(playerid);

        new hash[ 129 ];
        GetPVarString(playerid, "SecretQuestion", string, sizeof(string));


        if(isnull(inputtext))
            return ShowPlayerSecretQuestionDialog(playerid, string, "Neávedëte teksto.");

        GetPVarString(playerid, "SecretAnswer", string, sizeof(string));
        WP_Hash(hash, sizeof(hash), inputtext);

        if(!strcmp(string, hash))
        {
            DeletePVar(playerid, "SecretAnswer");
            DeletePVar(playerid, "SecretQuestion");
            OnPlayerLoginEx(playerid, GetPVarInt(playerid, "TmpSqlId"));
            DeletePVar(playerid, "TmpSqlId");
        }
        else 
        {
            static BadTries[ MAX_PLAYERS ];
            BadTries[ playerid ]++;
            if(BadTries[ playerid ] == 2)
            {
                BadTries[ playerid ] = 0;
                Kick(playerid);
            }
            else 
            {
                GetPVarString(playerid, "SecretQuestion", string, sizeof(string));
                ShowPlayerSecretQuestionDialog(playerid, string, "Atsakymas neteisingas.");
            }
        }
        return 1;
    }
    if(dialogid == DIALOG_SECRET_QUESTION_SET)
    {
        if(!response)
            return Kick(playerid);

        if(isnull(inputtext))
            return ShowPlayerQuestionSetDialog(playerid, "Neávedëte klausimo.");

        SetPVarString(playerid, "SecretQuestion", inputtext); 
        ShowPlayerAnswerSetDialog(playerid, inputtext);
        return 1;
    }
    if(dialogid == DIALOG_SECRET_ANSWER_SET)
    {
        if(!response)
            return Kick(playerid);

        new 
            query[ 512 ], 
            sqlid,
            answer[ 129 ];
        GetPVarString(playerid, "SecretQuestion", string, sizeof(string));
        sqlid = GetPVarInt(playerid, "TmpSqlId");

        if(isnull(inputtext))
            return ShowPlayerAnswerSetDialog(playerid, string, "Neávedëte atsakymo.");


        // Áraðom á DB viskà.
        mysql_real_escape_string(string, string);
        // Atsakymo nereikia escapint, vistiek koduosim su Whirlpool, jame neliks jokiø nenorimø simboliø.
        WP_Hash(answer, sizeof(answer), inputtext);
        format(query, sizeof(query), "UPDATE players SET secret_question = '%s', secret_answer = '%s' WHERE id = %d", string, answer, sqlid);
        mysql_pquery(DbHandle, query);


        // Sutvarkome nebereikalingus kintamuosius
        DeletePVar(playerid, "SecretQuestion");
        DeletePVar(playerid, "TmpSqlId");

        // Pagaliau prijungiam þaidëjà.
        OnPlayerLoginEx(playerid, sqlid);
        return 1;
    }
    else if(dialogid == 5)
    {
        new veh = GetPlayerVehicleID( playerid );
        if( response == 1 )
        {
            if ( PlayerMoney[ playerid ] < GetPVarInt( playerid, "MOKESTIS" ) )
            {
                SendClientMessage( playerid, COLOR_FADE2, "{FF6347}Perspëjimas: Neturite pakankamai pinigø, kad sumokëtumëte uþ degalus." );
                cInfo[ veh ][ cFuel ] = GetPVarInt( playerid, "FILLED" );
                DeletePVar( playerid, "MOKESTIS" );
                return 1;
            }
            GivePlayerMoney( playerid, - GetPVarInt( playerid, "MOKESTIS" ) );
            ShowInfoText( playerid, "~w~Benzino bakas uzpildytas", 1000 );
            SaveCar( veh );
            DeletePVar( playerid, "MOKESTIS" );
            return 1;
        }
        else if( response == 0 )
        {
            if( pInfo[ playerid ][ pBank ] < GetPVarInt( playerid, "MOKESTIS" ) )
            {
                SendClientMessage( playerid, COLOR_FADE2, "{FF6347}Perspëjimas: Neturite pakankamai pinigø, kad sumoketumëte uþ degalus." );
                cInfo[ veh ][ cFuel ] = GetPVarInt( playerid, "FILLED" );
                DeletePVar( playerid, "MOKESTIS" );
                return 1;
            }
            pInfo[ playerid ][ pBank ] -= GetPVarInt( playerid, "MOKESTIS" );
            ShowInfoText( playerid, "~w~Benzino bakas uzpildytas", 1000 );
            SaveCar( veh );
            DeletePVar( playerid, "MOKESTIS" );
            return 1;
        }
        else return 1;
    }
    else if(dialogid == 6)
    {
        if(response == 1)
        {
            switch(listitem)
            {
                case 0:
                {
                    if(PlayerMoney[ playerid ] < 150)
                        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, neturite pakankamai grynøjø pinigø su savimi");
                    GivePlayerWeapon(playerid,1,1);
                    GivePlayerMoney(playerid,-150);
                    SendClientMessage(playerid,COLOR_WHITE," ** Sëkmingai nusipirkote kastetà, kuris Jums kainavo 150$");
                    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                    return 1;
                }
                case 1:
                {
                    if(PlayerMoney[ playerid ] < 498)
                        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, neturite pakankamai grynøjø pinigø su savimi");
                    GivePlayerWeapon(playerid,2,1);
                    GivePlayerMoney(playerid,-498);
                    SendClientMessage(playerid,COLOR_WHITE," ** Sëkmingai nusipirkote golfo lazdà, kuri Jums kainavo 498$");
                    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                    return 1;
                }
                case 2:
                {
                    if(PlayerMoney[ playerid ] < 89)
                        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, neturite pakankamai grynøjø pinigø su savimi");
                    GivePlayerWeapon(playerid,4,1);
                    GivePlayerMoney(playerid,-89);
                    SendClientMessage(playerid,COLOR_WHITE," ** Sëkmingai nusipirkote kastetà, kuris Jums kainavo 89$");
                    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                    return 1;
                }
                case 3:
                {
                    if(PlayerMoney[ playerid ] < 91)
                        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, neturite pakankamai grynøjø pinigø su savimi");
                    GivePlayerWeapon(playerid,5,1);
                    GivePlayerMoney(playerid,-91);
                    SendClientMessage(playerid,COLOR_WHITE," ** Sëkmingai nusipirkote beisbolo lazdà, kuris Jums kainavo 91$");
                    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                    return 1;
                }
                case 4:
                {
                    if(PlayerMoney[ playerid ] < 75)
                        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, neturite pakankamai grynøjø pinigø su savimi");
                    GivePlayerWeapon(playerid,6,1);
                    GivePlayerMoney(playerid,-75);
                    SendClientMessage(playerid,COLOR_WHITE," ** Sëkmingai nusipirkote kastuvà, kuris Jums kainavo 75$");
                    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                    return 1;
                }
                case 5:
                {
                    if(PlayerMoney[ playerid ] < 344)
                        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, neturite pakankamai grynøjø pinigø su savimi");
                    GivePlayerWeapon(playerid,7,1);
                    GivePlayerMoney(playerid,-344);
                    SendClientMessage(playerid,COLOR_WHITE," ** Sëkmingai nusipirkote kastuvà, kuris Jums kainavo 75$");
                    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                    return 1;
                }
                case 6:
                {
                    if(PlayerMoney[ playerid ] < 43)
                        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, neturite pakankamai grynøjø pinigø su savimi");
                    GivePlayerWeapon(playerid,15,1);
                    GivePlayerMoney(playerid,-43);
                    SendClientMessage(playerid,COLOR_WHITE," ** Sëkmingai nusipirkote lazdà, kuris Jums kainavo 75$");
                    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                    return 1;
                }
                case 7:
                {
                    if(PlayerMoney[ playerid ] < 110)
                        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, neturite pakankamai grynøjø pinigø su savimi");
                    GivePlayerWeapon(playerid,41,80);
                    GivePlayerMoney(playerid,-110);
                    SendClientMessage(playerid,COLOR_WHITE," ** Sëkmingai nusipirkote daþø balionëlá, kuris Jums kainavo 110$");
                    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                    return 1;
                }
                case 8:
                {
                    if(PlayerMoney[ playerid ] < 720)
                        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, neturite pakankamai grynøjø pinigø su savimi");
                    GivePlayerWeapon(playerid,8,1);
                    GivePlayerMoney(playerid,-720);
                    SendClientMessage(playerid,COLOR_WHITE," ** Sëkmingai nusipirkote katanà, kuri Jums kainavo 720$");
                    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                    return 1;
                }				
            }
        }
    }
    else if(dialogid == DIALOG_VEHICLE_SHOP)
    {
        if(!response)   
            return 1;
        
        new model, price, name[32], query[220], Float:pos[4];
        strmid(name, inputtext, 0, strfind(inputtext, " - "));

        for(new i = 0; i < MAX_VEHICLE_SHOP_VEHICLES; i++)
        {
            if(!VehicleShops[ CurrentPlayerVehicleShop[ playerid ] ][ VehicleModels ][ i ]) 
                continue;
            if(!strcmp(aVehicleNames[ VehicleShops[ CurrentPlayerVehicleShop[ playerid ] ][ VehicleModels ][ i ] - 400 ], name))
            {
                model = VehicleShops[ CurrentPlayerVehicleShop[ playerid ] ][ VehicleModels ][ i ];
                price = VehicleShops[ CurrentPlayerVehicleShop[ playerid ] ][ VehiclePrices ][ i ];
                break;
            }
        }
        if(!model)
        {
            format(query, sizeof(query), "DIALOG_VEHICLE_SHOP. Inputtext:%s VehicleShopSQLID:%d sugebejo nerasti modelio.", inputtext, VehicleShops[ CurrentPlayerVehicleShop[ playerid ] ][ Id ]);
            ImpossibleLog(query);
            return 1;
        }

        if(price > PlayerMoney[ playerid ]) 
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Neturi pakankamai pinigu kad galëtum nusipirkti ðá automobilá.");

        // Okay, galima duot jam masina. 
        // Dar reikia spalvos ir spawn pozicijos.

        // Gaunam spawn pozicija.
        format(query, sizeof(query), "SELECT x,y,z,angle FROM vehicle_shop_spawns WHERE shop_id = %d ORDER BY RAND() LIMIT 1", VehicleShops[ CurrentPlayerVehicleShop[ playerid ] ][ Id ]);
        new Cache:result = mysql_query(DbHandle, query);
        if(cache_get_row_count())
        {
            pos[ 0 ] = cache_get_field_content_float(0, "x");
            pos[ 1 ] = cache_get_field_content_float(0, "y");
            pos[ 2 ] = cache_get_field_content_float(0, "z");
            pos[ 3 ] = cache_get_field_content_float(0, "angle");
        }
        cache_delete(result);

        // Gaunam spalvas.
        new color1 = random(256);
        new color2 = random(256);

        // Okay, duodam masiniuka ir gero kelio.
        mysql_real_escape_string(name, name);
        format(query,sizeof(query),"INSERT INTO `vehicles` (cOwner,cModel,cName,cSpawn1,cSpawn2,cSpawn3,cAngle,cColor1,cColor2,cFuel) VALUES (%d,%d,'%s',%f, %f, %f, %f, %d, %d, %d)",
            pInfo[ playerid ][ pMySQLID ], model, name, pos[0], pos[1] ,pos[2], pos[3], color1, color2, GetVehicleFuelTank(model));
    
        if(!(result = mysql_query(DbHandle, query)))
        {
            // Tikimes kad ðito nebus, bet JEIGU...
            printf("Error. Klaida. Nepavyko áraðyti þaidëjo %d transporto priemonës.", pInfo[ playerid ][ pMySQLID ]);
            SendClientMessage(playerid, COLOR_LIGHTRED, "Atsipraðome, ávyko klaida. Praðome pabandyti vëliau.");
            return 0;
        }

        for(new i = 1; i < 22; i++)
            if(!pInfo[ playerid ][ pCar ][ i ])
            {
                pInfo[ playerid ][ pCar ][ i ] = cache_insert_id();
                break;
            }
        cache_delete(result);

        PayLog( pInfo[ playerid ][ pMySQLID ], 3, -1, -price );
        PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
        TogglePlayerControllable(playerid, 1);
        if(IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicle(playerid);
        SendClientMessage(playerid,COLOR_NEWS,"Sëkmingai nusipirkote naujà  automobilá, galite ji pamatyti paraðà /v list.");
        GivePlayerMoney(playerid, -price);
        SaveAccount( playerid );
        return 1;
    }
    else if(dialogid == 7)
    {
        if(response == 1)
        {
            switch(listitem)
            {
                case 0:
                {
                    if(PlayerMoney[ playerid ] < 300)
                        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, neturite pakankamai grynøjø pinigø su savimi");
                    GivePlayerWeapon(playerid,10,1);
                    GivePlayerMoney(playerid,-300);
                    SendClientMessage(playerid,COLOR_NEWS," Uþ roþiná vibratoriø sumokëjote: 300$");
                    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                    return 1;
                }
                case 1:
                {
                    if(PlayerMoney[ playerid ] < 300)
                        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, neturite pakankamai grynøjø pinigø su savimi");
                    GivePlayerWeapon(playerid,11,1);
                    GivePlayerMoney(playerid,-250);
                    SendClientMessage(playerid,COLOR_NEWS," Uþ maþa baltá  vibratoriø sumokëjote: 250$");
                    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                    return 1;
                }
                case 2:
                {
                    if(PlayerMoney[ playerid ] < 300)
                        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, neturite pakankamai grynøjø pinigø su savimi");
                    GivePlayerWeapon(playerid,12,1);
                    GivePlayerMoney(playerid,-330);
                    SendClientMessage(playerid,COLOR_NEWS," Uþ didelá baltá  vibratoriø sumokëjote: 330$");
                    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                    return 1;
                }
                case 3:
                {
                    if(PlayerMoney[ playerid ] < 260)
                        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, neturite pakankamai grynøjø pinigø su savimi");
                    GivePlayerWeapon(playerid,13,1);
                    GivePlayerMoney(playerid,-260);
                    SendClientMessage(playerid,COLOR_NEWS," Uþ blizgantá vibratoriø sumokëjote: 260$");
                    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                    return 1;
                }
            }
        }
    }
    else if(dialogid == 8)
    {
        if(response == 1)
        {
            new pay[ 128 ];
            format      ( pay, sizeof(pay),"============= BAUDOS LAPELIS =============\n\
                                    \nPareigûnas: %s\n\
                                    Bauda grynais: $%d\n\
                                    \nGrynieji pinigai: $%d\n\
                                    Jûsø banko sá skaita: $%d\n\
                                    \n========================================\n\
                                    Kokiu bûdu apmokësite baudá ?",
            GetName( Offer[ playerid ][ 3 ]),GetPVarInt( playerid, "MOKESTIS" ), PlayerMoney[ playerid ], pInfo[ playerid ][ pBank ]);
            ShowPlayerDialog(playerid,98,DIALOG_STYLE_MSGBOX,"BAUDOS APMOKËJIMAS",pay,"Grynais","Banku");
            return 1;
        }
        else if(response == 0)
        {

            SendClientMessage(Offer[playerid][3], COLOR_FADE2, "{FF6347}Perspëjimas: þmogus atsisakë susimokëti baudos lapelá.");
            DeletePVar( playerid, "MOKESTIS" );
            Offer[playerid][3] = 255;
            return 1;
        }
    }
    else if(dialogid == 9)
    {
        if(response == 1)
        {
            if ( PlayerMoney[ playerid ] < 3000 && listitem < 17)
                return SendClientMessage(playerid, COLOR_FADE2, "{FF6347}Perspëjimas: Neturite pakankamai pinigø ($3000)");
            switch(listitem)
            {
                case 0: SetPVarInt( playerid, "MOD", 1025 );
                case 1: SetPVarInt( playerid, "MOD", 1074 );
                case 2: SetPVarInt( playerid, "MOD", 1076 );
                case 3: SetPVarInt( playerid, "MOD", 1078 );
                case 4: SetPVarInt( playerid, "MOD", 1081 );
                case 5: SetPVarInt( playerid, "MOD", 1082 );
                case 6: SetPVarInt( playerid, "MOD", 1085 );
                case 7: SetPVarInt( playerid, "MOD", 1096 );
                case 8: SetPVarInt( playerid, "MOD", 1097 );
                case 9: SetPVarInt( playerid, "MOD", 1098 );
                case 10: SetPVarInt( playerid, "MOD", 1084 );
                case 11: SetPVarInt( playerid, "MOD", 1073 );
                case 12: SetPVarInt( playerid, "MOD", 1075 );
                case 13: SetPVarInt( playerid, "MOD", 1077 );
                case 14: SetPVarInt( playerid, "MOD", 1079 );
                case 15: SetPVarInt( playerid, "MOD", 1080 );
                case 16: SetPVarInt( playerid, "MOD", 1083 );
                case 17:
                {
                    if ( PlayerMoney[ playerid ] < 5000 ) return SendClientMessage(playerid, COLOR_FADE2, "{FF6347}Perspëjimas: Neturite pakankamai pinigø ($5000)");
                    SetPVarInt( playerid, "MOD2", 1087 );
                }
                case 18: SetPVarInt( playerid, "MOD2", -1 );
                case 19: SetPVarInt( playerid, "MOD", -1 );
                case 20: SetPVarInt( playerid, "MOD", -2 );
            }
            StartTimer(playerid,180,3);
        }
    }
    else if(dialogid == 10)
    {
        if(response == 1)
        {
            switch(listitem)
            {
                case 0:
                {
                    if(PlayerMoney[ playerid ] < 500) return SendClientMessage(playerid,GRAD, "{FF6347}Perspëjimas: Neturite pakankamai pinigø, kad iðmoktumëte kovos stiliø.");
                    pInfo[playerid][pBoxStyle] = 7;
                    SetPlayerFightingStyle(playerid,7);
                    SendClientMessage(playerid,COLOR_FADE1, " Sëkmingai iðmokote saviginos gatvëje kovos stiliø uþ kurio mokymus sumokëjote 500 doleriø.");
                    GivePlayerMoney(playerid,-500);
                    Biudzetas += 500;
                    SaveMisc();
                    return 1;
                }
                case 1:
                {
                    if(PlayerMoney[ playerid ] < 500) return SendClientMessage(playerid,GRAD, "{FF6347}Perspëjimas: Neturite pakankamai pinigø, kad iðmoktumëte kovos stiliø.");
                    pInfo[playerid][pBoxStyle] = 6;
                    SetPlayerFightingStyle(playerid,6);
                    SendClientMessage(playerid,COLOR_FADE1, " Sëkmingai iðmokote Kung Fu kovos stiliø uþ kurio mokymus sumokëjote 500 doleriø.");
                    GivePlayerMoney(playerid,-500);
                    Biudzetas += 500;
                    SaveMisc();
                    return 1;
                }
                case 2:
                {
                    if(PlayerMoney[ playerid ] < 500) return SendClientMessage(playerid,GRAD, "{FF6347}Perspëjimas: neturite pakankamai pinigø, kad sumokëtumët uþ pamokas.");
                    pInfo[playerid][pBoxStyle] = 5;
                    SetPlayerFightingStyle(playerid,5);
                    SendClientMessage(playerid,COLOR_WHITE, " Sëkmingai iðmokote bokso kovos stiliø uþ kurio mokymus sumokëjote 500 doleriø.");
                    GivePlayerMoney(playerid,-500);
                    Biudzetas += 500;
                    SaveMisc();
                    return 1;
                }
            }
        }
        return 1;
    }
    else if(dialogid == 13)
    {
        new vehicle = GetNearestVehicle( playerid, 5.0 );
        if(vehicle == INVALID_VEHICLE_ID)
            return 1;
        if ( sVehicles[ vehicle ][ Faction ] > 0 )
        {
            if ( sVehicles[ vehicle ][ Faction ] != pInfo[ playerid ][ pMember ] )
                return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: KLAIDA." );
        }
        if( response )
        {
            if( listitem == MAX_TRUNK_SLOTS ) return 1;
            TakeFromTrunk( playerid, vehicle, listitem );
        }
    }
    else if ( dialogid == 16 )
    {
        if ( response == 1 )
        {
            new skin = strval( inputtext );
            if ( skin < 1 || skin > 299 || skin == 6 || skin == 7 || skin == 8 || skin == 149 || skin == 86) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: neteisingai nurodytas iðvaizdos ID.");
            else
            {
                SetPlayerSkin( playerid, skin );
                pInfo[ playerid ][ pSkin ] = skin;
                return 1;
            }
        }
    }
    else if ( dialogid == 19 ) // amenu
    {
        if ( response == 1 )
        {
            switch( listitem )
            {
                case 0:
                {
                    HouseManagementDialog.ShowMain(playerid);
                    return 1;
                }
                case 1:
                {
                    BusinessManagementDialog.ShowMain(playerid);
                    return 1;
                }
                case 2:
                {
                    ShowPlayerDialog( playerid, 29, DIALOG_STYLE_LIST,"Frakcijø meniu","- Kurti naujà \n\
                                                                                        - Iðtrinti\n\
                                                                                        - Tvarkyti frakcijas", "Rinktis", "Atðaukti" );
                    return 1;
                }
                case 3:
                {
                    ShowPlayerDialog( playerid, 45, DIALOG_STYLE_LIST,"Serverio automobiliai","- Kurti naujà \n\
                                                                                               - Priskirti automobilá frakcijai \n\
                                                                                               - Priskirti automobilá darbui \n\
																							   - Pakeisti atsiradimo vietà \n\
                                                                                               - (Faction) Keisti reikalaujama rangà \n\
                                                                                               - (Faction) Keisti  automobilio spalvà \n\
                                                                                               - Paðalinti tr. priemonæ \n\
                                                                                               - Patikrinti bagaþinæ", "Rinktis", "Atðaukti" );
                    return 1;
                }
                case 4:
                {
                    ShowPlayerDialog( playerid, 53, DIALOG_STYLE_LIST,"Serverio iëjimai","- Kurti naujà \n\
                                                                                               - Keisti áëjimà \n\
                                                                                               - Keisti iðëjimà \n\
                                                                                               - Keisti pavadinimá \n\
                                                                                               - Þiûrëti ID\n\
                                                                                               - Iðtrinti\n\
                                                                                               - Pakeisti pasaulá\n\
                                                                                               - Pakeisti pickup modelá", "Rinktis", "Atðaukti" );
                    return 1;
                }
                case 5:
                {
                    ShowPlayerDialog( playerid, 58, DIALOG_STYLE_INPUT,"Serverio balsavimas", "Iraðykite klausima, á kuri butu galima atsakyti taip arba ne",  "Rinktis", "Atðaukti" );
                    return 1;
                }
                
                case 6:
                {
                    new bigstring[ 1024 ] = "Kurti naujà\n{FFFFFF}";
                    foreach(VehicleShopIterator, i)
                        format(bigstring, sizeof(bigstring),"%s%d. %s\n",bigstring, i, VehicleShops[ i ][ Name ]);
                    ShowPlayerDialog( playerid, DIALOG_VEHICLE_SHOPS_LIST, DIALOG_STYLE_LIST,"Turgûs", bigstring, "Pirkti", "Atðaukti" );
                }
                
                case 7:
                {
                    GarageManagementDialog.ShowMain(playerid);
                }
                case 8:
                    return TruckerJob:ShowPlayerDialog(playerid, ActionList);
                case 9: 
                    return InteriorManagementDialog.ShowMain(playerid);
                case 10: 
                    return CoordinateManagementDialog.ShowMain(playerid);
                case 11:
                    return GraffitiManagementDialog.ShowMain(playerid);
            }
        }
    }
    else if ( dialogid == 29 )
    {
        if ( response == 1 )
        {
            switch( listitem )
            {
                case 0:
                {
                    ShowPlayerDialog( playerid, 30, DIALOG_STYLE_INPUT,"Frakcijos sukurimas","áraðykite norima frakcijos pavadinimá :","Patvirtinti","Atðaukti" );
                    return 1;
                }
                case 1:
                {
                    foreach(Faction,id)
                    {
                        format( string, 256, "%s%d. %s\n", string, id, fInfo[ id ][ fName ] );
                    }
                    ShowPlayerDialog( playerid, 61, DIALOG_STYLE_LIST, "Frakcijø trinimas", string, "Rinktis", "Atðaukti" );
                }
                case 2:
                {
                    foreach(Faction,id)
                    {
                        format( string, 256, "%s%d. %s\n", string, id, fInfo[ id ][ fName ] );
                    }
                    ShowPlayerDialog( playerid, 31, DIALOG_STYLE_LIST, "Frakcijø tvarkymas", string, "Rinktis", "Atðaukti" );
                    return 1;
                }
            }
        }
    }
    else if ( dialogid == 30 )
    {
        if ( response == 1 )
        {
            if ( !inputtext[ 0 ] ) return 1;

            mysql_real_escape_string(inputtext,inputtext, DbHandle, 128);

            new id = Itter_Free(Faction);
            format( string, 256, "INSERT INTO `factions` (fName) VALUES ('%s')", inputtext );
            mysql_query(DbHandle, string, false);
            
            format( string, 126, "SELECT id,fRank1,fRank2,fRank3,fRank4,fRank5,fRank6,fRank7,fRank8,fRank9,fRank10,fRank11,fRank12,fRank13 FROM `factions` WHERE `fName`='%s'", inputtext );
            new Cache:result = mysql_query(DbHandle,  string );
            cache_get_field_content(0, "fRank1", fInfo[ id ][ fRank1 ], DbHandle, 54);
            cache_get_field_content(0, "fRank2", fInfo[ id ][ fRank2 ], DbHandle, 54);
            cache_get_field_content(0, "fRank3", fInfo[ id ][ fRank3 ], DbHandle, 54);
            cache_get_field_content(0, "fRank4", fInfo[ id ][ fRank4 ], DbHandle, 54);
            cache_get_field_content(0, "fRank5", fInfo[ id ][ fRank5 ], DbHandle, 54);
            cache_get_field_content(0, "fRank6", fInfo[ id ][ fRank6 ], DbHandle, 54);
            cache_get_field_content(0, "fRank7", fInfo[ id ][ fRank7 ], DbHandle, 54);
            cache_get_field_content(0, "fRank8", fInfo[ id ][ fRank8 ], DbHandle, 54);
            cache_get_field_content(0, "fRank9", fInfo[ id ][ fRank9 ], DbHandle, 54);
            cache_get_field_content(0, "fRank10", fInfo[ id ][ fRank10 ], DbHandle, 54);
            cache_get_field_content(0, "fRank11", fInfo[ id ][ fRank11 ], DbHandle, 54);
            cache_get_field_content(0, "fRank12", fInfo[ id ][ fRank12 ], DbHandle, 54);
            cache_get_field_content(0, "fRank13", fInfo[ id ][ fRank13 ], DbHandle, 54);

            cache_delete(result);
            format( fInfo[ id ][ fName ], 126, "%s", inputtext );
            format( string, 256,"Sëkmingai sukûrëte frakcijà  pavadinimu: %s", inputtext );
            SendClientMessage( playerid, GRAD, string );
            Itter_Add(Faction,id);
            return 1;
        }
    }
    else if ( dialogid == 31 )
    {
        if ( response == 1 )
        {
            format( string, 256, "- Pavadinimas\t[ %s ]\n\
                                  - Bankas\t[ %d ]\n\
                                  - Algos \n\
                                  - Spawn vieta\n\
                                  - Rangai\n\
                                  - Lideris \t[ %s ]", fInfo[ listitem ][ fName   ],
                                                       fInfo[ listitem ][ fBank   ],
                                                       fInfo[ listitem ][ fLeader ] );
            tmpinteger[ playerid ] = listitem;
            ShowPlayerDialog( playerid, 32, DIALOG_STYLE_LIST, fInfo[ listitem ][ fName ] ,string, "Rinktis", "Atðaukti" );
            return 1;
        }
    }
    else if ( dialogid == 32 )
    {
        if ( response == 1 )
        {
            switch ( listitem )
            {
                case 0:
                {
                    ShowPlayerDialog( playerid, 33, DIALOG_STYLE_INPUT,"Frakcijos pavadinimo keitimas","áraðykite norima frakcijos pavadinimá :","Patvirtinti","Atðaukti" );
                    return 1;
                }
                case 1:
                {
                    ShowPlayerDialog( playerid, 34, DIALOG_STYLE_INPUT,"Frakcijos banko keitimas","áraðykite norima sumá  nustatyti bankui:","Patvirtinti","Atðaukti" );
                    return 1;
                }
                case 2:
                {
                    for( new id; id < MAX_FACTION_RANKS; id++)
                        format( string, 256, "%s %d. %d\n", string, id, fInfo[ tmpinteger[ playerid ] ][ fPayDay ][ id ] );

                    ShowPlayerDialog( playerid, 35, DIALOG_STYLE_LIST, "Frakcijos algos keitimas",string,"Rinktis","Atðaukti" );
                    return 1;
                }
                case 3:
                {
                    GetPlayerPos( playerid, fInfo[ tmpinteger[ playerid ] ][ fSpawn ][ 0 ],
                                            fInfo[ tmpinteger[ playerid ] ][ fSpawn ][ 1 ],
                                            fInfo[ tmpinteger[ playerid ] ][ fSpawn ][ 2 ]);

                    fInfo[ tmpinteger[ playerid ] ][ fInt ] = GetPlayerInterior( playerid );
                    SaveFactions( tmpinteger[ playerid ] );
                    SendClientMessage( playerid, GRAD, "Frakcijos darbuotojø/nariø atsiradimo vieta buvo sëkmingai pakeista." );

                    tmpinteger[ playerid ] = -9900;
                    return 1;
                }
                case 4:
                {
                    ShowAdminMenu( playerid, 0, tmpinteger[ playerid ] );
                    return 1;
                }
            }
        }
    }
    else if ( dialogid == 33 )
    {
        if ( response == 1 )
        {
            if ( !inputtext[ 0 ] ) return 1;

            format( fInfo[ tmpinteger[ playerid ] ][ fName ], 126, "%s", inputtext );
            format( string, 256,"Frakcijos pavadinimas buvo pakeistas á: %s", inputtext );
            SendClientMessage( playerid, GRAD, string );
            SaveFactions( tmpinteger[ playerid ] );

            ShowAdminMenu( playerid, 0, tmpinteger[ playerid ] );
            return 1;
        }
    }
    else if ( dialogid == 34 )
    {
        if ( response == 1 )
        {
            if ( !inputtext[ 0 ] ) return 1;

            fInfo[ tmpinteger[ playerid ] ][ fBank ] = strval( inputtext );
            format( string, 256,"Frakcijos bankas buvo pakeistas á: %d", fInfo[ tmpinteger[ playerid ] ][ fBank ] );
            SendClientMessage( playerid, GRAD, string );
            SaveFactions( tmpinteger[ playerid ] );

            tmpinteger[ playerid ] = -9900;
            return 1;
        }
    }
    else if ( dialogid == 35 )
    {
        if ( response == 1 )
        {
            ShowPlayerDialog( playerid, 100, DIALOG_STYLE_INPUT,"Frakcijos algos keitimas","áraðykite norima sumá :","Patvirtinti","Atðaukti" );
            SetPVarInt( playerid, "FRAKCIJA", listitem );
            return 1;
        }
    }
    else if ( dialogid == 36 )
    {
        if ( response == 1 )
        {
            switch ( listitem )
            {
                case 0:
                {
                    ShowPlayerDialog( playerid, 37, DIALOG_STYLE_INPUT,"Frakcijos rango keitimas","áraðykite norima rangà :","Patvirtinti","Atðaukti" );
                    return 1;
                }
                case 1:
                {
                    ShowPlayerDialog( playerid, 38, DIALOG_STYLE_INPUT,"Frakcijos rango keitimas","áraðykite norima rangà :","Patvirtinti","Atðaukti" );
                    return 1;
                }
                case 2:
                {
                    ShowPlayerDialog( playerid, 39, DIALOG_STYLE_INPUT,"Frakcijos rango keitimas","áraðykite norima rangà :","Patvirtinti","Atðaukti" );
                    return 1;
                }
                case 3:
                {
                    ShowPlayerDialog( playerid, 40, DIALOG_STYLE_INPUT,"Frakcijos rango keitimas","áraðykite norima rangà :","Patvirtinti","Atðaukti" );
                    return 1;
                }
                case 4:
                {
                    ShowPlayerDialog( playerid, 41, DIALOG_STYLE_INPUT,"Frakcijos rango keitimas","áraðykite norima rangà :","Patvirtinti","Atðaukti" );
                    return 1;
                }
                case 5:
                {
                    ShowPlayerDialog( playerid, 42, DIALOG_STYLE_INPUT,"Frakcijos rango keitimas","áraðykite norima rangà :","Patvirtinti","Atðaukti" );
                    return 1;
                }
                case 6:
                {
                    ShowPlayerDialog( playerid, 43, DIALOG_STYLE_INPUT,"Frakcijos rango keitimas","áraðykite norima rangà :","Patvirtinti","Atðaukti" );
                    return 1;
                }
                case 7:
                {
                    ShowPlayerDialog( playerid, 44, DIALOG_STYLE_INPUT,"Frakcijos rango keitimas","áraðykite norima rangà :","Patvirtinti","Atðaukti" );
                    return 1;
                }
                case 8:
                {
                    ShowPlayerDialog( playerid, 145, DIALOG_STYLE_INPUT,"Frakcijos rango keitimas","áraðykite norima rangà :","Patvirtinti","Atðaukti" );
                    return 1;
                }
                case 9:
                {
                    ShowPlayerDialog( playerid, 146, DIALOG_STYLE_INPUT,"Frakcijos rango keitimas","áraðykite norima rangà :","Patvirtinti","Atðaukti" );
                    return 1;
                }
                case 10:
                {
                    ShowPlayerDialog( playerid, 147, DIALOG_STYLE_INPUT,"Frakcijos rango keitimas","áraðykite norima rangà :","Patvirtinti","Atðaukti" );
                    return 1;
                }
                case 11:
                {
                    ShowPlayerDialog( playerid, 148, DIALOG_STYLE_INPUT,"Frakcijos rango keitimas","áraðykite norima rangà :","Patvirtinti","Atðaukti" );
                    return 1;
                }
                case 12:
                {
                    ShowPlayerDialog( playerid, 152, DIALOG_STYLE_INPUT,"Frakcijos rango keitimas","áraðykite norima rangà :","Patvirtinti","Atðaukti" );
                    return 1;
                }
            }
        }
    }
    else if ( dialogid == 37 )
    {
        if ( response == 1 )
        {
            if ( !inputtext[ 0 ] ) return 1;

            format( fInfo[ tmpinteger[ playerid ] ][ fRank1 ], 56, "%s", inputtext );
            format( string, 256,"Frakcijos rangas pakeistas á: %s", inputtext );
            SendClientMessage( playerid, GRAD, string );
            SaveFactions( tmpinteger[ playerid ] );

            ShowAdminMenu( playerid, 0, tmpinteger[ playerid ] );
            return 1;
        }
    }
    else if ( dialogid == 38 )
    {
        if ( response == 1 )
        {
            if ( !inputtext[ 0 ] ) return 1;

            format( fInfo[ tmpinteger[ playerid ] ][ fRank2 ], 56, "%s", inputtext );
            format( string, 256,"Frakcijos rangas pakeistas á: %s", inputtext );
            SendClientMessage( playerid, GRAD, string );
            SaveFactions( tmpinteger[ playerid ] );

            ShowAdminMenu( playerid, 0, tmpinteger[ playerid ] );
            return 1;
        }
    }
    else if ( dialogid == 39 )
    {
        if ( response == 1 )
        {
            if ( !inputtext[ 0 ] ) return 1;

            format( fInfo[ tmpinteger[ playerid ] ][ fRank3 ], 56, "%s", inputtext );
            format( string, 256,"Frakcijos rangas pakeistas á: %s", inputtext );
            SendClientMessage( playerid, GRAD, string );
            SaveFactions( tmpinteger[ playerid ] );

            ShowAdminMenu( playerid, 0, tmpinteger[ playerid ] );
            return 1;
        }
    }
    else if ( dialogid == 40 )
    {
        if ( response == 1 )
        {
            if ( !inputtext[ 0 ] ) return 1;

            format( fInfo[ tmpinteger[ playerid ] ][ fRank4 ], 56, "%s", inputtext );
            format( string, 256,"Frakcijos rangas pakeistas á: %s", inputtext );
            SendClientMessage( playerid, GRAD, string );
            SaveFactions( tmpinteger[ playerid ] );

            ShowAdminMenu( playerid, 0, tmpinteger[ playerid ] );
            return 1;
        }
    }
    else if ( dialogid == 41 )
    {
        if ( response == 1 )
        {
            if ( !inputtext[ 0 ] ) return 1;

            format( fInfo[ tmpinteger[ playerid ] ][ fRank5 ], 56, "%s", inputtext );
            format( string, 256,"Frakcijos rangas pakeistas á: %s", inputtext );
            SendClientMessage( playerid, GRAD, string );
            SaveFactions( tmpinteger[ playerid ] );

            ShowAdminMenu( playerid, 0, tmpinteger[ playerid ] );
            return 1;
        }
    }
    else if ( dialogid == 42 )
    {
        if ( response == 1 )
        {
            if ( !inputtext[ 0 ] ) return 1;

            format( fInfo[ tmpinteger[ playerid ] ][ fRank6 ], 56, "%s", inputtext );
            format( string, 256,"Frakcijos rangas pakeistas á: %s", inputtext );
            SendClientMessage( playerid, GRAD, string );
            SaveFactions( tmpinteger[ playerid ] );

            ShowAdminMenu( playerid, 0, tmpinteger[ playerid ] );
            return 1;
        }
    }
    else if ( dialogid == 43 )
    {
        if ( response == 1 )
        {
            if ( !inputtext[ 0 ] ) return 1;

            format( fInfo[ tmpinteger[ playerid ] ][ fRank7 ], 56, "%s", inputtext );
            format( string, 256,"Frakcijos rangas pakeistas á: %s", inputtext );
            SendClientMessage( playerid, GRAD, string );
            SaveFactions( tmpinteger[ playerid ] );

            ShowAdminMenu( playerid, 0, tmpinteger[ playerid ] );
            return 1;
        }
    }
    else if ( dialogid == 44 )
    {
        if ( response == 1 )
        {
            if ( !inputtext[ 0 ] ) return 1;

            format( fInfo[ tmpinteger[ playerid ] ][ fRank8 ], 56, "%s", inputtext );
            format( string, 256,"Frakcijos rangas pakeistas á: %s", inputtext );
            SendClientMessage( playerid, GRAD, string );
            SaveFactions( tmpinteger[ playerid ] );

            ShowAdminMenu( playerid, 0, tmpinteger[ playerid ] );
            return 1;
        }
    }
    else if ( dialogid == 45 )
    {
        if ( response == 1 )
        {
            switch ( listitem )
            {
                case 0:
                {
                    ShowPlayerDialog( playerid, 46, DIALOG_STYLE_INPUT,"Automobilio sukûrimas","áraðykite automobilio ID, spalvà , 2 spalvà \nPavyzdys: 562 2 3","Patvirtinti","Atðaukti" );
                    return 1;
                }
                case 1:
                {
                    new car = GetPlayerVehicleID( playerid );
                    if( IsPlayerInAnyVehicle( playerid ) && cInfo[ car ][ cOwner ] == 0 )
                        ShowPlayerDialog( playerid, 47, DIALOG_STYLE_INPUT,"Automobilio frakcija","áraðykite frakcijos ID kad automobilis priklausytu jai\nFrakcijø ID galite rasti per frakcijø meniu.","Patvirtinti","Atðaukti" );
                    return 1;
                }
                case 2:
                {
                    new car = GetPlayerVehicleID( playerid );
                    if( IsPlayerInAnyVehicle( playerid ) && cInfo[ car ][ cOwner ] == 0 )
                        ShowPlayerDialog( playerid, 48, DIALOG_STYLE_INPUT,"Automobilio darbas","áraðykite barbo ID kad automobilis priklausytu jam.","Patvirtinti","Atðaukti" );
                    return 1;
                }
				case 3:
				{
                    new car = GetPlayerVehicleID( playerid );
				    if( IsPlayerInAnyVehicle( playerid ) && cInfo[ car ][ cOwner ] == 0 )
						ShowPlayerDialog( playerid, 80, DIALOG_STYLE_MSGBOX,"Automobilio spawn","Jeigu jau pastatëte automobilá ten kur reikia, tai patvirtinkite tai.","Patvirtinti","Atðaukti" );
					return 1;
				}				
                case 4:
                {
                    new car = GetPlayerVehicleID( playerid );
                    if( IsPlayerInAnyVehicle( playerid ) && cInfo[ car ][ cOwner ] == 0 )
                        ShowPlayerDialog( playerid, 50, DIALOG_STYLE_INPUT,"Automobilio rangas","áraðykite rango minimalø numerá.","Patvirtinti","Atðaukti" );
                    return 1;
                }
                case 5:
                {
                    new car = GetPlayerVehicleID( playerid );
                    if( IsPlayerInAnyVehicle( playerid ) && cInfo[ car ][ cOwner ] == 0 )
                        ShowPlayerDialog( playerid, 52, DIALOG_STYLE_INPUT,"Automobilio spalva","áraðykite norimas automobilio spalvas\nPavzdþiui: 3 45","Patvirtinti","Atðaukti" );
                    return 1;
                }
                case 6:
                {
                    new car = GetPlayerVehicleID( playerid );
                    if( IsPlayerInAnyVehicle( playerid ) && cInfo[ car ][ cOwner ] == 0 )
                    {
                        format( string, 126, "DELETE FROM scars WHERE sID = %d LIMIT 1;", sVehicles[ car ][ Id ] );
                        mysql_query(DbHandle,  string, false);
                        sVehicles[ car ][ Id     ] = 0;
                        sVehicles[ car ][ Model  ] = 0;
                        sVehicles[ car ][ SpawnX  ] = 0.0;
                        sVehicles[ car ][ SpawnY  ] = 0.0;
                        sVehicles[ car ][ SpawnZ  ] = 0.0;
                        sVehicles[ car ][ SpawnA  ] = 0.0;
                        sVehicles[ car ][ Color1 ] = 0;
                        sVehicles[ car ][ Color2 ] = 0;
                        sVehicles[ car ][ Faction] = 0;
                        sVehicles[ car ][ Job    ] = 0;
                        sVehicles[ car ][ Rang   ] = 0;

                        DestroyVehicle( car );
                        SendClientMessage( playerid, COLOR_WHITE, "Transporto priemonë buvo sëkmingai iðtrinta." );
                        return 1;
                    }
                }
                case 7: // Maðinos inventoriaus perþiûra
                {
                    new car = GetPlayerVehicleID( playerid );
                    if( IsPlayerInAnyVehicle( playerid ) && cInfo[ car ][ cOwner ] != 0 )
                        ShowTrunk( playerid, car );
                }
            }
        }
    }
    else if ( dialogid == 46 )
    {
        if ( response == 1 )
        {
            if ( !inputtext[ 0 ] ) return 1;
            new id,
                model,
                color1,
                color2,
                Float:Spawn_x,
                Float:Spawn_y,
                Float:Spawn_z,
                Float:Spawn_a;
            //  p< >ddd
            //sscanf(string, "k<vehicle>", id )
            sscanf( inputtext, "p< >ddd", model, color1, color2 );
            if ( model > 611 || model < 400 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: blogas nurodytas automobilio modelio ID.");
            GetPlayerPos( playerid, Spawn_x, Spawn_y, Spawn_z );
            GetPlayerFacingAngle( playerid, Spawn_a );

            format( string, 256, "INSERT INTO `scars` (sModel,sCar_x,sCar_y,sCar_z,sCar_a,sColor1,sColor2) VALUES (%d,'%f','%f','%f','%f',%d,%d)",
            model, Spawn_x, Spawn_y, Spawn_z, Spawn_a, color1, color2);

            new Cache:result;
            result = mysql_query(DbHandle,  string);
            
            cache_delete(result);
            format( string, 256, "SELECT sID FROM scars WHERE sModel = %d AND sCar_x = '%f' AND sCar_y = '%f'", model, Spawn_x, Spawn_y );
            result = mysql_query(DbHandle, string);

            if ( cache_get_row_count( ) )
            {


                id = CreateVehicle( model, Spawn_x, Spawn_y, Spawn_z, Spawn_a, color1, color2, -1 );

                cInfo[ id ][ cFuel ] = GetVehicleFuelTank( model );
                sVehicles[ id ][ Id     ] =  cache_get_field_content_int(0, "sID");
                sVehicles[ id ][ Model  ] = model;
                sVehicles[ id ][ SpawnX  ] = Spawn_x;
                sVehicles[ id ][ SpawnY  ] = Spawn_y;
                sVehicles[ id ][ SpawnZ  ] = Spawn_z;
                sVehicles[ id ][ SpawnZ  ] = Spawn_a;
                sVehicles[ id ][ Color1 ] = color1;
                sVehicles[ id ][ Color2 ] = color2;
                format( string, 24, "{000000}TLP - %d", id + 1000 );
                SetVehicleNumberPlate( id, string );
            }
            cache_delete(result);
            return 1;
            
        }
    }
    else if ( dialogid == 47 )
    {
        if ( response == 1 )
        {
            if ( !inputtext[ 0 ] ) return 1;
            if( IsPlayerInAnyVehicle( playerid ) )
            {
                new car = GetPlayerVehicleID( playerid );
                sVehicles[ car ][ Faction ] = strval( inputtext );
                if ( sVehicles[ car ][ Faction ] == 2 )
                {
                    if( sVehicles[ car ][ Model ] == 598 || sVehicles[ car ][ Model ] == 596 || sVehicles[ car ][ Model ] == 599 || sVehicles[ car ][ Model ] == 490 || sVehicles[ car ][ Model ] == 426 || sVehicles[ car ][ Model ] == 427 )
                    {
                        cInfo[ car ][ cTrunkWeapon ][ 0 ] = 29;
                        cInfo[ car ][ cTrunkAmmo   ][ 0 ] = 300;
                        cInfo[ car ][ cTrunkWeapon ][ 1 ] = 31;
                        cInfo[ car ][ cTrunkAmmo   ][ 1 ] = 300;
                        cInfo[ car ][ cTrunkWeapon ][ 2 ] = 25;
                        cInfo[ car ][ cTrunkAmmo   ][ 2 ] = 50;
                    }
                }
                else if ( sVehicles[ car ][ Faction ] == 3 )
                {
                    if( sVehicles[ car ][ Model ] == 407 || sVehicles[ car ][ Model ] == 544 )
                    {
                        cInfo[ car ][ cTrunkWeapon ][ 0 ] = 9;
                        cInfo[ car ][ cTrunkAmmo   ][ 0 ] = 1;
                        cInfo[ car ][ cTrunkWeapon ][ 1 ] = 42;
                        cInfo[ car ][ cTrunkAmmo   ][ 1 ] = 1000;
                    }
                }
                else
                {
                    cInfo[ car ][ cTrunkWeapon ][ 0 ] = 0;
                    cInfo[ car ][ cTrunkAmmo   ][ 0 ] = 0;
                    cInfo[ car ][ cTrunkWeapon ][ 1 ] = 0;
                    cInfo[ car ][ cTrunkAmmo   ][ 1 ] = 0;
                    cInfo[ car ][ cTrunkWeapon ][ 2 ] = 0;
                    cInfo[ car ][ cTrunkAmmo   ][ 2 ] = 0;
                }
                format( string, 126, "Transporto priemonë buvo priskirta frakcijai, kurios ID: %d ",sVehicles[ car ][ Faction ] );
                SendClientMessage( playerid, GRAD, string );
                SaveSVehicle( car );
            }
        }
    }
    else if ( dialogid == 48 )
    {
        if ( response == 1 )
        {
            if ( !inputtext[ 0 ] ) return 1;
            new car = GetPlayerVehicleID( playerid );
            if( IsPlayerInAnyVehicle( playerid ) && sVehicles[ car ][ Faction ] == 0 )
            {
                sVehicles[ car ][ Job ] = strval( inputtext );
                cInfo[ car ][ cTrunkWeapon ][ 0 ] = 0;
                cInfo[ car ][ cTrunkAmmo   ][ 0 ] = 0;
                cInfo[ car ][ cTrunkWeapon ][ 1 ] = 0;
                cInfo[ car ][ cTrunkAmmo   ][ 1 ] = 0;
                cInfo[ car ][ cTrunkWeapon ][ 2 ] = 0;
                cInfo[ car ][ cTrunkAmmo   ][ 2 ] = 0;
                format( string, 126, "Transporto priemonë buvo priskirta nefrakciniam darbui, kurio ID: %d ",sVehicles[ car ][ Job ] );
                SendClientMessage( playerid, GRAD, string );
                SaveSVehicle( car );
            }
        }
    }
    else if ( dialogid == 50 )
    {
        if ( response == 1 )
        {
            if ( !inputtext[ 0 ] ) return 1;
            new car = GetPlayerVehicleID( playerid );
            if( IsPlayerInAnyVehicle( playerid ) )
            {
                sVehicles[ car ][ Rang ] = strval( inputtext );
                format( string, 126, "Frakcijos transporto priemonës minimalus galimas rangas pakeistas á: %d ",sVehicles[ car ][ Rang ] );
                SendClientMessage( playerid, GRAD, string );
                SaveSVehicle( car );
            }
        }
    }
    else if ( dialogid == 52 )
    {
        if ( response == 1 )
        {
            if ( !inputtext[ 0 ] ) return 1;
            if( IsPlayerInAnyVehicle( playerid ) )
            {
                new car = GetPlayerVehicleID( playerid ),
                    color1,
                    color2;
                sscanf( inputtext, "p< >dd", color1, color2 );
                sVehicles[ car ][ Color1 ] = color1;
                sVehicles[ car ][ Color2 ] = color2;
                ChangeVehicleColor( car, color1, color2 );
                SaveSVehicle( car );
                return 1;
            }
        }
    }
    else if ( dialogid == 53 )
    {
        if ( response == 1 )
        {
            switch ( listitem )
            {
                case 0:
                {
                    ShowPlayerDialog( playerid, 54, DIALOG_STYLE_INPUT,"Serverio iëjimo sukûrimas", "áraðykite serverio iëjimo pavadinimá :","Patvirtinti", "Atðaukti" );
                    return 1;
                }
                case 1:
                {
                    ShowPlayerDialog( playerid, 55, DIALOG_STYLE_INPUT,"Serverio iëjimo perkelimas", "áraðykite serverio iëjimo id\nJá galite suþinoti per iëjimo meniu, budami prie to iëjimo.","Patvirtinti", "Atðaukti" );
                    return 1;
                }
                case 2:
                {
                    ShowPlayerDialog( playerid, 56, DIALOG_STYLE_INPUT,"Serverio iðëjimo perkelimas", "áraðykite serverio iðëjimo id\nJá galite suþinoti per iëjimo meniu, budami prie to iëjimo.","Patvirtinti", "Atðaukti" );
                    return 1;
                }
                case 3:
                {
                    ShowPlayerDialog( playerid, 57, DIALOG_STYLE_INPUT,"Serverio iëjimo pavadinimo pakeitimas", "áraðykite serverio Áëjimo pavadinimá :","Patvirtinti", "Atðaukti" );
                    return 1;
                }
                case 4:
                {
                    foreach(sEnters,id)
                    {
                        if ( PlayerToPoint( 2.0, playerid, sEnter[ id ][ sEnter_x ], sEnter[ id ][ sEnter_y ], sEnter[ id ][ sEnter_z ] ) )
                        {
                            format( string, 126, "Serverio Áëjimo ID: %d", id );
                            SendClientMessage( playerid, GRAD, string );
                            break;
                        }
                    }
                }
                case 5:
                {
                    foreach(sEnters,id)
                    {
                        if ( PlayerToPoint( 2.0, playerid, sEnter[ id ][ sEnter_x ], sEnter[ id ][ sEnter_y ], sEnter[ id ][ sEnter_z ] ) )
                        {
                            format( string, 126, "DELETE FROM `senters` WHERE sID = %d", sEnter[ id ][ sID ]);
                            mysql_query(DbHandle,  string, false);
                            
                            DestroyDynamicPickup( sEnter[ id ][ Pickup ]);

                            sEnter[ id ][ sID      ] = 0;
                            sEnter[ id ][ sEnter_x ] = 0.0;
                            sEnter[ id ][ sEnter_y ] = 0.0;
                            sEnter[ id ][ sEnter_z ] = 0.0;
                            sEnter[ id ][ sExit_z  ] = 0.0;
                            sEnter[ id ][ sExit_Y  ] = 0.0;
                            sEnter[ id ][ sExit_z  ] = 0.0;
                            sEnter[ id ][ Int2     ] = 0;
                            sEnter[ id ][ Int      ] = 0;
                            sEnter[ id ][ Wirt2    ] = 0;
                            sEnter[ id ][ Wirt     ] = 0;
                            strmid(sEnter[ id ][ Name ],"Nera",0,6,6);
                            Itter_Remove(sEnters,id);
                            SendClientMessage( playerid, COLOR_WHITE, "áëjimas sëkmingai paðalintas" );
                            return 1;
                            
                        }
                    }
                }
                case 6, 7:
                {
                    if(listitem == 6) SetPVarInt(playerid, "SEnterActionWithId", 1);
                    else if(listitem == 7) SetPVarInt(playerid, "SEnterActionWithId", 2);
                    ShowPlayerDialog( playerid, DIALOG_SENTER_INPUT_ID, DIALOG_STYLE_INPUT,"Serverio iëjimo pasaulio pakeitimas", "áraðykite serverio iëjimo id\nJá galite suþinoti per iëjimo meniu, budami prie to iëjimo.","Patvirtinti", "Atðaukti" );
                    return 1;
                }
            }
        }
    }
    // Iejimo suskurimas
    else if ( dialogid == 54 )
    {
        if ( response == 1 )
        {
            if ( !inputtext[ 0 ] ) 
                return 1;

            new id,
                Inte = GetPlayerInterior( playerid ),
                Wirte = GetPlayerVirtualWorld( playerid ),
                query[256];

            // Surandam nauja ID.
            for(new i = 0; i < sizeof(sEnter); i++)
            {
                if(!sEnter[ i ][ sID ])
                {
                    id = i;
                    break;
                }
            }

            mysql_real_escape_string(inputtext,inputtext, DbHandle, 128);
            GetPlayerPos( playerid, sEnter[ id ][ sEnter_x ], sEnter[ id ][ sEnter_y ], sEnter[ id ][ sEnter_z ] );
            format( query, sizeof(query), "INSERT INTO `senters` (sEnter_x,sEnter_y,sEnter_z) VALUES ('%f','%f','%f')",
                sEnter[ id ][ sEnter_x ], sEnter[ id ][ sEnter_y ], sEnter[ id ][ sEnter_z ] );
            
            new Cache:result;
            result = mysql_query(DbHandle,  query);
            
            //mysql_store_result();

            sEnter[ id ][ sID      ] = cache_insert_id();
            cache_delete(result);
            sEnter[ id ][ Int2     ] = Inte;
            sEnter[ id ][ Int      ] = 0;
            sEnter[ id ][ Wirt     ] = Wirte;
            sEnter[ id ][ Wirt2    ] = 0;
            sEnter[ id ][ PickupModel ] = DEFAULT_SENTER_PICKUP_MODEL;
            //mysql_free_result();
            format( sEnter[ id ][ Name ],60, "%s",inputtext );
            UpdateSEnterInfo( id );
            SaveSEnter( id );
            Itter_Add(sEnters, id );
            format( string, 126, "Serverio áëjimas buvo sëkmingai sukurtas, ðio Áëjimo ID: %d", id );
            SendClientMessage( playerid, GRAD, string );
            
        }
    }
    else if ( dialogid == 55 )
    {
        if ( response == 1 )
        {
            if ( !inputtext[ 0 ] ) return 1;
            new id = strval(inputtext);
            GetPlayerPos( playerid, sEnter[ id ][ sEnter_x ],
                                    sEnter[ id ][ sEnter_y ],
                                    sEnter[ id ][ sEnter_z ]);
            sEnter[ id ][ Int2      ] = GetPlayerInterior( playerid );
            sEnter[ id ][ Wirt      ] = GetPlayerVirtualWorld( playerid );
            UpdateSEnterInfo( id );
            SendClientMessage(playerid, GRAD, "Iëjimas sëkmingai buvo perkeltas" );
            SaveSEnter( id );
        }
    }
	else if ( dialogid == 80 )
	{
	    if ( response == 1 )
	    {
			new car = GetPlayerVehicleID(playerid);

			GetVehiclePos(car, sVehicles[ car ][ SpawnX  ],
								sVehicles[ car ][ SpawnY  ],
								sVehicles[ car ][ SpawnZ  ]);
			GetVehicleZAngle( car, sVehicles[ car ][ SpawnA  ] );
			DestroyVehicle(car);
			CreateVehicle(sVehicles[ car ][ Model ],
							sVehicles[ car ][ SpawnX ],
							sVehicles[ car ][ SpawnY ],
							sVehicles[ car ][ SpawnZ ],
							sVehicles[ car ][ SpawnA ],
							sVehicles[ car ][ Color1 ],
							sVehicles[ car ][ Color2 ], -1);
            format(string, 24, "{000000}TLP - %d", car + 1000);
		    SetVehicleNumberPlate(car, string);
			SaveSVehicle(car);
			return 1;
		}
	}
    else if ( dialogid == DIALOG_SENTER_INPUT_ID )
    {
        if ( !response )
            return 1;

        if ( !inputtext[ 0 ] )
            return 1;

        SetPVarInt( playerid, "EntVirw", strval(inputtext) );
        switch(GetPVarInt(playerid, "SEnterActionWithId"))
        {
            case 1:
                ShowPlayerDialog( playerid, 143, DIALOG_STYLE_INPUT,"Serverio iëjimo pasaulio pakeitimas", "áraðykite pasaulio ID.","Patvirtinti", "Atðaukti" );
            case 2:
                ShowPlayerDialog(playerid, DIALOG_SENTER_CHANGE_MODEL, DIALOG_STYLE_INPUT, "Serverio Áëjimo pickup modelio keitimas", "áraðykite naujà  serverio Áëjimo pickup modelio ID", "Keisti", "Atðaukti");
        }
        DeletePVar(playerid, "SEnterActionWithId");
        return 1;
    }
    else if( dialogid == DIALOG_SENTER_CHANGE_MODEL )
    {
        if(!response) 
            return 1;
        new newmodel;
        if(sscanf(inputtext,"i",newmodel) || newmodel < 0 || newmodel > 19902)
            return SendClientMessage(playerid,  GRAD, "[ Klaida ! ] Netinkamas modelio ID");

        new index = GetPVarInt(playerid, "EntVirw");
        sEnter[ index ][ PickupModel ] = newmodel;
        UpdateSEnterInfo( index );
        SendClientMessage(playerid, GRAD, "Modelis sëkmingai buvo pakeistas" );
        SaveSEnter( index );
        return 1;
    }
    else if ( dialogid == 143 )
    {
        if ( !response )
            return 1;

        if ( !inputtext[ 0 ] )
            return 1;

        new id = GetPVarInt( playerid, "EntVirw" );
        sEnter[ id ][ Wirt2 ] = strval(inputtext);
        UpdateSEnterInfo( id );
        SendClientMessage(playerid, GRAD, "Pasaulis sëkmingai buvo pakeistas" );
        SaveSEnter( id );
    }
    else if ( dialogid == 145 )
    {
        if ( response == 1 )
        {
            if ( !inputtext[ 0 ] ) return 1;

            format( fInfo[ tmpinteger[ playerid ] ][ fRank9 ], 56, "%s", inputtext );
            format( string, 256,"Frakcijos rangas pakeistas á: %s", inputtext );
            SendClientMessage( playerid, GRAD, string );
            SaveFactions( tmpinteger[ playerid ] );

            ShowAdminMenu( playerid, 0, tmpinteger[ playerid ] );
            return 1;
        }
    }
    else if ( dialogid == 146 )
    {
        if ( response == 1 )
        {
            if ( !inputtext[ 0 ] ) return 1;

            format( fInfo[ tmpinteger[ playerid ] ][ fRank10 ], 56, "%s", inputtext );
            format( string, 256,"Frakcijos rangas pakeistas á: %s", inputtext );
            SendClientMessage( playerid, GRAD, string );
            SaveFactions( tmpinteger[ playerid ] );

            ShowAdminMenu( playerid, 0, tmpinteger[ playerid ] );
            return 1;
        }
    }
    else if ( dialogid == 147 )
    {
        if ( response == 1 )
        {
            if ( !inputtext[ 0 ] ) return 1;

            format( fInfo[ tmpinteger[ playerid ] ][ fRank11 ], 56, "%s", inputtext );
            format( string, 256,"Frakcijos rangas pakeistas á: %s", inputtext );
            SendClientMessage( playerid, GRAD, string );
            SaveFactions( tmpinteger[ playerid ] );

            ShowAdminMenu( playerid, 0, tmpinteger[ playerid ] );
            return 1;
        }
    }
    else if ( dialogid == 148 )
    {
        if ( response == 1 )
        {
            if ( !inputtext[ 0 ] ) return 1;

            format( fInfo[ tmpinteger[ playerid ] ][ fRank12 ], 56, "%s", inputtext );
            format( string, 256,"Frakcijos rangas pakeistas á: %s", inputtext );
            SendClientMessage( playerid, GRAD, string );
            SaveFactions( tmpinteger[ playerid ] );

            ShowAdminMenu( playerid, 0, tmpinteger[ playerid ] );
            return 1;
        }
    }
    else if( dialogid == 149 )
    {
        if(!response)
            return 1;
        new
            rows,
            i = 0;

        new Cache:result = mysql_query(DbHandle,  "SELECT `numbers` FROM `arrestedcars`" );
        
        rows = cache_get_row_count();

        for(i = 0; i < rows; i++)
        {
            if( i == listitem )
            {
                cache_get_field_content(i, "numbers", string);
                OnDialogResponse( playerid, 130, 1, 0, string );
            }
        }
        cache_delete(result);
    }
    else if ( dialogid == 150 )
    {
        if ( response == 1 )
        {
            switch( tmpinteger[ playerid ] )
            {
                case 0:
                {
                    for(new w = 0; w < sizeof DrugMake; w++)
                    {
                        if( DrugMake[ w ][ dOwner ] == pInfo[ playerid ][ pMySQLID ] && DrugMake[ w ][ dItemID ] == ITEM_METAMFA && DrugMake[ w ][ dLaikas ] > 0)
                            return SendClientMessage( playerid, COLOR_WHITE, " Jûs jau gaminate ðá narkotiká ! ");
                        if( DrugMake[ w ][ dOwner ] == pInfo[ playerid ][ pMySQLID ] && DrugMake[ w ][ dItemID ] == ITEM_METAMFA && DrugMake[ w ][ dLaikas ] == 0 && DrugMake[ w ][ dMade ])
                        {
                            if( PlayerMoney     [ playerid ] < 1000 )
                                return SendClientMessage( playerid, COLOR_WHITE, "Neturite pakankamai pinigø!");

                            if(IsPlayerInventoryFull(playerid))
                                return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, jûsø inventorius pilnas.");

                            GivePlayerItem(playerid, ITEM_METAMFA, 50);
                            GivePlayerMoney(playerid, -1000);
                            DrugMake[ w ][ dMade ] = false;
                            DrugMake[ w ][ dLaikas ] = 0;
                            DrugMake[ w ][ dOwner ] = 0;
                            DrugMake[ w ][ dItemID ] = 0;
                            SendClientMessage( playerid, COLOR_WHITE, "NARKOTIKAI PAGAMINTI!");
                            
                            return true;
                        }
                        if( DrugMake[ w ][ dOwner ] == 0 && DrugMake[ w ][ dItemID ] == 0 && DrugMake[ w ][ dLaikas ] == 0 && !DrugMake[ w ][ dMade ])
                        {
                            if( PlayerMoney     [ playerid ] < 1000 )
                                return SendClientMessage( playerid, COLOR_WHITE, "Neturite pakankamai pinigø!");
                            DrugMake[ w ][ dMade ] = false;
                            DrugMake[ w ][ dLaikas ] = 2;
                            DrugMake[ w ][ dOwner ] = pInfo[ playerid ][ pMySQLID ];
                            DrugMake[ w ][ dItemID ] = ITEM_METAMFA;
                            SendClientMessage( playerid, COLOR_WHITE, "NARKOTIKAI PRADËTI PAGAMINTI!");
                            return true;
                        }
                    }
                }
                case 1:
                {
                    for(new w = 0; w < sizeof DrugMake; w++)
                    {
                        if( DrugMake[ w ][ dOwner ] == pInfo[ playerid ][ pMySQLID ] && DrugMake[ w ][ dItemID ] == ITEM_AMFA && DrugMake[ w ][ dLaikas ] > 0)
                            return SendClientMessage( playerid, COLOR_WHITE, " Jûs jau gaminate ðá narkotikà ! ");
                        if( DrugMake[ w ][ dOwner ] == pInfo[ playerid ][ pMySQLID ] && DrugMake[ w ][ dItemID ] == ITEM_AMFA && DrugMake[ w ][ dLaikas ] == 0 && DrugMake[ w ][ dMade ])
                        {
                            if( PlayerMoney     [ playerid ] < 1500 )
                                return SendClientMessage( playerid, COLOR_WHITE, "Neturite pakankamai pinigø!");

                            if(IsPlayerInventoryFull(playerid))
                                return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, jûsø inventorius pilnas.");

                            GivePlayerItem(playerid, ITEM_AMFA, 100);
                            GivePlayerMoney(playerid, -1500);
                            DrugMake[ w ][ dMade ] = false;
                            DrugMake[ w ][ dLaikas ] = 0;
                            DrugMake[ w ][ dOwner ] = 0;
                            DrugMake[ w ][ dItemID ] = 0;
                            SendClientMessage( playerid, COLOR_WHITE, "NARKOTIKAI PAGAMINTI!");
                            
                            return true;
                        }
                        if( DrugMake[ w ][ dOwner ] == 0 && DrugMake[ w ][ dItemID ] == 0 && DrugMake[ w ][ dLaikas ] == 0 && !DrugMake[ w ][ dMade ])
                        {
                            if( PlayerMoney     [ playerid ] < 1500 )
                                return SendClientMessage( playerid, COLOR_WHITE, "Neturite pakankamai pinigø!");
                            DrugMake[ w ][ dMade ] = false;
                            DrugMake[ w ][ dLaikas ] = 2;
                            DrugMake[ w ][ dOwner ] = pInfo[ playerid ][ pMySQLID ];
                            DrugMake[ w ][ dItemID ] = ITEM_AMFA;
                            SendClientMessage( playerid, COLOR_WHITE, "NARKOTIKAI PRADËTI PAGAMINTI!");
                            return true;
                        }
                    }
                }
                case 2:
                {
                    for(new w = 0; w < sizeof DrugMake; w++)
                    {
                        if( DrugMake[ w ][ dOwner ] == pInfo[ playerid ][ pMySQLID ] && DrugMake[ w ][ dItemID ] == ITEM_COCAINE && DrugMake[ w ][ dLaikas ] > 0)
                            return SendClientMessage( playerid, COLOR_WHITE, " Jûs jau gaminate ðá narkotiká ! ");
                        if( DrugMake[ w ][ dOwner ] == pInfo[ playerid ][ pMySQLID ] && DrugMake[ w ][ dItemID ] == ITEM_COCAINE && DrugMake[ w ][ dLaikas ] == 0 && DrugMake[ w ][ dMade ])
                        {
                            if( PlayerMoney     [ playerid ] < 1000 )
                                return SendClientMessage( playerid, COLOR_WHITE, "Neturite pakankamai pinigø!");

                            if(IsPlayerInventoryFull(playerid))
                                return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, jûsø inventorius pilnas.");

                            GivePlayerItem(playerid, ITEM_COCAINE, 25);
                            GivePlayerMoney(playerid, -1000);
                            DrugMake[ w ][ dMade ] = false;
                            DrugMake[ w ][ dLaikas ] = 0;
                            DrugMake[ w ][ dOwner ] = 0;
                            DrugMake[ w ][ dItemID ] = 0;
                            SendClientMessage( playerid, COLOR_WHITE, "NARKOTIKAI PAGAMINTI!");
                            
                            return true;
                        }
                        if( DrugMake[ w ][ dOwner ] == 0 && DrugMake[ w ][ dItemID ] == 0 && DrugMake[ w ][ dLaikas ] == 0 && !DrugMake[ w ][ dMade ])
                        {
                            if( PlayerMoney     [ playerid ] < 1000 )
                                return SendClientMessage( playerid, COLOR_WHITE, "Neturite pakankamai pinigø!");
                            DrugMake[ w ][ dMade ] = false;
                            DrugMake[ w ][ dLaikas ] = 2;
                            DrugMake[ w ][ dOwner ] = pInfo[ playerid ][ pMySQLID ];
                            DrugMake[ w ][ dItemID ] = ITEM_COCAINE;
                            SendClientMessage( playerid, COLOR_WHITE, "NARKOTIKAI PRADËTI PAGAMINTI!");
                            return true;
                        }
                    }
                }
                case 3:
                {
                    for(new w = 0; w < sizeof DrugMake; w++)
                    {
                        if( DrugMake[ w ][ dOwner ] == pInfo[ playerid ][ pMySQLID ] && DrugMake[ w ][ dItemID ] == ITEM_HERAS && DrugMake[ w ][ dLaikas ] > 0)
                            return SendClientMessage( playerid, COLOR_WHITE, " Jûs jau gaminate ðá narkotiká ! ");
                        if( DrugMake[ w ][ dOwner ] == pInfo[ playerid ][ pMySQLID ] && DrugMake[ w ][ dItemID ] == ITEM_HERAS && DrugMake[ w ][ dLaikas ] == 0 && DrugMake[ w ][ dMade ])
                        {
                            if( PlayerMoney     [ playerid ] < 1500 )
                                return SendClientMessage( playerid, COLOR_WHITE, "Neturite pakankamai pinigø!");

                            if(IsPlayerInventoryFull(playerid))
                                return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, jûsø inventorius pilnas.");

                            GivePlayerItem(playerid, ITEM_HERAS, 50);
                            GivePlayerMoney(playerid, -1500);
                            DrugMake[ w ][ dMade ] = false;
                            DrugMake[ w ][ dLaikas ] = 0;
                            DrugMake[ w ][ dOwner ] = 0;
                            DrugMake[ w ][ dItemID ] = 0;
                            SendClientMessage( playerid, COLOR_WHITE, "NARKOTIKAI PAGAMINTI!");
                            return true;
                        }
                        if( DrugMake[ w ][ dOwner ] == 0 && DrugMake[ w ][ dItemID ] == 0 && DrugMake[ w ][ dLaikas ] == 0 && !DrugMake[ w ][ dMade ])
                        {
                            if( PlayerMoney     [ playerid ] < 1500 )
                                return SendClientMessage( playerid, COLOR_WHITE, "Neturite pakankamai pinigø!");
                            DrugMake[ w ][ dMade ] = false;
                            DrugMake[ w ][ dLaikas ] = 2;
                            DrugMake[ w ][ dOwner ] = pInfo[ playerid ][ pMySQLID ];
                            DrugMake[ w ][ dItemID ] = ITEM_HERAS;
                            SendClientMessage( playerid, COLOR_WHITE, "NARKOTIKAI PRADËTI PAGAMINTI!");
                            return true;
                        }
                    }
                }
                case 4:
                {
                    for(new w = 0; w < sizeof DrugMake; w++)
                    {
                        if( DrugMake[ w ][ dOwner ] == pInfo[ playerid ][ pMySQLID ] && DrugMake[ w ][ dItemID ] == ITEM_EXTAZY && DrugMake[ w ][ dLaikas ] > 0)
                            return SendClientMessage( playerid, COLOR_WHITE, " Jûs jau gaminate ðá narkotiká ! ");
                        if( DrugMake[ w ][ dOwner ] == pInfo[ playerid ][ pMySQLID ] && DrugMake[ w ][ dItemID ] == ITEM_EXTAZY && DrugMake[ w ][ dLaikas ] == 0 && DrugMake[ w ][ dMade ])
                        {
                            if( PlayerMoney     [ playerid ] < 1200 )
                                return SendClientMessage( playerid, COLOR_WHITE, "Neturite pakankamai pinigø!");

                            if(IsPlayerInventoryFull(playerid))
                                return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, jûsø inventorius pilnas.");

                            GivePlayerItem(playerid, ITEM_EXTAZY, 30 );
                            GivePlayerMoney(playerid, -1200);
                            DrugMake[ w ][ dMade ] = false;
                            DrugMake[ w ][ dLaikas ] = 0;
                            DrugMake[ w ][ dOwner ] = 0;
                            DrugMake[ w ][ dItemID ] = 0;
                            SendClientMessage( playerid, COLOR_WHITE, "NARKOTIKAI PAGAMINTI!");
                            return true;
                        }
                        if( DrugMake[ w ][ dOwner ] == 0 && DrugMake[ w ][ dItemID ] == 0 && DrugMake[ w ][ dLaikas ] == 0 && !DrugMake[ w ][ dMade ])
                        {
                            if( PlayerMoney     [ playerid ] < 1200 )
                                return SendClientMessage( playerid, COLOR_WHITE, "Neturite pakankamai pinigø!");
                            DrugMake[ w ][ dMade ] = false;
                            DrugMake[ w ][ dLaikas ] = 2;
                            DrugMake[ w ][ dOwner ] = pInfo[ playerid ][ pMySQLID ];
                            DrugMake[ w ][ dItemID ] = ITEM_EXTAZY;
                            SendClientMessage( playerid, COLOR_WHITE, "NARKOTIKAI PRADËTI PAGAMINTI!");
                            return true;
                        }
                    }
                }
                case 5:
                {
                    for(new w = 0; w < sizeof DrugMake; w++)
                    {
                        if( DrugMake[ w ][ dOwner ] == pInfo[ playerid ][ pMySQLID ] && DrugMake[ w ][ dItemID ] == ITEM_PCP && DrugMake[ w ][ dLaikas ] > 0)
                            return SendClientMessage( playerid, COLOR_WHITE, " Jûs jau gaminate ðá narkotiká ! ");
                        if( DrugMake[ w ][ dOwner ] == pInfo[ playerid ][ pMySQLID ] && DrugMake[ w ][ dItemID ] == ITEM_PCP && DrugMake[ w ][ dLaikas ] == 0 && DrugMake[ w ][ dMade ])
                        {
                            if( PlayerMoney     [ playerid ] < 1300 )
                                return SendClientMessage( playerid, COLOR_WHITE, "Neturite pakankamai pinigø!");

                            if(IsPlayerInventoryFull(playerid))
                                return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, jûsø inventorius pilnas.");

                            GivePlayerItem(playerid, ITEM_PCP, 50);
                            GivePlayerMoney(playerid, -1300);
                            DrugMake[ w ][ dMade ] = false;
                            DrugMake[ w ][ dLaikas ] = 0;
                            DrugMake[ w ][ dOwner ] = 0;
                            DrugMake[ w ][ dItemID ] = 0;
                            SendClientMessage( playerid, COLOR_WHITE, "NARKOTIKAI PAGAMINTI!");
                            return true;
                        }
                        if( DrugMake[ w ][ dOwner ] == 0 && DrugMake[ w ][ dItemID ] == 0 && DrugMake[ w ][ dLaikas ] == 0 && !DrugMake[ w ][ dMade ])
                        {
                            if( PlayerMoney     [ playerid ] < 1300 )
                                return SendClientMessage( playerid, COLOR_WHITE, "Neturite pakankamai pinigø!");
                            DrugMake[ w ][ dMade ] = false;
                            DrugMake[ w ][ dLaikas ] = 2;
                            DrugMake[ w ][ dOwner ] = pInfo[ playerid ][ pMySQLID ];
                            DrugMake[ w ][ dItemID ] = ITEM_PCP;
                            SendClientMessage( playerid, COLOR_WHITE, "NARKOTIKAI PRADËTI PAGAMINTI!");
                            return true;
                        }
                    }
                }
                case 6:
                {
                    for(new w = 0; w < sizeof DrugMake; w++)
                    {
                        if( DrugMake[ w ][ dOwner ] == pInfo[ playerid ][ pMySQLID ] && DrugMake[ w ][ dItemID ] == ITEM_CRACK && DrugMake[ w ][ dLaikas ] > 0)
                            return SendClientMessage( playerid, COLOR_WHITE, " Jûs jau gaminate ðá narkotiká ! ");
                        if( DrugMake[ w ][ dOwner ] == pInfo[ playerid ][ pMySQLID ] && DrugMake[ w ][ dItemID ] == ITEM_CRACK && DrugMake[ w ][ dLaikas ] == 0 && DrugMake[ w ][ dMade ])
                        {
                            if( PlayerMoney     [ playerid ] < 1000 )
                                return SendClientMessage( playerid, COLOR_WHITE, "Neturite pakankamai pinigø!");

                            if(IsPlayerInventoryFull(playerid))
                                return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, jûsø inventorius pilnas.");


                            GivePlayerItem(playerid, ITEM_CRACK, 100);
                            GivePlayerMoney(playerid, -1000);
                            DrugMake[ w ][ dMade ] = false;
                            DrugMake[ w ][ dLaikas ] = 0;
                            DrugMake[ w ][ dOwner ] = 0;
                            DrugMake[ w ][ dItemID ] = 0;
                            SendClientMessage( playerid, COLOR_WHITE, "NARKOTIKAI PAGAMINTI!");
                            return true;
                        }
                        if( DrugMake[ w ][ dOwner ] == 0 && DrugMake[ w ][ dItemID ] == 0 && DrugMake[ w ][ dLaikas ] == 0 && !DrugMake[ w ][ dMade ])
                        {
                            if( PlayerMoney     [ playerid ] < 1000 )
                                return SendClientMessage( playerid, COLOR_WHITE, "Neturite pakankamai pinigø!");
                            DrugMake[ w ][ dMade ] = false;
                            DrugMake[ w ][ dLaikas ] = 2;
                            DrugMake[ w ][ dOwner ] = pInfo[ playerid ][ pMySQLID ];
                            DrugMake[ w ][ dItemID ] = ITEM_CRACK;
                            SendClientMessage( playerid, COLOR_WHITE, "NARKOTIKAI PRADËTI PAGAMINTI!");
                            return true;
                        }
                    }
                }
                case 7:
                {
                    for(new w = 0; w < sizeof DrugMake; w++)
                    {
                        if( DrugMake[ w ][ dOwner ] == pInfo[ playerid ][ pMySQLID ] && DrugMake[ w ][ dItemID ] == ITEM_OPIUM && DrugMake[ w ][ dLaikas ] > 0)
                            return SendClientMessage( playerid, COLOR_WHITE, " Jûs jau gaminate ðá narkotikà! ");
                        if( DrugMake[ w ][ dOwner ] == pInfo[ playerid ][ pMySQLID ] && DrugMake[ w ][ dItemID ] == ITEM_OPIUM && DrugMake[ w ][ dLaikas ] == 0 && DrugMake[ w ][ dMade ])
                        {
                            if( PlayerMoney     [ playerid ] < 1200 )
                                return SendClientMessage( playerid, COLOR_WHITE, "Neturite pakankamai pinigø!");

                            if(IsPlayerInventoryFull(playerid))
                                return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, jûsø inventorius pilnas.");

                            GivePlayerItem(playerid, ITEM_OPIUM, 30);
                            GivePlayerMoney(playerid, -1200);
                            DrugMake[ w ][ dMade ] = false;
                            DrugMake[ w ][ dLaikas ] = 0;
                            DrugMake[ w ][ dOwner ] = 0;
                            DrugMake[ w ][ dItemID ] = 0;
                            SendClientMessage( playerid, COLOR_WHITE, "NARKOTIKAI PAGAMINTI!");
                            return true;
                        }
                        if( DrugMake[ w ][ dOwner ] == 0 && DrugMake[ w ][ dItemID ] == 0 && DrugMake[ w ][ dLaikas ] == 0 && !DrugMake[ w ][ dMade ])
                        {
                            if( PlayerMoney     [ playerid ] < 1200 )
                                return SendClientMessage( playerid, COLOR_WHITE, "Neturite pakankamai pinigø!");
                            DrugMake[ w ][ dMade ] = false;
                            DrugMake[ w ][ dLaikas ] = 2;
                            DrugMake[ w ][ dOwner ] = pInfo[ playerid ][ pMySQLID ];
                            DrugMake[ w ][ dItemID ] = ITEM_EXTAZY;
                            SendClientMessage( playerid, COLOR_WHITE, "NARKOTIKAI PRADËTI PAGAMINTI!");
                            return true;
                        }
                    }
                }
            }
        }
        tmpinteger[ playerid ] = -1;
    }
    /*
    else if ( dialogid == 151 )
    {
        if ( response == 1 )
        {
            foreach(Busines,i)
            {
                if ( PlayerToPoint( 5.0, playerid, bInfo[ i ][ bEnter ][ 0 ], bInfo[ i ][ bEnter ][ 1 ], bInfo[ i ][ bEnter ][ 2 ] ) )
                {
                    switch( listitem )
                    {
                        case 0: bInfo[ i ][ bNasumas ] = 50;
                        case 1: bInfo[ i ][ bNasumas ] = 100;
                        case 2: bInfo[ i ][ bNasumas ] = 150;
                        case 3: bInfo[ i ][ bNasumas ] = 200;
                        case 4: bInfo[ i ][ bNasumas ] = 250;
                    }
                    SaveBiz( i );
                    SendClientMessage( playerid, COLOR_WHITE, "Biznio/verslo naðumas buvo sëkmingai pakeistas." );
                    return 1;
                }
            }
        }
        return 1;
    }
    */
    else if ( dialogid == 152 )
    {
        if ( response == 1 )
        {
            if ( !inputtext[ 0 ] ) return 1;

            format( fInfo[ tmpinteger[ playerid ] ][ fRank13 ], 56, "%s", inputtext );
            format( string, 256,"Frakcijos rangas pakeistas á: %s", inputtext );
            SendClientMessage( playerid, GRAD, string );
            SaveFactions( tmpinteger[ playerid ] );

            ShowAdminMenu( playerid, 0, tmpinteger[ playerid ] );
            return 1;
        }
    }
    else if ( dialogid == 159 )
    {
        if( !response )
            return true;
        switch( listitem )
        {
            case 0:
            {
                if( !GetPVarInt( playerid, "oKepure" ) )
                {
                    SetPlayerAttachedObject(playerid, 0, 19330, 2, 0.132999,-0.011999,0.004000,-177.199996,-2.200002,30.799991);
                    EditAttachedObject(playerid, 0);
                    SendClientMessage(playerid, 0xFFFFFFFF, "Norëdami pasukti/pakeisti kamerà laikykite klaviðus: {FFFF00}~k~~PED_SPRINT~{FFFFFF}.");
                    SetPVarInt( playerid, "oKepure", true );
                }
                else
                {
                    SetPVarInt( playerid, "oKepure", false );
                    SendClientMessage( playerid, COLOR_WHITE,"Daiktas buvo sëkmingai panaikintas/nuimtas.");
                    RemovePlayerAttachedObject( playerid, 0 );
                }
            }
            case 1:
            {
                if( !GetPVarInt( playerid, "oKepure" ) )
                {
                    SetPlayerAttachedObject(playerid, 0, 19331, 2, 0.132999,-0.011999,0.004000,-177.199996,-2.200002,30.799991);
                    EditAttachedObject(playerid, 0);
                    SendClientMessage(playerid, 0xFFFFFFFF, "Norëdami pasukti/pakeisti kamerà laikykite klaviðus: {FFFF00}~k~~PED_SPRINT~{FFFFFF}.");
                    SetPVarInt( playerid, "oKepure", true );
                }
                else
                {
                    SetPVarInt( playerid, "oKepure", false );
                    SendClientMessage( playerid, COLOR_WHITE,"Daiktas buvo sëkmingai panaikintas/nuimtas.");
                    RemovePlayerAttachedObject( playerid, 0 );
                }
            }
            case 2:
            {
                if( !GetPVarInt( playerid, "oKepure" ) )
                {
                    SetPlayerAttachedObject(playerid, 0, 19472, 2, 0.132999,-0.011999,0.004000,-177.199996,-2.200002,30.799991);
                    EditAttachedObject(playerid, 0);
                    SendClientMessage(playerid, 0xFFFFFFFF, "Norëdami pasukti/pakeisti kamerà laikykite klaviðus: {FFFF00}~k~~PED_SPRINT~{FFFFFF}.");
                    SetPVarInt( playerid, "oKepure", true );
                }
                else
                {
                    SetPVarInt( playerid, "oKepure", false );
                    SendClientMessage( playerid, COLOR_WHITE,"Daiktas buvo sëkmingai panaikintas/nuimtas.");
                    RemovePlayerAttachedObject( playerid, 0 );
                }
            }
        }
    }
    else if ( dialogid == 56 )
    {
        if ( response == 1 )
        {
            if ( !inputtext[ 0 ] ) return 1;
            new id = strval(inputtext);
            GetPlayerPos( playerid, sEnter[ id ][ sExit_x ],
                                    sEnter[ id ][ sExit_Y ],
                                    sEnter[ id ][ sExit_z ]);
            sEnter[ id ][ Int   ] = GetPlayerInterior( playerid );
            sEnter[ id ][ Wirt2 ] = GetPlayerVirtualWorld( playerid );
            UpdateSEnterInfo( id );
            SendClientMessage(playerid, GRAD, "Iðëjimas sëkmingai buvo perkeltas" );
            SaveSEnter( id );
        }
    }
    else if ( dialogid == 57 )
    {
        if ( response == 1 )
        {
            if ( !inputtext[ 0 ] ) return 1;
            foreach(sEnters,id)
            {
                if ( PlayerToPoint( 2.0, playerid, sEnter[ id ][ sEnter_x ], sEnter[ id ][ sEnter_y ], sEnter[ id ][ sEnter_z ] ) )
                {
                    format( sEnter[ id ][ Name ], 60, "%s",inputtext );

                    format( string, 126, "Serverio Áëjimo pavadinimas buvo pakeistas á: %s", inputtext );
                    SendClientMessage( playerid, GRAD, string );

                    SaveSEnter( id );
                    break;
                }
            }
        }
    }
    else if ( dialogid == 58 )
    {
        if ( response == 1 )
        {
            if ( !inputtext[ 0 ] ) return 1;
            format( string, 256, "AdmCmd Administratorius %s paskelbë serveryje balsavimà þaidëjams. ", GetName( playerid ) );
            SendClientMessageToAll( COLOR_LIGHTRED, string );
            format( string, 256, "AdmCmd Administratoriaus klausimas: %s", inputtext );
            SendClientMessageToAll( COLOR_LIGHTRED2, string );
            SendClientMessageToAll( COLOR_WHITE, "Á uþduotà Administratoriaus klausimà galite atsakyti komandomis /taip arba /ne." );
            SetTimerEx( "Vote", 60000, 0, "s", inputtext );
            foreach(Player,id)
                Voted[ id ] = false;
            return 1;
        }
    }
    else if ( dialogid == 61 )
    {
        if ( response == 1 )
        {
            tmpinteger[ playerid ] = listitem;
            ShowPlayerDialog( playerid, 62, DIALOG_STYLE_LIST, fInfo[ listitem ][ fName ] ,"- Paðalinti frakcijà \n","Rinktis", "Atðaukti" );
            return 1;
        }
    }
    else if ( dialogid == 62 )
    {
        if ( response == 1 )
        {
            if ( listitem == 0 )
            {
                if ( tmpinteger[ playerid ] < 7 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: ðios frakcijos iðtrinti negalite. " );
                format( string, 126, "DELETE FROM `factions` WHERE `id` = %d", fInfo[ tmpinteger[ playerid ] ][ fID ] );
                mysql_query(DbHandle,  string, false);
                
                new deletedcars,
                    removedplayers;
                for(new vehicle = 0; vehicle < MAX_VEHICLES; vehicle++)
                {
                    if ( sVehicles[ vehicle ][ Faction ] == fInfo[ tmpinteger[ playerid ] ][ fID ] )
                    {
                        sVehicles[ vehicle ][ Id          ] = 0;
                        sVehicles[ vehicle ][ Model       ] = 0;
                        sVehicles[ vehicle ][ SpawnX       ] = 0.0;
                        sVehicles[ vehicle ][ SpawnY       ] = 0.0;
                        sVehicles[ vehicle ][ SpawnZ       ] = 0.0;
                        sVehicles[ vehicle ][ SpawnA       ] = 0.0;
                        sVehicles[ vehicle ][ Color1      ] = 0;
                        sVehicles[ vehicle ][ Color2      ] = 0;
                        sVehicles[ vehicle ][ Faction     ] = 0;
                        sVehicles[ vehicle ][ Rang        ] = 0;
                        sVehicles[ vehicle ][ Job         ] = 0;

                        DestroyVehicle( vehicle );
                        Itter_Remove(Vehicles,vehicle);
                        deletedcars ++;
                    }
                }

                format( string, 126, "DELETE FROM `scars` WHERE `sFaction` = %d", fInfo[ tmpinteger[ playerid ] ][ fID ] );
                mysql_query(DbHandle,  string, false);

                format( string, 126, "Paðalinta tr. priemoniø priklausanøiø frakcijai: %d", deletedcars );
                SendClientMessage( playerid, COLOR_LIGHTRED, string );
                foreach(Player,playa)
                {
                    if ( pInfo[ playa ][ pMember ] == fInfo[ tmpinteger[ playerid ] ][ fID ])
                    {
                        pInfo[ playa ][ pMember ] = 0;
                        pInfo[ playa ][ pLead   ] = 0;
                        pInfo[ playa ][ pRank   ] = 0;
                    }
                }
                format( string, 126, "UPDATE players SET Member = 0, Leader = 0, Rank = 0 WHERE Member = %d", fInfo[ tmpinteger[ playerid ] ][ fID ] );
                mysql_query(DbHandle,  string, false);
                removedplayers = cache_affected_rows();

                format( string, 126, "Paðalinta frakcijoje buvusiø þmoniø: %d ", removedplayers );
                SendClientMessage( playerid, COLOR_LIGHTRED, string );

                UnLoadFactions();
                LoadFactions();
                SendClientMessage( playerid, COLOR_WHITE, "Frakcija buvo sëkmingai paðalinta." );
                return 1;
                
            }
        }
    }
    else if(dialogid == DIALOG_VEHICLE_SHOPS_LIST)
    {
        if(!response)
            return 1;

        if(!listitem)
        {
            // naujo kurimas.
            ShowPlayerDialog(playerid, DIALOG_VEHICLE_SHOP_NEW, DIALOG_STYLE_INPUT, "Naujas turgus", "Áveskite turgaus pavadinimà", "Kurti" ,"Iðeiti");
            return 1;
        }
        new tmp[32], index;
        strmid(tmp, inputtext, 0, strfind(inputtext, "."));
        index = strval(tmp);
        SetPVarInt(playerid, "VehicleShop_Index", index);
        ShowPlayerDialog(playerid, DIALOG_VEHICLE_SHOPS_MENU, DIALOG_STYLE_LIST, VehicleShops[ index][ Name ], " - Perþiûrëti parduodama transportà\n - Keisti pavadinimà\n - {AA1100}Iðtrinti", "Pasirinkti", "Iðeiti");
        return 1;
    }
    else if(dialogid == DIALOG_VEHICLE_SHOPS_MENU)
    {
        if(!response)
            return 1;

        switch(listitem)
        {
            // vehicle list 
            case 0:
            {
                new str[2048] = "Pridëti transporto priemonæ á turgø\n{FFFFFF}", index = GetPVarInt(playerid, "VehicleShop_Index");
                for(new i = 0; i < MAX_VEHICLE_SHOP_VEHICLES; i++)
                    if(VehicleShops[ index ][ VehicleModels ][ i ])
                        format(str, sizeof(str), "%s%s\t$%d\n", str, aVehicleNames[ VehicleShops[ index ][ VehicleModels ][ i ] - 400], VehicleShops[ index ][ VehiclePrices ][ i ]);
                ShowPlayerDialog(playerid, DIALOG_VEHICLE_SHOPS_VEH_LIST, DIALOG_STYLE_LIST, "Transporto sàraðas", str, "Pasirinkti", "Iðeiti");
            }
            case 1: // New name 
                ShowPlayerDialog(playerid, DIALOG_VEHICLE_SHOPS_NEW_NAME, DIALOG_STYLE_INPUT, "Pavadinimo keitimas", "Áveskite naujà pavadinimà", "Keisti", "Iðeiti");
            case 2: // DELETE 
                ShowPlayerDialog(playerid, DIALOG_VEHICLE_SHOPS_DELETE_CON, DIALOG_STYLE_MSGBOX, "{FF0000}Dëmesio.", "Ar tikrai norite paðalinti ðá turgø?\nVisos jo parduodamos transporto priemonës bus prarastos.", "Taip", "Ne");
        }
        return 1;
    }
    else if(dialogid == DIALOG_VEHICLE_SHOPS_VEH_LIST)
    {
        if(!response)
            return 1;

        if(!listitem)
        {
            // Pridëti naujà maðinà.
            ShowPlayerDialog(playerid, DIALOG_VEHICLE_SHOPS_VEH_NEW, DIALOG_STYLE_INPUT, "Nauja transporto priemonë.", "Áraðykite tokiu formatu: modelis/pavadinimas kaina", "Kurti", "Iðeiti");
            return 1;
        }

        new index = GetPVarInt(playerid, "VehicleShop_Index"), vehIndex = -1, name[32];
        strmid(name, inputtext, 0, strfind(inputtext, "\t"));
        for(new i = 0; i < MAX_VEHICLE_SHOP_VEHICLES; i++)
        {
            if(VehicleShops[ index ][ VehicleModels ][ i ] >= 400 && !strcmp(aVehicleNames[ VehicleShops[ index ][ VehicleModels ][ i ] - 400], name))
            {
                vehIndex = i;
                break;
            }
        }

        if(vehIndex == -1)
        {
            ErrorLog("ltrp.pwn : OnDialogResponse : DIALOG_VEHICLE_SHOPS_VEH_LIST. Vehicle was not found. inputtext:%s name:%s", inputtext, name);
            return 0;
        }

        SetPVarInt(playerid, "VehicleShop_VehIndex", vehIndex);
        ShowPlayerDialog(playerid, DIALOG_VEHICLE_SHOPS_VEH_MAIN, DIALOG_STYLE_LIST, "Transporto valdymas", "Keisti kainà\nIðtrinti", "Pasirinkti", "Iðeiti");
        return 1;
    }
    else if(dialogid == DIALOG_VEHICLE_SHOPS_VEH_NEW)
    {
        if(!response)
            return 1;
        
        // Þemiau kvieèiamas OnDialogResponse.. Tai nëra gerai ir að tai þinau.... bet 
        // it makes shit A LOT easier.

        new model, name[32], price, query[140];
        // Jei naudoèiau sscanf 3 visas ðitas daiktas bûtø viena eilutë :/
        if(sscanf(inputtext, "ii", model, price))
        {
            if(sscanf(inputtext, "s[32]i", name, price))
                return OnDialogResponse(playerid, DIALOG_VEHICLE_SHOPS_VEH_LIST, true, 0, "");
            else 
                for(new i = 0; i < sizeof(aVehicleNames); i++)
                    if(!strcmp(aVehicleNames[ i ], name))
                    {
                        model = i + 400;
                        break;
                    }
        }
        if(price < 0)
        {
            SendClientMessage(playerid, COLOR_LIGHTRED, "Kaina negali bûti maþesnë uþ 0.");
            return OnDialogResponse(playerid, DIALOG_VEHICLE_SHOPS_VEH_LIST, true, 0, "");
        }
        if(model < 400 || model > 611)
        {
            SendClientMessage(playerid, COLOR_LIGHTRED, "Modelis netinkamas. Galimi modeliai 400-611");
            return OnDialogResponse(playerid, DIALOG_VEHICLE_SHOPS_VEH_LIST, true, 0, "");
        }


        new index = GetPVarInt(playerid, "VehicleShop_Index"),vehIndex = -1;
        for(new i = 0; i < MAX_VEHICLE_SHOP_VEHICLES; i++)
        {
            if(!VehicleShops[ index ][ VehicleModels ][ i ])
            {
                VehicleShops[ index ][ VehicleModels ][ i ] = model;
                VehicleShops[ index ][ VehiclePrices ][ i ] = price;
                vehIndex = i;
                break;
            }
            else if(VehicleShops[ index ][ VehicleModels ][ i ] == model)
            {
                SendClientMessage(playerid, COLOR_LIGHTRED, "Ðiame turguje ði transporto priemonë jau yra!");
                return 1;
            }
        }
        if(vehIndex == -1)
        {
            SendClientMessage(playerid, COLOR_LIGHTRED, "Ðiame turguje daugiau transporto priemoniø netelpa. Limitas " #MAX_VEHICLE_SHOP_VEHICLES ".");
            return OnDialogResponse(playerid, DIALOG_VEHICLE_SHOPS_VEH_LIST, true, 0, "");
        }

         // Na kà, èia jau turëtume turëti viskà ko reikës.
        format(query, sizeof(query), "INSERT INTO vehicle_shop_vehicles (shop_id, model, price) VALUES(%d, %d, %d)",
            VehicleShops[ index ][ Id ],
            VehicleShops[ index ][ VehicleModels ][ vehIndex ],
            VehicleShops[ index ][ VehiclePrices ][ vehIndex ]);
        mysql_pquery(DbHandle, query);
        SendClientMessage(playerid, COLOR_NEWS, "Nauja transporto priemonë sëkmingai pridëta á turgø.");
        return 1;
    }
    else if(dialogid == DIALOG_VEHICLE_SHOPS_VEH_MAIN)
    {
        if(!response)
            return 1;

        new str[100];
        switch(listitem)
        {
            case 0: // keisti kaina.
            {
                format(str, sizeof(str), "Áveskite naujà %s kainà.\nDabartinë kaina: %d$", 
                    aVehicleNames[ VehicleShops[ GetPVarInt(playerid, "VehicleShop_Index") ][ VehicleModels ][ GetPVarInt(playerid, "VehicleShop_VehIndex")] - 400 ],
                    VehicleShops[ GetPVarInt(playerid, "VehicleShop_Index") ][ VehiclePrices ][ GetPVarInt(playerid, "VehicleShop_VehIndex")]);
                ShowPlayerDialog(playerid, DIALOG_VEHICLE_SHOPS_VEH_PRICE, DIALOG_STYLE_INPUT, "Kainos keitimas", str, "Tæsti", "Iðeiti");
            }
            case 1: // DELETE.
            {
                new index = GetPVarInt(playerid, "VehicleShop_Index"), 
                    vehIndex = GetPVarInt(playerid, "VehicleShop_VehIndex");
                format(str, sizeof(str),"DELETE FROM vehicle_shop_vehicles WHERE shop_id = %d AND model = %d",
                    VehicleShops[ index ][ Id ],
                    VehicleShops[ index ][ VehicleModels ][ vehIndex ]);
                mysql_pquery(DbHandle, str);
                VehicleShops[ index ][ VehicleModels ][ vehIndex ] = 0;
                VehicleShops[ index ][ VehiclePrices ][ vehIndex ] = 0;
                SendClientMessage(playerid, COLOR_NEWS, "Transporto priemonë paðalinta ið turguas.");
            }
        }
        return 1;
    }
    else if(dialogid == DIALOG_VEHICLE_SHOPS_VEH_PRICE)
    {
        if(!response)
            return 1;
        
        new price, 
            query[120], 
            index = GetPVarInt(playerid, "VehicleShop_Index"), 
            vehIndex = GetPVarInt(playerid, "VehicleShop_VehIndex");
        if(sscanf(inputtext, "i", price) || price < 0)
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Kaina turi bûti skaièius didesnis uþ 0.");

        VehicleShops[ index ][ VehiclePrices ][ vehIndex ] = price;
        format(query, sizeof(query), "UPDATE vehicle_shop_vehicles SET price = %d WHERE shop_id = %d AND model = %d",
            price, VehicleShops[ index ][ Id ], VehicleShops[ index ][ VehicleModels ][ vehIndex ]);
        mysql_pquery(DbHandle, query);
        SendClientMessage(playerid, COLOR_NEWS, "Kaina sëkmingai atnaujinta.");
        return 1;
    }
    else if(dialogid == DIALOG_VEHICLE_SHOPS_DELETE_CON)
    {
        if(!response)
            return 1;

        new index = GetPVarInt(playerid, "VehicleShop_Index"), query[ 60 ];

        // Ðita uþklausa iðtrins tik ið vieno table.
        // Pasikliaujam paèiu mysql paðalint ið kitø table, jam taip nurodyta padaryti.
        format(query, sizeof(query), "DELETE FROM vehicle_shops WHERE id = %d", VehicleShops[ index ][ Id ]);
        mysql_pquery(DbHandle, query);

        Iter_Remove(VehicleShopIterator, index);
        VehicleShops[ index ][ Id ] = 0;
        strdel(VehicleShops[ index ][ Name ], 0, strlen(VehicleShops[ index ][ Name ]));
        DestroyDynamic3DTextLabel(VehicleShops[ index ][ Label ]);
        SendClientMessage(playerid, COLOR_NEWS, "Turgus sëkmingai sunaikintas");
        return 1;
    }
    else if(dialogid == DIALOG_VEHICLE_SHOPS_NEW_NAME)
    {
        if(!response)
            return 1;

        if(isnull(inputtext) || strlen(inputtext) >= MAX_VEHICLE_SHOP_NAME)
            return ShowPlayerDialog(playerid, DIALOG_VEHICLE_SHOPS_NEW_NAME, DIALOG_STYLE_INPUT, "Pavaidnimo keitimas", "Áveskite naujà pavadinimà", "Keisti", "Iðeiti");

        new index = GetPVarInt(playerid, "VehicleShop_Index"), query[ 156 ];
        strcat(query, inputtext);
        mysql_real_escape_string(query, query);
        format(query, sizeof(query), "UPDATE vehicle_shops SET name = '%s' WHERE id = %d",
            query, VehicleShops[ index ][ Id ]);
        mysql_pquery(DbHandle, query);

        format(VehicleShops[ index ][ Name ], MAX_VEHICLE_SHOP_NAME, inputtext);

        DestroyDynamic3DTextLabel(VehicleShops[ index ][ Label ]);
        format(query,sizeof(query), "%s\nParduodamø trnasporto priemoniø sàraðas\nKomanda: {FFFFFF}/v buy",
            VehicleShops[ index ][ Name ]);
        
        VehicleShops[ index ][ Label ] = CreateDynamic3DTextLabel(query, COLOR_NEWS, 
            VehicleShops[ index ][ PosX ],
            VehicleShops[ index ][ PosY ],
            VehicleShops[ index ][ PosZ ],
            7.0,  INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 15.0
        );
        SendClientMessage(playerid, COLOR_NEWS, "Pavadinimas sëkmingai pakeistas.");
        return 1;
    }
    else if(dialogid == DIALOG_VEHICLE_SHOP_NEW)
    {
        if(!response)
            return 1;
        if(isnull(inputtext) || strlen(inputtext) >= MAX_VEHICLE_SHOP_NAME)
            return ShowPlayerDialog(playerid, DIALOG_VEHICLE_SHOP_NEW, DIALOG_STYLE_INPUT, "Naujas turgus", "Áveskite turgaus pavadinimà", "Kurti" ,"Iðeiti");

        new index = Iter_Free(VehicleShopIterator);
        if(index == -1)
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, pasiektas turgaus limitas(" #MAX_VEHICLE_SHOPS ").");

        new query[160], Float:x, Float:y, Float:z;
        strcat(query, inputtext);
        GetPlayerPos(playerid, x, y, z);
        mysql_real_escape_string(query, query);
        format(query, sizeof(query), "INSERT INTO vehicle_shops (name, x, y, z) VALUES ('%s', %f, %f, %f)",
            query, x, y, z);
        new Cache:result = mysql_query(DbHandle, query);

        VehicleShops[ index ][ Id ] = cache_insert_id();
        cache_delete(result);
        strcat(VehicleShops[ index ][ Name ], inputtext, MAX_VEHICLE_SHOP_NAME);
        VehicleShops[ index ][ PosX ] = x;
        VehicleShops[ index ][ PosY ] = y;
        VehicleShops[ index ][ PosZ ] = z;

        format(query,sizeof(query), "%s\nParduodamø trnasporto priemoniø sàraðas\nKomanda: {FFFFFF}/v buy",
            VehicleShops[ index ][ Name ]);
        
        VehicleShops[ index ][ Label ] = CreateDynamic3DTextLabel(query, COLOR_NEWS, 
            VehicleShops[ index ][ PosX ],
            VehicleShops[ index ][ PosY ],
            VehicleShops[ index ][ PosZ ],
            7.0,  INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 15.0
        );
        Itter_Add(VehicleShopIterator, index);
        SendClientMessage(playerid, COLOR_NEWS, "Turgus sëkmingai sukurtas.");
        return 1;
    }
    else if ( dialogid == 67 )
    {
        if ( response == 1 )
        {
            switch ( listitem )
            {
                case 0:
                {
                    for ( new i = 0; i < STATIONS; i++ )
                    {
                        format ( string, 128, "%s%s\n",
                                string,
                                RadioStations [ i ][ rName ] );
                    }
                    format ( string, 128, "%sávesti savo stotá",
                            string );
                    ShowPlayerDialog( playerid, 68, DIALOG_STYLE_LIST, "Radijo stotys", string, "Rinktis", "Atðaukti" );
                    return 1;
                }
                case 1:
                    return ShowPlayerDialog( playerid, 69, DIALOG_STYLE_INPUT, "MP3 Valdymas", "þemiau áraðykite norimá  garsumà nuo 0 iki 100 ","Rinktis", "Atðaukti");
                case 2:
                {
                    format         ( string, 256, "* %s iðjungia MP3 grotuvá ." ,GetPlayerNameEx( playerid ) );
                    ProxDetector   ( 20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
                    StopPlayerRadio( playerid );
                    return 1;
                }
            }
        }
    }
    else if ( dialogid == 137 )
    {
        if ( !response ) return true;
        SetPlayerRadio( playerid, inputtext );
        format        ( string, 256, "* %s nustato MP3 grotuvo radijos daþná." ,GetPlayerNameEx( playerid ) );
        ProxDetector  ( 20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
    }
    else if ( dialogid == 138 )
    {
        if ( !response ) return true;
        new veh = GetPlayerVehicleID( playerid );
        format(VehRadio[ veh ], 128, "%s", inputtext);
        foreach(Player,i)
        {
            if ( IsPlayerInVehicle( i, veh ) )
            {
                SetPlayerRadio( i, inputtext );
            }
        }
        VehicleRadio[ veh ] = 1;
        format        ( string, 256, "* %s nustato automagnetolos radijos daþná." ,GetPlayerNameEx( playerid ) );
        ProxDetector  ( 20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
    }
    else if ( dialogid == 140 )
    {
        if ( !response ) return true;
        format(aInfo[ playerid ][ aStation ], 128, "%s", inputtext);
        foreach(Player,id)
        {
            if ( IsPlayerInDynamicArea( id, aInfo[ playerid ][ aArea ] ) )
                Set3DAudioForPlayer( id, inputtext, playerid );
        }
        format        ( string, 256, "* %s pakeièia magnetolos nustatytà daþná á kità." ,GetPlayerNameEx( playerid ) );
        ProxDetector  ( 20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
    }
    else if ( dialogid == 68 )
    {
        if ( response == 1 )
        {
            if( listitem < STATIONS )
            {
                SetPlayerRadio( playerid, RadioStations [ listitem ][ rUrl ] );
                format        ( string, 256, "* %s nustato MP3 grotuvo radijos daþná." ,GetPlayerNameEx( playerid ) );
                ProxDetector  ( 20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
            }
            else
                ShowPlayerDialog( playerid, 137, DIALOG_STYLE_INPUT, "Radijas", "áveskite radijos stotá", "OK", "Cancel");
            return 1;
        }
    }
    else if ( dialogid == 69 )
    {
        if ( response == 1 )
        {
            if ( !inputtext[ 0 ] ) return 1;
            new volume = strval( inputtext );
            if ( volume < 0 || volume > 101 ) return 1;
            format( string, 126, "MP3 grotuvo garsas buvo nustatytas á: %d", volume );
            SendClientMessage( playerid, COLOR_WHITE, string );
            SetPlayerRadioVolume( playerid, volume );
            format      ( string, 256, "* %s pakeièia MP3 grojimo garsà ." ,GetPlayerNameEx( playerid ) );
            ProxDetector( 20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
            return 1;
        }
    }
    else if ( dialogid == 70 )
    {
        if ( response == 1 )
        {
            switch ( listitem )
            {
                case 0:
                {
                    for ( new i = 0; i < STATIONS; i++ )
                    {
                        format ( string, sizeof(string), "%s%s\n",
                                string,
                                RadioStations [ i ][ rName ] );
                    }
                    strcat(string, "Ávesti savo stoties URL");
                    ShowPlayerDialog( playerid, 71, DIALOG_STYLE_LIST, "Radijo stotys", string, "Rinktis", "Atðaukti" );
                    return 1;
                }
                case 1:
                    return ShowPlayerDialog( playerid, 72, DIALOG_STYLE_INPUT, "Automognetolos valdymas", "þemiau áraðykite norimá  garsumá  nuo 0 iki 100 ","Rinktis", "Atðaukti");
                case 2:
                {
                    format         ( string, 256, "* %s iðjungia automagnetola." ,GetPlayerNameEx( playerid ) );
                    ProxDetector   ( 20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
                    new veh = GetPlayerVehicleID( playerid );
                    VehicleRadio[ veh ] = 99;
                    foreach(Player,i)
                    {
                        if ( IsPlayerInVehicle( i, veh ) )
                        {
                            StopPlayerRadio( i );
                        }
                    }
                    return 1;
                }
            }
        }
    }
    else if ( dialogid == 71 )
    {
        if ( response == 1 )
        {
            new veh = GetPlayerVehicleID( playerid );
            if( listitem < STATIONS )
            {
                format(VehRadio[ veh ], 128, "%s", RadioStations [ listitem ][ rUrl ]);
                foreach(Player,i)
                {
                    if ( IsPlayerInVehicle( i, veh ) )
                    {
                        SetPlayerRadio( i, RadioStations [ listitem ][ rUrl ] );
                    }
                }
                VehicleRadio[ veh ] = 1;
                format        ( string, 256, "* %s nustato automagnetolos radijos daþná." ,GetPlayerNameEx( playerid ) );
                ProxDetector  ( 20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
            }
            else
                ShowPlayerDialog( playerid, 138, DIALOG_STYLE_INPUT, "Radijas", "Áveskite radijos stoties URL", "OK", "Cancel");
            return 1;
        }
    }
    else if ( dialogid == 72 )
    {
        if ( response == 1 )
        {
            if ( !inputtext[ 0 ] ) return 1;
            new volume = strval( inputtext );
            if ( volume < 0 || volume > 101 ) return 1;
            format( string, 126, "Automagnetolos garsas buvo nustatytas á: %d", volume );
            SendClientMessage( playerid, COLOR_WHITE, string );
            new veh = GetPlayerVehicleID( playerid );
            foreach(Player,i)
            {
                if ( IsPlayerInVehicle( i, veh ) )
                {
                    SetPlayerRadioVolume( i, volume );
                }
            }
            format      ( string, 256, "* %s pakeièia automagnetolos grojimo garsà ." ,GetPlayerNameEx( playerid ) );
            ProxDetector( 20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
            return 1;
        }
    }
    else if ( dialogid == 76 )
    {
        if ( response == 1 )
        {
            switch ( listitem )
            {
                case 0:
                {
                    for ( new i = 0; i < STATIONS; i++ )
                    {
                        format ( string, 128, "%s%s\n",
                                string,
                                RadioStations [ i ][ rName ] );
                    }
                    format ( string, 128, "%sávesti savo stotá",
                            string );
                    ShowPlayerDialog( playerid, 77, DIALOG_STYLE_LIST, "Radijo stotys", string, "Rinktis", "Atðaukti" );
                    return 1;
                }
                case 1:
                {
                    foreach(Audio3D,i)
                    {
                        if ( IsPlayerInDynamicArea( playerid, aInfo[ i ][ aArea ] ) )
                            return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: netoli Jûsø jau yra pastatyta magnetola ." );
                    }
                    if ( aInfo[ playerid ][ aObjekt ] > 0 )
                        return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: jau esate padëjæs magnetolà ." );

                    new Float:kordes[ 3 ];
                    GetPlayerPos( playerid, kordes[ 0 ], kordes[ 1 ], kordes[ 2 ]);
                    Itter_Add(Audio3D,playerid);

                    format(aInfo[ playerid ][ aStation ], 128, "");
                    aInfo[ playerid ][ aKords ][ 0 ] = kordes[ 0 ];
                    aInfo[ playerid ][ aKords ][ 1 ] = kordes[ 1 ];
                    aInfo[ playerid ][ aKords ][ 2 ] = kordes[ 2 ];

                    aInfo[ playerid ][ aObjekt ] = CreateDynamicObject( 2103, kordes[ 0 ], kordes[ 1 ], kordes[ 2 ]-1.0, 0, 0, 0, GetPlayerVirtualWorld(playerid));
                    aInfo[ playerid ][ aArea   ] = CreateDynamicCircle( kordes[ 0 ], kordes[ 1 ], 25, GetPlayerVirtualWorld(playerid) );

                    foreach(Player,id)
                    {
                        if ( IsPlayerInDynamicArea( id, aInfo[ playerid ][ aArea ] ) )
                            Set3DAudioForPlayer( id, aInfo[ playerid ][ aStation ], playerid );
                    }

                    format      ( string, 256, "* %s padeda magnetolà ant þemës ir ájungia radijà ." ,GetPlayerNameEx( playerid ) );
                    ProxDetector( 20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
                    return 1;
                }
                case 2:
                {
                    if ( aInfo[ playerid ][ aObjekt ] > 0 )
                    {
                        if(!IsPlayerInRangeOfPoint(playerid, 5.0, aInfo[ playerid ][ aKords ][ 0 ], aInfo[ playerid ][ aKords ][ 1 ], aInfo[ playerid ][ aKords ][ 2 ]))
                            return SendClientMessage(playerid, COLOR_LIGHTRED, "Jûs esate per  toli nuo magnetolos.");

                        foreach(Player,id)
                        {
                            if ( IsPlayerInDynamicArea( id, aInfo[ playerid ][ aArea ] ) )
                                    Set3DAudioForPlayer( id, "", playerid );
                        }
                        format(aInfo[ playerid ][ aStation ], 128, "");
                        aInfo[ playerid ][ aKords ][ 0 ] = 0.0;
                        aInfo[ playerid ][ aKords ][ 1 ] = 0.0;
                        aInfo[ playerid ][ aKords ][ 2 ] = 0.0;

                        DestroyDynamicObject( aInfo[ playerid ][ aObjekt ] );

                        if ( IsValidDynamicArea( aInfo[ playerid ][ aArea ] ) )
                            DestroyDynamicArea( aInfo[ playerid ][ aArea ] );

                        aInfo[ playerid ][ aObjekt ] = 0;
                        Itter_Remove(Audio3D,playerid);
                        return 1;
                    }
                    else
                        return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: nesate pastatàs magnetolos." );
                }
            }
        }
        return 1;
    }
    else if ( dialogid == 77 )
    {
        if ( response == 1 )
        {
            if ( aInfo[ playerid ][ aObjekt ] == 0 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: pirmiausia padëkite ant þemës magnetolà ." );
            if( listitem < STATIONS )
            {
                format(aInfo[ playerid ][ aStation ], 128, "%s", RadioStations [ listitem ][ rUrl ]);
                foreach(Player,id)
                {
                    if ( IsPlayerInDynamicArea( id, aInfo[ playerid ][ aArea ] ) )
                        Set3DAudioForPlayer( id, RadioStations [ listitem ][ rUrl ], playerid );
                }
                format        ( string, 256, "* %s pakeièia dabartiná magnetolos daþná." ,GetPlayerNameEx( playerid ) );
                ProxDetector  ( 20.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE );
            }
            else
                ShowPlayerDialog( playerid, 140, DIALOG_STYLE_INPUT, "Radijas", "áveskite radijos stotá", "OK", "Cancel");
            return 1;
        }
    }
    /*
    else if ( dialogid == 82 )
    {
        if ( response == 1 )
        {
            foreach(Busines,i)
            {
                if ( PlayerToPoint( 5.0, playerid, bInfo[ i ][ bEnter ][ 0 ], bInfo[ i ][ bEnter ][ 1 ], bInfo[ i ][ bEnter ][ 2 ] ) )
                {
                    bInfo[ i ][ bType ] = listitem;
                    if( bInfo[ i ][ bType ] == 1 )
                    {
                        for( new slot = 0; slot < MAX_SAVED_WARES; slot ++)
                        {
                            bInfo[ i ][ bItemID ][ slot ] = 0;
                            bInfo[ i ][ bItemPrice ][ slot ] = 0;
                        }
                    }
                    else if ( bInfo[ i ][ bType ] == 2 || bInfo[ i ][ bType ] == 3 )
                    {
                        format( bInfo[ i ][ bItemName1 ], 128, "Tuðèia");
                        format( bInfo[ i ][ bItemName2 ], 128, "Tuðèia");
                        format( bInfo[ i ][ bItemName3 ], 128, "Tuðèia");
                        format( bInfo[ i ][ bItemName4 ], 128, "Tuðèia");
                        format( bInfo[ i ][ bItemName5 ], 128, "Tuðèia");
                        format( bInfo[ i ][ bItemName6 ], 128, "Tuðèia");
                        format( bInfo[ i ][ bItemName7 ], 128, "Tuðèia");
                        format( bInfo[ i ][ bItemName8 ], 128, "Tuðèia");
                        format( bInfo[ i ][ bItemName9 ], 128, "Tuðèia");
                        format( bInfo[ i ][ bItemName10 ], 128, "Tuðèia");
                        for( new slot = 0; slot < MAX_SAVED_WARES; slot ++)
                            bInfo[ i ][ bItemPrice ][ slot ] = 0;
                    }
                    SendClientMessage( playerid, COLOR_WHITE, "Biznio/verslo tipas buvo sëkmingai pakeistas." );
                    SaveBiz(i);
                    return 1;
                }
            }
        }
        return 1;
    }
    */
    
    else if ( dialogid == 91 )
    {
        if ( response == 1 )
        {
            switch( listitem )
            {
                case 0:
                {
                    new nextexp = ( pInfo[ playerid ][ pLevel ] + 1 ) * 4;
                    format( string, 349, "{FFFFFF}-Veikëjo OOC informacija\n\
                                            \t- Lygis: \t\t\t%d\n\
                                            \t- Patirtis: \t\t%d/%d\n\
                                            \t- Praþaista valandø: \t%d\n\
                                            \t- áspëjimai: \t\t%d\n\
                                            \t- Mirtys: \t\t%d\n\
                                            \t- Darbo lygis: \t\t%d\n\
                                            \t- Darbo patirtis: \t%d/%d\n\
                                          -Veikëjo IC informacija\n\
                                          -Frakcijos ir darbo informacija",
                                          pInfo[ playerid ][ pLevel  ],
                                          pInfo[ playerid ][ pExp    ], nextexp,
                                          pInfo[ playerid ][ pOnTime ],
                                          pInfo[ playerid ][ pWarn   ],
                                          pInfo[ playerid ][ pDeaths ],
                                          pInfo[ playerid ][ pJobLevel ],
                                          pInfo[ playerid ][ pJobSkill ],
                                      ( ( pInfo[ playerid ][ pJobLevel ] +1 ) * 100) );
                    ShowPlayerDialog( playerid, 92, DIALOG_STYLE_LIST, GetName( playerid ), string, "Rinktis", "Iðjungti");
                    return 1;
                }
                case 1:
                {
                    format( string, 349, "{FFFFFF}-Veikëjo OOC informacija\n\
                                                  -Veikëjo IC informacija\n\
                                            \t- Pinigai: \t\t%d\n\
                                                    \t- Pinigai banke: \t%d\n\
                                                    \t- Pinigai indëlyje: \t%d\n\
                                                    \t- Metai: \t\t%d\n\
                                                    \t- Lytis: \t\t\t%s\n\
                                                    \t- Tautybë: \t\t%s\n\
                                                    \t- Liga: \t\t\t%s\n\
                                                    \t- Telefono nr.: \t\t%d\n\
                                                  - Frakcijos ir darbo informacija",
                                                    PlayerMoney[ playerid ],
                                                    pInfo[ playerid ][ pBank    ],
                                                    pInfo[ playerid ][ pSavings ],
                                                    pInfo[ playerid ][ pAge     ],
                                                    pInfo[ playerid ][ pSex     ],
                                                    pInfo[ playerid ][ pOrigin  ],
                                                    Ligos[ pInfo[ playerid ][ pLiga ] ],
                                                    pInfo[ playerid ][ pPhone   ]);
                    ShowPlayerDialog( playerid, 93, DIALOG_STYLE_LIST, GetName( playerid ), string, "Rinktis", "Iðjungti");
                    return 1;
                }
                case 2:
                {
                    format( string, 349, "{FFFFFF}-Veikëjo OOC informacija\n\
                                                  -Veikëjo IC informacija\n\
                                                  -Frakcijos ir darbo informacija\n\
                                                    \t- Frakcijos informacija: %d\n\
                                                    \t\t- Pavadinimas: \t%s\n\
                                                    \t\t- Rangas: \t%s\n\
                                                    \t- Darbo informacija\n\
                                                    \t\t- Pavadinimas: \t%s\n\
                                                    \t\t- Kontraktas: \t%d",
                                                    pInfo[ playerid ][ pMember ],
                                                    fInfo[ PlayerFaction( playerid ) ][ fName ],
                                                    GetPlayerRangName( playerid ),
                                                    GetJobName( pInfo[ playerid ][ pJob ] ),
                                                    pInfo[ playerid ][ pJobContr ] );
                    ShowPlayerDialog( playerid, 91, DIALOG_STYLE_LIST, GetName( playerid ), string, "Rinktis", "Iðjungti");
                    return 1;
                }
            }
        }
    }
    else if ( dialogid == 92 )
    {
        if ( response == 1 )
        {
            switch( listitem )
            {
                case 0:
                {
                    new nextexp = ( pInfo[ playerid ][ pLevel ] + 1 ) * 4;
                    format( string, 349, "{FFFFFF}-Veikëjo OOC informacija\n\
                                            \t- Lygis: \t\t\t%d\n\
                                            \t- Patirtis: \t\t%d/%d\n\
                                            \t- Praþaista valandø: \t%d\n\
                                            \t- áspëjimai: \t\t%d\n\
                                            \t- Mirtys: \t\t%d\n\
                                            \t- Darbo lygis: \t\t%d\n\
                                            \t- Darbo patirtis: \t%d/%d\n\
                                          -Veikëjo IC informacija\n\
                                          -Frakcijos ir darbo informacija",
                                          pInfo[ playerid ][ pLevel  ],
                                          pInfo[ playerid ][ pExp    ], nextexp,
                                          pInfo[ playerid ][ pOnTime ],
                                          pInfo[ playerid ][ pWarn   ],
                                          pInfo[ playerid ][ pDeaths ],
                                          pInfo[ playerid ][ pJobLevel ],
                                          pInfo[ playerid ][ pJobSkill ],
                                      ( ( pInfo[ playerid ][ pJobLevel ] +1 ) * 100) );
                    ShowPlayerDialog( playerid, 92, DIALOG_STYLE_LIST, GetName( playerid ), string, "Rinktis", "Iðjungti");
                    return 1;
                }
                case 8:
                {
                    format( string, 349, "{FFFFFF}-Veikëjo OOC informacija\n\
                                                  -Veikëjo IC informacija\n\
                                                    \t- Pinigai: \t\t%d\n\
                                                    \t- Pinigai banke: \t%d\n\
                                                    \t- Pinigai indëlyje: \t%d\n\
                                                    \t- Metai: \t\t%d\n\
                                                    \t- Lytis: \t\t\t%s\n\
                                                    \t- Tautybë: \t\t%s\n\
                                                    \t- Liga: \t\t\t%s\n\
                                                    \t- Telefono nr.: \t\t%d\n\
                                                   -Frakcijos ir darbo informacija",
                                                    PlayerMoney[ playerid ],
                                                    pInfo[ playerid ][ pBank    ],
                                                    pInfo[ playerid ][ pSavings ],
                                                    pInfo[ playerid ][ pAge     ],
                                                    pInfo[ playerid ][ pSex     ],
                                                    pInfo[ playerid ][ pOrigin  ],
                                                    Ligos[ pInfo[ playerid ][ pLiga ] ],
                                                    pInfo[ playerid ][ pPhone   ]);
                    ShowPlayerDialog( playerid, 93, DIALOG_STYLE_LIST, GetName( playerid ), string, "Rinktis", "Iðjungti");
                    return 1;
                }
                case 9:
                {
                    format( string, 349, "{FFFFFF}-Veikëjo OOC informacija\n\
                                                  -Veikëjo IC informacija\n\
                                                  -Frakcijos ir darbo informacija\n\
                                                    \t- Frakcijos informacija: %d\n\
                                                    \t\t- Pavadinimas: \t%s\n\
                                                    \t\t- Rangas: \t%s\n\
                                                    \t- Darbo informacija\n\
                                                    \t\t- Pavadinimas: \t%s\n\
                                                    \t\t- Kontraktas: \t%d",
                                                    pInfo[ playerid ][ pMember ],
                                                    fInfo[ PlayerFaction( playerid ) ][ fName ],
                                                    GetPlayerRangName( playerid ),
                                                    GetJobName( pInfo[ playerid ][ pJob ] ),
                                                    pInfo[ playerid ][ pJobContr ] );
                    ShowPlayerDialog( playerid, 91, DIALOG_STYLE_LIST, GetName( playerid ), string, "Rinktis", "Iðjungti");
                    return 1;
                }
            }
        }
    }
    else if ( dialogid == 93 )
    {
        if ( response == 1 )
        {
            switch( listitem )
            {
                case 0:
                {
                    new nextexp = ( pInfo[ playerid ][ pLevel ] + 1 ) * 4;
                    format( string, 349, "{FFFFFF}-Veikëjo OOC informacija\n\
                                            \t- Lygis: \t\t\t%d\n\
                                            \t- Patirtis: \t\t%d/%d\n\
                                            \t- Praþaista valandø: \t%d\n\
                                            \t- áspëjimai: \t\t%d\n\
                                            \t- Mirtys: \t\t%d\n\
                                            \t- Darbo lygis: \t\t%d\n\
                                            \t- Darbo patirtis: \t%d/%d\n\
                                          -Veikëjo IC informacija\n\
                                          -Frakcijos ir darbo informacija",
                                          pInfo[ playerid ][ pLevel  ],
                                          pInfo[ playerid ][ pExp    ], nextexp,
                                          pInfo[ playerid ][ pOnTime ],
                                          pInfo[ playerid ][ pWarn   ],
                                          pInfo[ playerid ][ pDeaths ],
                                          pInfo[ playerid ][ pJobLevel ],
                                          pInfo[ playerid ][ pJobSkill ],
                                      ( ( pInfo[ playerid ][ pJobLevel ] +1 ) * 100) );
                    ShowPlayerDialog( playerid, 92, DIALOG_STYLE_LIST, GetName( playerid ), string, "Rinktis", "Iðjungti");
                    return 1;
                }
                case 1:
                {
                    format( string, 349, "{FFFFFF}-Veikëjo OOC informacija\n\
                                                  -Veikëjo IC informacija\n\
                                                    \t- Pinigai: \t\t%d\n\
                                                    \t- Pinigai banke: \t%d\n\
                                                    \t- Pinigai indëlyje: \t%d\n\
                                                    \t- Metai: \t\t%d\n\
                                                    \t- Lytis: \t\t\t%s\n\
                                                    \t- Tautybë: \t\t%s\n\
                                                    \t- Liga: \t\t\t%s\n\
                                                    \t- Telefono nr.: \t\t%d\n\
                                                   -Frakcijos ir darbo informacija",
                                                    PlayerMoney[ playerid ],
                                                    pInfo[ playerid ][ pBank    ],
                                                    pInfo[ playerid ][ pSavings ],
                                                    pInfo[ playerid ][ pAge     ],
                                                    pInfo[ playerid ][ pSex     ],
                                                    pInfo[ playerid ][ pOrigin  ],
                                                    Ligos[ pInfo[ playerid ][ pLiga ] ],
                                                    pInfo[ playerid ][ pPhone   ]);
                    ShowPlayerDialog( playerid, 93, DIALOG_STYLE_LIST, GetName( playerid ), string, "Rinktis", "Iðjungti");
                    return 1;
                }
                case 10:
                {
                    format( string, 349, "{FFFFFF}-Veikëjo OOC informacija\n\
                                                  -Veikëjo IC informacija\n\
                                                  -Frakcijos ir darbo informacija\n\
                                                    \t- Frakcijos informacija: %d\n\
                                                    \t\t- Pavadinimas: \t%s\n\
                                                    \t\t- Rangas: \t%s\n\
                                                    \t- Darbo informacija\n\
                                                    \t\t- Pavadinimas: \t%s\n\
                                                    \t\t- Kontraktas: \t%d",
                                                    pInfo[ playerid ][ pMember ],
                                                    fInfo[ PlayerFaction( playerid ) ][ fName ],
                                                    GetPlayerRangName( playerid ),
                                                    GetJobName( pInfo[ playerid ][ pJob ] ),
                                                    pInfo[ playerid ][ pJobContr ] );
                    ShowPlayerDialog( playerid, 91, DIALOG_STYLE_LIST, GetName( playerid ), string, "Rinktis", "Iðjungti");
                    return 1;
                }
            }
        }
    }
    else if ( dialogid == 94 )
    {
        if ( response == 1 )
        {
            if ( !inputtext[ 0 ] ) return 1;
            new id = strval( inputtext );
            foreach(Houses,house)
            {
                if (PlayerToPoint( 2.0, playerid, hInfo[ house ][ hEnter ][ 0 ], hInfo[ house ][ hEnter ][ 1 ], hInfo[ house ][ hEnter ][ 2 ] ) )
                {
                    hInfo[ house ][ hGar ] = gInfo[ id ][ gID ];
                    SaveHouse( house );
                    SendClientMessage( playerid, COLOR_WHITE, "Garaþas buvo sëkmingai priskirtas. " );
                    return 1;
                }
            }
        }
        return 1;
    }
    else if ( dialogid == 95 )
    {
        if ( response == 1 )
        {
            new text[ 504 ];
            format( text, 504, "{FFFFFF}Klausimas: %s\n \tAtsakymai:\n\
                                              \t {DDDDDD}1. %s\n\
                                              \t {CCCCCC}2. %s\n\
                                              \t {BBBBBB}3. %s\n \t áraðykite teisingo atsakymo numerá:",
                                              LIC_QUIZ[ 0 ][ Question ],
                                              LIC_QUIZ[ 0 ][ Answer1  ],
                                              LIC_QUIZ[ 0 ][ Answer2  ],
                                              LIC_QUIZ[ 0 ][ Answer3  ] );
            ShowPlayerDialog( playerid, 96, DIALOG_STYLE_INPUT, "Vairavimo teorija", text, "Toliau", "Iðjungti");
            SetPVarInt( playerid, "LIC_QUIZ_Q", 0 );
            SetPVarInt( playerid, "LIC_QUIZ_A", 0 );
            return 1;
        }
    }
    else if ( dialogid == 96 )
    {
        if ( response == 1 )
        {

            if ( !inputtext[ 0 ] )
                return SetPVarInt( playerid, "LIC_QUIZ_A", 0 );
            new text[ 504 ],
                start = GetPVarInt( playerid, "LIC_QUIZ_Q" ),
                answered = GetPVarInt( playerid, "LIC_QUIZ_A" ),
                answer = strval( inputtext );

            if ( answer == LIC_QUIZ[ start ][ TruAnsw ] )
                SetPVarInt( playerid, "LIC_QUIZ_A", answered + 1 );
            if ( start == MAX_LIC_Q - 1  )
            {
                new mini[ 15 ];
                if ( answered >= MAX_LIC_Q - 1)
                {
                    mini = "Iðlaikytas";

                    if(IsPlayerInventoryFull(playerid))
                        return SendClientMessage(playerid, COLOR_FADE2, "{FF6347}Perspëjimas: Jûsø inventorius pilnas, taigi testas nutraukiamas.");

                    GivePlayerItem(playerid, ITEM_TEORIJA, 1);

                }
                else if ( answered <= MAX_LIC_Q - 1)
                    mini = "Neiðlaikytas";
                format( text, 504, "{FFFFFF}Vairavimo teorijos testas: \t%s\n\
                                    {CC0000}Padaryta klaidø: {FFFFFF}\t%d\n\
                                    {008800}Teisingai atsakyta: {FFFFFF}\t%d\n", mini, MAX_LIC_Q - answered, answered );
                ShowPlayerDialog( playerid, 9999, DIALOG_STYLE_MSGBOX , "Vairavimo teorija", text, "Iðjungti", "");
                return 1;
            }
            else
            {
                start ++;
                format( text, 504, "{FFFFFF}Klausimas: %s\n \tAtsakymai:\n\
                                              \t {DDDDDD}1. %s\n\
                                              \t {CCCCCC}2. %s\n\
                                              \t {BBBBBB}3. %s\n \t áraðykite teisingo atsakymo numerá:",
                                              LIC_QUIZ[ start ][ Question ],
                                              LIC_QUIZ[ start ][ Answer1  ],
                                              LIC_QUIZ[ start ][ Answer2  ],
                                              LIC_QUIZ[ start ][ Answer3  ] );
                ShowPlayerDialog( playerid, 96, DIALOG_STYLE_INPUT, "Vairavimo teorija", text, "Toliau", "Iðjungti");
                SetPVarInt( playerid, "LIC_QUIZ_Q", start );
                return 1;
            }
        }
    }
    else if(dialogid == 98)
    {
        if(response == 1)
        {
            if(PlayerMoney[ playerid ] < GetPVarInt( playerid, "MOKESTIS" ) )
            {
                SendClientMessage(playerid, COLOR_FADE2, "{FF6347}Perspëjimas: Neturite pakankamai pinigø, kad sumoketumëte baudá .");
                DeletePVar( playerid, "MOKESTIS" );
                SendClientMessage(Offer[playerid][3], COLOR_FADE2, "{FF6347}Perspëjimas: þaidëjas neturi pakankamai pinigø, kad sumokëtu baudá .");
                return 1;
            }
            GivePlayerMoney(playerid,-GetPVarInt( playerid, "MOKESTIS" ));
            SendClientMessage(playerid,COLOR_WHITE,"Bauda sumokëta");
            SendClientMessage(Offer[playerid][3],COLOR_WHITE,"Jis sumokëjo baudá .");
            pInfo[ playerid ][ pPaydFines ] += pInfo[ playerid ][ pFines ];
            pInfo[ playerid ][ pFines ] = 0;
            DeletePVar( playerid, "MOKESTIS" );
            Offer[playerid][3] = 255;
            return 1;
        }
        else if(response == 0)
        {
            if(pInfo[playerid][pBank] < GetPVarInt( playerid, "MOKESTIS" ))
            {
                SendClientMessage(playerid, COLOR_FADE2, "{FF6347}Perspëjimas: Neturite pakankamai pinigø, kad sumoketumëte baudá .");
                DeletePVar( playerid, "MOKESTIS" );
                SendClientMessage(Offer[playerid][3], COLOR_FADE2, "{FF6347}Perspëjimas: þaidëjas neturi pakankamai pinigu, kad sumokëtu baudá .");
                return 1;
            }
            pInfo[playerid][pBank] -= GetPVarInt( playerid, "MOKESTIS" );
            SendClientMessage(playerid,COLOR_WHITE,"Bauda sumokëta");
            SendClientMessage(Offer[playerid][3],COLOR_WHITE,"Jis sumokëjo baudá .");
            pInfo[ playerid ][ pPaydFines ] += pInfo[ playerid ][ pFines ];
            pInfo[ playerid ][ pFines ] = 0;
            DeletePVar( playerid, "MOKESTIS" );
            Offer[playerid][3] = 255;
            return 1;
        }
    }
    else if ( dialogid == 100 )
    {
        if ( response == 1 )
        {
            if ( !inputtext[ 0 ] ) return 1;

            new rangas = GetPVarInt( playerid, "FRAKCIJA" ),
                frakcija = tmpinteger[ playerid ],
                alga = strval( inputtext );
            if ( alga < 0 || alga > 8000 )
                return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Algos suma negali but maþesnë negu 0 ir didesne negu 8000" );

            format( string, 126, "Frakcijai: %s buvo pakeista alga: %d rangui: %d", fInfo[ frakcija ][ fName ], alga, rangas );
            SendClientMessage( playerid, COLOR_WHITE, string );

            AdminLog( pInfo[ playerid ][ pMySQLID ], -1, string );

            fInfo[ frakcija ][ fPayDay ][ rangas ] = alga;
            SavePayDay( frakcija );

            format( string, 12, "" );
            for( new id; id < MAX_FACTION_RANKS; id++)
                format( string, 256, "%s %d. $%d\n", string, id, fInfo[ frakcija ][ fPayDay ][ id ] );

            ShowPlayerDialog( playerid, 35, DIALOG_STYLE_LIST, "Frakcijos algos keitimas",string,"Rinktis","Atðaukti" );
            return 1;
        }
    }
    else if(dialogid == 101) // Lifto
    {
        if(!response)
            return 0;

        if(FloorRequestedBy[listitem] != INVALID_PLAYER_ID || IsFloorInQueue(listitem))
            GameTextForPlayer(playerid, "~r~Aukstas jau yra uzsakytas.", 3500, 4);
        else if(DidPlayerRequestElevator(playerid))
            GameTextForPlayer(playerid, "~r~Jus jau kvietete lifta.", 3500, 4);
        else
            CallElevator(playerid, listitem);

        return 1;
    }
    else if ( dialogid == 102 )
    {
        if ( !response )
            return 0;

        switch( listitem )
        {
            case 0:
            {
                if( pInfo[ playerid ][ pRank ] >= 2 )
                {
                    if ( IsPlayerHaveManyGuns( playerid, 24 ) ) return true;
                    //RemovePlayerWeapon(playerid, 24);
                    GivePlayerJobWeapon( playerid, 24, 100 );
                    cmd_wepstore( playerid, "" );
                }
            }
			case 1:
            {
                if( pInfo[ playerid ][ pRank ] >= 2 )
                {
                    if ( IsPlayerHaveManyGuns( playerid, 43 ) ) return true;
                    ///RemovePlayerWeapon( playerid, 43 );
                    GivePlayerJobWeapon( playerid, 43, 20 );
                    cmd_wepstore( playerid, "" );
                }
            }
			case 2:
            {
                if( pInfo[ playerid ][ pRank ] >= 2 )
                {
                    if ( IsPlayerHaveManyGuns( playerid, 3 ) ) return true;
                    //RemovePlayerWeapon( playerid, 3 );
                    GivePlayerJobWeapon( playerid, 3, 1 );
                    cmd_wepstore( playerid, "" );
                }
            }	
			case 3:
            {
                if( pInfo[ playerid ][ pRank ] >= 2 )
                {
                    if ( IsPlayerHaveManyGuns( playerid, 41 ) ) return true;
                    //RemovePlayerWeapon( playerid, 41 );
                    GivePlayerJobWeapon( playerid, 41, 150 );
                    cmd_wepstore( playerid, "" );
                }
            }					
        }
    }
    else if ( dialogid == 114 )
    {
                if(!response)
                    return 1;

                tmpinteger[ playerid ] = listitem;

                switch( listitem )
                {
                    case 0:
                    {
                        ShowPlayerDialog( playerid, 150, DIALOG_STYLE_MSGBOX, "Gaminimo informacija",
                                "PAGAMINIMO KAINA: $1000 uþ 50vnt\n\
                                PAGAMINIMO KIEKIS: 50vnt\n\
                                PAGAMINIMO TRUKMË: 2 payday", "GAMINTI", "ATáAUKTI" );
                    }
                    case 1:
                    {
                        ShowPlayerDialog( playerid, 150, DIALOG_STYLE_MSGBOX, "Gaminimo informacija",
                                "PAGAMINIMO KAINA: $1500 uþ 100vnt\n\
                                PAGAMINIMO KIEKIS: 100vnt\n\
                                PAGAMINIMO TRUKMË: 2 payday", "GAMINTI", "ATáAUKTI" );
                    }
                    case 2:
                    {
                        ShowPlayerDialog( playerid, 150, DIALOG_STYLE_MSGBOX, "Gaminimo informacija",
                                "PAGAMINIMO KAINA: $1000 uþ 25vnt\n\
                                PAGAMINIMO KIEKIS: 25vnt\n\
                                PAGAMINIMO TRUKMË: 4 payday", "GAMINTI", "ATáAUKTI" );
                    }
                    case 3:
                    {
                        ShowPlayerDialog( playerid, 150, DIALOG_STYLE_MSGBOX, "Gaminimo informacija",
                                "PAGAMINIMO KAINA: $1500 uþ 50vnt\n\
                                PAGAMINIMO KIEKIS: 50vnt\n\
                                PAGAMINIMO TRUKMË: 3 payday", "GAMINTI", "ATáAUKTI" );
                    }
                }
    }
    else if ( dialogid == 160 )
    {
                if(!response)
                    return 1;

                switch( listitem )
                {
                    case 0:
                    {
                        tmpinteger[ playerid ] = 4;
                        ShowPlayerDialog( playerid, 150, DIALOG_STYLE_MSGBOX, "Gaminimo informacija",
                                "PAGAMINIMO KAINA: $1200 uþ 30vnt\n\
                                PAGAMINIMO KIEKIS: 30vnt\n\
                                PAGAMINIMO TRUKMË: 3 payday", "GAMINTI", "ATáAUKTI" );
                    }
                    case 1:
                    {
                        tmpinteger[ playerid ] = 5;
                        ShowPlayerDialog( playerid, 150, DIALOG_STYLE_MSGBOX, "Gaminimo informacija",
                                "PAGAMINIMO KAINA: $1300 uþ 50vnt\n\
                                PAGAMINIMO KIEKIS: 50vnt\n\
                                PAGAMINIMO TRUKMË: 3 payday", "GAMINTI", "ATáAUKTI" );
                    }
                    case 2:
                    {
                        tmpinteger[ playerid ] = 6;
                        ShowPlayerDialog( playerid, 150, DIALOG_STYLE_MSGBOX, "Gaminimo informacija",
                                "PAGAMINIMO KAINA: $1000 uþ 100vnt\n\
                                PAGAMINIMO KIEKIS: 100vnt\n\
                                PAGAMINIMO TRUKMË: 3 payday", "GAMINTI", "ATáAUKTI" );
                    }
                    case 3:
                    {
                        tmpinteger[ playerid ] = 7;
                        ShowPlayerDialog( playerid, 150, DIALOG_STYLE_MSGBOX, "Gaminimo informacija",
                                "PAGAMINIMO KAINA: $1200 uþ 30vnt\n\
                                PAGAMINIMO KIEKIS: 30vnt\n\
                                PAGAMINIMO TRUKMË: 3 payday", "GAMINTI", "ATáAUKTI" );
                    }
                }
    }
	if(dialogid == DIALOG_TPDA_MAIN)
	{
		if(!response) 
			return 1;
			
		new str[ 2048 ];	
		switch(listitem)
		{
			case 0:
			{
				foreach(IndustryIterator, i)
					format(str, sizeof(str), "%s{FFFFFF}%s{C0C0C0}(%s, %s)\n", 
                        str, 
                        Industries[ i ][ Name ], 
                        GetIndustrySectorName(i),
                        (Industries[ i ][ IsBuyingCargo ]) ? ("Atidaryta") : ("Uþdaryta"));
				ShowPlayerDialog(playerid,DIALOG_TPDA_INDUSTRY, DIALOG_STYLE_LIST,"TPDA",str,"Tæsti","Atgal");
			}
			case 1:
			{
				new count = 0, index;
                foreach(CommodityIterator, i)
                {
                    if(!Commodities[ i ][ IsBusinessCommodity ])
                        continue;

                    index = GetBusinessIndex(Commodities[ i ][ IndustryId ]);
                    if(index == -1)
                        ErrorLog("Invalid commodity business ID. Id of that business:%d", Commodities[ i ][ IndustryId ]);
                    else 
                        format(str, sizeof(str), "%s%d. %s\n", str, GetBusinessID(index), GetBusinessName(index));
                }

				if(!count)
					ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "TPDA", "Ðiuo metu nëra verlslø perkanèiø prekes!", "Gerai", "");
				else 
					ShowPlayerDialog(playerid, DIALOG_TPDA_BUSINESS, DIALOG_STYLE_LIST, "TPDA", str, "Tæsti", "Atgal");
			}
			case 2:
			{
				if(ShipInfo[ Status ] == Docked)
				{
                    new secs;
                    // Jei dar nebuvo iðplaukæs..
                    if(!ShipInfo[ LastArrivalTimestamp ])
                        secs = CARGOSHIP_DOCKED_INTERVAL / 1000 - (gettime() - ServerStartTimestamp);
                    else 
                        secs = gettime() - ShipInfo[ LastArrivalTimestamp ] + CARGOSHIP_DOCKED_INTERVAL;
                    format(str,sizeof(str),"Statusas: laivas uoste\nLaivas iðplauks uþ %2d minuèiø %2d sekundþiø", secs / 60, secs % 60); 
                }
                else if(ShipInfo[ Status ] == Arriving)
                {
                    strcat(str, "Laivas plaukia atgal á uostà....");
                }
				else
                {
                    new secs =  (CARGOSHIP_MOVING_INTERVAL / 1000) - (gettime() - ShipInfo[ LastDepartureTimestamp ]);
                    // Ðitas kodas taps neámanomas kai timeriai bus tikslûs.
                    if(secs <= 0)
                        str = "Statusas: ðvartuojasi\nNaujai atvykæs laivas pradës priimti krovinius jau netrukus..";
                    else 
                        format(str,sizeof(str),"Statusas: iðplaukæs\nNaujas laivas atplauks uþ %2d minuèiø %2d sekundþiø",secs / 60, secs % 60);
                }


                strcat(str, "\n\n\t\t{FFFFFF}Superkamos prekës\n\n");
                for(new i = 0; i < sizeof TruckerCargo; i ++)
                {
                    if(!TruckerCargo[ i ][ Id ])
                        continue;
                    if(!IsShipAcceptingCargo(TruckerCargo[ i ][ Id ]))
                        continue;

                    new price = GetShipCargoPrice(TruckerCargo[ i ][ Id ]);
                    if(!price)
                        continue;


                    if((i && i % 2 == 0) || (i == sizeof TruckerCargo -1))
                        strcat(str, "\n");
                    format(str, sizeof(str), "%s%s $%d\t\t\t\t",
                        str, 
                        TruckerCargo[ i ][ Name ], price);
                    
                }
				ShowPlayerDialog(playerid, DIALOG_SHIP_INFO, DIALOG_STYLE_MSGBOX, "Laivo informacija", str, "Naviguoti", "Iðeiti");
			}
		}
		return 1;
	}
	if( dialogid == DIALOG_SHIP_INFO)
	{
		if(!response)
			return 1;
		
		SetPlayerCheckPointEx(playerid, CHECKPOINT_SHIP, SHIP_POS_X, SHIP_POS_Y, SHIP_POS_Z, 5.0);
		return 1;
	}
    if (dialogid == DIALOG_TPDA_INDUSTRY)
    {
        if(!response)
            return 1;
			
        new str[2048];

        format(str, sizeof(str), "{FFFFFF}Sveiki atvyke á {00FF66}%s!\n", Industries[ listitem ][ Name ]);
        strcat(str, "{00FF66}Parduodama: \n");
        format(str, sizeof(str), "%s{C8C8C8}Prekë%sYra sandëlyje(limitas)\t\tKaina\tPagaminama per valandà\n",
            str,
            GetSpaceString(8));
        // Parduodamos prekes
        foreach(CommodityIterator, i)
            if(Commodities[ i ][ IndustryId ] == Industries[ listitem ][ Id ] && Commodities[ i ][ SellBuyStatus ] == Selling && !Commodities[ i ][ IsBusinessCommodity ])
                format(str, sizeof(str), "%s{FFFFFF}%s%s%d vienetai {C8C8C8}(%d){FFFFFF}\t\t$%d\t+%d\n",
                    str, 
                    GetCargoName(Commodities[ i ][ CargoId ]), GetSpaceString(MAX_TRUCKER_CARGO_NAME - strlen(GetCargoName(Commodities[ i ][ CargoId ])) + 8),
                    Commodities[ i ][ CurrentStock ],
                    GetCargoLimit(Commodities[ i ][ CargoId ]), 
                    Commodities[ i ][ Price ],
                    GetCargoProduction(Commodities[ i ][ CargoId ])
                );

        strcat(str, "{00FF66}\nPerkama: \n");
        if(!GetIndustryBoughtCommodityCount(listitem)) // Jei nëra prekiø perkamø.
            strcat(str, "{C8C8C8}Ði firma nieko neperka");
        else 
        {
            strcat(str,"{C8C8C8}Prekë                  Yra sandëlyje (limitas)\t\tKaina\tSunaudojama per valandà\n");
            // Ilgas kodo gabalas kad sudët sàraðà perkamø dalykø
            foreach(CommodityIterator, i)
            if(Commodities[ i ][ IndustryId ] == Industries[ listitem ][ Id ] && Commodities[ i ][ SellBuyStatus ] == Buying && !Commodities[ i ][ IsBusinessCommodity ])
                format(str, sizeof(str), "%s{FFFFFF}%s\t\t\t\t%d vienetai{C8C8C8}(%d){FFFFFF}\t\t\t$%d\t-%d\n",
                    str, 
                    GetCargoName(Commodities[ i ][ CargoId ]),
                    Commodities[ i ][ CurrentStock ],
                    GetCargoLimit(Commodities[ i ][ CargoId ]),
                    Commodities[ i ][ Price ],
                    GetCargoConsumption(Commodities [ i ][ CargoId ])
                );
                   
        }
        SetPVarInt(playerid, "Company", listitem);
        SetPVarInt(playerid, "Business", -1);
        ShowPlayerDialog( playerid, DIALOG_INDUSTRY_INFO, DIALOG_STYLE_MSGBOX, Industries[ listitem ][ Name ], str, "Paþymëti", "Atgal" );
        return 1;
    }

    // Sarasas verslu. Reikia rodyt ju info.
    if(dialogid == DIALOG_TPDA_BUSINESS)
    {
        if(!response) 
            return 1;

        // Vienintelis budas gauti verslo indeksa is teksto..
        new tmp[16],id, index,str[1024];
        strmid(tmp, inputtext, 0, strfind(inputtext, "."));
        id = strval(tmp);

        // Pagal ID susirandam indeksa.
        index = GetBusinessIndex(id);
        
            

        // Dabar jau galima formatuot informacija.
        format(str, sizeof(str), "{FFFFFF}Sveiki atvyke á {00FF66}%s!\n\n", bInfo[ index ][ bName ]);
       
        strcat(str, "{00FF66}\nPerkama: \n");
        if(!GetBusinessBoughtCommodityCount(index)) // Jei nëra prekiø perkamø.
            strcat(str, "{C8C8C8}Ði firma nieko neperka");
        else 
        {
            strcat(str,"{C8C8C8}Prekë\t\tYra sandëlyje (limitas)\t\tKaina\n");
            // Ilgas kodo gabalas kad sudët sàraðà perkamø dalykø
            foreach(CommodityIterator, i)
            if(Commodities[ i ][ IndustryId ] == bInfo[ index ][ bID ] 
                && Commodities[ i ][ SellBuyStatus ] == Buying 
                && Commodities[ i ][ IsBusinessCommodity ])
                format(str, sizeof(str), "%s{FFFFFF}%s\t\t %d vienetai{C8C8C8}(%d){FFFFFF}\t\t\t$%d\n",
                    str, 
                    GetCargoName(Commodities[ i ][ CargoId ]),
                    Commodities[ i ][ CurrentStock ],
                    MAX_BUSINESS_PRODUCTS,
                    Commodities[ i ][ Price ]
                );
                   
        }
        SetPVarInt(playerid, "Company", -1);
        SetPVarInt(playerid, "Business", index);
        ShowPlayerDialog( playerid, DIALOG_INDUSTRY_INFO, DIALOG_STYLE_MSGBOX, bInfo[ index ][ bName ], str, "Paþymëti", "Atgal" );
        return 1;
    }   

    // Jei pasirinko OK, tiesiog nustatyt CP.
    if(dialogid == DIALOG_INDUSTRY_INFO)
    {
        if(!response)
            return OnDialogResponse(playerid, DIALOG_TPDA_MAIN, 1, 0, "Perþiûrëti visas industrijas");
			
		if ( Checkpoint[ playerid ] != CHECKPOINT_NONE ) 
			return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: KLAIDA!" );

        if(GetPVarInt(playerid, "Business") == -1)
        {
            listitem = GetPVarInt(playerid, "Company");
            SetPlayerCheckPointEx( playerid, CHECKPOINT_CAR, Industries[ listitem ][ PosX ], Industries[ listitem ][ PosY ], Industries[ listitem ][ PosZ ], 6.0 );
        }
        else
        {
            listitem = GetPVarInt(playerid, "Business");
            SetPlayerCheckPointEx( playerid, CHECKPOINT_CAR, bInfo[ listitem ][ bEnter ][ 0 ], bInfo[ listitem ][ bEnter ][ 1 ], bInfo[ listitem ][ bEnter ][ 2 ], 6.0 );
        }
        return 1;
    }

    // Masinos krovinio sarasas. Jei pasirenka, turi paimti.
    if(dialogid == DIALOG_VEHICLE_CARGO_LIST)
    {
        if(!response) 
            return 1;

        new cargoid,
            vehicleid = GetPVarInt(playerid, "vehicleid"),
            cargoname[32];

        strmid(cargoname, inputtext, 0, strfind(inputtext, "\t"));
        cargoid = strval(cargoname);
        

        // Now we have a selected cargo id 


        // Galejo but paimtas tas krovinys per ta laika kol apsisprende zmogus...
        if(!IsCargoInVehicle(vehicleid, cargoid))
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, pasirinkto krovinio/prekës jau nebëra sandalyje.");


        // Jei þaidëjas forklifte, parkaunam ant jo.
        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 530)
        {
			if(!IsCargoCompatibleWithVehicle(cargoid, GetVehicleModel(GetPlayerVehicleID(playerid))))
				return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðio krovinio negalite pasiimti.");
			if(!HasVehicleSpaceForCargo(GetPlayerVehicleID(playerid), cargoid))
				return 1;
				
            RemoveCargoFromVehicle(vehicleid, cargoid);
            AddCargoToVehicle(GetPlayerVehicleID(playerid), cargoid);
            return 1;
        }
        // Taip gali atsitikti, kai ziuri /trailer cargo
        if(IsPlayerInAnyVehicle(playerid))
            return 1;

        if(!IsCargoCarryable(cargoid))
            return 1;
        if(IsPlayerAttachedObjectSlotUsed(playerid, 7))
            return 1;

        SetPVarInt(playerid, "CargoId", cargoid);
        ApplyAnimation( playerid, "CARRY", "liftup", 4.0, 0, 1, 0, 0, 0 );
        SetPVarInt( playerid, "Tipas2", false );
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
        RemoveCargoFromVehicle(vehicleid, cargoid);
        return 1;
    }
    // Sàraðas biznio/industrijos prekiø. Pasirinkimas = Pirkimas
    if(dialogid == DIALOG_SOLD_COMMODITY_LIST)
    {
        if(!response) return 1;

        // If the first bit is turned on, it's an industry NOT a business.
        new index = GetPVarInt(playerid, "Industry_Index"), 
            count = 0,
            commodityIndex = -1;
        // Sudëtingas ir kvailas bûdas gaut pasirinktai prekei.
        foreach(CommodityIterator, i)
        {
            if(Industries[ index ][ Id ] != Commodities[ i ][ IndustryId ])
                continue;
            if(Commodities[ i ][ SellBuyStatus ] != Selling) 
                continue;
            if(listitem == count)
            {
                commodityIndex = i;
                break;
            }
            count++;
        }
        if(Commodities[ commodityIndex ][ CurrentStock ] <= 0)
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, pasirinkto krovinio/prekës jau nebëra sandalyje.");

        if(GetPlayerMoney(playerid) < Commodities[ commodityIndex ][ Price ])
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, neturite pakankamai grynø pinigø, kad nusipirktumëte ðià prekæ.");

        if(IsCargoCarryable(Commodities[ commodityIndex ][ CargoId ]))
        {
            // Jei jis forklifte
            new vehicleid = GetPlayerVehicleID(playerid);
            if(GetVehicleModel(vehicleid) == 530)
            {
                if(!HasVehicleSpaceForCargo(vehicleid, Commodities[ commodityIndex ][ CargoId ]))
                    return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, autokaras jau yra pilnas ir negali daugiau pakelti kroviniø");

                AddCargoToVehicle(vehicleid, Commodities[ commodityIndex ][ CargoId ]);
                GivePlayerMoney(playerid, -Commodities[ commodityIndex ][ Price ]);
                return 1;
            }   

            if(IsPlayerAttachedObjectSlotUsed(playerid, 7))
                return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo, kadangi rankose jau turite kroviná/prekæ.");
            if(IsPlayerInAnyVehicle(playerid))
                return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, pirmiausià iðlipkite ið tr. priemonës, kad paiimtumëte kroviná.");

            SetPVarInt(playerid, "CargoId", Commodities[ commodityIndex ][ CargoId ]);
            SetPVarInt(playerid, "CommodityIndex", commodityIndex);
            ApplyAnimation( playerid, "CARRY", "liftup", 4.0, 0, 1, 0, 0, 0 );
            SetPVarInt( playerid, "Tipas2", false );
            SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
        }
        else 
        {
            new vehicleid = GetNearestVehicle(playerid, 4.0);
            if(vehicleid == INVALID_VEHICLE_ID)
                return SendClientMessage(playerid, GRAD, "Klaida, Jûsø tr. priemonë nëra tinkama krovinio/prekës gabenimui arba jos nëra ðalia Jûsø.");

            if(IsTrailerAttachedToVehicle(vehicleid))
                vehicleid = GetVehicleTrailer(vehicleid);

			if(!CanPlayerUseTruckerVehicle(playerid,GetVehicleModel(vehicleid)))
				return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, Jûs neturite pakankamai kroviniø perveþimo darbuotojo patirties, kad galëtumëte dirbti su ðia tr. priemone.");
            if(cInfo[ vehicleid ][ cLock ])
                return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo, kadangi sunkveþimis uþrakintas");
            if(IsVehicleLoaded[ vehicleid ])
                return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðiuo metu vyksta tr. priemonës pakrovimas.");
            if(!IsCargoCompatibleWithVehicle(Commodities[ commodityIndex ][ CargoId ], GetVehicleModel(vehicleid)))
                return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ði tr. priemonë yra netinkama Jûsø pasirinktam kroviniui.");
            if(!HasVehicleSpaceForCargo(vehicleid, Commodities[ commodityIndex ][ CargoId ]))
                return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, sunkveþimyje nëra laisvos vietos Jûsø kroviniui.");

            IsVehicleLoaded[ vehicleid ] = true;   
            VehicleLoadTimer[ playerid ] = SetTimerEx("OnPlayerLoadCommodity",1000,true, "iii",playerid, commodityIndex, vehicleid);
			VehicleLoadTime[ playerid ] = 60;
            SetPVarInt(playerid, "vehicleid", vehicleid);
			PlayerTextDrawShow     ( playerid, InfoText[ playerid ] );
			PlayerTextDrawSetString( playerid, InfoText[ playerid ], "Krovinys bus pakrautas uz 60 sekundziu");

            new pullingVeh = GetTrailerPullingVehicle(vehicleid);
            if(IsValidVehicle(pullingVeh))
            {
                VehicleEngine(pullingVeh, VEHICLE_PARAMS_OFF);
                Engine[pullingVeh] = false;
            }
            else 
            {
                VehicleEngine(vehicleid, VEHICLE_PARAMS_OFF);
                Engine[vehicleid] = false;
            }
            SendClientMessage(playerid, COLOR_NEWS, "Dëmesio, Jûsø pasirinktas krovinys/prekë bus pakrauta á Jûsø tr. priemonæ per 60 sekundþiø. Praðome palaukti.");
        }
		RemoveCargoFromIndustry(index, Commodities[ commodityIndex ][ CargoId ]);
        UpdateIndustryInfo(index);
        format(string,sizeof(string),"Sëkmingai nusipirkotæ prekæ/kroviná pavadinimu: %s, uþ kurià sumokëjote %d$", 
            GetCargoName(Commodities[ commodityIndex ][ CargoId ]), Commodities[ commodityIndex ][ Price ]);
        SendClientMessage(playerid, COLOR_LIGHTRED2, string);
        GivePlayerMoney(playerid, -Commodities[ commodityIndex ][ Price ]);
        return 1;
    }
	else if(dialogid == DIALOG_COMMODITY_SELL)
	{
		if(!response) return 1;
		
		new bool:sellToBusines = false,
			bool:sellToIndustry = false,
			bool:sellToShip = false,
			tmp[32],
			cargoid,
			boughtamount,
			index = GetPVarInt(playerid, "IndustryIndex"),
			price,
			vehicleid = GetPVarInt(playerid, "vehicleid");
			
		// Iðsiaiðkinam kam parduodam.
		if(GetPVarInt(playerid,"CommoditySellTo") == 1)
			sellToBusines = true;
		else if(GetPVarInt(playerid, "CommoditySellTo") == 2)
			sellToIndustry = true;
		else 
			sellToShip = true;
			
		// Susirandam cargo ID prekës pasirinktos.
		strmid(tmp, inputtext,0, strfind(inputtext,"\t"));
		cargoid = strval(tmp);

        // Ar niekas kitas neiðëmë krovinio.
        if(!IsCargoInVehicle(vehicleid, cargoid))
            return SendClientMessage(playerid, GRAD, "Klaida, ðio krovinio nebëra.");
		
		// O dabar jau pradedam pardavima...
		
		// Susiþinom KIEK gali nupirkti industrija/verslas
		if(sellToIndustry)
		{	
            if(!Industries[ index ][ IsBuyingCargo ])
                return SendClientMessage(playerid, GRAD, "Klaida, dël produktø pertekliaus ði industrija nedirba.");
            if(!HasIndustryRoomForCargo(index, cargoid))
                    return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, industrija ðiai prekei nebeturi vietos.");
			boughtamount = GetCargoLimit(cargoid) - GetIndustryCargoStock(index,cargoid); // Kiek GALI pirk industrija

			if(boughtamount > GetVehicleCargoCount(vehicleid, cargoid))
				boughtamount = GetVehicleCargoCount(vehicleid,cargoid);
		
			
			if(!boughtamount)
				return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo, kadangi industrijos sandëlys pilnas.");
			
            price = Commodities[ GetIndustryCargoIndex(index, cargoid) ][ Price ] * boughtamount;
            if(!price)
                return SendClientMessage(playerid, GRAD, "Klaida, Jûsø tr. priemonëje nëra prekiø, kurias superka pasirinktas fabrikas.");
			
			// duodam viska industrijai
			AddCargoToIndustry(index, cargoid, boughtamount);
			
			// Iðimam viskà ið transporto priemoëns.
			RemoveCargoFromVehicle(vehicleid, cargoid, boughtamount);
		}
		else if(sellToBusines)
		{
            new commodityIndex = GetBusinessCargoIndex(index, cargoid);
            // Kiek truksta iki limito.
			boughtamount = MAX_BUSINESS_PRODUCTS / 50 - Commodities[ commodityIndex ][ CurrentStock ];

            if(boughtamount <= 0)
            {
                StopBusinessBuyingCargo(index, cargoid);
                return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðis verslas nebeperka prekiø.");
            }

            // Jei furistas nepapildys iki galo verslo sumazinam kiek gali parduot.
			if(boughtamount > GetVehicleCargoCount(vehicleid, cargoid))
				boughtamount = GetVehicleCargoCount(vehicleid,cargoid);

            // Debug code
            if(boughtamount < 0)
            {
                new s[128];
                format(s, sizeof(s), "First. Boughtamount: %d. Current stock:%d VehicleCargoCount:%d commodity index:%d biz index:%d", 
                    boughtamount, Commodities[ commodityIndex ][ CurrentStock ],  GetVehicleCargoCount(vehicleid, cargoid), commodityIndex, index);
                ImpossibleLog(s);
                return SendClientMessage(playerid, 0xFF0000FF, "KLAIDA. Praneðkite apie tai administracijai.");
            }
            // end of debug code
			
			// Jei verlslas perka daugiau negu gali ápirkti
			if(boughtamount * Commodities[ commodityIndex ][ Price ] > bInfo[ index ][ bBank ])
				boughtamount = bInfo[ index ][ bBank ] / Commodities[ commodityIndex ][ Price ];

            // Debug code
            if(boughtamount < 0)
            {
                new s[128];
                format(s, sizeof(s), "Second. Boughtamount:%d. Current stock:%d VehicleCargoCount:%d commodity index:%d biz index:%d", 
                    boughtamount, Commodities[ commodityIndex ][ CurrentStock ],  GetVehicleCargoCount(vehicleid, cargoid), commodityIndex, index);
                ImpossibleLog(s);
                return SendClientMessage(playerid, 0xFF0000FF, "KLAIDA. Praneðkite apie tai administracijai.");
            }
            // end of debug code

			price = Commodities[ commodityIndex ][ Price ] * boughtamount;
            if(!price)
                return SendClientMessage(playerid, GRAD, "Klaida, Jûsø tr. priemonëje nëra prekiø, kurias superka pasirinktas verslas.");
            printf("Boughtamount:%d price:%d stock:%d",boughtamount, price, GetBusinessCargoStock(index));
			AddCargoToBusiness(index, cargoid, boughtamount);
			bInfo[ index ][ bBank ] -= price;
			
			// Iðimam viskà ið transporto priemoëns.
			RemoveCargoFromVehicle(vehicleid, cargoid, boughtamount);

            if(bInfo[ index ][ bBank ] < Commodities[ commodityIndex ][ Price ])
            {
                // reik surast savininkà ir pasakyk kad kapeikos baigës :(
                foreach(Player,j)
                    if(pInfo[ j ][ pMySQLID ] == bInfo[ index ][ bOwner ])
                    {
                        SendClientMessage(j, GRAD, "Jûsø versle baigësi pinigai, daugiau produktø nebepirksite.");
                        StopBusinessBuyingCargo(index, cargoid);
                        break;
                    }
            }
		}
		
		if(sellToShip)
		{
			if(ShipInfo[ Status ] != Docked)
				return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, ðiuo metu krovininis laivas yra iðplaukæs. Naudodami komanda /tpda galite pamatyti kada jis atplauks.");
			// Laivas didelis, supirks VISAS kurias turi.
			boughtamount = GetVehicleCargoCount(vehicleid,cargoid);
			
			price = GetShipCargoPrice(cargoid) * boughtamount;
            if(!price)
                return SendClientMessage(playerid, GRAD, "Klaida, Jûsø tr. priemonëje nëra prekiø, kurias superka laivas.");
			ShipInfo[ CurrentStock ] = boughtamount * GetCargoSlot(cargoid);
			
			// Iðimam viskà ið transporto priemoëns.
			RemoveCargoFromVehicle(vehicleid, cargoid, boughtamount);
		}
		
		format(string,sizeof(string), "[FABRIKAS] Sëkmingai pardavëte visas savo pakrautas prekes/krovinius, ið kuriø uþdirbote %d$.",price);
		GivePlayerMoney(playerid, price);
		SendClientMessage(playerid, COLOR_LIGHTRED2, string);
		return 1;
	}
    else if ( dialogid == 166 )
    {
        if( !response )
            return 1;

        new
            rows,
            rows2 = 0,
            kaina,
            etc1[ 128 ],
            etc2[ 128 ],
            etc3[ 128 ],
            etc4[ 128 ],
            id;

        format( string, 256, "SELECT `id`,`name`,`crime`,`reporter`,`price`,`When` FROM `tickets` WHERE `name` = '%s'", GetPlayerNameEx(tmpinteger[ playerid ]) );
        new Cache:result = mysql_query(DbHandle,  string );
   
        rows = cache_get_row_count();

        format( string, 256, "" );

        for(new i = 0; i < rows; i++)
        {
            if( listitem == rows2 )
            {
                id = cache_get_field_content_int(i, "id");
                cache_get_field_content(i, "name", etc1);
                cache_get_field_content(i, "crime", etc2);
                cache_get_field_content(i, "reporter", etc3);
                kaina = cache_get_field_content_int(i, "price");
                cache_get_field_content(i, "When", etc4);


                format( string, sizeof( string ),"%sKas davë:\t %s\n", string, etc3 );
                format( string, sizeof( string ),"%sKam davë:\t %s\n", string, etc1 );
                format( string, sizeof( string ),"%s\n", string );
                format( string, sizeof( string ),"%sSuma:\t\t $%d\n", string, kaina );
                format( string, sizeof( string ),"%sPaþeidimas:\t %s\n", string, etc2 );
                format( string, sizeof( string ),"%sData:\t\t %s", string, etc4 );
                SetPVarInt(playerid, "Listitem", id);
            }
            rows2++;
        }
        cache_delete(result);
        
        if( tmpinteger[ playerid ] != playerid )
        {
            tmpinteger[ playerid ] = kaina;
            ShowPlayerDialog(playerid,167,DIALOG_STYLE_MSGBOX,"Fine details",string,"Mokëti","Atgal");
        }
        else
            ShowPlayerDialog(playerid,9999,DIALOG_STYLE_MSGBOX,"Fine details", string, "OK", "");
    }
    else if ( dialogid == 167 )
    {
        if( !response )
            return 1;
            
        if( PlayerMoney[ playerid ] < tmpinteger[ playerid ] )
            return 1;
            
        if(!PDJOBPlace(playerid))
            return 1;
            
        new
            rows;

        format( string, 256, "SELECT * FROM `tickets` WHERE `id` = '%d'", GetPVarInt(playerid, "Listitem") );
        new Cache:result = mysql_query(DbHandle,  string );

        rows = cache_get_row_count();

        if( rows )
        {
            format(string, 512, "UPDATE `tickets` SET `paid` = 1 WHERE `id` = %d", GetPVarInt(playerid, "Listitem") );
            mysql_query(DbHandle,  string, false);
            GivePlayerMoney(playerid, -tmpinteger[ playerid ]);
        }
        cache_delete(result);
    }
    else if ( dialogid == 168 )
    {
        if( !response )
            return 1;

        new
            rows2 = 0,
            kaina,
            etc1[ 128 ],
            etc2[ 128 ],
            etc3[ 128 ],
            etc4[ 128 ],
            id;

        format( string, 256, "SELECT `id`,`numbers`,`crime`,`reporter`,`price`,`When` FROM `cartickets` WHERE `numbers` = '%s'", cInfo[ tmpinteger[ playerid ] ][ cNumbers ] );
        new Cache:result = mysql_query(DbHandle,  string );

        format( string, 256, "" );

        for(new i = 0; i < cache_get_row_count(); i++)
        {
            
            if( listitem == rows2 )
            {
                id = cache_get_field_content_int(i, "id");
                cache_get_field_content(i, "name", etc1);
                cache_get_field_content(i, "crime", etc2);
                cache_get_field_content(i, "reporter", etc3);
                kaina = cache_get_field_content_int(i, "price");
                cache_get_field_content(i, "When", etc4);
            

                format( string, sizeof( string ),"%sKas davë:\t %s\n", string, etc3 );
                format( string, sizeof( string ),"%sKam davë:\t %s\n", string, etc1 );
                format( string, sizeof( string ),"%s\n", string );
                format( string, sizeof( string ),"%sSuma:\t\t $%d\n", string, kaina );
                format( string, sizeof( string ),"%sPaþeidimas:\t %s\n", string, etc2 );
                format( string, sizeof( string ),"%sData:\t\t %s", string, etc4 );
                SetPVarInt(playerid, "Listitem", id);
            }
            rows2++;
            
        }
        cache_delete(result);

        if( tmpinteger[ playerid ] != GetPlayerVehicleID(playerid) )
        {
            tmpinteger[ playerid ] = kaina;
            ShowPlayerDialog(playerid,169,DIALOG_STYLE_MSGBOX,"Fine details",string,"Mokëti","Atgal");
        }
        else
            ShowPlayerDialog(playerid,9999,DIALOG_STYLE_MSGBOX,"Fine details", string, "OK", "");
    }
    else if ( dialogid == 169 )
    {
        if( !response )
            return 1;

        if( PlayerMoney[ playerid ] < tmpinteger[ playerid ] )
            return 1;

        if(!PDJOBPlace(playerid))
            return 1;

        new
            rows;

        format( string, 256, "SELECT * FROM `cartickets` WHERE `id` = '%d'", GetPVarInt(playerid, "Listitem") );
        new Cache:result = mysql_query(DbHandle,  string );
        rows = cache_get_row_count();

        if( rows )
        {
            format(string, 512, "UPDATE `cartickets` SET `paid` = 1 WHERE `id` = %d", GetPVarInt(playerid, "Listitem") );
            mysql_query(DbHandle,  string, false);
            GivePlayerMoney(playerid, -tmpinteger[ playerid ]);
        }
        cache_delete(result);
    }
    else if ( dialogid == 170 )
    {
        if( !response )
            return 1;

        new
            rows,
            etc1,
            etc2[ 128 ],
            etc3[ 128 ],
            etc4[ 128 ];

        new Cache:result = mysql_query(DbHandle,  "SELECT `number`,`crime`,`position`,`when` FROM `lastcall` ORDER BY `when` DESC LIMIT 12" );
        rows = cache_get_row_count();

        if( rows )
        {
            rows = 0;
            for(new i = 0; i <  cache_get_row_count(); i++)
            {
                if( listitem == rows )
                {
                    etc1 = cache_get_field_content_int(i, "number");
                    cache_get_field_content(i, "crime", etc2);
                    cache_get_field_content(i, "position", etc3);
                    cache_get_field_content(i, "when", etc4);
                    format( string, sizeof( string ),"%sPraneðëjas:\t %d\n", string, etc1 );
                    format( string, sizeof( string ),"%sávykis:\t %s\n", string, etc2 );
                    format( string, sizeof( string ),"%sVieta:\t\t $%s\n", string, etc3 );
                    format( string, sizeof( string ),"%sData:\t\t %s", string, etc4 );
                }
                rows++;
            }
        }
        cache_delete(result);

        ShowPlayerDialog(playerid,9999,DIALOG_STYLE_MSGBOX,"911 details", string, "OK", "");
    }
    else if ( dialogid == 104 )
    {
        if( !response )
            return true;
        switch( listitem )
        {
            case 0:
            {
                if( !GetPVarInt( playerid, "oKepure" ) )
                {
                    SetPlayerAttachedObject(playerid, 0, 18636, 2, 0.132999,-0.011999,0.004000,-177.199996,-2.200002,30.799991);
                    EditAttachedObject(playerid, 0);
                    SendClientMessage(playerid, 0xFFFFFFFF, "Norëdami pasukti/pakeisti kamerà laikykite klaviðus: {FFFF00}~k~~PED_SPRINT~{FFFFFF}.");
                    SetPVarInt( playerid, "oKepure", true );
                }
                else
                {
                    SetPVarInt( playerid, "oKepure", false );
                    SendClientMessage( playerid, COLOR_WHITE,"Daiktas buvo sëkmingai panaikintas/nuimtas.");
                    RemovePlayerAttachedObject( playerid, 0 );
                }
            }
            case 1:
            {
                if( !GetPVarInt( playerid, "oKepure" ) )
                {
                    SetPlayerAttachedObject(playerid, 0, 19099, 2, 0.132999,-0.011999,0.004000,-177.199996,-2.200002,30.799991);
                    EditAttachedObject(playerid, 0);
                    SendClientMessage(playerid, 0xFFFFFFFF, "Norëdami pasukti/pakeisti kamerà laikykite klaviðus: {FFFF00}~k~~PED_SPRINT~{FFFFFF}.");
                    SetPVarInt( playerid, "oKepure", true );
                }
                else
                {
                    SetPVarInt( playerid, "oKepure", false );
                    SendClientMessage( playerid, COLOR_WHITE,"Daiktas buvo sëkmingai panaikintas/nuimtas.");
                    RemovePlayerAttachedObject( playerid, 0 );
                }
            }
            case 2:
            {
                if( !GetPVarInt( playerid, "oKepure" ) )
                {
                    SetPlayerAttachedObject(playerid, 0, 19100, 2, 0.132999,-0.011999,0.004000,-177.199996,-2.200002,30.799991);
                    EditAttachedObject(playerid, 0);
                    SendClientMessage(playerid, 0xFFFFFFFF, "Norëdami pasukti/pakeisti kamerà laikykite klaviðus: {FFFF00}~k~~PED_SPRINT~{FFFFFF}.");
                    SetPVarInt( playerid, "oKepure", true );
                }
                else
                {
                    SetPVarInt( playerid, "oKepure", false );
                    SendClientMessage( playerid, COLOR_WHITE,"Daiktas buvo sëkmingai panaikintas/nuimtas.");
                    RemovePlayerAttachedObject( playerid, 0 );
                }
            }
            case 3:
            {
                if( !GetPVarInt( playerid, "oAkiniai" ) )
                {
                    SetPlayerAttachedObject(playerid, 2, 19138, 2, 0.100000,0.050000,-0.004999,90.000000,90.000000,0.000000);
                    EditAttachedObject(playerid, 2);
                    SendClientMessage(playerid, 0xFFFFFFFF, "Norëdami pasukti/pakeisti kamerà laikykite klaviðus: {FFFF00}~k~~PED_SPRINT~{FFFFFF}.");
                    SetPVarInt( playerid, "oAkiniai", true );
                }
                else
                {
                    SetPVarInt( playerid, "oAkiniai", false );
                    SendClientMessage( playerid, COLOR_WHITE,"Daiktas buvo sëkmingai panaikintas/nuimtas.");
                    RemovePlayerAttachedObject( playerid, 2 );
                }
            }
            case 4:
            {
                if( !GetPVarInt( playerid, "oKepure" ) )
                {
                    SetPlayerAttachedObject(playerid, 0, 19141, 2, 0.11, 0.0, 0.0, 0.0, 0.0, 0.0);
                    EditAttachedObject(playerid, 0);
                    SendClientMessage(playerid, 0xFFFFFFFF, "Norëdami pasukti/pakeisti kamerà laikykite klaviðus: {FFFF00}~k~~PED_SPRINT~{FFFFFF}.");
                    SetPVarInt( playerid, "oKepure", true );
                }
                else
                {
                    SetPVarInt( playerid, "oKepure", false );
                    SendClientMessage( playerid, COLOR_WHITE,"Daiktas buvo sëkmingai panaikintas/nuimtas.");
                    RemovePlayerAttachedObject( playerid, 0 );
                }
            }
            case 5:
            {
                if( !GetPVarInt( playerid, "oKepure" ) )
                {
                    SetPlayerAttachedObject(playerid, 0, 19200, 2, 0.11, 0.0, 0.0, 0.0, 0.0, 0.0);
                    EditAttachedObject(playerid, 0);
                    SendClientMessage(playerid, 0xFFFFFFFF, "Norëdami pasukti/pakeisti kamerà laikykite klaviðus: {FFFF00}~k~~PED_SPRINT~{FFFFFF}.");
                    SetPVarInt( playerid, "oKepure", true );
                }
                else
                {
                    SetPVarInt( playerid, "oKepure", false );
                    SendClientMessage( playerid, COLOR_WHITE,"Daiktas buvo sëkmingai panaikintas/nuimtas.");
                    RemovePlayerAttachedObject( playerid, 0 );
                }
            }
            case 6:
            {
                if( IsPlayerAttachedObjectSlotUsed ( playerid, 4 ) )
                    return RemovePlayerAttachedObject ( playerid, 4 );

                SetPlayerAttachedObject(playerid, 4, 18637, 5, -0.064955, -0.135697, -0.200892, 54.463840, 10.984453, 87.706436, 1.078429, 1.000000, 1.000000 );
                EditAttachedObject(playerid, 4);
            }
        }
    }
    else if ( dialogid == 103 )
    {
        if ( response == 1 )
            return AcceptOffer( playerid );
        else if ( response == 0 )
            return DeclineOffer( playerid );
    }
    else if( dialogid == 129 )
    {
        if(!response)
            return 1;
            
        if( isnull( inputtext ) )
            return SendClientMessage( playerid, COLOR_LIGHTRED,"Dëmesio, neáraðëte jokiø þodþiø á pateiktà laukelá");
            
        new
            result2[ 3 ][ 128 ],
            dialog[ 2048 ],
            sAge,
            sGender[ 11 ],
            sPhoneNumber,
            IDNumber[ 16 ],
            test[ 3 ],
            dates[ 3 ],
            rows,
            nationality[ 24 ];


        mysql_format(DbHandle, string, 128, "SELECT `PhoneNr`,`ucpuser`,`Age`,`Sex`,`id`,`Origin`,`WantedLevel` FROM `players` WHERE `Name` = '%e'", inputtext );
        new Cache:result = mysql_query(DbHandle,  string );
        rows = cache_get_row_count();

        if( rows )
        {

        sPhoneNumber = cache_get_field_content_int(0, "PhoneNr");
        test[0] = cache_get_field_content_int(0, "ucpuser");
        sAge = cache_get_field_content_int(0, "Age");
        cache_get_field_content(0, "Sex", sGender);
        test[1] = cache_get_field_content_int(0, "id");
        cache_get_field_content(0, "Origin", nationality);
        test[2] = cache_get_field_content_int(0, "WantedLevel");


        format(IDNumber, sizeof(IDNumber), "%d000000", test[0] );
        format(IDNumber, sizeof(IDNumber), "%s%d", IDNumber, sAge );
        format(IDNumber, sizeof(IDNumber), "%s%d", IDNumber, test[1] );

        getdate(dates[0], dates[1], dates[2]);
        format(dialog, sizeof(dialog), "Paieðkomas asmuo: %s", inputtext);
        format(dialog, sizeof(dialog), "%s\nAmþius: %d (gimë %d)", dialog, sAge, dates[0] - sAge);
        format(dialog, sizeof(dialog), "%s\nAsmens kodas: %s", dialog, IDNumber );
        format(dialog, sizeof(dialog), "%s\nLytis: %s", dialog, sGender);
        format(dialog, sizeof(dialog), "%s\nTautybë: %s", dialog, nationality);
        if( sPhoneNumber == 0 )
            format(dialog, sizeof(dialog), "%s\nTelefono numeris: Nëra", dialog);
        else
            format(dialog, sizeof(dialog), "%s\nTelefono numeris: %d", dialog, sPhoneNumber);

        if( test[2] > 0 )
            format(dialog, sizeof(dialog), "%s\nPilietis ieðkomas!", dialog);
            
        }
        cache_delete(result);
        
        mysql_format(DbHandle, string, 128, "SELECT `crime`,`reporter`,`When` FROM `crimes` WHERE `name` = '%e' ORDER BY `When` DESC LIMIT 7", inputtext);
        result = mysql_query(DbHandle,  string );
        rows = cache_get_row_count();

        for(new i = 0; i < cache_get_row_count(); i++)
        {
            cache_get_field_content(i, "crime", result2[0]);
            cache_get_field_content(i, "reporter", result2[1]);
            cache_get_field_content(i, "When", result2[2]);

            format( dialog, sizeof( dialog ),"%s\n-->áskaita: %s\n", dialog, result2[0] );
            format( dialog, sizeof( dialog ), "%sPolicininkas: %s\n", dialog, result2[1] );
            format( dialog, sizeof( dialog ), "%sLaikas: %s", dialog, result2[2] );
        }
        
        cache_delete(result);
        ShowPlayerDialog( playerid, 136, DIALOG_STYLE_LIST,"Informacija rasta", dialog,
            "Uþdaryti", "" );
    }
    else if( dialogid == 130 )
    {
        if(!response)
            return 1;

        if(isnull(inputtext))
            return SendClientMessage(playerid, COLOR_LIGHTRED,"Klaida, neáraðëte tr. priemonës numeriø.");

        new dialog[ 1024 ], Cache:result, name[MAX_PLAYER_NAME], tmp[ 128 ];

        mysql_format(DbHandle, dialog, sizeof(dialog), 
            "SELECT vehicles.cName, vehicles.cInsurance, vehicles.cCrimes, players.name, arrestedcars.who, arrestedcars.Time, carcrimes.id AS crime_id, carcrimes.crime, carcrimes.reporter, carcrimes.when \
            FROM vehicles \
            LEFT JOIN players ON players.id = vehicles.cOwner \
            LEFT JOIN arrestedcars ON arrestedcars.cMySQL = vehicles.id \
            LEFT JOIN carcrimes ON carcrimes.numbers = vehicles.cNumbers \
            WHERE cNumbers = '%e'", inputtext);
        result = mysql_query(DbHandle, dialog);

        if(!cache_get_row_count())
            SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, transporto priemonë nerasta.");
        else 
        {
            cache_get_field_content(0, "cName", dialog);
            cache_get_field_content(0, "name", name);

            format(dialog, sizeof(dialog), "DUOM. BAZË: Tr. Priemonës pavadinimas: %s\n\
                DUOM. BAZË: Tr. Priemonës numeriai: %s\n\ 
                DUOM. BAZË: Tr. Priemonës draudimas: %d\n\
                DUOM. BAZË: Tr. Priemonës savininkas: %s\n", 
                dialog, 
                inputtext,
                cache_get_field_content_int(0, "cInsurance"),
                name);

            if(cache_get_field_content_int(0, "cCrimes"))
                strcat(dialog, "Tr. priemonë ieðkoma.");

            // Processinam arrestedcars duomenis
            cache_get_field_content(0, "who", name);
            if(!ismysqlnull(name))
            {
                cache_get_field_content(0, "Time", tmp);
                format(dialog, sizeof(dialog), "%sTr. priemonë buvo areðtuota!\nPareigûnas: %s\nLaikas ir data: %s", dialog, name, tmp);
            }

            // Processinam carcrimes
            for(new i = 0; i < cache_get_row_count(); i++)
            {
                cache_get_field_content(i, "reporter", name);
                cache_get_field_content(i, "crime", string);
                cache_get_field_content(i, "when", tmp);
                if(ismysqlnull(name))
                    break;
                format(dialog, sizeof(dialog), "%s-->áskaita: %s\nPolicininkas: %s\nLaikas: %s", dialog, string, name, tmp);
            }
            ShowPlayerDialog(playerid, 136, DIALOG_STYLE_LIST,"Informacija rasta", dialog, "Uþdaryti", "" );
        }
        cache_delete(result);
        /*
        new
            etc[ 3 ][ 128 ],
            tModel[ 24 ],
            tInsurance,
            tOwner,
            dialog[ 2048 ],
            rows;


        mysql_format(DbHandle, string, 128, "SELECT `cName`,`cInsurance`,`cOwner`,`cCrimes` FROM `vehicles` WHERE `cNumbers` = '%e' LIMIT 1", inputtext);
        new Cache:result = mysql_query(DbHandle,  string );
        rows = cache_get_row_count();

        if( rows )
        {
            cache_get_field_content(0, "cName", tModel);
            tInsurance = cache_get_field_content_int(0, "cInsurance");
            tOwner = cache_get_field_content_int(0, "cOwner");
            rows = cache_get_field_content_int(0, "cCrimes");
            cache_delete(result);


            format( string, 128, "SELECT `Name` FROM `players` WHERE `id` = %d", tOwner );
            result = mysql_query(DbHandle,  string );

            cache_get_field_content(0, "Name", string);

            format( dialog, sizeof(dialog), "DUOM. BAZË: Tr. Priemonës pavadinimas: %s", tModel );
            format( dialog, sizeof(dialog), "%s\nDUOM. BAZË: Tr. Priemonës numeriai: %s", dialog, inputtext );
            format( dialog, sizeof(dialog), "%s\nDUOM. BAZË: Tr. Priemonës draudimas: %d", dialog, tInsurance );
            format( dialog, sizeof(dialog), "%s\nDUOM. BAZË: Tr. Priemonës savininkas: %s", dialog, string );
            if( rows > 0 )
                format(dialog, sizeof(dialog), "%s\nTr. Priemonë ieðkoma!", dialog);
        
        }
        cache_delete(result);

        mysql_real_escape_string(inputtext, string, DbHandle, 128);
        format( string, 128, "SELECT `who`,`Time` FROM `arrestedcars` WHERE `numbers` = '%s'", string);
        result = mysql_query(DbHandle,  string );
        rows = cache_get_row_count();

        if( rows )
        {

            format( dialog, sizeof( dialog ),"%s\nTr. priemonë buvo areðtuota!\n", dialog );
            cache_get_field_content(0, "who", etc[0]);
            cache_get_field_content(0, "Time", etc[1]);

            format( dialog, sizeof( dialog ),"%sPareigûnas: %s\n", dialog, etc[ 0 ] );
            format( dialog, sizeof( dialog ),"%sLaikas ir data: %s", dialog, etc[ 1 ] );
            
        }
        cache_delete(result);
        
        mysql_real_escape_string(string, inputtext, DbHandle, 128);
        format( string, sizeof(string), "SELECT `crime`,`reporter`,`when` FROM `carcrimes` WHERE `numbers` = '%s' ORDER BY `when` DESC LIMIT 7", string);
        result = mysql_query(DbHandle,  string );
        rows = cache_get_row_count();

        if( rows )
        {
            for(new i = 0; i < cache_get_row_count(); i++)
            {
                cache_get_field_content(i, "crime", etc[0]);
                cache_get_field_content(i, "reporter", etc[1]);
                cache_get_field_content(i, "when", etc[2]);
                format( dialog, sizeof( dialog ),"%s\n-->áskaita: %s\n", dialog, etc[ 0 ] );

                format( dialog, sizeof( dialog ),"%sPolicininkas: %s\n", dialog, etc[ 1 ] );

                format( dialog, sizeof( dialog ),"%sLaikas: %s", dialog, etc[ 2 ] );
            }
        }
        cache_delete(result);
        */
    }
    else if( dialogid == 132 )
    {
        if(!response)
            return 1;

        if( isnull( inputtext ) )
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, neáraðëte vardo ir pavardës á pateikta laukelá" );

        else if(PlayerFaction( playerid ) == 1)
        {
            SetPVarString ( playerid, "nick", inputtext );
            ShowPlayerDialog( playerid, 133, DIALOG_STYLE_INPUT,"Átariamûjø pridëjimas",
            "{1797cd}LOS SANTOS POLICE DEPARTAMENT\n\
				{FFFFFF}Áraðykite prieþasti dël ko átraukti átariamajá", "Pridëti", "Uþdaryti" );
        }
    }
    else if( dialogid == 133 )
    {
        if(!response)
            return 1;

        new
            name[ 32 ],
            bool:found = false;

        if( isnull( inputtext ) )
            return SendClientMessage(playerid, COLOR_GREY, "Neáraðëte prieþasties !" );

        else if(PlayerFaction( playerid ) == 1)
        {
            GetPVarString ( playerid, "nick", name, sizeof(name) );
            foreach(Player,i)
            {
                if(!strcmp(GetName( i ),name,true))
                {
                    SuspectPlayer(i,inputtext,GetName( playerid ));
                    found = true;
                    break;
                }
            }
            if(!found)
            {
                format(string, 256, "%s gavo áskaitá  dël %s nuo pareigûno %s",name,inputtext,GetName( playerid ));
                SendTeamMessage( 1, COLOR_BLUE, string );
                format(string, 256, "INSERT INTO `crimes` (name,crime,reporter) VALUES ('%s','%s','%s')",name,inputtext,GetName(playerid));
                mysql_query(DbHandle, string, false);
                format(string, 256, "UPDATE `players` SET `WantedLevel`=`WantedLevel`+1 WHERE `Name`='%s' AND `Jailed` = 0 AND `JailTime` = 0", name );
                mysql_query(DbHandle, string, false);
            }
            DeletePVar ( playerid, "nick" );
        }
    }
    else if( dialogid == 131 )
    {
        if(!response)
            return 1;

        new
            rows,
            i = 0;
                    
        new Cache:result = mysql_query(DbHandle,  "SELECT `Name` FROM `players` WHERE `WantedLevel` != 0" );
        rows = cache_get_row_count();

        if( rows )
        {
            for(i = 0; i < cache_get_row_count(); i++)
            {
                if( i == listitem )
                {
                    cache_get_field_content(i, "Name", string);
                    OnDialogResponse( playerid, 129, 1, 0, string );
                }
            }
        }
        cache_delete(result);
    }
    else if( dialogid == 141 )
    {
        if(!response)
            return 1;
        new
            i = 0;

        new Cache:result = mysql_query(DbHandle,  "SELECT `cNumbers` FROM `vehicles` WHERE `cCrimes` != 0" );

        for(i = 0; i < cache_get_row_count(); i++)
        {
            if( i == listitem )
            {
                cache_get_field_content(i, "cNumbers", string);
                OnDialogResponse( playerid, 130, 1, 0, string );
            }
        }
        cache_delete(result);
    }
    else if( dialogid == 134 )
    {
        if(!response)
            return 1;
        if( isnull( inputtext ) )
            return SendClientMessage( playerid, COLOR_WHITE,"Neáraðëte tr. priemonës numerio ! ");
        mysql_real_escape_string( inputtext, inputtext, DbHandle, 128);
        SetPVarString ( playerid, "CarNumber", inputtext );
        ShowPlayerDialog( playerid, 135, DIALOG_STYLE_INPUT,"Pridëti ieðkoma maðiná  (2)",
        "{1797cd}LOS SANTOS POLICE DEPARTAMENT\n\
		{FFFFFF}Áraðykite prieþastá kodël tr. priemonë paieðkoma", "Pridëti", "Atðaukti " );
    }
    else if( dialogid == 135 )
    {
        if(!response)
            return 1;
        if( isnull( inputtext ) )
            return SendClientMessage( playerid, COLOR_WHITE,"Neáraðëte prieþasties ! ");
            
        new
            string2[ 128 ],
            rows,
            tmpnumbers;

        mysql_real_escape_string( inputtext, inputtext, DbHandle, 128);
        GetPVarString ( playerid, "CarNumber", string2, sizeof(string2) );

        format     ( string, 128, "SELECT id,cCrimes FROM vehicles WHERE cNumbers = '%s'", string2);
        new Cache:result = mysql_query(DbHandle,  string );
        rows = cache_get_row_count();

        if( rows )
        {
            rows = cache_get_field_content_int(0, "id");
            tmpnumbers = cache_get_field_content_int(0, "cCrimes");
        }

        format     ( string, 256, "INSERT INTO carcrimes (numbers,crime,reporter) VALUES ('%s','%s','%s')", string2, inputtext, GetName( playerid ) );
        mysql_query(DbHandle,  string, false);

        format         ( string, 128 ,"[LSPD] Tr. priemonë, kurios valstybiniai numeriai %s buvo átrauka pareigûno %s á áskaita.", string2, GetName( playerid ) );
        SendTeamMessage( 1, COLOR_POLICE, string );

        format         ( string, 128, "[LSPD] Nurodyta áskaitos prieþastis: %s", inputtext );
        SendTeamMessage( 1, COLOR_POLICE, string );

        new vehiclebynumbers = checkVehicleByNumbers( string2 );
        if( !checkArrestedCar( playerid, rows, 0 ) )
        {
            if ( vehiclebynumbers != INVALID_VEHICLE_ID )
            {
                cInfo[ vehiclebynumbers ][ cCrimes ] ++;
                if ( cInfo[ vehiclebynumbers ][ cCrimes ] > 6 )
                cInfo[ vehiclebynumbers ][ cCrimes ] = 6;
            }
            else
            {
                format     ( string, 128, "UPDATE vehicles SET cCrimes = %d WHERE cNumbers = '%s'", tmpnumbers + 1, string2);
                mysql_query(DbHandle,  string,false);
            }
        }
        cache_delete(result);
    }
    else if( dialogid == 128 )
    {
        if(!response)
            return 1;
            
        switch( listitem )
        {
            case 0:
                ShowPlayerDialog( playerid, 129, DIALOG_STYLE_INPUT,"Paieðka pagal vardà ir pavardæ",
                "{1797cd}LOS SANTOS POLICE DEPARTAMENT\n\
				{FFFFFF}Áveskite ieðkomo asmens vardà ir pavardæ\n\
                 Pavyzdys: Vardas_Pavarde", "Ieðkoti","Atðaukti" );
            case 1:
                ShowPlayerDialog( playerid, 130, DIALOG_STYLE_INPUT,"Tr. Priemonës paieðka",
                "{1797cd}LOS SANTOS POLICE DEPARTAMENT\n\
				{FFFFFF}Áveskite ieðkomos tr. priemonës valstybinius numerius", "Paieðka", "Uþdaryti" );
            case 2: // Ieðkomø þaidëjø sá raðas
            {
                new
                    rows,
                    dString[ 2048 ];

                new Cache:result=  mysql_query(DbHandle,  "SELECT `Name`,`WantedLevel` FROM `players` WHERE `WantedLevel` > 0" );
                rows = cache_get_row_count();

                for(new i = 0; i < cache_get_row_count(); i++)

                {
                    new bool:found = false;

                    cache_get_field_content(i, "Name", string);
                    rows = cache_get_field_content_int(i, "WantedLevel");
                    foreach(Player,playerd)
                    {
                        if ( !IsPlayerConnected(playerd) ) continue;
                        if ( !strcmp( GetName( playerd ), string, true ) )
                        {
                            format(dString, sizeof(dString), "%s\n%s (%d)",
                            dString, GetName( playerd ), pInfo[ playerd ][ pWantedLevel ]);
                            found = true;
                            break;
                        }
                    }
                    if( !found )
                    {
                        format(dString, sizeof(dString), "%s\n%s (%d) ((neprisijungæs))",
                        dString, string, rows);
                    }
                }
                
                cache_delete(result);
                ShowPlayerDialog( playerid, 131, DIALOG_STYLE_LIST,"Paieðkomø veikëjø sàraðas",
                        dString, "Pasirinkti", "Uþdaryti" );
            }
            case 3: // Kalëjimo duomenø bazë
            {
                foreach(Player, i )
                {
                    if( ( pInfo[i][pJail] > 0 && pInfo[i][pJail] != 1 ) && pInfo[i][pJailTime] > 0 )
                        format( string, sizeof( string ), "%s\nKalinio vardas: %s Likæs laikas kalëjime: %d", string, GetName( i ), pInfo[i][pJailTime] );
                }
                if( isnull( string ) )
                    format(string, sizeof( string ),"Nëra duomenø" );
                ShowPlayerDialog( playerid, 136, DIALOG_STYLE_LIST,"Kalëjimo duomenø bazë", string, "Uþdaryti", "" );
            }
            case 4: // Pridëti á ieðkomøjø sá raðá 
            {
                ShowPlayerDialog( playerid, 132, DIALOG_STYLE_INPUT,"Átraukti asmená á paieðkomu sàraða",
                "{1797cd}LOS SANTOS POLICE DEPARTAMENT\n\
				{FFFFFF}Áveskite paieðkomo asmens vardà ir pavardæ\n\
                Pavyzdys: Vardas_Pavarde", "Ávesti", "Uþdaryti" );
            }
            case 5: // Pridëti maðiná  á ieðkomøjø sá raðá 
            {
                ShowPlayerDialog( playerid, 134, DIALOG_STYLE_INPUT,"Átraukti tr. priemonæ á paieðkas",
                "{1797cd}LOS SANTOS POLICE DEPARTAMENT\n\
				{FFFFFF}Áveskite tr. priemonës valstybinius numerius\n\
                kurie bus átrauka á paieðkomø sàraðà \"Testi\" ", "Ávesti", "Atðaukti" );
            }
            case 6: // Ieðkomøjø maðinø sá raðas
            {
                new
                    rows,
                    dString[ 2048 ],
                    Cache:result ;

                result = mysql_query(DbHandle,  "SELECT `cNumbers`,`cCrimes` FROM `vehicles` WHERE `cCrimes` > 0" );
                rows = cache_get_row_count();

                for(new j = 0; j < cache_get_row_count(); j++)
                {
                    new bool:found = false;

                    cache_get_field_content(j, "cNumbers", string);
                    rows = cache_get_field_content_int(j, "cCrimes");

                    foreach(Vehicles,i)
                    {
                        if ( cInfo[ i ][ cOwner ] == 0 ) continue;
                        if ( !strcmp( cInfo[ i ][ cNumbers ], string, true ) )
                        {
                            format(dString, sizeof(dString), "%s\n%s (%d)",
                            dString, cInfo[ i ][ cNumbers ], cInfo[ i ][ cCrimes ]);
                            found = true;
                            break;
                        }
                    }
                    if( !found )
                    {
                        format(dString, sizeof(dString), "%s\n%s (%d) ((neiðspawninta))",
                        dString, string, rows);
                    }
                }
                
                cache_delete(result);
                
                ShowPlayerDialog( playerid, 141, DIALOG_STYLE_LIST,"Ieðkomu tr. priemoniø sàraðas",
                        dString, "Pasirinkti", "Uþdaryti" );
            }
            case 7: // Areðtuotø maðinø sá raðas
            {
                new
                    dString[ 2048 ],
                    Cache:result;

                result = mysql_query(DbHandle,  "SELECT `numbers` FROM `arrestedcars`" );

                for(new i = 0; i < cache_get_row_count(); i++)
                {
                    {
                        cache_get_field_content(i, "numbers", string);
                        format(dString, sizeof(dString), "%s\n%s", dString, string);
                    }
                }
                cache_delete(result);

                ShowPlayerDialog( playerid, 149, DIALOG_STYLE_LIST,"Areðtuotu tr. priemoniø sàraðas",
                        dString, "Pasirinkti", "Uþdaryti" );
            }
            case 8: // Paskutiniai 911 praneðimai ( 12 )
            {
                new
                    rows,
                    dString[ 2048 ],
                    Cache:result;

                result = mysql_query(DbHandle,  "SELECT * FROM `lastcall` ORDER BY `when` DESC LIMIT 12" );
                rows = cache_get_row_count();

                if( rows )
                {
                    rows = 1;
                    for(new i = 0; i < cache_get_row_count(); i++)
                    {
                        format(dString, sizeof(dString), "%s%d iðkvietimas\n", dString, rows);
                        rows++;
                    }
                }
                cache_delete(result);

                ShowPlayerDialog( playerid, 170, DIALOG_STYLE_LIST,"Paskutiniai 911 skambuèiai",
                        dString, "Pasirinkti", "Uþdaryti" );
            }
        }
    }
    if(dialogid == INTERIORMENU)
    {
        if(response)
        {
            if(listitem == 18) // {FF0000} Custom Interriorai
            {
            ShowPlayerDialog(playerid, INTERIORMENU+19, DIALOG_STYLE_LIST, "Custom mapai","Poþeminis Casino\n\
                                                                                      Bilijardo Baras\n\
                                                                                      MD \n\
                                                                                      Bankas\n\
                                                                                      Bandidos Baras \n\
                                                                                      Mantom Baras \n\
                                                                                      Savivaldybë \n\
                                                                                      \nAtgal", "Pasirinkti", "Atðaukti");
            }
            if(listitem == 19) // Back
            {
            return ShowPlayerDialog(playerid, INTERIORMENU, DIALOG_STYLE_LIST, "Interior Categories","24/7's\nAirports\nAmmunations\nHouses\nHouses 2\nMissions\nStadiums\nCasinos\nShops\nGarages\nGirlfriends\nClothing/Barber Store\nResturants/Clubs\nNo Category\nBurglary\nBurglary 2\nGym\nDepartment\n{FF0000} Custom Interriorai\nBack", "Select", "Cancel");
            }
        }
        return 1;
    }
    if(dialogid == INTERIORMENU+19) // {FF0000} Custom Interriorai
    {
        if(response)
        {
            if(listitem == 0) // Casino
            {
         //     SetPlayerPos(playerid,1947.6279,1924.9791,1693.6992);
            SetPlayerPos(playerid, -133.3848,56.0560,1000.7200);
            SetPlayerInterior(playerid,3);
            }
            if(listitem == 1) // Pool
            {
        //      SetPlayerPos(playerid,1912.3922,1924.3256,1599.0569);
            SetPlayerPos(playerid, 343.2530,11.6263,999.8078);
            SetPlayerInterior(playerid,3);
            }
            if(listitem == 2) // MD (Naujas??)
            {
        //      SetPlayerPos(playerid,2488.1943,955.7484,364.7727);
            SetPlayerPos(playerid, 2825.9783,-181.6222,7934.1270);
            SetPlayerInterior(playerid,3);
            }
            if(listitem == 3) // banko int
            {
            SetPlayerPos(playerid,97.1219,-26.0835,1000.5128);
            SetPlayerInterior(playerid,3);
            }
            if(listitem == 4) // Bandidos baras
            {
            SetPlayerPos(playerid,1070.9766,1787.5327,1101.9008);
            SetPlayerInterior(playerid,18);
            }
            if(listitem == 5) // Mantom
            {
            SetPlayerPos(playerid,2127.4014,-1767.0282,1895.4453);
            SetPlayerInterior(playerid,10);
            }
            if(listitem == 6) // Savivaldybë
            {
            SetPlayerPos(playerid,1477.4452,-1755.5870,2405.0327);
            SetPlayerInterior(playerid,17);
            }
            if(listitem == 7) // Back
            {
            ShowPlayerDialog(playerid, INTERIORMENU, DIALOG_STYLE_LIST, "Interior Categories","24/7's\nAirports\nAmmunations\nHouses\nHouses 2\nMissions\nStadiums\nCasinos\nShops\nGarages\nGirlfriends\nClothing/Barber Store\nResturants/Clubs\nNo Category\nBurglary\nBurglary 2\nGym\nDepartment\n{FF0000} Custom Interriorai\nBack", "Select", "Cancel");
            }
        }
        return 1;
    }
    return 1;
}


public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
    #if defined DEBUG
        printf("[debug] OnPlayerClickPlayer(%s, %s, %d)", GetName(playerid), GetName(clickedplayerid), source);
    #endif
    return 1;
}

stock ShowAdminMenu( playerid, type, tmp )
{
    switch( type )
    {
        case 0:
        {
            new bigstring[256];
            format( bigstring, sizeof(bigstring), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n",fInfo[ tmp ][ fRank1 ],
                                                                                fInfo[ tmp ][ fRank2 ],
                                                                                fInfo[ tmp ][ fRank3 ],
                                                                                fInfo[ tmp ][ fRank4 ],
                                                                                fInfo[ tmp ][ fRank5 ],
                                                                                fInfo[ tmp ][ fRank6 ],
                                                                                fInfo[ tmp ][ fRank7 ],
                                                                                fInfo[ tmp ][ fRank8 ],
                                                                                fInfo[ tmp ][ fRank9 ],
                                                                                fInfo[ tmp ][ fRank10 ],
                                                                                fInfo[ tmp ][ fRank11 ],
                                                                                fInfo[ tmp ][ fRank12 ],
                                                                                fInfo[ tmp ][ fRank13 ]);

            ShowPlayerDialog( playerid, 36, DIALOG_STYLE_LIST, "Rangai" ,bigstring, "Keisti", "Atðaukti" );
            return 1;
        }
    }
    return 1;
}

stock Set3DAudioForPlayer( playerid, station[ ], radio )
{
    if ( Audio_IsClientConnected( playerid ) == 0 )
    {
        if ( station[ 0 ] == 0 )
        {
            StopAudioStreamForPlayer( playerid );
            RadioName   [ playerid ] = 99;
            return 1;
        }
        PlayAudioStreamForPlayer( playerid, station, aInfo[ radio ][ aKords ][ 0 ], aInfo[ radio ][ aKords ][ 1 ], aInfo[ radio ][ aKords ][ 2 ], 30.0, 1);
        RadioName[ playerid ] = 2;
        return 1;
    }

    if ( RadioStation[ playerid ] != 99 )
        Audio_Stop( playerid, RadioStation[ playerid ] );
    if ( station[ 0 ] == 0 )
    {
        Audio_Stop( playerid, RadioStation[ playerid ] );
        RadioStation[ playerid ] = 99;
        RadioName   [ playerid ] = 99;
        return 1;
    }
    RadioStation[ playerid ] = Audio_PlayStreamed( playerid, station, false, false, false);
    Audio_Set3DPosition( playerid, RadioStation[ playerid ], aInfo[ radio ][ aKords ][ 0 ], aInfo[ radio ][ aKords ][ 1 ], aInfo[ radio ][ aKords ][ 2 ], 30.0);
    RadioName[ playerid ] = 2;
    return 1;
}

stock GetWeaponObjectModel(weaponid)
{
    switch(weaponid)
    {
        case WEAPON_DILDO:              return 321;
        case WEAPON_DILDO2:             return 322;
        case WEAPON_VIBRATOR:           return 323;
        case WEAPON_VIBRATOR2:          return 324;
        case WEAPON_FLOWER:             return 325;
        case WEAPON_CANE:               return 326;
        case WEAPON_BRASSKNUCKLE:       return 331;
        case WEAPON_GOLFCLUB:           return 333;
        case WEAPON_NITESTICK:          return 334;
        case WEAPON_KNIFE:              return 335;
        case WEAPON_BAT:                return 336;
        case WEAPON_SHOVEL:             return 337;
        case WEAPON_POOLSTICK:          return 338;
        case WEAPON_CHAINSAW:           return 341;
        case WEAPON_GRENADE:            return 342;
        case WEAPON_TEARGAS:            return 343;
        case WEAPON_MOLTOV:             return 344;
        case WEAPON_COLT45:             return 346;
        case WEAPON_SILENCED:           return 347;
        case WEAPON_DEAGLE:             return 348;
        case WEAPON_SAWEDOFF:           return 350;
        case WEAPON_SHOTGUN:            return 349;
        case WEAPON_SHOTGSPA:           return 351;
        case WEAPON_UZI:                return 352;
        case WEAPON_MP5:                return 353;
        case WEAPON_AK47:               return 355;
        case WEAPON_M4:                 return 356;
        case WEAPON_RIFLE:              return 357;
        case WEAPON_SNIPER:             return 358;
        case WEAPON_ROCKETLAUNCHER:     return 359;
        case WEAPON_HEATSEEKER:         return 360;
        case WEAPON_FLAMETHROWER:       return 361;
        case WEAPON_MINIGUN:            return 362;
        case WEAPON_SATCHEL:            return 363;
        case WEAPON_BOMB:               return 364;
        case WEAPON_SPRAYCAN:           return 365;
        case WEAPON_FIREEXTINGUISHER:   return 366;
        case WEAPON_CAMERA:             return 367;
        case WEAPON_TEC9:               return 372;
        case WEAPON_PARACHUTE:          return 371;
    }
    return 0;
}
stock GetSpaceString(amount)
{
    new string[64];
    for(new i = 0; i < amount; i++)
        strcat(string, " ");
    return string;
}
stock StopPlayerRadio( playerid )
{
    if ( Audio_IsClientConnected( playerid ) )
        Audio_Stop( playerid, RadioStation[ playerid ] );
    else
        StopAudioStreamForPlayer( playerid );

    RadioStation[ playerid ] = 99;
    RadioName   [ playerid ] = 99;
    return 1;
}

stock SetPlayerRadio( playerid, radio[ ] )
{
    if ( Audio_IsClientConnected( playerid ) == 0 )
    {
        PlayAudioStreamForPlayer( playerid, radio );
        RadioName[ playerid ] = 1;
        return 1;
    }
    if ( RadioStation[ playerid ] != 99 )
        Audio_Stop( playerid, RadioStation[ playerid ] );

    RadioStation[ playerid ] = Audio_PlayStreamed( playerid, radio, false, false, false);
    RadioName   [ playerid ] = 1;

    if ( GetRadioVolume( playerid ) == 0 )
        SetPVarInt( playerid, "VOLUME", 100 );
    else
        SetPlayerRadioVolume( playerid, GetRadioVolume( playerid ) );

    return 1;
}

stock SetPlayerRadioVolume( playerid, volume )
{
    SetPVarInt( playerid, "VOLUME", volume );
    Audio_SetVolume( playerid, RadioStation[ playerid ], volume );
    return 1;
}
stock GetRadioVolume( playerid )
    return GetPVarInt( playerid, "VOLUME" );

FUNKCIJA:Vote( )
{
    new string[ 64 ];
    SendClientMessageToAll( COLOR_WHITE, "Balsavimas baiktas!" );
    format( string, sizeof(string), "Rezultatai: TAIP - %d, NE - %d, ", Votes[ 0 ], Votes[ 1 ] );
    SendClientMessageToAll( COLOR_WHITE, string );

    foreach(Player,id)
        Voted[ id ] = true;

    Votes[ 0 ] = 0;
    Votes[ 1 ] = 0;
    return 1;
}

stock MySQL_Check_Account( playerid )
{
    new string[ 90 ],
        plname[ MAX_PLAYER_NAME ],
        bool:ret = true;

    GetPlayerName( playerid, plname, 24 );


    mysql_format(DbHandle, string, sizeof(string), "SELECT `Name` FROM `players` WHERE `Name` = '%e' LIMIT 1", plname);
    new Cache:result = mysql_query(DbHandle,  string );
    if(cache_get_row_count( ) > 0 )
		{
			SendClientMessage( playerid, COLOR_LIGHTRED2,"Sveiki, Jûs sëkmingai prisijungëte prie Lithuanian role-play serverio."),
			SendClientMessage( playerid, COLOR_LIGHTRED2,"Serveris ðiuo metu tikrina Jûsø vartotojo duomenis, praðome palaukti...");
		}
    else
    {
        SendClientMessage( playerid, COLOR_LIGHTRED,"Klaida, vartotojas su kuriuo jungiatës á mûsø serverá neegzistuoja mûsø duomenø bazëje, patikrinkite ar jis tikrai sukurtas ltrp.lt." );			
        SetTimerEx("KicknPlayer", 100, false, "d", playerid );
        ret = false;
    }
    cache_delete(result);
    return ret;
}



FUNKCIJA:MySQL_Load_Player(extraid, password[])
{
    new string[ 300 ],
        sqlid,
        question[ 128 ],
        answer[ 129 ];
    mysql_real_escape_string(password, password, DbHandle, 129);

    format(string, sizeof(string), "SELECT id, secret_question, secret_answer FROM `players` WHERE Name = '%s' AND Password = '%s' LIMIT 1", GetName( extraid ), password );
    new Cache:result = mysql_query(DbHandle, string);

    if(cache_get_row_count())
    {
        sqlid = cache_get_field_content_int(0, "id");
        cache_get_field_content(0, "secret_question", question);
        cache_get_field_content(0, "secret_answer", answer);
        
        SetPVarInt(extraid, "TmpSqlId", sqlid);


        // Jei nëra nustatæs klausimo/atskaymo, turës tai padaryti dabar.
        if(isnull(question) || isnull(answer))
        {
            ShowPlayerQuestionSetDialog(extraid);
        }
        else 
        {
            SetPVarString(extraid, "SecretQuestion", question); // Reikës jei tektø netyèia dar kartà rodyt ðità GUI.
            SetPVarString(extraid, "SecretAnswer", answer); // Mums jo reikës tikrinant kà ávedë.
            ShowPlayerSecretQuestionDialog(extraid, question);
        }
        
    }
    else
    {
        ShowPlayerLoginDialog(extraid);
    }
    cache_delete(result);
    return true;
}

ShowPlayerLoginDialog(playerid, errorstr[] = "")
{
    GetPlayerIp(playerid, pInfo[ playerid ][ pConnectionIP ], 18);
    new kayitmsg[512];
    format(kayitmsg,sizeof(kayitmsg),"{AA1000}%s\n\
        {FFFFFF} Sveiki prisijungà á {cca267}Lithuanian role-play (ltrp.lt){FFFFFF} serverá, dabar galite prisijungti\n\n\
         Vartotojas: {cca267}%s\n{FFFFFF}  Skripto versija: {cca267}" #VERSION "{FFFFFF}, atnaujintas: {cca267}" #BUILD_DATE "\n\n\
         {FFFFFF}Áveskite slaptaþodá:", errorstr, GetName( playerid ));
    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_PASSWORD,"Prisijungimas", kayitmsg, "Jungtis", "Iðjungti");
    return 1;
}

stock ShowPlayerSecretQuestionDialog(playerid, question[], errostr[] = "")
{
    new content[ 512 ];
    format(content, sizeof(content), "{AA1100}%s\n{FFFFFF}Kad prisijungtumëte, atsakykite á savo pasirinktà klausimà. \n\n%s?", errostr, question);
    ShowPlayerDialog(playerid, DIALOG_SECRET_QUESTION, DIALOG_STYLE_PASSWORD, "Prisijungimas: atsakymas", content, "Jungtis", "Iðeiti");
    return 1;
}
stock ShowPlayerQuestionSetDialog(playerid, errostr[] = "")
{
    new string[256];
    format(string, sizeof(string), "{AA1100}%s\n{FFFFFF}Sugalvokite klausimà á kurá galëtumëte atsakyti tik jûs patys.\nÁ já atskayti turësite kas kartà jungdamiesi, tai uþtrikins saugumà.", errostr);
    ShowPlayerDialog(playerid, DIALOG_SECRET_QUESTION_SET, DIALOG_STYLE_INPUT, "Saugos klausimas", string, "Tæsti", "Iðeiti");
    return 1;
}
stock ShowPlayerAnswerSetDialog(playerid, question[], errostr[] = "")
{
    new string[512];
    format(string, sizeof(string), "{AA1100}%s\n{FFFFFF}Jûsø klausimas:%s?\nÁveskite atsakymà ir nepamirðkite jo.", errostr, question);
    ShowPlayerDialog(playerid, DIALOG_SECRET_ANSWER_SET, DIALOG_STYLE_PASSWORD, "Saugos atsakymas", string, "Tæsti", "Iðeiti");
    return 1;
}

public OnPlayerLoginEx(playerid, sqlid)
{
    #if defined DEBUG
        printf("OnPlayerLoginEx(%s, %d)", GetName(playerid), sqlid);
    #endif
    new string[1024],
        inv[ 126 ],
        weap[ 126 ],
        Cache:result;
    format(string, sizeof(string), "SELECT * FROM players WHERE id = %d", sqlid);
    result = mysql_query(DbHandle, string);

    if(cache_get_row_count())
    {
        PlayerPlaySound( playerid, 1057, 0.0, 0.0, 0.0);
        pInfo[ playerid ][ pMySQLID ] = cache_get_field_content_int(0, "id");
        pInfo[ playerid ][ pLevel ] = cache_get_field_content_int(0, "Level");
        pInfo[ playerid ][ pAdmin ] = cache_get_field_content_int(0, "AdminLevel");
        pInfo[ playerid ][ pOnTime ] = cache_get_field_content_int(0, "ConnectedTime");
        pInfo[ playerid ][ pBoxStyle ] = cache_get_field_content_int(0, "BoxStyle");
        cache_get_field_content(0, "Sex", pInfo[ playerid ][ pSex ], DbHandle, 12);
        pInfo[ playerid ][ pAge ] = cache_get_field_content_int(0, "Age");
        cache_get_field_content(0, "Origin", pInfo[ playerid ][ pOrigin ], DbHandle, 24);
        pInfo[ playerid ][ pLiga ] = cache_get_field_content_int(0, "Liga");
        pInfo[ playerid ][ pExp ] = cache_get_field_content_int(0, "Respect");
        pInfo[ playerid ][ pMoney ] = cache_get_field_content_int(0, "Money");
        pInfo[ playerid ][ pBank ] = cache_get_field_content_int(0, "Bank");
        pInfo[ playerid ][ pDeaths ] = cache_get_field_content_int(0, "Deaths");
        pInfo[ playerid ][ pWantedLevel ] = cache_get_field_content_int(0, "WantedLevel");
        pInfo[ playerid ][ pJob ] = cache_get_field_content_int(0, "Job");
        pInfo[ playerid ][ pJail ] = cache_get_field_content_int(0, "Jailed");
        pInfo[ playerid ][ pJailTime ] = cache_get_field_content_int(0, "JailTime");
        pInfo[ playerid ][ pLead ] = cache_get_field_content_int(0, "Leader");
        pInfo[ playerid ][ pMember ] = cache_get_field_content_int(0, "Member");
        pInfo[ playerid ][ pSavings ] = cache_get_field_content_int(0, "pJobCar");
        pInfo[ playerid ][ pRank ] = cache_get_field_content_int(0, "Rank");
        pInfo[ playerid ][ pSkin ] = cache_get_field_content_int(0, "Skinas");
        pInfo[ playerid ][ pJobContr ] = cache_get_field_content_int(0, "JobContr");
        pInfo[ playerid ][ pInt ] = cache_get_field_content_int(0, "Intas");
        pInfo[ playerid ][ pPhone ] = cache_get_field_content_int(0, "PhoneNr");
        pInfo[ playerid ][ pHouseKey ] = cache_get_field_content_int(0, "House");
        pInfo[ playerid ][ pCrashPos ][ 0 ] = cache_get_field_content_float(0, "Pos_x");
        pInfo[ playerid ][ pCrashPos ][ 1 ] = cache_get_field_content_float(0, "Pos_y");
        pInfo[ playerid ][ pCrashPos ][ 2 ] = cache_get_field_content_float(0, "Pos_z");
        pInfo[ playerid ][ pLicCar ] = cache_get_field_content_int(0, "CarLic");
        pInfo[ playerid ][ pLicHeli ] = cache_get_field_content_int(0, "FlyLic");
        pInfo[ playerid ][ pLicBoat ] = cache_get_field_content_int(0, "BoatLic");
        pInfo[ playerid ][ pLicMoto ] = cache_get_field_content_int(0, "MotoLic");
        pInfo[ playerid ][ pLicWeapon ] = cache_get_field_content_int(0, "GunLic");
        pInfo[ playerid ][ pPayCheck ] = cache_get_field_content_int(0, "PayDay");
        pInfo[ playerid ][ pPayDayHad ] = cache_get_field_content_int(0, "PayDayHad");
        pInfo[ playerid ][ pCrash ] = cache_get_field_content_int(0, "Crashed");
        pInfo[ playerid ][ pWarn ] = cache_get_field_content_int(0, "Warnings");
        pInfo[ playerid ][ pVirWorld ] = cache_get_field_content_int(0, "VirWorld");
        pInfo[ playerid ][ pRChannel ] = cache_get_field_content_int(0, "RChanel");
        pInfo[ playerid ][ pUcpID    ] = cache_get_field_content_int(0, "ucpuser");
        cache_get_field_content(0, "Inventory", inv); // s[80]
        cache_get_field_content(0, "Weapons", weap); // s[56]
        pInfo[ playerid ][ pDubKey ] = cache_get_field_content_int(0, "pDubKey");
        pInfo[ playerid ][ pJobSkill ] = cache_get_field_content_int(0, "JobSkill");
        pInfo[ playerid ][ pJobLevel ] = cache_get_field_content_int(0, "JobLevel");
        pInfo[ playerid ][ pLeftTime ] = cache_get_field_content_int(0, "LeftTime");
        pInfo[ playerid ][ pDriverWarn ] = cache_get_field_content_int(0, "DriverWarn");
        pInfo[ playerid ][ pTester ] = cache_get_field_content_int(0, "Tester");
        pInfo[ playerid ][ pFines ] = cache_get_field_content_int(0, "pFines");
        pInfo[ playerid ][ pPaydFines ] = cache_get_field_content_int(0, "pPFines");
        pInfo[ playerid ][ pDonator ] = cache_get_field_content_int(0, "Donator");
        pInfo[ playerid ][ pWalkStyle ] = cache_get_field_content_int(0, "WalkStyle");
        pInfo[ playerid ][ pTalkStyle ] = cache_get_field_content_int(0, "TalkStyle");
        pInfo[ playerid ][ pHeroineAddict ] = cache_get_field_content_int(0, "HeroineAddict");
        pInfo[ playerid ][ pAmfaAddict ] = cache_get_field_content_int(0, "AmfaAddict");
        pInfo[ playerid ][ pMetaAmfaineAddict ] = cache_get_field_content_int(0, "MetamfaAddict");
        pInfo[ playerid ][ pCocaineAddict ] = cache_get_field_content_int(0, "CocaineAddict");
       	pInfo[ playerid ][ pSpawn ] = E_PLAYER_SPAWN_LOCATIONS: cache_get_field_content_int(0, "playerSpawn");
        pInfo[ playerid ][ pBSpawn ] = cache_get_field_content_int(0, "bSpawn");
        cache_get_field_content(0, "Card", pInfo[ playerid ][ pCard ], DbHandle, 256); // s[256]
        cache_get_field_content(0, "ForumName", pInfo[ playerid ][ pForumName ], DbHandle, 256); // s[256]
        pInfo[ playerid ][ pExtazyAddict ] = cache_get_field_content_int(0, "ExtazyAddict");
        pInfo[ playerid ][ pPCPAddict    ] = cache_get_field_content_int(0, "PCPAddict");
        pInfo[ playerid ][ pCrackAddict  ] = cache_get_field_content_int(0, "CrackAddict");
        pInfo[ playerid ][ pOpiumAddict  ] = cache_get_field_content_int(0, "OpiumAddict");
        pInfo[ playerid ][ pPoints       ] = cache_get_field_content_int(0, "Points");
        pInfo[ playerid ][ pHealthLevel  ] = cache_get_field_content_int(0, "HealthLevel");
        pInfo[ playerid ][ pStrengthLevel] = cache_get_field_content_int(0, "StrengthLevel");
        pInfo[ playerid ][ pJobHours ] = cache_get_field_content_int(0, "JobHours");
        pInfo[ playerid ][ pHunger ] = cache_get_field_content_int(0, "Hunger");
        pInfo[ playerid ][ pTotalPaycheck ]  = cache_get_field_content_int(0, "TotalPaycheck");
    
        cache_delete(result);


        //UnPackPoints( extraid, points );

        if(CheckLock(playerid))
            return true;
        
        ResetPlayerMoney( playerid );
        GivePlayerMoney( playerid, pInfo[ playerid ][ pMoney       ] );
        SetPlayerScore( playerid, pInfo[ playerid ][ pLevel       ] );
        SetPlayerFightingStyle( playerid, pInfo[ playerid ][ pBoxStyle    ] );
        GetPlayerIp(playerid, pInfo[ playerid ][ pConnectionIP ], 18);

        format( string, sizeof(string), "UPDATE players SET playerIP = '%s' WHERE id = %d", pInfo[ playerid ][ pConnectionIP ], pInfo[ playerid ][ pMySQLID ] );
        mysql_query(DbHandle,  string, false);
        format( string, sizeof(string), "INSERT INTO `IPLog` (Kas, IP) VALUES (%d,'%s')", pInfo[ playerid ][ pMySQLID ], pInfo[ playerid ][ pConnectionIP ] );
        mysql_query(DbHandle,  string, false);
        
        PlayerOn[ playerid ] = true;
        //--------------------[Tackes uzkraunam]--------------------
        LoadPlayerVehicles( playerid );

        foreach(Vehicles,veh)
        {
            if ( cInfo[ veh ][ cOwner ] == pInfo[ playerid ][ pMySQLID ] && cInfo[ veh ][ cVehID ] > 0 && cInfo[ veh ][ cDub ] == 0)
                pInfo[ playerid ][ pCarGet ] ++;
        }
        
        CheckWeaponCheat( playerid, 0, 1 );
        //----------------------------------------------------------
        ClearChatbox( playerid, 10 );
        format           ( string, 256, "{FFFFFF}Sveikiname sugráþus, Jûs prisijungëte su veikëju %s. Sëkmës serveryje!.", GetName( playerid ) );
        SendClientMessage( playerid, COLOR_FADE1,string);
        format           ( string, 56, "~w~Sveikas ~n~~h~~g~%s", GetName( playerid ) );
        //------------------[Nustatum tikslu spawn vieta]-----------
        SpawnPlayerEx ( playerid );
        //---------------------[Sukuriam Info texta]----------------
        ShowPlayerInfoText(playerid);
        GameTextForPlayer (playerid, string, 5000, 1 );
        //------------------[Patvarkom Info texta ]-----------------
        UpdatePlayerInfoText( playerid, PLAYER_STATE_ONFOOT );
        loadPlayerNotes( playerid );
        SetPlayerHealth( playerid, 100);
    }
    else 
        cache_delete(result);

    new contactCount = 0;
    format(string, sizeof(string), "SELECT phone_number, name FROM player_phone_contacts WHERE player_id = %d ORDER BY entry_date ASC", pInfo[ playerid ][ pMySQLID ]);
    result = mysql_query(DbHandle, string);
    for(new i = 0; i < cache_get_row_count(); i++)
    {
        PlayerPhoneBook[ playerid ][ contactCount ][ PhoneNumber ] = cache_get_field_content_int(i, "phone_number");
        cache_get_field_content(i, "name", PlayerPhoneBook[ playerid ][ contactCount ][ Name ], DbHandle, 24);
        contactCount++;
    }
    cache_delete(result);
    return 1;
}


stock LoadPlayerKomp(playerid)
{
    new string[ 256 ];
    format(string, 126, "SELECT * FROM `komp` WHERE `kam` = %d AND `priimta` = 0;", pInfo[ playerid ][ pMySQLID ]);
    new Cache:result = mysql_query(DbHandle,  string );
    new id,
        kam2,
        ka,
        kiek,
        kiek2,
        kas[ MAX_PLAYER_NAME ];


    for(new j = 0; j < cache_get_row_count(); j++)
    {
        id = cache_get_field_content_int(j, "id");
        kam2 = cache_get_field_content_int(j, "kam2");
        ka = cache_get_field_content_int(j, "ka");
        kiek = cache_get_field_content_int(j, "kiek");
        kiek2 = cache_get_field_content_int(j, "kiek2");
        cache_get_field_content(j, "Kas", kas);
        switch( ka )
        {
            case 0:
            {
                GivePlayerMoney( playerid, kiek );
                format( string, 126, " Jûsø kompensacija priimta, graþinta pinigø: %d, kompensacijos numeris: %d", kiek, id );
                SendClientMessage( playerid, COLOR_WHITE, string );

                format( string, 256, "UPDATE `komp` SET `priimta` = 1 WHERE `id` = %d LIMIT 1;", id );
                mysql_pquery(DbHandle,  string );
            }
            case 1:
            {
                if ( IsPlayerHaveManyGuns( playerid, kiek ) ) 
                {
                    cache_delete(result);
                    return true;
                }
                GivePlayerWeapon( playerid, kiek, kiek2 );

                new wepname[ 24 ];
                GetWeaponName( kiek, wepname, 24 );

                format( string, 126, " Jûsø kompensacija priimta, graþintas ginklas: %s kulkø: %d, kompensacijos numeris: %d", wepname, kiek2, id );
                SendClientMessage( playerid, COLOR_WHITE, string );

                format( string, 256, "UPDATE `komp` SET `priimta` = 1 WHERE `id` = %d LIMIT 1;", id );
                mysql_pquery(DbHandle,  string );
            }
            case 2:
            {
                new bool:spawned = false;
                foreach(Vehicles,i)
                {
                    if(kam2 == cInfo[ i ][ cID ])
                    {
                        cInfo[ i ][ cInsurance ] = kiek;
                        cInfo[ i ][ cDuzimai   ] = kiek2;
                        SaveCar( i );
                        spawned = true;
                        break;
                    }
                }
                cache_delete(result);
                if(spawned == false)
                {
                    format( string, 256, "UPDATE `vehicles` SET `cInsurance` = %d, `cDuzimai` = %d WHERE id = %d LIMIT 1;", kiek, kiek2, kam2 );
                    mysql_pquery(DbHandle,  string );
                }
                format( string, 256, " Jûsø kompensacija priimta, automobilio unikalus ID: %d nustatyta duþimø: %d nustatyta draudimo: %d, kompensacijos numeris: %d", kam2, kiek2, kiek, id );
                SendClientMessage( playerid, COLOR_WHITE, string );

                format( string, 256, "UPDATE `komp` SET `priimta` = 1 WHERE `id` = %d LIMIT 1;", id );
                mysql_pquery(DbHandle,  string );
                return 1;
            }
        }
    }
    cache_delete(result);
    return 1;
}

// SUTVARKOM SPAWN
stock SpawnPlayerEx( playerid )
{
    new
        string[ 256 ],
        string2[ 256 ],
        Float:x,
        Float:y,
        Float:z;
        
    if(pInfo[ playerid ][ pJailTime ] >= 1 && Mires[playerid] == 0 )
    {
        switch(pInfo[playerid][pJail])
        {
            case 1:
            {
                Data_GetCoordinates("ooc_jail", x, y, z);
                SetSpawnInfo(playerid, 0, pInfo[ playerid ][ pSkin ], x, y, z, 0, 0, 0, 0, 0, 0, 0 );
                SetPlayerVirtualWorld(playerid, playerid);

                format( string, sizeof( string ), "SELECT `Priezastis` FROM `nuobaudos` WHERE `Ka` = 'uþdarë á kalëjimá ' AND `Kam` = %d ORDER BY `Data` DESC LIMIT 1", pInfo[ playerid ][ pMySQLID ]);
                new Cache:result = mysql_query(DbHandle,  string );
                
                if(cache_get_row_count())
                {
                    cache_get_field_content(0, "Priezastis", string);
                    format( string2, sizeof( string2 ), "Prieþastis: %s", string);
                    SendClientMessage       ( playerid, COLOR_LIGHTRED, "Jûs buvote pasodintas á OOC Jail!" );
                    SendClientMessage       ( playerid, COLOR_LIGHTRED, string2 );
                }
                cache_delete(result);
            }
            case 2:
            {
                SetPlayerInterior(playerid, Data_GetInterior("ic_prison"));
                Data_GetCoordinates("ic_prison", x, y, z);
                SetSpawnInfo(playerid, 0, pInfo[ playerid ][ pSkin ], x, y, z,0, 0, 0, 0, 0, 0, 0);
            }
            case 3:
            {
                SetPlayerInterior(playerid, Data_GetInterior("ic_custody"));
                Data_GetCoordinates("ic_custody", x, y, z);
                SetSpawnInfo(playerid, 0, pInfo[ playerid ][ pSkin ], x, y, z, 0, 0, 0, 0, 0, 0, 0 );
            }
        }
    }
    else if( Mires[ playerid ] > 0 )
    {
        if( Mires[ playerid ] == 1 )
        {
            if(pInfo[ playerid ][ pJailTime ] >= 1)
            {
                switch(pInfo[playerid][pJail])
                {
                    case 1:
                    {
                        Data_GetCoordinates("ooc_jail", x, y, z);
                        SetSpawnInfo(playerid, 0, pInfo[ playerid ][ pSkin ], x, y, z, 0, 0, 0, 0, 0, 0, 0 );
                        SetPlayerVirtualWorld( playerid, playerid );

                        format( string, sizeof( string ), "SELECT `Priezastis` FROM `nuobaudos` WHERE `Ka` = 'uþdarë á kalëjimá ' AND `Kam` = %d ORDER BY `Data` DESC LIMIT 1", pInfo[ playerid ][ pMySQLID ]);
                        new Cache:result = mysql_query(DbHandle,  string );

                        if(cache_get_row_count())
                        {
                            cache_get_field_content(0, "Priezastis", string);
                            format( string2, sizeof( string2 ), "Prieþastis: %s", string);
                            SendClientMessage       ( playerid, COLOR_LIGHTRED, "Jûs buvote pasodintas á OOC Jail!" );
                            SendClientMessage       ( playerid, COLOR_LIGHTRED, string2 );
                        }
                        cache_delete(result);
                    }
                    case 2:
                    {
                        SetPlayerInterior(playerid, Data_GetInterior("ic_prison"));
                        Data_GetCoordinates("ic_prison", x, y, z);
                        SetSpawnInfo(playerid, 0, pInfo[ playerid ][ pSkin ], x, y, z,0, 0, 0, 0, 0, 0, 0);
                    }
                    case 3:
                    {
                        SetPlayerInterior(playerid, Data_GetInterior("ic_custody"));
                        Data_GetCoordinates("ic_custody", x, y, z);
                        SetSpawnInfo(playerid, 0, pInfo[ playerid ][ pSkin ], x, y, z, 0, 0, 0, 0, 0, 0, 0 );
                    }
                }
            }
            else
            {
                Data_GetCoordinates("hospital_discharge", x, y, z);
                SetSpawnInfo(playerid, NO_TEAM, pInfo[ playerid ][ pSkin ], x, y, z, 0, 0, 0, 0, 0, 0, 0);
                SetPlayerInterior(playerid, Data_GetInterior("hospital_discharge"));
                SetPlayerVirtualWorld(playerid, Data_GetVirtualWorld("hospital_discharge"));
                pInfo[playerid][pDeaths] ++;

                for(new i = 0; i < MAX_PLAYER_ITEMS; i++)
                {
                    new itemid = GetPlayerItemAtIndex(playerid, i);
                    if(itemid != ITEM_PHONE)
                    {
                        RemovePlayerItemAtIndex(playerid, i);
                    }
                }

                DestroyDynamic3DTextLabel( DeathLabel[playerid] );
                SendClientMessage(playerid, COLOR_LIGHTRED, "Jûs buvote paleistas ið ligoninës.");
                SendClientMessage(playerid, COLOR_LIGHTRED, "Gydymas kainavo 150$. Ginklai bei kiti daiktai buvo pamesti, iðskyrus telefonà.");
            }
            Mires[ playerid ] = 0;
        }
        else
        {
            format( string, 256, "((\n" );

            for(new i = 0; i < 47; i++)
            {
                format(string2, 256, "%d", i);
                if( GetPVarInt( playerid, string2 ) == 0 || GetSlotByID( i ) > 6 ) continue;

                format(string, 256, "%s%s hits: %d\n", string, WepNames[i], GetPVarInt( playerid, string2 ));
            }

            format( string, 256, "%s ))", string );

            SendClientMessage( playerid, COLOR_GREY, string );
            DeathLabel[playerid] = CreateDynamic3DTextLabel(string, COLOR_RED, pInfo[playerid][pCrashPos][0],pInfo[playerid][pCrashPos][1],pInfo[playerid][pCrashPos][2]+2, 30.0, playerid, INVALID_VEHICLE_ID, 1);
            NullWeapons( playerid );
            SetSpawnInfo            ( playerid, NO_TEAM, pInfo[ playerid ][ pSkin ], pInfo[playerid][pCrashPos][0],pInfo[playerid][pCrashPos][1],pInfo[playerid][pCrashPos][2], 0, 0, 0, 0, 0, 0, 0 );
            SetPlayerInterior     ( playerid, pInfo[playerid][pInt] );
            SetPlayerVirtualWorld ( playerid, pInfo[playerid][pVirWorld] );
            SendClientMessage       ( playerid, COLOR_LIGHTRED, "Dëmesio, Jûs buvote mirtinai suþeistas ir dabar Jums reikia skubios pagalbos." );
            SendClientMessage       ( playerid, COLOR_LIGHTRED, "Apaèioje eina laikas iki mirties, jei norite mirti nelaukæ raðykite /die." );
        }
    }
    else if( pInfo[ playerid ][ pJailTime ] >= 1 )
    {
        switch(pInfo[playerid][pJail])
        {
            case 1:
            {
                Data_GetCoordinates("ooc_jail", x, y, z);
                SetSpawnInfo( playerid, 0, pInfo[ playerid ][ pSkin ],x, y ,z, 0, 0, 0, 0, 0, 0, 0 );
                SetPlayerVirtualWorld( playerid, playerid );

                format( string, sizeof( string ), "SELECT `Priezastis` FROM `nuobaudos` WHERE `Ka` = 'uþdarë á kalëjimá ' AND `Kam` = %d ORDER BY `Data` DESC LIMIT 1", pInfo[ playerid ][ pMySQLID ]);
                new Cache:result = mysql_query(DbHandle,  string );
                if(cache_get_row_count())
                {
                    cache_get_field_content(0, "Priezastis", string);
                    format( string2, sizeof( string2 ), "Prieþastis: %s", string);
                    SendClientMessage       ( playerid, COLOR_LIGHTRED, "Jûs buvote pasodintas á OOC Jail!" );
                    SendClientMessage       ( playerid, COLOR_LIGHTRED, string2 );
                }
                cache_delete(result);
            }
            case 2:
            {
                SetPlayerInterior(playerid, Data_GetInterior("ic_prison"));
                Data_GetCoordinates("ic_prison", x, y, z);
                SetSpawnInfo(playerid, 0, pInfo[ playerid ][ pSkin ], x, y, z,0, 0, 0, 0, 0, 0, 0);
            }
            case 3:
            {
                SetPlayerInterior(playerid, Data_GetInterior("ic_custody"));
                Data_GetCoordinates("ic_custody", x, y, z);
                SetSpawnInfo(playerid, 0, pInfo[ playerid ][ pSkin ], x, y ,z, 0, 0, 0, 0, 0, 0, 0 );
            }
        }
    }
    else
    {
        if( pInfo[ playerid ][ pCrash ] == 1 )
        {
            SetSpawnInfo( playerid, NO_TEAM, pInfo[ playerid ][ pSkin ], pInfo[ playerid ][ pCrashPos ][ 0 ],pInfo[ playerid ][ pCrashPos ][ 1 ], pInfo[ playerid ][ pCrashPos ][ 2 ]+1.0, 0, 0, 0, 0, 0, 0, 0 );
            format      ( string, sizeof(string), "~r~KLAIDA! ~n~~h~~g~Gryztate atgal" );
            GameTextForPlayer    ( playerid, string, 5000, 1 );
            SetPlayerInterior( playerid, pInfo[playerid][pInt] );
            SetPlayerVirtualWorld( playerid, pInfo[playerid][pVirWorld] );
            pInfo[ playerid ][ pCrash ] = 0;
        }
        else
        {
            switch(pInfo[ playerid ][ pSpawn ])
            {
                case SpawnHouse:
                {
                    new housekey;
                    foreach(Houses,h)
                    {
                        if ( pInfo[ playerid ][ pHouseKey ] == hInfo[ h ][ hID ] )
                        {
                            housekey = h;
                        }
                    }
                    SetSpawnInfo( playerid, 0, pInfo[ playerid ][ pSkin ], hInfo[ housekey ][ hEnter ][ 0 ],hInfo[ housekey ][ hEnter ][ 1 ],hInfo[ housekey ][ hEnter ][ 2 ], 0, 0, 0, 0, 0, 0, 0 );
                    SetPlayerVirtualWorld( playerid, hInfo[ housekey ][ hEntranceVirw ] );
                    SetPlayerInterior    ( playerid, hInfo[ housekey ][ hEntranceInt ] );
                }
                case SpawnFaction: SetSpawnInfo( playerid, 0, pInfo[ playerid ][ pSkin ], fInfo[ PlayerFaction( playerid ) ][ fSpawn ][ 0 ],fInfo[ PlayerFaction( playerid ) ][ fSpawn ][ 1 ],fInfo[ PlayerFaction( playerid ) ][ fSpawn ][ 2 ], 0, 0, 0, 0, 0, 0, 0 );
                case SpawnBusiness:
                {
                    new housekey = pInfo[ playerid ][ pBSpawn ];
                    SetSpawnInfo( playerid, 0, pInfo[ playerid ][ pSkin ], bInfo[ housekey ][ bEnter ][ 0 ],bInfo[ housekey ][ bEnter ][ 1 ],bInfo[ housekey ][ bEnter ][ 2 ], 0, 0, 0, 0, 0, 0, 0 );
                    SetPlayerVirtualWorld( playerid, bInfo[ housekey ][ bEntranceVirw ] );
                    SetPlayerInterior    ( playerid, bInfo[ housekey ][ bEntranceInt ] );
                }
                case SpawnLosSantos: 
                {
                    Data_GetCoordinates("spawn_los_santos", x, y, z);
                    SetPlayerInterior(playerid, Data_GetInterior("spawn_los_santos"));
                    SetPlayerVirtualWorld(playerid, Data_GetVirtualWorld("spawn_los_santos"));
                    SetSpawnInfo( playerid, 0, pInfo[ playerid ][ pSkin ], x, y, z,0, 0, 0, 0, 0, 0, 0 );
                }
                case SpawnGarage:
                {
                	GetGarageEntrancePos(pInfo[ playerid ][ pBSpawn ], x, y, z);
                    SetSpawnInfo(playerid, 0, pInfo[ playerid ][ pSkin ], x, y, z, 0, 0, 0, 0, 0, 0, 0 );
                    SetPlayerVirtualWorld(playerid, GetGarageEntranceVirtualWorld(pInfo[ playerid ][ pBSpawn ]));
                    SetPlayerInterior(playerid, GetGarageEntranceInteriorID(pInfo[ playerid ][ pBSpawn ]));	
                }
                default:
                {
                    Data_GetCoordinates("default_spawn", x, y, z);
                    SetPlayerInterior(playerid, Data_GetInterior("default_spawn"));
                    SetPlayerVirtualWorld(playerid, Data_GetVirtualWorld("default_spawn"));
                    SetSpawnInfo(playerid, 0, pInfo[ playerid ][ pSkin ], x, y, z,0, 0, 0, 0, 0, 0, 0);
                }
            }
        }
    }
    return SpawnPlayer( playerid );
}

stock returnFuelText( vehicle, model )
{
    new string[ 26 ],

        fuel = (cInfo[ vehicle ][ cFuel ] * 20) / GetVehicleFuelTank( model );
    switch( fuel )
    {
        case 0: format( string, 26, "~r~...................." );
        case 1: format( string, 26, "~r~I..................." );
        case 2: format( string, 26, "~r~II.................." );
        case 3: format( string, 26, "~r~III................." );
        case 4: format( string, 26, "~y~IIII................" );
        case 5: format( string, 26, "~y~IIIII..............." );
        case 6: format( string, 26, "~y~IIIIII.............." );
        case 7: format( string, 26, "~y~IIIIIII............." );
        case 8: format( string, 26, "~w~IIIIIIII............" );
        case 9: format( string, 26, "~w~IIIIIIIII..........." );
        case 10:format( string, 26, "~w~IIIIIIIIII.........." );
        case 11:format( string, 26, "~w~IIIIIIIIIII........." );
        case 12:format( string, 26, "~w~IIIIIIIIIIII........" );
        case 13:format( string, 26, "~w~IIIIIIIIIIIII......." );
        case 14:format( string, 26, "~w~IIIIIIIIIIIIII......" );
        case 15:format( string, 26, "~w~IIIIIIIIIIIIIII....." );
        case 16:format( string, 26, "~w~IIIIIIIIIIIIIIII...." );
        case 17:format( string, 26, "~w~IIIIIIIIIIIIIIIII..." );
        case 18:format( string, 26, "~w~IIIIIIIIIIIIIIIIII.." );
        case 19:format( string, 26, "~w~IIIIIIIIIIIIIIIIIII." );
        case 20:format( string, 26, "~w~IIIIIIIIIIIIIIIIIIII" );
    }
    return string;
}
stock AddJobExp( playerid, exp )
{
    pInfo[ playerid ][ pJobSkill ] += exp;
    if ( (( pInfo[ playerid ][ pJobLevel ] + 1 ) * 100) <= pInfo[ playerid ][ pJobSkill ] )
    {
        if ( pInfo[ playerid ][ pJobLevel ] == 10 )
        {
            pInfo[ playerid ][ pJobSkill ] -= exp;
            return 1;
        }
        pInfo[ playerid ][ pJobLevel ] ++;
        pInfo[ playerid ][ pJobSkill ] = 0;
        ShowInfoText( playerid, "~g~Sveikiname jusu darbo lygis padidejo", 4000 );
        return 1;
    }
    return 1;
}

stock GetVehicleSpeed2( vehid )
{
    new Float:x,
        Float:y,
        Float:z;
    GetVehicleVelocity( vehid, x, y, z );
    return floatround( floatsqroot( x*x + y*y + z*z ) * 170 );
}
stock SetVehicleSpeed( vehicleid, mph )
{
    new Float:Vx,
        Float:Vy,
        Float:Vz,
        Float:DV,
        Float:multiple;

    GetVehicleVelocity( vehicleid, Vx, Vy, Vz);
    DV = floatsqroot( Vx*Vx + Vy*Vy + Vz*Vz );
    if ( DV > 0 )
    {
        multiple = ( mph / ( DV * 170 ) );
        return SetVehicleVelocity( vehicleid, Vx*multiple, Vy*multiple, Vz*multiple );
    }
    return 0;
}

public OnVehicleDamageStatusUpdate( vehicleid, playerid )
{
    new Float:Damage,
        text[ 126 ];

    GetVehicleHealth( vehicleid, Damage );

    if ( ( V_HP[ vehicleid ] - 250.0 ) > Damage )
    {
        if ( Engine[ vehicleid ] == true )
        {
            Engine[ vehicleid ] = false;
            VehicleEngine( vehicleid, 0 );
            format       ( text, 126, "* Automobilio variklis iðsijungia.(( %s ))", GetPlayerNameEx( playerid ) );
            ProxDetector(20.0, playerid, text, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            return 1;
        }
    }
    if ( Damage < 300 )
    {
        if ( Engine[ vehicleid ] == true )
        {
            Engine[ vehicleid ] = false;
            VehicleEngine( vehicleid, 0 );
            format       ( text, 126, "* Automobilio variklis iðsijungia.(( %s ))", GetPlayerNameEx( playerid ) );
            ProxDetector(20.0, playerid, text, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            return 1;
        }
    }
    Check_VHP( vehicleid, 0, Damage );
    return 1;
}
FUNKCIJA:Spidometras( )
{
    foreach(Player,i)
    {
        if ( GetPVarInt( i, "PLAYER_STATE" ) == PLAYER_STATE_DRIVER  )
            UpdatePlayerInfoText( i , PLAYER_STATE_DRIVER );
    }
    return 1;
}

FUNKCIJA:Drugs( )
{
    foreach(Player,i)
    {
        if ( IsPlayerAddicted( i ) && !GetPVarInt( i, "Addicted" ) )
        {
            SetPVarInt( i, "Addicted", true );
            SetPVarInt( i, "AddictionTime", 10+random(16) );
            DrugTimer[ i ] = SetTimerEx( "DrugsEffect", 7000, false, "i", i );
        }
    }
    return 1;
}

FUNKCIJA:DrugsEffect( i )
{
    KillTimer( DrugTimer[ i ] );
    if( GetPVarInt( i, "Addicted" ) )
    {
        new
            Float:Health,
            sum = 0;
            
        sum += pInfo[ i ][ pHeroineAddict ];
        sum += pInfo[ i ][ pAmfaAddict ];
        sum += pInfo[ i ][ pCocaineAddict ];
        sum += pInfo[ i ][ pMetaAmfaineAddict ];
        sum += pInfo[ i ][ pExtazyAddict ];
        sum += pInfo[ i ][ pPCPAddict ];
        sum += pInfo[ i ][ pCrackAddict ];
        sum += pInfo[ i ][ pOpiumAddict ];
        
        GetPlayerHealth( i, Health );
        if ( Health-sum > 15.0 )
            SetPlayerHealth( i, Health-sum );
        else
            SetPlayerHealth( i, 15 );
        DrugTimer[ i ] = SetTimerEx( "DrugsEffect", 7000, false, "i", i );
    }
    return 1;
}

FUNKCIJA:DrugsEffects( i )
{
    KillTimer( DrugTimer[ i ] );
    if( !GetPVarInt( i, "Addicted" ) )
    {
        new
            Float:Health;

        GetPlayerHealth( i, Health );
        
        if( GetPVarInt( i, "DrugHPLimit" ) > 0 && GetPVarInt( i, "DrugHP" )+Health <= 100)
        {
            SetPVarInt( i, "DrugHPLimit", GetPVarInt( i, "DrugHPLimit" )-GetPVarInt( i, "DrugHP" ) );
            SetPlayerHealth( i, Health+GetPVarInt( i, "DrugHP" ) );
        }
        DrugTimer[ i ] = SetTimerEx( "DrugsEffects", 12000, false, "i", i );
    }
    return 1;
}


stock UpdatePlayerInfoText(playerid ,plstate = PLAYER_STATE_ONFOOT )
{
    new string[ 512 ], speed;

    if ( pInfo[ playerid ][ pRChannel ] > 0 )
    {
        format( string, 40, "~w~R.kanalas: %d~n~", pInfo[ playerid ][ pRChannel ] );
        format( string, 40, "%s~w~R.slot: %d~n~", string, GetPVarInt(playerid, "RadioSlot") );
    }

    if ( plstate == PLAYER_STATE_DRIVER )
    {
        new veh = OldCar[ playerid ],
            model = GetPVarInt( playerid, "PLAYER_VEH_MODEL" );
        Check_VHP( veh, 1 );
        if ( GetPVarInt( playerid, "MOKESTIS" ) == 0 )
        {
            speed = GetVehicleSpeed2( veh );
            if ( GetPVarInt( playerid, "LIC_TIME") > 0 )
            {
                SetPVarInt( playerid, "LIC_TIME", GetPVarInt( playerid, "LIC_TIME") - 1);
                if ( speed > 60 )
                    SetPVarInt( playerid, "LIC_MISTAKE", GetPVarInt( playerid, "LIC_MISTAKE" ) + 1 );

                if ( GetPVarInt( playerid, "LIC_TIME") == 1 )
                {
                    SetVehicleToRespawn( OldCar[ playerid ] );
                    DisablePlayerRaceCheckpoint( playerid );
                    if( GetPVarInt( playerid, "LIC_TYPE" ) == 3 )
                        Data_SetPlayerLocation(playerid, "license_pilot_end");
                }
            }
            if ( PlayerSpeed[ playerid ] > 0 && speed >= PlayerSpeed[ playerid ] )
                SetVehicleSpeed( veh, PlayerSpeed[ playerid ]-5 );

            format( string, 256, "%sGreitis: %d km/h~n~~w~Rida: %.0f km", string, speed, cInfo[ veh ][ cKM ]);

            if ( VehicleHasEngine( model ) )
                format( string, 256, "%s~n~~w~Degalai: %s", string, returnFuelText( veh, model ) );
        }
        else
            format( string, 256, "%s~w~Degaline~n~Moketi: $%d~n~Degalai: %s~n~Ipilta: %d L", string, GetPVarInt( playerid, "MOKESTIS" ), returnFuelText( veh, model ), cInfo[ veh ][ cFuel ] - GetPVarInt( playerid, "FILLED" ) );
    }
    if ( Laikas[ playerid ] > 0 )
    {
        new mins,
            secs;

        ShowPlayerInfoText( playerid );
        divmod( Laikas[ playerid ], 60, mins, secs );
        if (mins > 0)
            format(string, 256,"%s~n~~w~Atliekama: %d:%02d",string,mins,secs );
        else
            format(string, 256,"%s~n~~w~Atliekama: %d",string,secs );
    }
    if ( Mires[ playerid ] > 0 )
    {
        new mins,
            secs;

        ShowPlayerInfoText( playerid );
        divmod( Mires[ playerid ], 60, mins, secs );
        if ( mins > 0 )
            format(string, 256,"%s~n~~w~Iki mirties: %d:%02d", string, mins, secs );
        else
            format(string, 256,"%s~n~~w~Iki mirties: %d", string, secs );
    }
    if ( pInfo[ playerid ][ pJailTime ] > 0 )
    {
        new hours,
            mins,
            secs;

        ShowPlayerInfoText( playerid );
        divmod(pInfo[playerid][pJailTime], 3600, hours, mins );
        divmod(mins, 60, mins, secs );
        format(string, 256, "%s~n~~r~Sedeti liko: ~w~", string );
        if ( hours > 0 )
            format( string, 256, "%s%d:%02d:%02d", string, hours, mins, secs );
        else if ( mins > 0 )
            format( string, 256, "%s%d:%02d", string, mins, secs );
        else
            format( string, 256, "%s%d", string, secs );
    }
    if(GetPlayerTaxiTripPrice(playerid))
    {
        // Jei keleivis
        if(GetPlayerTaxiDriver(playerid) != INVALID_PLAYER_ID)
        {
            format(string, sizeof(string),"%s~n~~g~Taksometras: $%d", string, GetPlayerTaxiTripPrice(playerid));
            ShowPlayerInfoText( playerid );
        }
    }
    // Jei vairuotojas
    else if(IsPlayerTaxiDriver(playerid))
    {
        new count = 1;
        strcat(string, "~n~~b~___Taksometras___");
        foreach(Player, j)
        {
            if(GetPlayerTaxiDriver(j) == playerid)
                format(string, sizeof(string), "%s~n~~g~Keleivis #%d: $%d", string, count++, GetPlayerTaxiTripPrice(j));
        }
    }
    if( !strlen( string ) ) HidePlayerInfoText( playerid );
    else 
        PlayerTextDrawSetString( playerid, Greitis[ playerid ], string );
    return 1;
}
/*
CMD:goaway(playerid)
{
    CargoShipDeparture();
    return 1;
}

CMD:comeback(playerid)
{
    CargoShipReturn();
    return 1;
}


CMD:status(playerid)
{
    new string[64];
    switch(ShipInfo[ Status ])
    {
        case Moving: string = "Iðplaukia";
        case Docked: string = "Vietoj, uoste.";
        case Arriving: string = "Atplauki/Parkuojasi";
    }
    format(string, sizeof(string),"Statusas laivo:%s",string);
    SendClientMessage(playerid, -1, string);
    return 1;
}

CMD:ataik(playerid)
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x,y,z);
    MoveCargoShipToPoint(x,y,z);
    return 1;
}
*/

CMD:shipstatus(playerid)
{
    if(!pInfo[ playerid ][ pAdmin ])
        return 0;

    new string[64];
    switch(ShipInfo[ Status ])
    {
        case Moving: string = "Iðplaukia";
        case Docked: string = "Uoste";
        case Arriving: string = "Plaukia á uostà";
    }
    format(string, sizeof(string),"Laivo statusas: %s", string);
    SendClientMessage(playerid, COLOR_NEWS, string);
    return 1;
}

FUNKCIJA:CargoShipDeparture()
{
    #if defined DEBUG
        print("[debug] CargoShipDeparture()");
    #endif
	// Timeris paleistas viena karta. Paleidzia kita timeri: laivo isplaukimas.
	// Po to kai laivas isplaukia, vel paleidziamas sitas timeris. 
	SetTimer("CargoShipReturn", CARGOSHIP_MOVING_INTERVAL, false);
	ShipInfo[ Status ] = Moving;
	ShipInfo[ LastDepartureTimestamp ] = gettime();

    MoveCargoShipToPoint(2822.5435, -3951.1589, 29.2656);
    return 1;
}

FUNKCIJA:CargoShipReturn()
{
    #if defined DEBUG
        print("[debug] CargoShipReturn()");
    #endif
	// Timeris pradeda laivo objektø graþinimà á uostà
    // Kai objektai baigs judëti, laivas vël priims krovinius.
	SetTimer("CargoShipDeparture", CARGOSHIP_DOCKED_INTERVAL, false);
	
    ShipInfo[ Status ] = Arriving;

    MoveCargoShipToPoint(.ToSpawn = true);
    return 1;
}

stock MoveCargoShipToPoint(Float:x = 0.0, Float:y = 0.0, Float:z = 0.0, ToSpawn = false)
{
    if(ToSpawn)
    {
        for(new i = 0; i < sizeof(CargoShipObjectPositions); i++)
            MoveDynamicObject(ShipInfo[ ObjectIDs ][ i ], 
                CargoShipObjectPositions[ i ][ PosX ], 
                CargoShipObjectPositions[ i ][ PosY ], 
                CargoShipObjectPositions[ i ][ PosZ ],
                10.0,
                CargoShipObjectPositions[ i ][ RotX ],
                CargoShipObjectPositions[ i ][ RotY ],
                CargoShipObjectPositions[ i ][ RotZ ]);
    }
    else 
    {
        new middle = sizeof(CargoShipObjectPositions) / 2,
            Float:diffX,
            Float:diffY,
            Float:diffZ;
        for(new i = 0; i < sizeof(CargoShipObjectPositions); i++)
        {
            diffX = CargoShipObjectPositions[ middle ][ PosX ] - CargoShipObjectPositions[ i ][ PosX ];
            diffY = CargoShipObjectPositions[ middle ][ PosY ] - CargoShipObjectPositions[ i ][ PosY ];
            diffZ = CargoShipObjectPositions[ middle ][ PosZ ] - CargoShipObjectPositions[ i ][ PosZ ];


            MoveDynamicObject(ShipInfo[ ObjectIDs ][ i ], x - diffX, y - diffY, z - diffZ, 10.0, 
                CargoShipObjectPositions[ i ][ RotX ],
                CargoShipObjectPositions[ i ][ RotY ],
                CargoShipObjectPositions[ i ][ RotZ ]);

        }
    }
}

public OnDynamicObjectMoved(objectid)
{
    if(ShipInfo[ Status ] == Arriving)
    {
        for(new i = 0; i < sizeof(CargoShipObjectPositions); i++)
        {
            if(objectid != ShipInfo[ ObjectIDs ][ i ])
                continue;

            ShipInfo[ Status ] = Docked;
            ShipInfo[ LastArrivalTimestamp ] = gettime();
            return 1;
        }
    }
    return 0;
}


stock IsPlayerInRangeOfPlayer(playerid, playerid2, Float:distance)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid2, x, y, z);
    return IsPlayerInRangeOfPoint(playerid, distance, x, y, z);
}
stock IsPlayerInRangeOfCargoShip(playerid, Float:distance)
	return IsPlayerInRangeOfPoint(playerid, distance, SHIP_POS_X, SHIP_POS_Y, SHIP_POS_Z);

stock GetShipCargoPrice(cargoid)
{
    new sum, count, lowestSellPrice = -1;
    foreach(CommodityIterator, i)
        if(Commodities[ i ][ CargoId ] == cargoid)
        {
            if(Commodities[ i ][ SellBuyStatus ] == Buying)
            {
                sum += Commodities[ i ][ Price ];
                count++;
            }
            // Jei parduoda ta preke, norim susirast min pardavimo kaina
            else 
                if(lowestSellPrice == -1 || Commodities[ i ][ Price ] < lowestSellPrice)
                    lowestSellPrice = Commodities[ i ][ Price ];
        }

    // Jei niekas neperka tos prekes(for some reason)... naudosim parduodamas prekes :(
    if(!count)
    {
        foreach(CommodityIterator, i)
        if(Commodities[ i ][ CargoId ] == cargoid && Commodities[ i ][ SellBuyStatus ] == Selling)
        {
            sum += Commodities[ i ][ Price ];
            count++;
        }
        if(!count)
            return 0;
        new average = floatround(sum / count);
        return average + (average / 100 * SHIP_BUY_PRICE_MARGIN);
    }

    new average = floatround(sum / count);
    new price  = average - (average / 100 * SHIP_BUY_PRICE_MARGIN);
    // Jei gavome kaina kuri maþesnë uþ maþiausià pardavimo kainà, keièiam jà á maþiausià pardavimo kainà
    // Tai darom kad þaidëjai neprarastø pinigø. idiots.
    if(price < lowestSellPrice)
        price = lowestSellPrice;
    return price;
}


FUNKCIJA:IndustryUpdate()
{
	new ticks = GetTickCount();
	new soldCommodityIndex = -1, // Indeksas prekes kuria industrija parduoda. I JA taps visi jos turimi resursai.
        soldCommodityProduction, // Kiek pagaminama prekiø ið ðio resurso.
		//madeamount, // Kiek pagamino ta prake nauju prekiu.
		limit;
        //consumption; // Kiekis kuri sunaudos pagaminti antrini daikta
	foreach(IndustryIterator, i)
	{
		// Jei ji nieko neperka. Kitaip tariant jeigu pirmas sektorius
		if(!GetIndustryBoughtCommodityCount(i))
		{
            printf("Industry name:%s| doesnt buy anything", Industries[i][Name]);
			foreach(CommodityIterator, j)
				if(Commodities[ j ][ IndustryId ] == Industries[ i ][ Id ]
					&& !Commodities[ j ][ IsBusinessCommodity ]
					&& Commodities[ j ][ SellBuyStatus ] == Selling)
				{
					limit = GetCargoLimit(Commodities[ j ][ CargoId ]);
					Commodities[ j ][CurrentStock ] += GetCargoProduction(Commodities[ j ][ CargoId ]);

					if(Commodities[ j ][ CurrentStock ] > limit)
						Commodities[ j ][ CurrentStock ] = limit;
				}
		}
        // Jei nieko neparduoda, tiesiog suvalgo resursus.
        if(!GetIndustrySoldCommodityCount(i))
        {
            printf("Industry name:%s| doesnt sell anything", Industries[i][Name]);
            foreach(CommodityIterator, j)
                if(Commodities[ j ][ IndustryId ] == Industries[ i ][ Id ]
                    && !Commodities[ j ][ IsBusinessCommodity ]
                    && Commodities[ j ][ SellBuyStatus ] == Buying)
                {
                    Commodities[ j ][ CurrentStock ] -= GetCargoConsumption(Commodities[ j ][ CargoId ]);
                    if(Commodities[ j ][ CurrentStock ] < 0)
                        Commodities[ j ][ CurrentStock ] = 0;
                }
        }
        else 
        {
            // Nuo èia kodas baisu, todël niekam neleidþiu skaityt '_'

            // Pereinam per visas prekes.
            // Susirandom TOS industrijos PARDUODAMAS prekes. Jas gaminsim.
            foreach(CommodityIterator, j)
            if(Commodities[ j ][ IndustryId ] == Industries[ i ][ Id ]
            && !Commodities[ j ][ IsBusinessCommodity ]
            && Commodities[ j ][ SellBuyStatus ] == Selling)
            {
                soldCommodityIndex = j;
                soldCommodityProduction = GetCargoProduction(Commodities[ j ][ CargoId ]);
                limit = GetCargoLimit(Commodities[ j ][ CargoId ]);

                // Iðvis. Jeigu pasiektas limitas, nieko èia nereikia daryt.
                if(Commodities[ soldCommodityIndex ] [ CurrentStock ] >= limit)
                    break;

                enum bought_commodity_info {
                    index, 
                    Consumption,
                    canBeMade
                };
                new BoughtCommodities[ MAX_TRUCKER_CARGO ][ bought_commodity_info ], boughtCommodityCount = 0, willBeMadeAmount = -1;
                foreach(CommodityIterator, k)
                    if(Commodities[ k ][ IndustryId ] == Industries[ i ][ Id ]
                        && !Commodities[ k ][ IsBusinessCommodity ]
                        && Commodities[ k ][ SellBuyStatus ] == Buying)
                    {
                        BoughtCommodities[ boughtCommodityCount ][ index ] = k;
                        BoughtCommodities[ boughtCommodityCount ][ Consumption] = GetCargoConsumption(Commodities[ k ][ CargoId ]);
                        BoughtCommodities[ boughtCommodityCount ][ canBeMade] = Commodities[ k ][ CurrentStock ] / BoughtCommodities[ boughtCommodityCount ][ Consumption];
                        boughtCommodityCount++;
                    }

                for(new k = 0; k < boughtCommodityCount; k++)
                {
                    if(BoughtCommodities[ k ][ canBeMade ] >= 0 && (BoughtCommodities[ k ][ canBeMade ] < willBeMadeAmount || willBeMadeAmount == -1))
                        willBeMadeAmount = BoughtCommodities[ k ][ canBeMade ];
                }
                // Tai reiðkia kad neuþtenka produktø pagaminti bent vienam vienetui :(
                if(willBeMadeAmount <= 0)
                    break;

                // Jei nori gamint daugiau nei telpa.
                if(willBeMadeAmount * soldCommodityProduction > limit)
                {
                    willBeMadeAmount = (limit - Commodities[ soldCommodityIndex ][ CurrentStock ]) / soldCommodityProduction;
                    willBeMadeAmount++; // Nes kitaip gali neuþsipildyt.
                    Industries[ i ][ IsBuyingCargo ] = false;
                }
                // Jei jau nebepagamina iki full limito, vël gali pirkti.
                else if(willBeMadeAmount * soldCommodityProduction < limit && !Industries[ i ][ IsBuyingCargo ])
                    Industries[ i ][ IsBuyingCargo ] = true;

                Commodities[ soldCommodityIndex ][ CurrentStock ] += willBeMadeAmount * soldCommodityProduction;
                if(Commodities[ soldCommodityIndex ][ CurrentStock ] > limit)
                    Commodities[ soldCommodityIndex ][ CurrentStock ] = limit;

                for(new k = 0; k < boughtCommodityCount; k++)
                    Commodities[ BoughtCommodities[ k ][ index ] ][ CurrentStock ] -= willBeMadeAmount * BoughtCommodities[ k ][ Consumption ];

                



/*
                if(CanIndustryProduceCargo(i, Commodities[ soldCommodityIndex ][ CargoId ]))            
                {    
                    foreach(CommodityIterator, k)
                    {
                        if(Commodities[ k ][ IndustryId] == Industries[  i ][ Id ] 
                            && Commodities[ k ][ SellBuyStatus ] == Buying
                            && !Commodities[ k ][ IsBusinessCommodity ])
                        {
                            Commodities[ i ][ CurrentStock ] -= GetCargoConsumption(Commodities[ i ][ CargoId ]);
                        }
                    }
                    Commodities[ soldCommodityIndex ][ ]
                }
                */
            }
        }
        /*
		else 
		{
            // Pereinam per visas prekes.
            // Susirandom TOS industrijos PARDUODAMAS prekes. Jas gaminsim.
			foreach(CommodityIterator, j)
			if(Commodities[ j ][ IndustryId ] == Industries[ i ][ Id ]
			&& !Commodities[ j ][ IsBusinessCommodity ]
			&& Commodities[ j ][ SellBuyStatus ] == Selling)
			{
				soldCommodityIndex = j;
                soldCommodityProduction = GetCargoProduction(Commodities[ j ][ CargoId ]);
                limit = GetCargoLimit(Commodities[ j ][ CargoId ]);

                // Iðvis. Jeigu pasiektas limitas, nieko èia nereikia daryt.
                if(Commodities[ soldCommodityIndex ] [ CurrentStock ] >= limit)
                    break;

                // Jop, antras loopas :/
                foreach(CommodityIterator, k)
                if(Commodities[ k ][ IndustryId ] == Industries[ i ][ Id ]
                    && !Commodities[ k ][ IsBusinessCommodity ]
                    && Commodities[ k ][ SellBuyStatus ] == Buying
                    && Commodities[ k ][ CurrentStock ] >= (consumption = GetCargoConsumption(Commodities[ k ][ CargoId ]))) // Jei yra pakankmai tos prekes 
                {

                    // Pridedam parduodamos prekes, atimam sunaudotus resursus.
                    madeamount = Commodities[ k ][ CurrentStock ] / consumption;
                    

                    Commodities[ soldCommodityIndex ][ CurrentStock ] += madeamount * soldCommodityProduction;

                    // Jei virsijo limita reikia sumazint iki limito ir sumazint gaminama kieki.
                    if(Commodities[ soldCommodityIndex ][ CurrentStock ] > limit)
                    {
                        madeamount = Commodities[ soldCommodityIndex ][ CurrentStock ] - limit;
                        Commodities[ soldCommodityIndex ][ CurrentStock ] = limit;
                    }
                    Commodities[ k ][ CurrentStock ] -= madeamount / consumption;
                    if(Commodities[ soldCommodityIndex ] [ CurrentStock ] >= limit)
                        break;
                }
			}
		}
        */
		
		UpdateIndustryInfo(i);// O sita funkcija dar ir trecia loop'a turi :/
		SaveIndustryCommodities(i); // Jei ilgai uztrunka, galima sita eilute uzkomentuot. i think
	}
	printf("IndustryUpdate() uztruko %d MS", GetTickCount() - ticks);
}


FUNKCIJA:MinTime()
{
    new Hour,
        Min,
        Sec,
        string[ 256 ];
    gettime( Hour, Min, Sec );

    foreach(Player,i)
    {
        if ( PlayerOn[ i ] == false ) continue;

        CheckIfAFKing( i );

        pInfo[ i ][ pPayDayHad ] ++;

        if( pInfo[ i ][ pTester ] > 0 && GetPVarInt( i, "TESTER_DUTY" ) == 1 )
        {
            format(string, sizeof(string), "UPDATE players SET pDutyT = pDutyT+1 WHERE id = %d", pInfo[ i ][ pMySQLID ]);
            mysql_pquery(DbHandle,  string );
        }
        if( pInfo[ i ][ pAdmin ] > 0 && AdminDuty[i] == true )
        {
            format(string, sizeof(string), "UPDATE players SET aDutyTime = aDutyTime+1 WHERE id = %d", pInfo[ i ][ pMySQLID ]);
            mysql_pquery(DbHandle,  string );
        }

        if( GetPVarInt( i, "AddictionTime" ) > 0 )
        {
            if( GetPVarInt( i, "AddictionTime" ) == 1 )
                KillTimer( DrugTimer[ i ] );
            SetPVarInt( i, "AddictionTime", GetPVarInt( i, "AddictionTime" )-1 );
        }
        
        if( GetPlayerState(i) == 2 && VehicleHasEngine( GetVehicleModel( GetPlayerVehicleID ( i ) ) ) && Engine[GetPlayerVehicleID ( i )] == true )
            SyncFuel( GetPlayerVehicleID ( i ) );
        
        
        new Float:HP;
        GetPlayerHealth( i, HP );

        // Jei nori valgyti jau labai, pradeda silpti jegos
        if(pInfo[ i ][ pHunger ] >= 10 && HP - pInfo[ i ][ pHunger ] / 10.0 > 2.0)
            SetPlayerHealth(i, HP - pInfo[ i ][ pHunger ] / 10.0);

        // Persigalgius svaigsta galva
        if(pInfo[ i ][ pHunger ] <= -5)
            SetPlayerDrunkLevel(i, GetPlayerDrunkLevel(i)+900);

        if( MobilePhone[ i ] != INVALID_PLAYER_ID && GetPVarInt( i, "CallOwner" ) )
        {
            if( pInfo[ i ][ pBank ] >= 10 )
            {
                if( pInfo[ i ][ pBank ] == 10)
                    SendClientMessage( i, COLOR_LIGHTRED, "Jûsø sàskaita beveik tuðèia, jums liko 30 sekundþiø.");
                pInfo[ i ][ pBank ] -= 10;
            }
            else
            {
                if (MobilePhone[i] != INVALID_PLAYER_ID)
                {
                    if( MobilePhone[i] > MAX_PLAYERS )
                    {
                        SetPlayerSpecialAction( i, SPECIAL_ACTION_STOPUSECELLPHONE);
                        RemovePlayerAttachedObject( i, 3 );
                        MobilePhone[ i ] = INVALID_PLAYER_ID;
                        SetPVarInt( i, "CallOwner", false );
                        RingTone   [ i ] = 0;
                        if ( NearPhone( i ) )
                            TogglePlayerControllable( i, true );
                    }
                    /*
                    else
                    {
                        SetPVarInt( i, "CallOwner", false );
                        SetPVarInt( MobilePhone[i], "CallOwner", false );
                        if (MobilePhone[MobilePhone[i]] == i)
                        {
                            SendClientMessage(MobilePhone[i], GRAD, "Ryðys nutrûko!" );
                            MobilePhone[MobilePhone[i]] = INVALID_PLAYER_ID;
                        }
                        RingTone[MobilePhone[i]] = 0;
                        MobilePhone[i] = INVALID_PLAYER_ID;
                        RingTone[i] = 0;
                    }
                    */
                }
            }
        }
    }

    if ( Hour > OldHour || Hour == 0 && OldHour == 23 )
    {
        printf("Serverio PayDay Valanda: %d Sena Valanda: %d ", Hour, OldHour);

        foreach(Player,playerid)
        {
            PayDay(playerid);
        }
        /*if ( Hour == 20 )
            Loterry( );*/

        OldHour = Hour;
        SetWorldTime( Hour );
        SaveMisc();
        SaveFactions(0);
        Mats += 50; // Mats per valanda
        UpdateJacker( 0, random( 2 ) );
        UpdateJacker( 1, random( 2 ) );
        UpdateJacker( 2, random( 2 ) );

//        Produkcija( );

        for(new w = 0; w < sizeof DrugMake; w++)
        {
            if( DrugMake[ w ][ dLaikas ] > 0 && !DrugMake[ w ][ dMade ])
            {
                DrugMake[ w ][ dLaikas ] -= 1;
                if( DrugMake[ w ][ dLaikas ] < 1 )
                {
                    DrugMake[ w ][ dLaikas ] = 0;
                    DrugMake[ w ][ dMade ] = true;
                }
            }
        }
        return 1;
    }
    return 1;
}
/*stock Loterry( )
{
    new number = random( 19 ) + 1,
        slot,
        Winners,
        string[ 126 ],
        Taken;
    foreach(Player,playerid)
    {
        slot = PlayerHasItemInInvEx( playerid, ITEM_TICKET );
        if ( slot != INVENTORY_SLOTS )
        {
            if ( InvInfo[ playerid ][ slot ][ iAmmount] == number )
            {
                new winprice = ( random( 100 ) + random( 100 ) ) + 4500;
                format( string, 126, "LOTERIJA: Sveikiname! Jûs laimëjote loterijoje, ir gavote $%d ", winprice );
                SendClientMessage( playerid, COLOR_GREEN, string );
                GivePlayerMoney( playerid, winprice );
                Winners ++;
                Taken += winprice;
                ClearInvSlot( playerid, slot );
            }
            else if ( ( InvInfo[ playerid ][ slot ][ iAmmount] + 1) == number )
            {
                new winprice = random( 100 ) + 1800;
                format( string, 126, "LOTERIJA: Sveikiname! Jûs laimëjote loterijoje, ir gavote $%d ", winprice );
                SendClientMessage( playerid, COLOR_GREEN, string );
                GivePlayerMoney( playerid, winprice );
                Winners ++;
                Taken += winprice;
                ClearInvSlot( playerid, slot );
            }
            else if ( ( InvInfo[ playerid ][ slot ][ iAmmount] - 1) == number )
            {
                new winprice = random( 100 ) + 1800;
                format( string, 126, "LOTERIJA: Sveikiname! Jûs laimëjote loterijoje, ir gavote $%d ", winprice );
                SendClientMessage( playerid, COLOR_GREEN, string );
                GivePlayerMoney( playerid, winprice );
                Winners ++;
                Taken += winprice;
                ClearInvSlot( playerid, slot );
            }
        }
    }
    SendClientMessageToAll( COLOR_GREEN2, "_________ Loterijos naujienos _________ ");
    format                ( string, 126, "áiandienos laimingas skaiøius: %d", number );
    SendClientMessageToAll( COLOR_WHITE, string );
    format                ( string, 126, "áiandien turime laimëtojø: %d ", Winners );
    SendClientMessageToAll( COLOR_WHITE, string );
    format                ( string, 126, "áiandien iðdalinta loterijoje: $%d", Taken );
    SendClientMessageToAll( COLOR_WHITE, string );
    return 1;
}*/


stock PayDay( playerid )
{
        if ( PlayerOn[ playerid ] == false ) return 1;

        new Bank = pInfo[ playerid ][ pBank ],
            //fullPaycheck = pInfo[ playerid ][ pTotalPaycheck ],
            //leftPaycheck = pInfo[ playerid ][ pTotalPaycheck ],
            housekey,
            payforhouses,
            payforbiz,
            payforcar,
            string[ 126 ],
            rows;

        // Þaidëjas vis labiau ir labiau nori valgyti..
        pInfo[ playerid ][ pHunger ] += random(3);

        foreach(Houses,h)
        {
            if ( pInfo[ playerid ][ pHouseKey ] == hInfo[ h ][ hID ] )
                housekey = h;
            if ( hInfo[h][hOwner] == pInfo[ playerid ][ pMySQLID ] )
                payforhouses += housetax;
        }
        for(new i = 0; i < GetBusinessCount(); i++)
        {
            if(IsPlayerBusinessOwner(playerid, i))
                payforbiz += biztax;
        }

        format(string, sizeof(string), "SELECT cModel FROM `vehicles` WHERE `cOwner` = '%d'", pInfo[playerid][pMySQLID] );
        new Cache:result = mysql_query(DbHandle,  string );
        rows = cache_get_row_count();
        for(new i = 0; i < rows; i++)
        {
            if(IsVehicleTaxed(cache_get_field_content_int(i, "cModel")))
                payforcar += cartax;
        }
        cache_delete(result);

        if( pInfo[ playerid ][ pHouseKey ] > 0 )
        {
            if ( hInfo[housekey][hOwner] != pInfo[ playerid ][ pMySQLID ] )// Prie namo savininko pridedam nuoma
            {
                if( Bank < hInfo[ housekey ][ hRentPrice ] )
                {
                    SendClientMessage( playerid, COLOR_WHITE, "Jûs buvote iðkeldintas ið nuomojamo namo, nes nesumokëjote nuomos." );
                    pInfo[ playerid ][ pHouseKey ] = 0;
                    pInfo[ playerid ][ pSpawn ] = DefaultSpawn;
                }
                else if ( Bank >= hInfo[ housekey ][ hRentPrice ] )
                {
                    hInfo[ housekey ][ hBank ] += hInfo[ housekey ][ hRentPrice ];
                    Bank -= hInfo[ housekey ][ hRentPrice ];
                    Biudzetas += hInfo[ housekey ][ hRentPrice ];
                }
            }
        }
        
        new
            rand = random(3);
        if( ( pInfo[ playerid ][ pHeroineAddict ]-rand ) >= 3 )
            pInfo[ playerid ][ pHeroineAddict ] -= rand;
        if( ( pInfo[ playerid ][ pAmfaAddict ]-rand ) >= 3 )
            pInfo[ playerid ][ pAmfaAddict ] -= rand;
        if( ( pInfo[ playerid ][ pCocaineAddict ]-rand ) >= 3 )
            pInfo[ playerid ][ pCocaineAddict ] -= rand;
        if( ( pInfo[ playerid ][ pMetaAmfaineAddict ]-rand ) >= 3 )
            pInfo[ playerid ][ pMetaAmfaineAddict ] -= rand;
        if( ( pInfo[ playerid ][ pExtazyAddict ]-rand ) >= 5 )
            pInfo[ playerid ][ pExtazyAddict ] -= rand;
        if( ( pInfo[ playerid ][ pPCPAddict ]-rand ) >= 3 )
            pInfo[ playerid ][ pPCPAddict ] -= rand;
        if( ( pInfo[ playerid ][ pCrackAddict ]-rand ) >= 4 )
            pInfo[ playerid ][ pCrackAddict ] -= rand;
        if( ( pInfo[ playerid ][ pOpiumAddict ]-rand ) >= 2 )
            pInfo[ playerid ][ pOpiumAddict ] -= rand;
            
        if ( pInfo[ playerid ][ pPayDayHad ] >= 20) // 20 Min Online Butinas
        {
            new pfaction = PlayerFaction( playerid ),
                rank = pInfo[ playerid ][ pRank ],
                ForFact = 0,
                ForGov = 0,
                alga = 0,
                palukana = floatround( pInfo[ playerid ][ pSavings ]/200 );

            if( pfaction > 0 )
            {
                pInfo[ playerid ][ pPayCheck ] += fInfo[ pfaction ][ fPayDay ][ rank ];
                alga = pInfo[ playerid ][ pPayCheck ];
                pInfo[ playerid ][ pJob ] = JOB_NONE;
                ForFact = floatround(alga/100*5);
                ForGov = ForFact;
                fInfo[pfaction][fBank] += ForFact;
            }

            if( pInfo[ playerid ][ pJob ] > JOB_NONE )
            {
				pInfo[ playerid ][ pJobHours ]++;
                pInfo[ playerid ][ pPayCheck ] += pJobs[ pInfo[ playerid ][ pJob ] ][ PayCheck ];
                pInfo[ playerid ][ pPayCheck ] += pInfo[ playerid ][ pJobLevel ] * 20;
                if( pInfo[ playerid ][ pPayCheck ] >= pJobs[ pInfo[ playerid ][ pJob ] ][ MaxPayday ] )
                    pInfo[ playerid ][ pPayCheck ] = pJobs[ pInfo[ playerid ][ pJob ] ][ MaxPayday ];
                alga = pInfo[ playerid ][ pPayCheck ];
                ForGov = floatround(alga/100*5);
            }

            pInfo[ playerid ][ pSavings ] += palukana;
            Biudzetas += ForGov;
            Bank -= payforhouses;
            Bank -= payforbiz;
            Bank -= payforcar;
            PlayerPlayMusic( playerid );
            SendClientMessage(playerid, COLOR_GREEN, "|______________ Los Santos banko ataskaita______________ |");
            format(string, sizeof(string), "| Gautas atlyginimas: %d$ | Papildomi mokesèiai: %d$ |",pInfo[playerid][pPayCheck],ForGov); SendClientMessage(playerid, COLOR_WHITE, string);
            if(pfaction > 0)
            {
                format           ( string, sizeof(string), "| Frakcijos nustatyti mokesèiai: %d$ |",ForFact);
                SendClientMessage( playerid, COLOR_FADE1, string );
            }
            format(string, sizeof(string), "| Buvæs banko balansas: %d$ |",pInfo[playerid][pBank]); SendClientMessage(playerid, COLOR_WHITE, string);
            pInfo[playerid][pPayCheck] -= ( ForGov + ForFact );
            format(string, sizeof(string), "| Palûkanos: %d$ |",palukana); SendClientMessage(playerid, COLOR_FADE1, string);
            SendClientMessage(playerid, COLOR_FADE1, "| Palûkanø procentas: 0.5% |");
            format(string, sizeof(string), "| Galutinë gauta suma: %d$ |",pInfo[playerid][pPayCheck]); SendClientMessage(playerid, COLOR_WHITE, string);
            SendClientMessage(playerid,COLOR_GREEN, "|--------------------------------------------------------------------------|");
            format(string, sizeof(string), "| Dabartinis banko balansas: %d$ |",Bank);
            SendClientMessage(playerid, COLOR_FADE1, string);
            pInfo[ playerid ][ pTotalPaycheck ] += pInfo[playerid][pPayCheck];
            format(string, sizeof(string), "| Sukauptas atlyginimas: %d$", pInfo[ playerid ][ pTotalPaycheck ]);
            SendClientMessage(playerid, COLOR_FADE1, string);

            if ( hInfo[ housekey ][ hRentPrice ] > 0 && hInfo[ housekey ][ hOwner ] != pInfo[ playerid ][ pMySQLID ])
            {
                format(string, sizeof(string), "| Mokestis uþ nuomà: %d$ |",hInfo[ housekey ][ hRentPrice ]);
                SendClientMessage(playerid, COLOR_WHITE, string);
            }
            if ( payforhouses > 0 )
            {
                format(string, 126, "| Mokestis uþ nekilnojama turtà: %d$ |", payforhouses);
                SendClientMessage(playerid, COLOR_WHITE, string);
                Biudzetas += payforhouses;
            }
            if ( payforbiz > 0 )
            {
                format(string, 126, "| Verslo mokestis: %d$ |", payforbiz);
                SendClientMessage(playerid, COLOR_WHITE, string);
                Biudzetas += payforbiz;
            }
            if ( payforcar > 0 )
            {
                format(string, 126, "| Tr. Priemoniø mokestis: %d$ |", payforcar);
                SendClientMessage(playerid, COLOR_WHITE, string);
                Biudzetas += payforcar;
            }
            GameTextForPlayer(playerid, "~y~Mokesciai~n~~g~Alga", 5000, 1);

            pInfo[ playerid ][ pBank      ] = Bank;
            pInfo[ playerid ][ pOnTime    ] ++;
            pInfo[ playerid ][ pExp ] ++;

            if ( ( pInfo[ playerid ][ pLevel ] + 1 ) * 4 <= pInfo[ playerid ][ pExp ] )
            {
                pInfo[ playerid ][ pLevel ] ++;
                pInfo[ playerid ][ pExp   ] = 0;
                SetPlayerScore ( playerid, pInfo[ playerid ][ pLevel ] );
                ShowInfoText   ( playerid, "~w~ Sveikiname, kàtik veikëjo lygis pakilo (/levelup).", 4000);
                PlayerPlaySound( playerid, 1057, 0.0, 0.0, 0.0 );
                pInfo[ playerid ][ pPoints ]++;
            }
            PayLog( pInfo[ playerid ][ pMySQLID ], 9, -1, pInfo[playerid][pPayCheck] );
            pInfo[ playerid ][ pPayDayHad ] = 0;
            pInfo[ playerid ][ pPayCheck  ] = 0;

            if ( pInfo[ playerid ][ pJobContr  ] > 0 )
                pInfo[ playerid ][ pJobContr  ] --;

            if(IsItemInPlayerInventory(playerid, ITEM_VAISTAI))
            {
                GivePlayerItem(playerid, ITEM_VAISTAI, -1);
            }
            if ( pInfo[ playerid ][ pLiga ] == 0 )
                Susirgti( playerid );
        }
        else
            return SendClientMessage(playerid, COLOR_LIGHTRED,"Apgailestaujame, bet atlyginimo uþ ðià valandà negausite, kadangi Jûs nebuvote prisijungæs pakankamai.");
        return 1;
}
/*stock ForcePayDay( playerid )
{
        new Bank = pInfo[ playerid ][ pBank ],
            housekey,
            payforhouses,
            payforbiz,
            payforcars,
            name[ 24 ];
        GetPlayerName( playerid, name, 24 );
        foreach(Houses,h)
        {
            if ( pInfo[ playerid ][ pHouseKey ] == hInfo[ h ][ hID ] )
                housekey = h;
            if ( !strcmp( name, hInfo[ h ][ hOwner ], true ) )
                payforhouses += housetax;
        }
        foreach(Busines,b)
        {
            if ( !strcmp( name, bInfo[ b ][ bOwner ], true ) )
                payforbiz += biztax;
        }
        foreach(Vehicles,veh)
        {
        if ( pInfo[ playerid ][ pMySQLID ] == cInfo[ veh ][ cOwner ] )
        veh = payforcars;
        payforcars += cartax;
        }
        if( pInfo[ playerid ][ pHouseKey ] > 0 )
        {
            if ( strcmp( name, hInfo[ housekey ][ hOwner ], true ) )// Prei namo savininko pridedam nuoma
            {
                if( Bank < hInfo[ housekey ][ hRent ] )
                {
                    SendClientMessage( playerid, COLOR_WHITE, "Jûs buvote iðkeldintas ið nuomojamo namo, nes nesumokëjote nuomos." );
                    pInfo[ playerid ][ pHouseKey ] = 0;
                }
                else if ( Bank > hInfo[ housekey ][ hRent ] )
                {
                    hInfo[ housekey ][ hBank ] += hInfo[ housekey ][ hRent ];
                    Bank -= hInfo[ housekey ][ hRent ];
                    Bank -= 30;
                    Biudzetas += 30;
                }
            }
        }
        {
            new pfaction = PlayerFaction( playerid );

            if( pfaction < 8 && pInfo[ playerid ][ pJob ] > JOB_NONE && pfaction > 0)
                pInfo[ playerid ][ pJob ] = JOB_NONE;

            pInfo[ playerid ][ pPayCheck ] += pJobs[ pInfo[ playerid ][ pJob ] ][ PayCheck ];
            if ( pInfo[ playerid ][ pJob ] > 0 )
                pInfo[ playerid ][ pPayCheck ] += pInfo[ playerid ][ pJobLevel ] * 20;

            new rank = pInfo[ playerid ][ pRank ]; // To Not to bug server crash.
            if ( rank < 0 || rank > 9 )
                rank = 1;

            switch ( pfaction )
            {
                case 1,2,3:
                {
                    pInfo[ playerid ][ pPayCheck ] += fInfo[ pfaction ][ fPayDay ][ rank ];
                }
                case 4..15:
                {
                    pInfo[ playerid ][ pPayCheck ] += fInfo[ pfaction ][ fPayDay ][ rank ];
                }
            }

            if( pInfo[ playerid ][ pPayCheck ] >= pJobs[ pInfo[ playerid ][ pJob ] ][ MaxPayday ] )
                pInfo[ playerid ][ pPayCheck ] = pJobs[ pInfo[ playerid ][ pJob ] ][ MaxPayday ];

            new ForFact = 0,
                ForGov = floatround(pInfo[playerid][pPayCheck]/20),
                palukana = floatround( pInfo[ playerid ][ pSavings ]/200 );

            pInfo[ playerid ][ pSavings ] += palukana;
            if(pfaction > 0)
            {
                ForFact = floatround(pInfo[playerid][pPayCheck]/20);
                fInfo[pfaction][fBank] += ForFact;
            }
            Biudzetas += ForGov;
            Bank -= payforhouses;
            new string[126];
            PlayerPlayMusic( playerid );
            SendClientMessage(playerid, COLOR_GREEN, "|____ BANKO ATASKAITA ____|");
            format(string, 126, " Gauta alga: $%d Mokeðèiai valstybei: $%d",pInfo[playerid][pPayCheck],ForGov); SendClientMessage(playerid, COLOR_WHITE, string);
            if(pfaction > 0)
            {
                format           ( string, 126, " Mokeðèiai frakcijai: $%d",ForFact);
                SendClientMessage( playerid, COLOR_FADE1, string );
            }
            format(string, 126, " Balansas: $%d",pInfo[playerid][pBank]); SendClientMessage(playerid, COLOR_FADE1, string);
            pInfo[playerid][pPayCheck] = pInfo[playerid][pPayCheck] - ForGov - ForFact;
            format(string, 126, " Gautos palûkanos: $%d",palukana); SendClientMessage(playerid, COLOR_FADE1, string);
            SendClientMessage(playerid, COLOR_FADE1, " Palûkanø procentas: 0.5 % ");
            format(string, 126, " Galutinë gauta suma: $%d",pInfo[playerid][pPayCheck]); SendClientMessage(playerid, COLOR_FADE1, string);
            SendClientMessage(playerid,COLOR_GREEN, "|-----------------------------------|");
            Bank += pInfo[playerid][pPayCheck];
            format(string, 126, " Dabartinis banko balansas: $%d",Bank); SendClientMessage(playerid, COLOR_FADE1, string);
            if ( hInfo[ housekey ][ hRent ] > 0)
            {
                format(string, 126, " Nuomos mokestis: $%d",hInfo[ housekey ][ hRent ]+30);
                SendClientMessage(playerid, COLOR_FADE1, string);
            }
            if ( payforhouses > 0 )
            {
                format(string, 126, " Nekilnojamo turto mokestis: $%d", payforhouses);
                SendClientMessage(playerid, COLOR_FADE1, string);
                Biudzetas += payforhouses;
            }
            if ( payforbiz > 0 )
            {
                format(string, 126, " Verslo mokestis: $%d", payforbiz);
                SendClientMessage(playerid, COLOR_FADE1, string);
                Biudzetas += payforbiz;
            }
            if ( payforcars > 0 )
            {
                format(string, 126, " Tr. Priemoniø mokestis: $%d", payforcars);
                SendClientMessage(playerid, COLOR_FADE1, string);
                Biudzetas += payforcars;
            }
            GameTextForPlayer(playerid, "~y~Mokesciai~n~~g~Alga", 5000, 1);

            pInfo[ playerid ][ pBank      ] = Bank;
            pInfo[ playerid ][ pOnTime    ] ++;
            pInfo[ playerid ][ pExp ] ++;

            if ( ( pInfo[ playerid ][ pLevel ] + 1 ) * 4 <= pInfo[ playerid ][ pExp ] )
            {
                pInfo[ playerid ][ pLevel ] ++;
                pInfo[ playerid ][ pExp   ] = 0;
                SetPlayerScore ( playerid, pInfo[ playerid ][ pLevel ] );
                ShowInfoText   ( playerid, "~w~ Sveikiname Jums pakilo veikëjo lygis.", 4000);
                PlayerPlaySound( playerid, 1057, 0.0, 0.0, 0.0 );
            }
            PayLog( pInfo[ playerid ][ pMySQLID ], 9, -1, pInfo[playerid][pPayCheck] );
            pInfo[ playerid ][ pPayDayHad ] = 0;
            pInfo[ playerid ][ pPayCheck  ] = 0;

            if ( pInfo[ playerid ][ pJobContr  ] > 0 )
                pInfo[ playerid ][ pJobContr  ] --;

            if ( PlayerHasItemInInv( playerid, ITEM_VAISTAI ) )
            {
                InvInfo[ playerid ][ PlayerHasItemInInvEx( playerid, ITEM_VAISTAI ) ][ iAmmount ] -= 1;
                if ( InvInfo[ playerid ][ PlayerHasItemInInvEx( playerid, ITEM_VAISTAI ) ][ iAmmount ] == 0 )
                    ClearInvSlot( playerid, PlayerHasItemInInvEx( playerid, ITEM_VAISTAI ) );
            }
            if ( pInfo[ playerid ][ pLiga ] == 0 )
                Susirgti( playerid );
        }
        return 1;
}*/


stock PlayerPlayMusic( playerid )
{
    SetTimerEx( "StopMusic", 5000, false, "d", playerid );
    PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
    return 1;
}

FUNKCIJA:StopMusic( playerid )
    return PlayerPlaySound( playerid, 1069, 0.0, 0.0, 0.0);


FUNKCIJA:Sekunde()
{
    // Jei dingo ryðys su MySQL.
    // mysql_ping sugebëjo crash'inti serverá.
    // 2015.02.20.
    /*#if defined BEBRAS_HOME_MODE
    if(!mysql_ping())
    {
        OnSQLConnectionLost();
    }
    #endif
    */

    foreach(Player,i)
    {
        UpdateTaxiInformation(i);

        new string[ 256 ];



        if(PlayerOn[i] == false)
        {
            SetPVarInt( i, "LOGIN_TIME", GetPVarInt( i, "LOGIN_TIME" ) +1 );
            if ( GetPVarInt( i, "LOGIN_TIME" ) > 30 )
                Kick( i );
            continue;
        }

        new plstate = GetPVarInt( i, "PLAYER_STATE" ),
            IsAfk = GetPVarInt( i, "Is_AFK" );

        if ( ObjUpdate[ i ] )
        {
            Streamer_Update( i );
            ObjUpdate[ i ] = false;
        }
        
        if ( plstate == PLAYER_STATE_DRIVER )
        {
            new
                speed = ac_GetPlayerSpeed( i, true );

            if( speed > AC_MAX_SPEED && !IsAirVehicle( GetVehicleModel( GetPlayerVehicleID( i ) ) ) )
            {
                ac_SpeedWarns[ i ]++;

                if( ac_SpeedWarns[ i ] >= AC_MAX_CHECKS )
                    KickPlayer( "AC", i, "Buvo panaudotas Speed Hack" );
            }
            else
                ac_SpeedWarns[ i ] = 0;
        }
        
        if ( pInfo[ i ][ pLeftTime ] > 0 )
            pInfo[ i ][ pLeftTime ] --;

        if ( GetPVarInt( i, "Anti_Spam" ) > 0 )
            SetPVarInt( i, "Anti_Spam", GetPVarInt( i, "Anti_Spam" )-1 );

        if ( GetPVarInt( i, "BUNNY" ) == 1 )
            SetPVarInt( i, "BUNNY", 0 );

        new other = GetPVarInt( i, "BACKUP" );
        if ( IsPlayerConnected(other) )
        {
            new Float:POS[ 3 ];
            GetPlayerPos( other, POS[ 0 ], POS[ 1 ], POS[ 2 ] );
            DisablePlayerCheckpoint(i);
            Checkpoint[i] = CHECKPOINT_NONE;
            SetPlayerCheckPointEx( i, CHECKPOINT_BACKUP, POS[ 0 ], POS[ 1 ], POS[ 2 ], 5.0 );
        }

        if(Unfreeze[i] > 0)
        {
            Unfreeze[i] --;
            if(Unfreeze[i] == 0 && CheckUnfreeze(i))
                TogglePlayerControllable(i, true);
        }
        if ( Laikas[ i ] > 0 )
        {
            if( plstate != PLAYER_STATE_DRIVER )
                UpdatePlayerInfoText( i );

            Laikas[ i ] --;
            if ( Laikas[ i ] == 0)
                TimeEnd( i, LaikoTipas[ i ] );
        }
        if( pInfo[i][pJailTime] > 0 )
        {
            if ( pInfo[ i ][ pJail ] == 1 && IsAfk == 1 )
            {
                new airbrk = GetPVarInt( i, "AIRBRK" );
                if (!Data_IsPlayerInRangeOfCoords(i, 10.0, "ooc_jail"))
                {
                    SetPVarInt( i, "AIRBRK", airbrk + 1 );
                    if ( airbrk > 3 )
                        KickPlayer( "AC", i, "OOC jail AirBreak" );
                }
                else if ( airbrk > 0 )
                    SetPVarInt( i, "AIRBRK", airbrk - 1 );
                pInfo[ i ][ pJailTime ] --;
                UpdatePlayerInfoText( i );
            }
            else if ( pInfo[ i ][ pJail ] == 2 )
            {
                new airbrk = GetPVarInt( i, "AIRBRK" );
                if (!Data_IsPlayerInRangeOfCoords(i, 100.0, "ic_prison") && !PlayerToPoint( 100.0, i, 1772.46643,-1548.6113,9.913315) )
                {
                    SetPVarInt( i, "AIRBRK", airbrk + 1 );
                    if ( airbrk > 3 )
                        KickPlayer( "AC", i, "IC prison AirBreak" );
                }
                else if ( airbrk > 0 )
                    SetPVarInt( i, "AIRBRK", airbrk - 1 );
                pInfo[ i ][ pJailTime ] --;
                UpdatePlayerInfoText( i );
            }
            else if ( pInfo[ i ][ pJail ] == 3 )
            {
                new airbrk = GetPVarInt( i, "AIRBRK" );
                if (!Data_IsPlayerInRangeOfCoords(i, 10.0, "ic_custody"))
                {
                    SetPVarInt( i, "AIRBRK", airbrk + 1 );
                    if ( airbrk > 3 )
                        KickPlayer( "AC", i, "IC arrest AirBreak" );
                }
                else if ( airbrk > 0 )
                    SetPVarInt( i, "AIRBRK", airbrk - 1 );
                pInfo[ i ][ pJailTime ] --;
                UpdatePlayerInfoText( i );
            }
        }
        if(pInfo[i][pJailTime] == 0 && pInfo[i][pJail] > 0)
        {
            Data_SetPlayerLocation(i, "jail_discharge");
            pInfo[i][pWantedLevel] = 0;
            pInfo[i][pJailTime] = 0;
            pInfo[i][pJail] = 0;
            ShowInfoText(i, "~w~Jus esate paleidziamas is kalejimo ~g~Sekmes...", 5000);
            UpdatePlayerInfoText( i );
            SaveAccount( i );
        }
        if(BoxStart > 0)
        {
            BoxStart --;
            if(Boxing[i] == true)
            {
                format(string,56,"~w~Kova prasides uz %d sec.", BoxStart);
                GameTextForPlayer(i,string,1000,3);
                if(BoxStart == 0)
                {
                    foreach(Player,p2)
                    {
                        if ( Boxing[ p2 ] )
                        {
                            GameTextForPlayer( p2, "~w~KAUKITES!!!", 5000, 3);
                            TogglePlayerControllable( p2, true);
                        }
                    }
                }
            }
        }
        
        timeris[i]++;
        
        if( GetPlayerState(i) == 2 && Engine[GetPlayerVehicleID ( i )] == true && VehicleHasEngine( GetVehicleModel( GetPlayerVehicleID ( i ) ) ) && timeris[i] > 2 )
        {
            timeris[i] = 0;
            Meter[GetPlayerVehicleID ( i )] += floatround(floatdiv(GetVehicleSpeed2(GetPlayerVehicleID ( i )), 60.0));
            if(Meter[GetPlayerVehicleID ( i )] > 8)
            {
                Meter[GetPlayerVehicleID ( i )] = 0;
                Kils[GetPlayerVehicleID ( i )]++;

                if(Kils[GetPlayerVehicleID ( i )] > 2)
                {
                    Kils[ GetPlayerVehicleID ( i ) ] = 0;
                    cInfo[ GetPlayerVehicleID ( i ) ][ cKM ] += 1.0;
                }
            }
        }
        if(Mires[i] > 1)
        {
            UpdatePlayerInfoText(i);
            Mires[i] --;
            TogglePlayerControllable( i, false );
            
            if (GetPlayerState( i ) == PLAYER_STATE_ONFOOT)
                ApplyAnimation(i, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
            
            switch (Mires[i])
            {
                case 1:
                {
                    StopLoopingAnim( i, false );
                    SetPlayerHealth( i, 0 );
                }
            }
        }
        if(Ruko[i] > 0)
        {
            Ruko[i] --;
            new Float:HP;
            switch (Ruko[i])
            {
                case 0:
                {
                    cmd_ame(i, "numeta cigaretës nuorukà ant þemës.");
                    SetPlayerSpecialAction(i,SPECIAL_ACTION_NONE);
                    GetPlayerHealth(i,HP);
                    if( HP + 5 < 100 )
                        SetPlayerHealth(i,HP+5);
                }
                case 20,40,60,80,100,120,140,160:
                {
                    GetPlayerHealth(i,HP);
                    if(HP + 2 < 100)
                        SetPlayerHealth(i,HP+2);
                }
            }
        }
        if(RingTone[i] != 0)
        {
            if (RingTone[i] < 0)
                RingTone[i] = 0;
            if ( RingTone[i] == 10 || RingTone[i] == 7 || RingTone[i] == 4 || RingTone[i] == 1)
            {
                format(string, 49, "* Telefonas skamba (( %s ))",GetPlayerNameEx( i ));
                ProxDetector(20.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                new Float:POS[ 3 ];
                GetPlayerPos   ( i, POS[ 0 ], POS[ 1 ], POS[ 2 ] );
                PlayerPlaySound( i, 20600, POS[ 0 ], POS[ 1 ], POS[ 2 ] );
            }
            RingTone[i]--;
            if(RingTone[i] == 0)
            {
                foreach (Player, ii)
                {
                    if (PlayerOn[ii] == false) continue;
                    if (MobilePhone[ii] == i)
                    {
                        if ( NearPhone( ii ) )
                            TogglePlayerControllable( ii, true );
                        SetPlayerSpecialAction( ii, SPECIAL_ACTION_STOPUSECELLPHONE );
                        RemovePlayerAttachedObject( ii, 3 );
                        SendClientMessage(ii, GRAD, "Jis/ji nepakëlë telefono ragelio." );
                        MobilePhone[ii] = INVALID_PLAYER_ID;
                        SetPVarInt( ii, "CallOwner", INVALID_PLAYER_ID );
                        RingTone[ii] = 0;
                        break;
                    }
                }
            }
        }
        if ( GetPVarInt( i, "EATING" ) >= 1 )
        {
            SetPVarInt( i, "EATING", GetPVarInt( i, "EATING" )-1 );
            new Float:HP;
            GetPlayerHealth( i, HP );

            if( HP + 2 < 100 )
                SetPlayerHealth( i, HP +2 );
        }
        SetPVarInt( i, "Is_AFK", 0 );

        static fadeCount[ MAX_PLAYERS ];
        fadeCount[ i ]++;
        if(PlayerFading)
        {
            if((-3 >= pInfo[ i ][ pHunger ] >= -6 && fadeCount[ i ] % 60 == 0)
                || (-7 >= pInfo[ i ][ pHunger ] >= -10 && fadeCount[ i ] % 50 == 0)
                || (-11 >=pInfo[ i ][ pHunger ] >= -14 && fadeCount[ i ] % 40 == 0)
                || (-15 >=pInfo[ i ][ pHunger ] >= -18 && fadeCount[ i ] % 30 == 0)
                || (-21 >=pInfo[ i ][ pHunger ] >= -24 && fadeCount[ i ] % 20 == 0)
                || (-25 >=pInfo[ i ][ pHunger ] >= -28 && fadeCount[ i ] % 10 == 0)
                || (-29 >=pInfo[ i ][ pHunger ])
                )
                FadeColorForPlayer(i, 0, 0, 0, 0, 0, 0, 0, 255, 10, true);
        }
    }
    return 1;
}

FUNKCIJA:TazerTime( playerid )
return TogglePlayerControllable( playerid, 1 );

FUNKCIJA:CuffsTime(giveplayerid, playerid)
{
    new Float:Kor[4],IntVi[2];
    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(giveplayerid) == PLAYER_STATE_ONFOOT)
        PutPlayerInVehicle(giveplayerid,GetPlayerVehicleID(playerid),3);
    else if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
        GetPlayerPos(playerid,Kor[0],Kor[1],Kor[2]);
        SetPlayerPos(giveplayerid,Kor[0],Kor[1]+1,Kor[2]);
        IntVi[0] = GetPlayerInterior(playerid);
        SetPlayerInterior(giveplayerid,IntVi[0]);
        IntVi[1] = GetPlayerVirtualWorld(playerid);
        SetPlayerVirtualWorld(giveplayerid,IntVi[1]);
    }
    if(GetPVarInt(giveplayerid, "Drag"))
        SetTimerEx("CuffsTime", 1000, false, "ii",giveplayerid,playerid);
    return 1;
}

stock GetPlayerNameEx( playerid )
{
    new str[26];
    GetPlayerName(playerid,str,24);
    for(new i = 0; i < MAX_PLAYER_NAME; i++)
    {
        if (str[i] == '_') str[i] = ' ';
        if(pInfo[playerid][pMask] == 0) format( str, 26, "Kaukëtasis((%d))", pInfo[ playerid ][ pMySQLID ] );
    }
    return str;
}
stock strtok(const string[], &index)
{
    new length = strlen(string);
    while ((index < length) && (string[index] <= ' '))
    {
        index++;
    }
    new offset = index;
    new result[20];
    while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
    {
        result[index - offset] = string[index];
        index++;
    }
    result[index - offset] = EOS;
    return result;
}




stock GetName(playerid)
{
    new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid,name,MAX_PLAYER_NAME);
    return name;
}
stock strrest(const string[], index)
{
    new length = strlen(string),
        offset = index,
        result[256];
    while ((index < length) && ((index - offset) < (sizeof(result) - 1)) && (string[index] > '\r'))
    {
        result[index - offset] = string[index];
        index++;
    }
    result[index - offset] = EOS;
    return result;
}
stock SendOOC(color,string[])
{
    foreach(Player,playerid)
    {
        if(TogChat[playerid][0] == true){
            SendChatMessage(playerid, color, string);
        }
    }
    return 1;
}
stock SendNEWS(color,string[])
{
    foreach(Player,playerid)
    {
        if(TogChat[playerid][1] == true){
            SendChatMessage(playerid, color, string);
        }
    }
    return 1;
}
stock IsKeyJustDown(key, newkeys, oldkeys) { if((newkeys & key) && !(oldkeys & key)) return 1; return 0; }
stock SendChatMessage(playerid,color,text[])
{
    if(strlen(text) > 100)
    {
        new string[ 140 ],
//            message2[ 140 ],
            start = -1, 
            end = -1, 
            colorCount;

        // Suskaièiuojam kiek yra spalvos kodø, nes uþ jø simbolius reikës kompensuot ilgá.
        while((start = strfind(text, "{",.pos = start+1)) != -1 && (end = strfind(text, "}", .pos = end + 1)) != -1)
        {
            if(end - start == 7)
                colorCount++; 
        }

          
		
		strmid(string, text, 0, 81 + colorCount * 8);
		SendClientMessage(playerid, color, string);
		
		strdel(string, 0, strlen(string));
		strmid(string, text, 81 + colorCount * 8, strlen(text));
		SendClientMessage(playerid, color, string);


        // Originalas
        /*strmid( message2, text, 0, 81, 82 );
        format( string, 132, "%s ...", message2 );
        SendClientMessage( playerid, color, string );

        strmid( string, text, 81, 160, 200 );
        format( string, 132, "... %s", string );
        SendClientMessage( playerid, color, string );
        */
		
        /*
        Ilgersnio teksto versija.
        strmid(message2, text, 0, 120, 121);
        strcat(message2, " ...");
        SendClientMessage( playerid, color, message2 );

        strmid(string, text, 120, strlen(text));
        strins(string, "... ", 0);
        SendClientMessage( playerid, color, string );
        */
        return 1;
    }
    else return
        SendClientMessage(playerid,color,text);
}
stock SendChatMessageToAll(color,text[])
{
    if(strlen(text) > 100)
    {
        foreach(new i : Player)
            SendChatMessage(i, color, text);
        /*new string[ 140 ],
            message2[ 140 ];

        strmid( message2, text, 0, 81, 82 );
        format( string, 132, "%s ...", message2 );
        SendClientMessageToAll( color, string );

        strmid( string, text, 81, 160, 200 );
        format( string, 132, "... %s", string);
        SendClientMessageToAll( color, string );
        */
        return 1;
    }
    else return
        SendClientMessageToAll(color,text);
}
stock split(const strsrc[], strdest[][], delimiter)
{
    new i, li,
        aNum,
        len;
    while(i <= strlen(strsrc))
    {
        if(strsrc[i]==delimiter || i==strlen(strsrc))
        {
            len = strmid(strdest[aNum], strsrc, li, i, 128);
            strdest[aNum][len] = 0;
            li = i+1;
            aNum++;
        }
        i++;
    }
    return 1;
}
stock RemodeVeh(playerid,model,price,name[])
{
    new string[256],
        color1 = random(40),
        color2 = random(40);
    if(price > PlayerMoney[ playerid ]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: Neturi pakankamai pinigu kad galëtum nusipirkti ðá automobilá."),TogglePlayerControllable(playerid, 1);
    MySQLCheckConnection();

    mysql_real_escape_string(name,name);
    switch ( tmpinteger[ playerid ] )
    {
        case 0:format(string,sizeof(string),"INSERT INTO `vehicles` (cOwner,cModel,cName,cSpawn1,cSpawn2,cSpawn3,cAngle,cColor1,cColor2,cFuel) VALUES (%d,%d,'%s','2743.9448','-2392.5996','13.6328','178.769',%d,%d,%d)",pInfo[playerid][pMySQLID],model,name,color1,color2,GetVehicleFuelTank(model));
        case 1: format(string,sizeof(string),"INSERT INTO `vehicles` (cOwner,cModel,cName,cSpawn1,cSpawn2,cSpawn3,cAngle,cColor1,cColor2,cFuel) VALUES (%d,%d,'%s','2134.6907','-1140.4438','25.2755','81.9724',%d,%d,%d)",pInfo[playerid][pMySQLID],model,name,color1,color2,GetVehicleFuelTank(model));
        case 2: format(string,sizeof(string),"INSERT INTO `vehicles` (cOwner,cModel,cName,cSpawn1,cSpawn2,cSpawn3,cAngle,cColor1,cColor2,cFuel) VALUES (%d,%d,'%s','1735.5066','-1276.8037','13.5639','54.8572',%d,%d,%d)",pInfo[playerid][pMySQLID],model,name,color1,color2,GetVehicleFuelTank(model));
        case 3: format(string,sizeof(string),"INSERT INTO `vehicles` (cOwner,cModel,cName,cSpawn1,cSpawn2,cSpawn3,cAngle,cColor1,cColor2,cFuel) VALUES (%d,%d,'%s','2147.3201','-1161.6648','23.8203','267.4486',%d,%d,%d)",pInfo[playerid][pMySQLID],model,name,color1,color2,GetVehicleFuelTank(model));
        case 4: format(string,sizeof(string),"INSERT INTO `vehicles` (cOwner,cModel,cName,cSpawn1,cSpawn2,cSpawn3,cAngle,cColor1,cColor2,cFuel) VALUES (%d,%d,'%s','2147.1746','-1157.2572','23.8458','267.7620',%d,%d,%d)",pInfo[playerid][pMySQLID],model,name,color1,color2,GetVehicleFuelTank(model));
        case 5: format(string,sizeof(string),"INSERT INTO `vehicles` (cOwner,cModel,cName,cSpawn1,cSpawn2,cSpawn3,cAngle,cColor1,cColor2,cFuel) VALUES (%d,%d,'%s','2134.6907','-1152.8210','23.9137','271.2086',%d,%d,%d)",pInfo[playerid][pMySQLID],model,name,color1,color2,GetVehicleFuelTank(model));
        case 6: format(string,sizeof(string),"INSERT INTO `vehicles` (cOwner,cModel,cName,cSpawn1,cSpawn2,cSpawn3,cAngle,cColor1,cColor2,cFuel) VALUES (%d,%d,'%s','2147.8528','-1148.1475','24.4245','269.6420',%d,%d,%d)",pInfo[playerid][pMySQLID],model,name,color1,color2,GetVehicleFuelTank(model));
        case 7: format(string,sizeof(string),"INSERT INTO `vehicles` (cOwner,cModel,cName,cSpawn1,cSpawn2,cSpawn3,cAngle,cColor1,cColor2,cFuel) VALUES (%d,%d,'%s','2147.7319','-1142.9650','24.9989','267.4486',%d,%d,%d)",pInfo[playerid][pMySQLID],model,name,color1,color2,GetVehicleFuelTank(model));
        case 8: format(string,sizeof(string),"INSERT INTO `vehicles` (cOwner,cModel,cName,cSpawn1,cSpawn2,cSpawn3,cAngle,cColor1,cColor2,cFuel) VALUES (%d,%d,'%s','2147.3345','-1138.0237','25.5390','267.4486',%d,%d,%d)",pInfo[playerid][pMySQLID],model,name,color1,color2,GetVehicleFuelTank(model));
        case 9: format(string,sizeof(string),"INSERT INTO `vehicles` (cOwner,cModel,cName,cSpawn1,cSpawn2,cSpawn3,cAngle,cColor1,cColor2,cFuel) VALUES (%d,%d,'%s','2162.3459','-1152.7546','23.9230','94.1736',%d,%d,%d)",pInfo[playerid][pMySQLID],model,name,color1,color2,GetVehicleFuelTank(model));
	}

    mysql_query(DbHandle,  string, false);
    GivePlayerMoney( playerid, -price );

    format(string,sizeof(string),"SELECT `id` FROM `vehicles` WHERE `cOwner` = %d",pInfo[playerid][pMySQLID]);
    new Cache:result = mysql_query(DbHandle, string);

    new slot = 1;
    for(new i = 0; i < cache_get_row_count(); i++)
    {
        sscanf(string,"d",pInfo[playerid][pCar][slot]);
        slot ++;
    }
    cache_delete(result);

    PayLog( pInfo[ playerid ][ pMySQLID ], 3, -1, -price );
    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
    TogglePlayerControllable(playerid, 1);
    if(IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicle(playerid);
    SendClientMessage(playerid,COLOR_NEWS,"Sëkmingai nusipirkote naujà  automobilá, galite ji pamatyti paraðà /v list.");
    SaveAccount( playerid );
    tmpinteger[ playerid ] = -1;
    return 1;
}
stock GetClosestVehicleToVehicle(vehicleid, Float:distance)
{
    new  winner = INVALID_VEHICLE_ID, Float:winnerDistance = 99999, Float:x,Float:y, Float:z;
    GetVehiclePos(vehicleid, x, y, z);
    for(new i = 1; i < MAX_VEHICLES; i++)
    {
        if(!IsValidVehicle(i)) continue;
        if(i == vehicleid) continue;
        new Float:tmpDis = GetVehicleDistanceFromPoint(i, x, y, z);
        if(tmpDis < distance && tmpDis < winnerDistance)
        {
            winner = i;
            winnerDistance = tmpDis;
        }
    }
    return winner;
}
stock GetNearestVehicle(playerid, Float:distance)
{
    if(IsPlayerInAnyVehicle(playerid))
        return GetPlayerVehicleID(playerid);

    distance = floatabs(distance);
    new Float:X, Float:Y, Float:Z,
        Float:NearestPos = distance,
        NearestVehicle = INVALID_VEHICLE_ID;
    GetPlayerPos(playerid, X, Y, Z);
    foreach(Vehicles,i)
    {
        if(!IsVehicleStreamedIn(i, playerid)) continue;
        if(NearestPos > GetVehicleDistanceFromPoint( i, X, Y, Z ) ) NearestPos = GetVehicleDistanceFromPoint( i, X, Y, Z ), NearestVehicle = i;
    }
    return NearestVehicle;
}
stock GetNearestPlayer(playerid, Float:distance)
{
    distance = floatabs(distance);
    new Float:X, Float:Y, Float:Z,
        Float:NearestPos = distance,
        NearestVehicle = INVALID_PLAYER_ID;
    GetPlayerPos(playerid, X, Y, Z);
    foreach(Player,i)
    {
        if ( i == playerid ) continue;
        if ( NearestPos > GetPlayerDistanceFromPoint( i, X, Y, Z ) ) NearestPos = GetPlayerDistanceFromPoint( i, X, Y, Z ), NearestVehicle = i;
    }
    if( NearestVehicle == INVALID_PLAYER_ID ) return INVALID_PLAYER_ID;
    else return NearestVehicle;
}
stock LockVehicle(carid,type)
{
    foreach(Player,i)
    {
        SetVehicleParamsForPlayer(carid,i,0,type);
        cInfo[carid][cLock] = type;
    }
    return 1;
}
stock SendTeamMessage(team, color, string[])
{
    foreach(Player,i)
    {
        if ( PlayerFaction( i ) == team && GetPVarInt( i, "TOG_FAMILY" ) == 1)
            SendChatMessage( i, color, string );
    }
    return 1;
}
stock SendAdminMessagePlayer( playerid, color, text[ ] )
{
    if ( pInfo[ playerid ][ pAdmin ] >= 1 && TogChat[ playerid ][ 3 ] == true )
    {
        if(strlen(text) > 120)
        {
            new string[ 140 ],
                message2[ 140 ];

            strmid(message2, text, 0, 120, 121);
            strcat(message2, " ...");
            SendClientMessage( playerid, color, message2 );

            strmid(string, text, 120, strlen(text));
            strins(string, "... ", 0);
            SendClientMessage( playerid, color, string );
            return 1;
        }
        else 
            return SendClientMessage(playerid,color,text);
        //return SendChatMessage( playerid, color, string );
    }
    return 1;
}
stock SendAdminMessage(color, text[])
{
    foreach(Player,i)
    {
        if(pInfo[i][pAdmin] >= 1 && TogChat[i][3] == true)
        {
            SendAdminMessagePlayer(i, color, text);
            //SendChatMessage(i, color, string);
        }
    }
    return 1;
}
stock SendRadioMessage(chanel, slot, color, string[])
{
    foreach(Player,i)
    {
        if(chanel == 911 && pInfo[ i ][ pMember ] != 2) continue;
        if(chanel == 912 && pInfo[ i ][ pMember ] != 3) continue;
        if(pInfo[i][pRChannel] == chanel && GetPVarInt(i, "RadioSlot") == slot)
            SendChatMessage(i, color, string);
    }
    return 1;
}
stock SendJobMessage(job, color, string[])
{
    foreach(Player,i)
    {
        if(IsPlayerConnected(i))
        if(pInfo[i][pJob] == job)
            SendChatMessage(i, color, string);
    }
    return 1;
}
stock ProxDetectorCords(Float:radi, string[], Float:pX, Float:pY, Float:pZ, col1, col2, col3, col4, col5, worldid, interiorid )
{
    foreach(Player,player2)
    {
        if ( worldid == GetPlayerVirtualWorld(player2) && interiorid == GetPlayerInterior(player2))
        {
            if ( IsPlayerInRangeOfPoint( player2, radi / 16, pX, pY, pZ ))
                SendChatMessage(player2, col1, string);
            else if ( IsPlayerInRangeOfPoint( player2, radi / 8, pX, pY, pZ ))
                SendChatMessage(player2, col2, string);
            else if ( IsPlayerInRangeOfPoint( player2, radi / 4, pX, pY, pZ ))
                SendChatMessage(player2, col3, string);
            else if ( IsPlayerInRangeOfPoint( player2, radi / 2, pX, pY, pZ ))
                SendChatMessage(player2, col4, string);
            else if ( IsPlayerInRangeOfPoint( player2, radi, pX, pY, pZ ))
                SendChatMessage(player2, col5, string);
        }
    }
    return 1;
}
stock ProxDetector(Float:radi, playerid, string[], col1, col2, col3, col4, col5 )
{
    new Float:pX, Float:pY, Float:pZ;
    GetPlayerPos( playerid, pX, pY, pZ );
    foreach(Player,player2)
    {
        if ( GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(player2))
        {
            if ( IsPlayerInRangeOfPoint( player2, radi / 16, pX, pY, pZ ))
                SendChatMessage(player2, col1, string);
            else if ( IsPlayerInRangeOfPoint( player2, radi / 8, pX, pY, pZ ))
                SendChatMessage(player2, col2, string);
            else if ( IsPlayerInRangeOfPoint( player2, radi / 4, pX, pY, pZ ))
                SendChatMessage(player2, col3, string);
            else if ( IsPlayerInRangeOfPoint( player2, radi / 2, pX, pY, pZ ))
                SendChatMessage(player2, col4, string);
            else if ( IsPlayerInRangeOfPoint( player2, radi, pX, pY, pZ ))
                SendChatMessage(player2, col5, string);
        }
    }
    return 1;
}
stock ProxDetector2( Float:radi, playerid, string[], col1, col2, col3, col4, col5)
{
    new Float:pX, Float:pY, Float:pZ;
    GetPlayerPos( playerid, pX, pY, pZ );
    foreach(Player,player2)
    {
        if ( GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(player2) && player2 != playerid)
        {
            if ( IsPlayerInRangeOfPoint( player2, radi / 16, pX, pY, pZ ))
                SendChatMessage(player2, col1, string);
            else if ( IsPlayerInRangeOfPoint( player2, radi / 8, pX, pY, pZ ))
                SendChatMessage(player2, col2, string);
            else if ( IsPlayerInRangeOfPoint( player2, radi / 4, pX, pY, pZ ))
                SendChatMessage(player2, col3, string);
            else if ( IsPlayerInRangeOfPoint( player2, radi / 2, pX, pY, pZ ))
                SendChatMessage(player2, col4, string);
            else if ( IsPlayerInRangeOfPoint( player2, radi, pX, pY, pZ ))
                SendChatMessage(player2, col5, string);
        }
    }
    return 1;
}
stock isAtFishPlace( playerid )
{
    if ( PlayerToPoint( 10.0, playerid, 838.3501,-2066.7195,12.8672 )   ||
		PlayerToPoint( 10.0, playerid, 852.8965,-2004.0170,13.6268 )   ||
		PlayerToPoint( 10.0, playerid, 820.8741,-1978.4301,12.8672 )   ||
		PlayerToPoint( 20.0, playerid, 360.9109,-2087.1472,7.8359 )   ||
		PlayerToPoint( 20.0, playerid, 366.8915,-2087.8433,7.8359 )   ||
		PlayerToPoint( 20.0, playerid, 371.6957,-2087.9500,7.8359 )   ||
		PlayerToPoint( 20.0, playerid, 377.0125,-2088.0688,7.8359 )   ||
		PlayerToPoint( 20.0, playerid, 382.4442,-2088.1890,7.8359 )   ||
		PlayerToPoint( 20.0, playerid, 387.8258,-2088.3081,7.8359)   ||
		PlayerToPoint( 20.0, playerid, 393.0408,-2088.4241,7.8359)   ||
		PlayerToPoint( 20.0, playerid, 396.7432,-2088.3235,7.8359 )   ||
		PlayerToPoint( 20.0, playerid, 400.9409,-2088.4832,7.8359 )   ||
		PlayerToPoint( 20.0, playerid, 409.2190,-2047.9943,7.8359 )   ||
		PlayerToPoint( 20.0, playerid, 398.3943,-2033.1278,7.8359 )   ||
		PlayerToPoint( 20.0, playerid, 398.7134,-2022.7917,7.8359 )   ||
		PlayerToPoint( 20.0, playerid, 398.6473,-2013.0237,7.8359 )   ||
		PlayerToPoint( 20.0, playerid, 379.5823,-1991.6434,7.8359 )   ||
		PlayerToPoint( 20.0, playerid, 379.5994,-1983.2726,7.8359 )   ||
		PlayerToPoint( 20.0, playerid, 379.2360,-1975.4845,7.8359 )   ||
		PlayerToPoint( 20.0, playerid, 379.6255,-1964.2043,7.8359 )   ||
		PlayerToPoint( 20.0, playerid, 379.5504,-1957.1350,7.8359 )   ||
		PlayerToPoint( 20.0, playerid, 379.6788,-1949.0586,7.8359 )   ||
		PlayerToPoint( 20.0, playerid, 379.7071,-1940.9346,7.8359 )   ||
		PlayerToPoint( 20.0, playerid, 379.7292,-1934.0704,7.8359 )   ||
		PlayerToPoint( 10.0, playerid, 2941.6365,-2052.0046,3.5480 )   ||
		PlayerToPoint( 10.0, playerid, 2937.7944,-2051.4407,3.5480 )   ||
		PlayerToPoint( 10.0, playerid, 2925.5537,-2051.4146,3.5480 )   ||
		PlayerToPoint( 10.0, playerid, 2909.3167,-2070.1389,1.4211 )   ||
		PlayerToPoint( 10.0, playerid, 2908.5703,-2075.4700,1.3767 )   ||
		PlayerToPoint( 10.0, playerid, 2910.2266,-2083.6211,1.3899 )   ||
		PlayerToPoint( 10.0, playerid, 2910.3711,-2094.7788,1.7545 )   ||
		PlayerToPoint( 10.0, playerid, 2908.8552,-2106.5283,2.2764 )   ||
		PlayerToPoint( 10.0, playerid, 2903.4199,-2125.1414,2.8222 )   ||
		PlayerToPoint( 10.0, playerid, 2910.5989,-2040.3712,1.4755 )   ||
		PlayerToPoint( 10.0, playerid, 2910.7673,-2029.8617,1.4876 )   ||
		PlayerToPoint( 10.0, playerid, 2911.0625,-2011.3090,1.4985 )   ||
		PlayerToPoint( 10.0, playerid, 2912.0918,-2000.0720,1.3222 )   
        ) 
        return 1;
    return 0;
}
stock IsAtGasStation(playerid)
{
    if(PlayerToPoint(6.0,playerid,1938.5521,-1772.3696,13.3828) ||
    PlayerToPoint(6.0,playerid,1944.7205,-1772.0673,13.3906)   ||
    PlayerToPoint(6.0,playerid,1002.4495,-940.1524,42.1797)     ||
    PlayerToPoint(6.0,playerid,1003.3901,-933.6976,42.1797)  ||
    PlayerToPoint(6.0,playerid,652.6022,-560.3837,16.3359)    ||
    PlayerToPoint(8.0,playerid,653.2297,-568.9595,16.3359)    ||
    PlayerToPoint(5.0,playerid,657.7242,-569.0873,16.3359)  ||
    PlayerToPoint(8.0,playerid,657.7718,-560.6857,16.3359)) return 1;
    return 0;
}
stock GetPlayerFirstName(playerid)
{
    new namestring[2][MAX_PLAYER_NAME];
    new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid,name,MAX_PLAYER_NAME);
    split(name, namestring, '_');
    return namestring[0];
}
stock GetPlayerLastName(playerid)
{
    new namestring[2][MAX_PLAYER_NAME];
    new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid,name,MAX_PLAYER_NAME);
    split(name, namestring, '_');
    return namestring[1];
}
stock ClearChatbox(playerid, lines)
{
    for(new i = 0; i < lines; i++)
    SendClientMessage(playerid, COLOR_WHITE, " ");
}
stock Susirgti(playerid)
{
    new ligosID = random(sizeof Ligos),
        susirgti = random(100),
        string[128];
    if(ligosID == 0) return 1;
    switch(susirgti)
    {
        case 5,30,45,60,77,99:
        {
            pInfo[playerid][pLiga] = ligosID;
            format(string,sizeof(string),"INFO: Jûs susirgote %s liga, kuo greièiau pavalgykite ir nepraraskite jëgø.",Ligos[ligosID]);
            SendClientMessage(playerid,COLOR_LIGHTRED,string);
            SendClientMessage(playerid,COLOR_LIGHTRED,"INFO: Patariame apsilankyti pas gydytojá , arba pasitarti su vaistininku.");
            return 1;
        }
    }
    return 1;
}
stock MySQLCheckConnection()
{
    return 1;
        /*
    if(mysql_ping() == 1)
        return 1;
    else
    {
        ImpossibleLog("MySQL connection lsot.");
        print("MySQL: Prisijungimas yra nutrûkàs, serveris isjungiamas.");
        return SendRconCommand("exit");
    }
    */
}
stock SuspectPlayer(playerid,crime[],sendername[])
{
    new string[256];
    format(string, sizeof(string), "[LSPD] Asmuo %s gavo áskaita nuo pareigûno: %s, áskaita: %s",GetName(playerid),sendername,crime);
    SendTeamMessage( 1, COLOR_POLICE, string );
    format(string, sizeof(string), "[LSPD] Policininkas %s áraðë jums áskaità , esate kaltinamas %s, tai yra %d jûsø áskaita.", sendername,crime,pInfo[playerid][pWantedLevel]);
    SendChatMessage(playerid, COLOR_POLICE, string);
    format(string, sizeof(string), "INSERT INTO `crimes` (name,crime,reporter) VALUES ('%s','%s','%s')",GetName(playerid),crime,sendername);
    mysql_pquery(DbHandle, string);
    if( ( pInfo[playerid][pJail] > 0 && pInfo[playerid][pJail] != 1 ) && pInfo[playerid][pJailTime] > 0 )
        return true;

    pInfo[playerid][pWantedLevel] ++;

    if(pInfo[playerid][pWantedLevel] > 5)
        pInfo[playerid][pWantedLevel] = 6;
    return 1;
}
stock UsePDCMD(playerid)
{
    if(pInfo[ playerid ][ pMember ] == 2)
        return 1;
    else
        return 0;
}
stock StartTimer(playerid,ilgis,tipas)
{
    if(Mires[playerid] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Perspëjimas: ðiuo metu Jûs esate komos bûsenoje.");
    if(Laikas[playerid] == 0)
    {
        Laikas[playerid] = ilgis;
        LaikoTipas[playerid] = tipas;
        TogglePlayerControllable(playerid, false );
        SendClientMessage(playerid,COLOR_WHITE, " Galite sustabdyti pradëta veiskma paraðà /stop.");
        UpdatePlayerInfoText( playerid );
        return 1;
    }
    return 1;
}
stock TimeEnd(playerid,tipas)
{
    LaikoTipas[playerid] = 0;
    UpdatePlayerInfoText(playerid,GetPlayerState( playerid ));
    if ( tipas == 99 ) return 1;
    new veh = GetPlayerVehicleID( playerid );
    switch( tipas )
    {
        case 1:
        {
            new Float:HP,
                VD,
                string[ 126 ];
            GetVehicleHealth( veh, HP );

            VD = floatround(HP/100);

            if ( PlayerMoney[ playerid ] < VD )
            {
                format( string, 126, " {FF6347}Perspëjimas: transporto priemonës sutaisymo kaina yra $%d", VD );
                SendClientMessage( playerid, GRAD, string );
                return 1;
            }
            GivePlayerMoney( playerid, -VD );
            AddJobExp( playerid, 5+random(6) );
            SetVehicleHealth(veh,1000);
            RepairVehicle(veh);
            format( string, 126, " Automobilio sutvarkymas jums kainavo: $%d", VD );
            SendClientMessage(playerid, COLOR_WHITE, " Sveikiname, transporto priemonës tvarkymas sëkmingai pavyko.");
            if(CheckUnfreeze(playerid))
                TogglePlayerControllable(playerid,true);
            return true;
        }
        case 2:
        {
            if ( PlayerMoney[ playerid ] < 450 )
                return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: transporto priemonës perdaþymo kaina yra $450." );
            GivePlayerMoney( playerid, -450 );
            AddJobExp( playerid, 5+random(6) );
            cInfo[ veh ][ cColor ][ 0 ] = GetPVarInt( playerid, "PAINT1" );
            cInfo[ veh ][ cColor ][ 1 ] = GetPVarInt( playerid, "PAINT2" );

            ChangeVehicleColor(veh, cInfo[veh][cColor][0], cInfo[veh][cColor][1]);
            SendClientMessage(playerid, COLOR_WHITE, " Sveikiname, transporto priemonës spalva buvo sëkmingai pakeista.");
            if(cInfo[ veh ][ cOwner ] > 0) SaveCar(veh);
            if(CheckUnfreeze(playerid))
            TogglePlayerControllable(playerid,true);
            return true;
        }
        case 3:
        {
            new MOD1 = GetPVarInt( playerid, "MOD" ),
                MOD2 = GetPVarInt( playerid, "MOD2" );

            if ( MOD1 != 1087 && MOD1 > 0)
            {
                cInfo[ veh ][ cWheels ] = MOD1;
                AddVehicleComponent( veh, cInfo[ veh ][ cWheels ] );
                GivePlayerMoney( playerid, -2000 );
                AddJobExp( playerid, 5+random(6) );
                SendClientMessage( playerid, COLOR_WHITE, " Sveikiname, automobilio ratlankiai buvo sëkmingai pakeisti á kitus.");
                SaveCar( veh );
                DeletePVar( playerid, "MOD" );
                if ( CheckUnfreeze( playerid ) )
                    TogglePlayerControllable( playerid, true );
                return 1;
            }
            if ( MOD2 == 1087 )
            {
                cInfo[ veh ][ cHidraulik ] = MOD2;
                AddVehicleComponent( veh, cInfo[ veh ][ cHidraulik ] );
                GivePlayerMoney( playerid, -5000 );
                AddJobExp( playerid, 5+random(6) );
                SendClientMessage( playerid, COLOR_WHITE, "  Sveikiname, automobilio hidraulikos modifikacija buvo sëkmingai ádëta.");
                SaveCar( veh );
                DeletePVar( playerid, "MOD2" );
                if ( CheckUnfreeze( playerid ) )
                    TogglePlayerControllable( playerid, true );
                return 1;
            }
            if ( MOD1 == -1 )
            {
                RemoveVehicleComponent( veh, cInfo[ veh ][ cWheels ] );
                cInfo[ veh ][ cWheels ] = 0;
                SendClientMessage( playerid, COLOR_WHITE, " Modifikacija, buvo sëkmingai paðalinta.");
                SaveCar( veh );
                DeletePVar( playerid, "MOD" );
                if ( CheckUnfreeze( playerid ) )
                    TogglePlayerControllable( playerid, true );
                return 1;
            }
            if ( MOD2 == -1 )
            {
                RemoveVehicleComponent( veh, cInfo[ veh ][ cHidraulik ] );
                cInfo[ veh ][ cHidraulik ] = 0;
                SendClientMessage( playerid, COLOR_WHITE, " Modifikacija, buvo sëkmingai paðalinta.");
                SaveCar( veh );
                DeletePVar( playerid, "MOD2" );
                if ( CheckUnfreeze( playerid ) )
                    TogglePlayerControllable( playerid, true );
                return 1;
            }
            if ( MOD1 == -2 )
            {
                cInfo[ veh ][ cTuning ] = 0;
                SendClientMessage( playerid, COLOR_WHITE, " Modifikacija, buvo sëkmingai paðalinta.");
                SendClientMessage( playerid, COLOR_WHITE, "* PASTABA: Modifikacija bus visiðkai nuimta, tik po automobilio priparkavimo.");
                SaveCar( veh );
                DeletePVar( playerid, "MOD1" );
                if ( CheckUnfreeze( playerid ) )
                    TogglePlayerControllable( playerid, true );
                return 1;
            }
            return true;
        }

        case 4:
        {
            TuneCarMods(pInfo[playerid][pCarGet]);
            SendClientMessage(playerid, COLOR_WHITE, " Tuningas buvo sëkmingai pridëtas.");
            if(cInfo[ veh ][ cOwner ] > 0) SaveCar(veh);
            if(CheckUnfreeze(playerid))
            TogglePlayerControllable(playerid,true);
            return true;
        }
        case 5:
        {
            veh = GetPVarInt( playerid, "CAR_JACK" );
            LockVehicle(veh,0);
            new string[54];
            format(string,54,"* %s sulauþo automobilio spinele ir atrakina dureles.",GetPlayerNameEx(playerid));
            ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            if(CheckUnfreeze(playerid))
            TogglePlayerControllable(playerid,true);
            CJLog( pInfo[ playerid ][ pMySQLID ], cInfo[veh][cID], "Sëkmingai atrakino tr. priemonës dureles" );
            return true;
        }
        case 6:
        {
            new string[126];
            format(string, 126, "* Automobilio variklis uþsivedë.(( %s )).", GetPlayerNameEx( playerid ));
            ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            StartingEngine[playerid] = false;
            Engine[GetPlayerVehicleID(playerid)] = true;
            VehicleEngine(GetPlayerVehicleID(playerid), 1);
            TogglePlayerControllable(playerid,true);
            CJLog( pInfo[ playerid ][ pMySQLID ], cInfo[GetPlayerVehicleID(playerid)][cID], "Sëkmingai uþvedë tr. priemonës variklá" );
            return true;
        }
        /*case 7:
        {
            foreach(Busines,i)
            {
                if ( bInfo[ i ][ bProds ] < 50 )
                {
                    new string[ 126 ],
                        from = GetPVarInt( playerid, "KROVINYS" ),
                        ZoneName[ 28 ],
                        deliver;


                    Get2DZone( Unload[ from ][ 0 ],Unload[ from ][ 1 ], ZoneName, 28 );

                    DisablePlayerCheckpoint(playerid);
                    Checkpoint[playerid] = CHECKPOINT_NONE;
                    SetPlayerCheckPointEx( playerid, CHECKPOINT_TRUCK2, bInfo[ i ][ bEnter ][ 0 ],bInfo[ i ][ bEnter ][ 1 ],bInfo[ i ][ bEnter ][ 2 ], 14.0 );

                    switch( bInfo[ i ][ bType ] )
                    {
                        case 1: deliver = 6;
                        case 2: deliver = 0;
                        case 3: deliver = 7;
                    }
                    SetPVarInt( playerid, "KROVINYS2", deliver );

                    SendClientMessage( playerid, COLOR_LIGHTRED, "|________Uþsakymo tvarkaraðtis________|");
                    format           ( string, 126, "Krovinys: %s", Load[ deliver ][ lName ] );
                    SendClientMessage( playerid, COLOR_WHITE, string );
                    format           ( string, 126, "Gabenama ið: %s", ZoneName);
                    SendClientMessage( playerid, COLOR_WHITE, string );
                    Get2DZone        ( bInfo[ i ][ bEnter ][ 0 ],bInfo[ i ][ bEnter ][ 1 ], ZoneName, 28 );
                    format           ( string, 126, "Gabenama á: %s", ZoneName);
                    SendClientMessage( playerid, COLOR_WHITE, string );
                    TogglePlayerControllable( playerid, true );
                    format(string, 126, "* Darbininkai pakrauna kroviná á sunkveþimá. (( %s )).", GetPlayerNameEx( playerid ));
                    ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    return 1;
                }
            }
            new string[ 126 ],
                deliver = random( 13 ),
                from = GetPVarInt( playerid, "KROVINYS" ),
                ZoneName[ 28 ];
            SetPVarInt( playerid, "KROVINYS2", deliver );

            Get2DZone( Unload[ from ][ 0 ],Unload[ from ][ 1 ], ZoneName, 28 );

            DisablePlayerCheckpoint(playerid);
            Checkpoint[playerid] = CHECKPOINT_NONE;
            SetPlayerCheckPointEx( playerid, CHECKPOINT_TRUCK2, Load[ deliver ][ Load_x ], Load[ deliver ][ Load_y ], Load[ deliver ][ Load_z ], 6.0 );

            SendClientMessage( playerid, COLOR_LIGHTRED, "|________Uþsakymo tvarkaraðtis________|");
            format           ( string, 126, "Krovinys: %s", Load[ deliver ][ lName ] );
            SendClientMessage( playerid, COLOR_WHITE, string );
            format           ( string, 126, "Gabenama ið: %s", ZoneName);
            SendClientMessage( playerid, COLOR_WHITE, string );
            format           ( string, 126, "Gabenama á: %s", Load[ deliver ][ Place ]);
            SendClientMessage( playerid, COLOR_WHITE, string );
            TogglePlayerControllable( playerid, true );
            format(string, 126, "* Darbininkai pakrauna kroviná á sunkveþimá. (( %s )).",GetPlayerNameEx( playerid ));
            ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            return 1;
        }
        case 8:
        {
            new string[ 126 ],
                mony = random( 50 ) + 50;

            format(string, 126, "* Darbininkai iðkrauna kroviná ið sunkveþimio. (( %s )).", GetPlayerNameEx( playerid ));
            ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

            DisablePlayerCheckpoint( playerid );
            SendClientMessage( playerid, COLOR_GREEN, "Jûs sëkmingai pristatëte kroviná" );

            foreach(Busines,i)
            {
                if ( PlayerToPoint( 14.0, playerid, bInfo[ i ][ bEnter ][ 0 ],bInfo[ i ][ bEnter ][ 1 ],bInfo[ i ][ bEnter ][ 2 ] ) && bInfo[ i ][ bBank ] > mony )
                {
                    bInfo[ i ][ bProds ] = 100;
                    bInfo[ i ][ bBank  ] -= mony;
                    TogglePlayerControllable( playerid, true );
                    pInfo[ playerid ][ pPayCheck ] += mony;
                    Checkpoint[ playerid ] = CHECKPOINT_NONE;
                    AddJobExp( playerid, 2 );
                    return 1;
                }
            }
            new exp;
            if ( GetPVarInt( playerid, "KROVINYS2" ) >= 10 )
            {
                Mats += 60;
                mony += 30;
                exp += 2;
            }
            exp += 2;
            TogglePlayerControllable( playerid, true );
            pInfo[ playerid ][ pPayCheck ] += mony;
            AddJobExp( playerid, exp );
            Checkpoint[ playerid ] = CHECKPOINT_NONE;
            return 1;
        }
        case 9:
        {
            new string[ 126 ],
                deliver = random( 3 ) + 13,
                from = GetPVarInt( playerid, "KROVINYS" ),
                ZoneName[ 28 ];
            SetPVarInt( playerid, "KROVINYS2", deliver );

            Get2DZone( Unload[ from ][ 0 ],Unload[ from ][ 1 ], ZoneName, 28 );

            DisablePlayerCheckpoint(playerid);
            Checkpoint[playerid] = CHECKPOINT_NONE;
            SetPlayerCheckPointEx( playerid, CHECKPOINT_TRUCK2, Load[ deliver ][ Load_x ], Load[ deliver ][ Load_y ], Load[ deliver ][ Load_z ], 6.0 );

            SendClientMessage( playerid, COLOR_LIGHTRED, "________ Veþtaraðtis ________");
            format           ( string, 126, "Krovinys: %s", Load[ deliver ][ lName ] );
            SendClientMessage( playerid, COLOR_WHITE, string );
            format           ( string, 126, "Gabenama ið: %s", ZoneName);
            SendClientMessage( playerid, COLOR_WHITE, string );
            format           ( string, 126, "Gabenama á: %s", Load[ deliver ][ Place ]);
            SendClientMessage( playerid, COLOR_WHITE, string );
            TogglePlayerControllable( playerid, true );

            format(string, 126, "* Darbininkai pakrauna kroviná á sunkveþimá. (( %s )).", GetPlayerNameEx( playerid ));
            ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            return 1;
        }*/
        case 10:
        {
            new Float: Car_X,
                Float: Car_Y,
                Float: Car_Z,
                veh2 = GetPVarInt( playerid, "TOWING" );

            GetVehiclePos( veh, Car_X, Car_Y, Car_Z );
            if ( !PlayerToPoint( 10, playerid, Car_X, Car_Y, Car_Z ) )
                return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: Jûs nesate ðalia to automobilio ");

            if ( IsTrailerAttachedToVehicle( veh ) )
                DetachTrailerFromVehicle( veh );
            else
                AttachTrailerToVehicle( veh2, veh );
            TogglePlayerControllable( playerid, true );
            return 1;
        }
    }
    return 1;
}

ImpossibleLog(const string[])
{
    new File:lol = fopen("This_Should_Never_Exist.txt", io_append);
    if(lol)
    {
        new year,month,day, hour,minute, second,str[64];
        getdate(year,month,day);
        gettime(hour,minute,second);
        format(str,sizeof(str),"%d.%d.%d %d:%d:%d",
            year,month,day, hour,minute,second);
        fwrite(lol, str);
        fwrite(lol, string);
        fwrite(lol, "\r\n");
    }
    fclose(lol);
}

forward OnPlayerLoadCommodity(playerid, commodity_index, vehicleid);
public OnPlayerLoadCommodity(playerid, commodity_index, vehicleid)
{
	new string[64];
	VehicleLoadTime[ playerid ]--;
	format(string,sizeof(string),"Krovinys bus pakrautas uz %d sekundziu.", VehicleLoadTime[ playerid ] );
	PlayerTextDrawSetString(playerid, InfoText[ playerid ] , string);
	if(VehicleLoadTime[ playerid ] <= 0)
	{
		AddCargoToVehicle(vehicleid, Commodities[ commodity_index ][ CargoId ]);

		// Jei tai buvo priekaba, leidziam kurti vilkika.
		if(IsValidVehicle(GetTrailerPullingVehicle(vehicleid)))
			IsVehicleLoaded[ GetTrailerPullingVehicle(vehicleid) ] = false;

        if(VehicleLoadTime[ playerid ] != 0)
        {
            format(string,sizeof(string),"VehicleLoadTime[%d != 0. Its %d",playerid, VehicleLoadTime[ playerid ]);
            ImpossibleLog(string);
        }

		IsVehicleLoaded[ vehicleid ] = false;
		SendClientMessage(playerid, COLOR_NEWS, "Jûsø krovinys pakrautas!");
		KillTimer(VehicleLoadTimer[ playerid ]);
		VehicleLoadTimer[ playerid ] = -1;
		PlayerTextDrawHide(playerid, InfoText[ playerid ]);
		DeletePVar(playerid, "vehicleid");
	}
    return 1;
}
stock divmod( const number, const divider, &div, &mod )
{
    div = floatround( number / divider, floatround_floor );
    mod = number - div * divider;
}
stock CheckUnfreeze(playerid)
{
    if(Freezed[playerid] == true || Mires[playerid] > 0)
        return 0;
    else
        return 1;
}

stock encode_tires(tires1, tires2, tires3, tires4)
    return tires1 | (tires2 << 1) | (tires3 << 2) | (tires4 << 3);

stock CheckBox()
{
    foreach(Player,i)
        if(Boxing[i] == true) return 1;
    return 0;
}
stock BoxEnd(loser)
{
    new winer = INVALID_PLAYER_ID;
    foreach(Player,i)
    {
        if(Boxing[i] && i != loser)
        {
            winer = i;
            break;
        }
    }
    if(winer != INVALID_PLAYER_ID)
    {
        new string[126];
        format(string, 126, "[SAN NEWS] Bokso varþybos baigësi, laimëjo %s priëð %s.",GetName(winer),GetName(loser));
        SendNEWS(COLOR_NEWS,string);
        Boxing[loser] = false;
        Boxing[winer] = false;

        GameTextForPlayer(winer,"~g~ Laimejai kova",3000,3);
        GameTextForPlayer(loser,"~g~ Pralaimejai kova",3000,3);
        SetPlayerHealth(loser, 30);
        SetPlayerHealth(winer, 60);

        //if(pInfo[winer][pJob] == JOB_BOXER)
         //   pInfo[winer][pPayCheck] += 50;
        AddJobExp( winer, 3 );
        SetPlayerPos(winer,768.7744,-66.8329,1001.5692);
        SetPlayerFacingAngle(winer,137.2355);
        SetPlayerPos(loser,764.6347,-70.4305,1001.5692);
        SetPlayerFacingAngle(loser,313.6439);
        ApplyAnimation(winer, "ROB_BANK", "SHP_HandsUp_Scr", 4.0, 0, 1, 1, 1, 0 );
        ApplyAnimation(loser, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0 );
    }
    Boxing[loser] = false;
    return 1;
}
stock PreloadAnimsForPlayer( playerid )
{
    PreloadAnimLib(playerid,"BOMBER");
    PreloadAnimLib(playerid,"RAPPING");
    PreloadAnimLib(playerid,"SHOP");
    PreloadAnimLib(playerid,"BEACH");
    PreloadAnimLib(playerid,"SMOKING");
    PreloadAnimLib(playerid,"FOOD");
    PreloadAnimLib(playerid,"ON_LOOKERS");
    PreloadAnimLib(playerid,"DEALER");
    PreloadAnimLib(playerid,"CRACK");
    PreloadAnimLib(playerid,"CARRY");
    PreloadAnimLib(playerid,"RIOT");
    PreloadAnimLib(playerid,"COP_AMBIENT");
    PreloadAnimLib(playerid,"PARK");
    PreloadAnimLib(playerid,"INT_HOUSE");
    PreloadAnimLib(playerid,"PED");
    PreloadAnimLib(playerid,"MISC");
    PreloadAnimLib(playerid,"OTB");
    PreloadAnimLib(playerid,"BD_Fire");
    PreloadAnimLib(playerid,"BENCHPRESS");
    PreloadAnimLib(playerid,"KISSING");
    PreloadAnimLib(playerid,"BSKTBALL");
    PreloadAnimLib(playerid,"MEDIC");
    PreloadAnimLib(playerid,"SWORD");
    PreloadAnimLib(playerid,"POLICE");
    PreloadAnimLib(playerid,"SUNBATHE");
    PreloadAnimLib(playerid,"FAT");
    PreloadAnimLib(playerid,"WUZI");
    PreloadAnimLib(playerid,"SWEET");
    PreloadAnimLib(playerid,"ROB_BANK");
    PreloadAnimLib(playerid,"GANGS");
    PreloadAnimLib(playerid,"GYMNASIUM");
    PreloadAnimLib(playerid,"CAR");
    PreloadAnimLib(playerid,"CAR_CHAT");
    PreloadAnimLib(playerid,"GRAVEYARD");
    PreloadAnimLib(playerid,"POOL");
    PreloadAnimLib(playerid,"GHANDS");
    PreloadAnimLib( playerid, "BEACH" );
    PreloadAnimLib( playerid, "BOMBER" );
    PreloadAnimLib( playerid, "BASEBALL" );
    PreloadAnimLib( playerid, "BSKTBALL" );
    PreloadAnimLib( playerid, "CARRY" );
    PreloadAnimLib( playerid, "RIOT" );
    PreloadAnimLib( playerid, "COP_AMBIENT" );
    PreloadAnimLib( playerid, "CRACK" );
    PreloadAnimLib( playerid, "DANCING" );
    PreloadAnimLib( playerid, "DEALER" );
    PreloadAnimLib( playerid, "INT_SHOP" );
    PreloadAnimLib( playerid, "GHANDS" );
    PreloadAnimLib( playerid, "GANGS" );
    PreloadAnimLib( playerid, "PED" );
    PreloadAnimLib( playerid, "RAPPING" );
    PreloadAnimLib( playerid, "ROB_BANK" );
    PreloadAnimLib( playerid, "SUNBATHE" );
    PreloadAnimLib( playerid, "SMOKING" );
    PreloadAnimLib( playerid, "SWEET" );
    PreloadAnimLib( playerid, "SPRAYCAN" );
    PreloadAnimLib( playerid, "FOOD" );
    PreloadAnimLib( playerid, "ON_LOOKERS" );
    PreloadAnimLib( playerid, "PARK" );
    PreloadAnimLib( playerid, "KISSING" );
    PreloadAnimLib( playerid, "POLICE" );
    PreloadAnimLib( playerid, "FIGHT_B" );
    PreloadAnimLib( playerid, "FIGHT_C" );
    PreloadAnimLib( playerid, "FIGHT_D" );
    PreloadAnimLib( playerid, "MEDIC" );
    PreloadAnimLib( playerid, "GRAVEYARD" );
    PreloadAnimLib( playerid, "GYMNASIUM" );
    PreloadAnimLib( playerid, "KNIFE" );
    PreloadAnimLib( playerid, "MISC" );
    PreloadAnimLib( playerid, "HEIST9" );
    PreloadAnimLib( playerid, "SHOP" );
    PreloadAnimLib( playerid, "FOOD" );
    PreloadAnimLib( playerid, "SWORD" );
    PreloadAnimLib( playerid, "CAMERA" );
    gPlayerAnimLibsPreloaded[playerid] = true;
    return 1;
}
stock PreloadAnimLib( playerid, animlib[ ] )
    return ApplyAnimation( playerid, animlib, "null", 0.0, 0, 0, 0, 0, 0);

stock OnePlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
    ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
    IsOnePlayAnim[playerid] = true;
    ShowInfoText( playerid, "~w~~h~Spauskite ~r~SPACE~w~~h~ kad sutabdytumet animacija.", 3000 );
}
stock BackAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp,animback)
{
    BackOut[playerid] = animback;
    gPlayerUsingLoopingAnim[playerid] = true;
    ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
    ShowInfoText( playerid, "~w~~h~Spauskite ~r~SPACE~w~~h~ kad sutabdytumet animacija.", 3000 );
}
stock LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
    gPlayerUsingLoopingAnim[playerid] = true;
    UsingLoopAnim[ playerid ] = true;
    ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp, 1);
    ShowInfoText( playerid, "~w~~h~Spauskite ~r~SPACE~w~~h~ kad sutabdytumet animacija.", 3000 );
}

stock TuneCarMods(vehicleid)
{
    switch(cInfo[vehicleid][cTuning])
    {
        case MOD_URANUS1:
        {
            AddVehicleComponent(vehicleid,1088);
            AddVehicleComponent(vehicleid,1090);
            AddVehicleComponent(vehicleid,1092);
            AddVehicleComponent(vehicleid,1094);
            AddVehicleComponent(vehicleid,1164);
            AddVehicleComponent(vehicleid,1166);
            AddVehicleComponent(vehicleid,1168);
            return 1;
        }
        case MOD_URANUS2:
        {
            AddVehicleComponent(vehicleid,1089);
            AddVehicleComponent(vehicleid,1091);
            AddVehicleComponent(vehicleid,1093);
            AddVehicleComponent(vehicleid,1095);
            AddVehicleComponent(vehicleid,1163);
            AddVehicleComponent(vehicleid,1165);
            AddVehicleComponent(vehicleid,1167);
            return 1;
        }
        case MOD_JESTER:
        {
            AddVehicleComponent(vehicleid,1065);
            AddVehicleComponent(vehicleid,1067);
            AddVehicleComponent(vehicleid,1069);
            AddVehicleComponent(vehicleid,1071);
            AddVehicleComponent(vehicleid,1160);// spoiler
            AddVehicleComponent(vehicleid,1159);
            AddVehicleComponent(vehicleid,1162);
            return 1;
        }
        case MOD_JESTER2:
        {
            AddVehicleComponent(vehicleid,1066);
            AddVehicleComponent(vehicleid,1067);
            AddVehicleComponent(vehicleid,1070);
            AddVehicleComponent(vehicleid,1072);
            AddVehicleComponent(vehicleid,1158);// spoiler
            AddVehicleComponent(vehicleid,1161);
            AddVehicleComponent(vehicleid,1173);
            return 1;
        }
        case MOD_SULTAN:
        {
            AddVehicleComponent(vehicleid,1026);
            AddVehicleComponent(vehicleid,1028);
            AddVehicleComponent(vehicleid,1032);
            AddVehicleComponent(vehicleid,1027);
            AddVehicleComponent(vehicleid,1138);// spoiler
            AddVehicleComponent(vehicleid,1141);
            AddVehicleComponent(vehicleid,1169);
            return 1;
        }
        case MOD_SULTAN2:
        {
            AddVehicleComponent(vehicleid,1029);
            AddVehicleComponent(vehicleid,1030);
            AddVehicleComponent(vehicleid,1031);
            AddVehicleComponent(vehicleid,1033);
            AddVehicleComponent(vehicleid,1139);// spoiler
            AddVehicleComponent(vehicleid,1140);
            AddVehicleComponent(vehicleid,1170);
            return 1;
        }
        case MOD_STRATUM:
        {
            AddVehicleComponent(vehicleid,1055);
            AddVehicleComponent(vehicleid,1056);
            AddVehicleComponent(vehicleid,1058);
            AddVehicleComponent(vehicleid,1062);
            AddVehicleComponent(vehicleid,1164);// spoiler
            AddVehicleComponent(vehicleid,1154);
            AddVehicleComponent(vehicleid,1155);
            return 1;
        }
        case MOD_STRATUM2:
        {
            AddVehicleComponent(vehicleid,1057);
            AddVehicleComponent(vehicleid,1059);
            AddVehicleComponent(vehicleid,1060);
            AddVehicleComponent(vehicleid,1061);
            AddVehicleComponent(vehicleid,1163);// spoiler
            AddVehicleComponent(vehicleid,1156);
            AddVehicleComponent(vehicleid,1157);
            return 1;
        }
        case MOD_ELEGY:
        {
            AddVehicleComponent(vehicleid,1034);
            AddVehicleComponent(vehicleid,1036);
            AddVehicleComponent(vehicleid,1038);
            AddVehicleComponent(vehicleid,1040);
            AddVehicleComponent(vehicleid,1147);// spoiler
            AddVehicleComponent(vehicleid,1149);
            AddVehicleComponent(vehicleid,1171);
            return 1;
        }
        case MOD_ELEGY2:
        {
            AddVehicleComponent(vehicleid,1035);
            AddVehicleComponent(vehicleid,1037);
            AddVehicleComponent(vehicleid,1039);
            AddVehicleComponent(vehicleid,1042);
            AddVehicleComponent(vehicleid,1146);// spoiler
            AddVehicleComponent(vehicleid,1148);
            AddVehicleComponent(vehicleid,1172);
            return 1;
        }
        case MOD_FLASH:
        {
            AddVehicleComponent(vehicleid,1046);
            AddVehicleComponent(vehicleid,1047);
            AddVehicleComponent(vehicleid,1049);
            AddVehicleComponent(vehicleid,1051);
            AddVehicleComponent(vehicleid,1054);// spoiler
            AddVehicleComponent(vehicleid,1150);
            AddVehicleComponent(vehicleid,1153);
            return 1;
        }
        case MOD_FLASH2:
        {
            AddVehicleComponent(vehicleid,1045);
            AddVehicleComponent(vehicleid,1048);
            AddVehicleComponent(vehicleid,1050);
            AddVehicleComponent(vehicleid,1052);
            AddVehicleComponent(vehicleid,1053);// spoiler
            AddVehicleComponent(vehicleid,1151);
            AddVehicleComponent(vehicleid,1152);
            return 1;
        }
        case MOD_BLADE1:
        {
            AddVehicleComponent(vehicleid,1104);
            AddVehicleComponent(vehicleid,1107);
            AddVehicleComponent(vehicleid,1108);// spoiler
            AddVehicleComponent(vehicleid,1128);
            AddVehicleComponent(vehicleid,1184);
            return 1;
        }
        case MOD_BLADE2:
        {
            AddVehicleComponent(vehicleid,1105);
            AddVehicleComponent(vehicleid,1181);
            AddVehicleComponent(vehicleid,1183);// spoiler
            return 1;
        }
        case MOD_BROADWAY1:
        {
            AddVehicleComponent(vehicleid,1044);
            AddVehicleComponent(vehicleid,1099);
            AddVehicleComponent(vehicleid,1174);//
            AddVehicleComponent(vehicleid,1176);
            AddVehicleComponent(vehicleid,1042);
            return 1;
        }
        case MOD_BROADWAY2:
        {
            AddVehicleComponent(vehicleid,1043);
            AddVehicleComponent(vehicleid,1099);
            AddVehicleComponent(vehicleid,1175);//
            AddVehicleComponent(vehicleid,1177);
            AddVehicleComponent(vehicleid,1043);
            return 1;
        }
        case MOD_REMINGTON1:
        {
            AddVehicleComponent(vehicleid,1100);
            AddVehicleComponent(vehicleid,1101);
            AddVehicleComponent(vehicleid,1122);
            AddVehicleComponent(vehicleid,1126);
            AddVehicleComponent(vehicleid,1179);
            AddVehicleComponent(vehicleid,1180);
            AddVehicleComponent(vehicleid,1123);
            return 1;
        }
        case MOD_REMINGTON2:
        {
            AddVehicleComponent(vehicleid,1125);
            AddVehicleComponent(vehicleid,1124);
            AddVehicleComponent(vehicleid,1106);
            AddVehicleComponent(vehicleid,1127);
            AddVehicleComponent(vehicleid,1178);
            AddVehicleComponent(vehicleid,1185);
            return 1;
        }
        case MOD_SAVANA1:
        {
            AddVehicleComponent(vehicleid,1102);
            AddVehicleComponent(vehicleid,1133);
            AddVehicleComponent(vehicleid,1129);
            AddVehicleComponent(vehicleid,1187);
            AddVehicleComponent(vehicleid,1189);
            return 1;
        }
        case MOD_SAVANA2:
        {
            AddVehicleComponent(vehicleid,1102);
            AddVehicleComponent(vehicleid,1133);
            AddVehicleComponent(vehicleid,1132);
            AddVehicleComponent(vehicleid,1186);
            AddVehicleComponent(vehicleid,1188);
            return 1;
        }
        case MOD_SLAMVAN1:
        {
            AddVehicleComponent(vehicleid,1109);
            AddVehicleComponent(vehicleid,1115);
            AddVehicleComponent(vehicleid,1113);
            AddVehicleComponent(vehicleid,1118);
            AddVehicleComponent(vehicleid,1120);
            AddVehicleComponent(vehicleid,1117);
            return 1;
        }
        case MOD_SLAMVAN2:
        {
            AddVehicleComponent(vehicleid,1110);
            AddVehicleComponent(vehicleid,1116);
            AddVehicleComponent(vehicleid,1114);
            AddVehicleComponent(vehicleid,1119);
            AddVehicleComponent(vehicleid,1121);
            AddVehicleComponent(vehicleid,1117);
            return 1;
        }
        case MOD_TORNADO1:
        {
            AddVehicleComponent(vehicleid,1134);
            AddVehicleComponent(vehicleid,1137);
            AddVehicleComponent(vehicleid,1135);
            AddVehicleComponent(vehicleid,1190);
            AddVehicleComponent(vehicleid,1193);
            return 1;
        }
        case MOD_TORNADO2:
        {
            AddVehicleComponent(vehicleid,1134);
            AddVehicleComponent(vehicleid,1137);
            AddVehicleComponent(vehicleid,1136);
            AddVehicleComponent(vehicleid,1191);
            AddVehicleComponent(vehicleid,1192);
            return 1;
        }
    }
    return 1;
}

stock AddTuneToVehicle(vehicleid,type,playerid)
{
    new model = GetVehicleModel(vehicleid);
    switch (model)
    {
        case 558:
        {
            if(PlayerMoney[ playerid ] > 7000)
                GivePlayerMoney(playerid,-7000);
            else return SendClientMessage(playerid,GRAD, "{FF6347}Perspëjimas: Jûs neturite pakankamai pingu ($7000).");
            if(type == 1) cInfo[vehicleid][cTuning] = MOD_URANUS1;
            else if(type == 2) cInfo[vehicleid][cTuning] = MOD_URANUS2;
            StartTimer(playerid,180,4);
            return 1;
        }
        case 559:
        {
            if(PlayerMoney[ playerid ] > 7000)
                GivePlayerMoney(playerid,-7000);
            else return SendClientMessage(playerid,GRAD, "{FF6347}Perspëjimas: Jûs neturite pakankamai pingu ($7000).");
            if(type == 1) cInfo[vehicleid][cTuning] = MOD_JESTER;
            else if(type == 2) cInfo[vehicleid][cTuning] = MOD_JESTER2;
            StartTimer(playerid,180,4);
            return 1;
        }
        case 560:
        {
            if(PlayerMoney[ playerid ] > 7000)
                GivePlayerMoney(playerid,-7000);
            else return SendClientMessage(playerid,GRAD, "{FF6347}Perspëjimas: Jûs neturite pakankamai pingu ($7000).");
            if(type == 1) cInfo[vehicleid][cTuning] = MOD_SULTAN;
            else if(type == 2) cInfo[vehicleid][cTuning] = MOD_SULTAN2;
            StartTimer(playerid,180,4);
            return 1;
        }
        case 561:
        {
            if(PlayerMoney[ playerid ] > 7000)
                GivePlayerMoney(playerid,-7000);
            else return SendClientMessage(playerid,GRAD, "{FF6347}Perspëjimas: Jûs neturite pakankamai pingu ($7000).");
            if(type == 1) cInfo[vehicleid][cTuning] = MOD_STRATUM;
            else if(type == 2) cInfo[vehicleid][cTuning] = MOD_STRATUM2;
            StartTimer(playerid,180,4);
            return 1;
        }
        case 562:
        {
            if(PlayerMoney[ playerid ] > 7000)
                GivePlayerMoney(playerid,-7000);
            else return SendClientMessage(playerid,GRAD, "{FF6347}Perspëjimas: Jûs neturite pakankamai pingu ($7000).");
            if(type == 1) cInfo[vehicleid][cTuning] = MOD_ELEGY;
            else if(type == 2) cInfo[vehicleid][cTuning] = MOD_ELEGY2;
            StartTimer(playerid,180,4);
            return 1;
        }
        case 565:
        {
            if(PlayerMoney[ playerid ] > 7000)
                GivePlayerMoney(playerid,-7000);
            else return SendClientMessage(playerid,GRAD, "{FF6347}Perspëjimas: Jûs neturite pakankamai pingu ($7000).");
            if(type == 1) cInfo[vehicleid][cTuning] = MOD_FLASH;
            else if(type == 2) cInfo[vehicleid][cTuning] = MOD_FLASH2;
            StartTimer(playerid,180,4);
            return 1;
        }
        case 536:
        {
            if(PlayerMoney[ playerid ] > 7000)
                GivePlayerMoney(playerid,-7000);
            else return SendClientMessage(playerid,GRAD, "{FF6347}Perspëjimas: Jûs neturite pakankamai pingu ($7000).");
            if(type == 1) cInfo[vehicleid][cTuning] = MOD_BLADE1;
            else if(type == 2) cInfo[vehicleid][cTuning] = MOD_BLADE2;
            StartTimer(playerid,180,4);
            return 1;
        }
        case 575:
        {
            if(PlayerMoney[ playerid ] > 7000)
                GivePlayerMoney(playerid,-7000);
            else return SendClientMessage(playerid,GRAD, "{FF6347}Perspëjimas: Jûs neturite pakankamai pingu ($7000).");
            if(type == 1) cInfo[vehicleid][cTuning] = MOD_BROADWAY1;
            else if(type == 2) cInfo[vehicleid][cTuning] = MOD_BROADWAY2;
            StartTimer(playerid,180,4);
            return 1;
        }
        case 534:
        {
            if(PlayerMoney[ playerid ] > 7000)
                GivePlayerMoney(playerid,-7000);
            else return SendClientMessage(playerid,GRAD, "{FF6347}Perspëjimas: Jûs neturite pakankamai pingu ($7000).");
            if(type == 1) cInfo[vehicleid][cTuning] = MOD_REMINGTON1;
            else if(type == 2) cInfo[vehicleid][cTuning] = MOD_REMINGTON2;
            StartTimer(playerid,180,4);
            return 1;
        }
        case 567:
        {
            if(PlayerMoney[ playerid ] > 7000)
                GivePlayerMoney(playerid,-7000);
            else return SendClientMessage(playerid,GRAD, "{FF6347}Perspëjimas: Jûs neturite pakankamai pingu ($7000).");
            if(type == 1) cInfo[vehicleid][cTuning] = MOD_SAVANA1;
            else if(type == 2) cInfo[vehicleid][cTuning] = MOD_SAVANA2;
            StartTimer(playerid,180,4);
            return 1;
        }
        case 535:
        {
            if(PlayerMoney[ playerid ] > 7000)
                GivePlayerMoney(playerid,-7000);
            else return SendClientMessage(playerid,GRAD, "{FF6347}Perspëjimas: Jûs neturite pakankamai pingu ($7000).");
            if(type == 1) cInfo[vehicleid][cTuning] = MOD_SLAMVAN1;
            else if(type == 2) cInfo[vehicleid][cTuning] = MOD_SLAMVAN2;
            StartTimer(playerid,180,4);
            return 1;
        }
        case 576:
        {
            if(PlayerMoney[ playerid ] > 7000)
                GivePlayerMoney(playerid,-7000);
            else return SendClientMessage(playerid,GRAD, "{FF6347}Perspëjimas: Jûs neturite pakankamai pingu ($7000).");
            if(type == 1) cInfo[vehicleid][cTuning] = MOD_TORNADO1;
            else if(type == 2) cInfo[vehicleid][cTuning] = MOD_TORNADO2;
            StartTimer(playerid,180,4);
            return 1;
        }
        default: return SendClientMessage(playerid,GRAD, "{FF6347}Perspëjimas: Jûsø automobilius negali buti tuninguojamas.");
    }
    return 1;
}
stock GetCarOwner(vehicleid)
{
    foreach(Player,playerid)
    {
        if ( PlayerOn[ playerid ] == false ) continue;
        if ( pInfo[ playerid ][ pMySQLID ] == cInfo[ vehicleid ][ cOwner ] )
        return playerid;
    }
    return INVALID_PLAYER_ID;
}
stock CheckCarKeys(playerid,vehicle)
{
    if ( pInfo[ playerid ][ pMySQLID ] == cInfo[ vehicle ][ cOwner ] ) return 1;
    else if ( pInfo[ playerid ][ pDubKey ] == cInfo[ vehicle ][ cID ] ) return 1;
    else if ( pInfo[ playerid ][ pMember ] == cInfo[ vehicle ][ cFaction ] && cInfo[ vehicle ][ cFaction ] > 0) return 1;
    else return 0;
}
stock PlayerToPlayer( Float:radi, playerid, targetid )
{
    new Float:pX,
        Float:pY,
        Float:pZ;
    GetPlayerPos( targetid, pX, pY, pZ );
    return IsPlayerInRangeOfPoint( playerid, radi, pX, pY, pZ );
}
stock PlayerToCar( Float:radi, playerid, veh )
{
    new Float:pX,
        Float:pY,
        Float:pZ;
    GetVehiclePos( veh, pX, pY, pZ );
    return IsPlayerInRangeOfPoint( playerid, radi, pX, pY, pZ );
}
stock GetOriginType(playerid)
{
    if(!strcmp("Airis",pInfo[playerid][pOrigin],true) ||
       !strcmp("Anglas",pInfo[playerid][pOrigin],true) ||
       !strcmp("Skotas",pInfo[playerid][pOrigin],true) ||
       !strcmp("Kanadietis",pInfo[playerid][pOrigin],true) ||
       !strcmp("Australas",pInfo[playerid][pOrigin],true) ||
       !strcmp("Amerikietis",pInfo[playerid][pOrigin],true))
        return -1;
    else if(!strcmp("Kinas",pInfo[playerid][pOrigin],true))
        return 2;
    else if(!strcmp("Rusas",pInfo[playerid][pOrigin],true))
        return 3;
    else if(!strcmp("Italas",pInfo[playerid][pOrigin],true))
        return 4;
    else if(!strcmp("Ispanas",pInfo[playerid][pOrigin],true))
        return 7;
    else if(!strcmp("Japonas",pInfo[playerid][pOrigin],true))
        return 8;
    else if(!strcmp("Olandas",pInfo[playerid][pOrigin],true))
        return 9;
    else if(!strcmp("Brazilas",pInfo[playerid][pOrigin],true))
        return 10;
    else if(!strcmp("Portugalas",pInfo[playerid][pOrigin],true))
        return 10;
    else if(!strcmp("Kubietis",pInfo[playerid][pOrigin],true))
        return 11;
    else if(!strcmp("Norvegas",pInfo[playerid][pOrigin],true))
        return 12;
    else if(!strcmp("Vokietis",pInfo[playerid][pOrigin],true))
        return 13;
    else if(!strcmp("Prancuzas",pInfo[playerid][pOrigin],true))
        return 15;
    else if(!strcmp("Kolumbietis",pInfo[playerid][pOrigin],true))
        return 16;
    else if(!strcmp("Slovakas",pInfo[playerid][pOrigin],true))
        return 17;
    else if(!strcmp("Graikas",pInfo[playerid][pOrigin],true))
        return 18;
    else if(!strcmp("Baltarusis",pInfo[playerid][pOrigin],true))
        return 19;
    else if(!strcmp("Ukrainietis",pInfo[playerid][pOrigin],true))
        return 20;
    else if(!strcmp("Lietuvis",pInfo[playerid][pOrigin],true))
        return 21;
    else if(!strcmp("Latvis",pInfo[playerid][pOrigin],true))
        return 22;
    else if(!strcmp("Estas",pInfo[playerid][pOrigin],true))
        return 23;
    else if(!strcmp("Lenkas",pInfo[playerid][pOrigin],true))
        return 24;
    else if(!strcmp("Èekas",pInfo[playerid][pOrigin],true))
        return 25;
    else if(!strcmp("Bulgaras",pInfo[playerid][pOrigin],true))
        return 26;
    else if(!strcmp("Arabas",pInfo[playerid][pOrigin],true))
        return 27;
    else if(!strcmp("Suomis",pInfo[playerid][pOrigin],true))
        return 28;
    else if(!strcmp("Portugalas",pInfo[playerid][pOrigin],true))
        return 29;
    else if(!strcmp("Kroatas",pInfo[playerid][pOrigin],true))
        return 30;
    else if(!strcmp("Belgas",pInfo[playerid][pOrigin],true))
        return 31;
    else if(!strcmp("Meksikietis",pInfo[playerid][pOrigin],true))
        return 32;
    else if(!strcmp("Dominikietis",pInfo[playerid][pOrigin],true))
        return 33;
    else if(!strcmp("Indas",pInfo[playerid][pOrigin],true))
        return 34;
    return -1;
}
stock SendOrginMessage(playerid,text[])
{
    new string[256],
        tempstr[30];
    switch(GetOriginType(playerid))
    {
        case 2: tempstr = "Kiniëtiðkai";
        case 3: tempstr = "Rusiðkai";
        case 4: tempstr = "Italiðkai";
        case 7: tempstr = "Ispaniðkai";
        case 8: tempstr = "Japoniðkai";
        case 9: tempstr = "Olandiðkai";
        case 10: tempstr = "Portugaliðkai";
        case 11: tempstr = "Kubietiðkai";
        case 12: tempstr = "Norvegiðkai";
        case 13: tempstr = "Vokiðkai";
        case 15: tempstr = "Prancûziðkai";
        case 16: tempstr = "Turkiðkai";
		case 17: tempstr = "Slovakiðkai"; 
		case 18: tempstr = "Graikiðkai";
		case 19: tempstr = "Baltarusiðkai";
		case 20: tempstr = "Ukrainietiðkai";
		case 21: tempstr = "Lietuviðkai";
		case 22: tempstr = "Latviðkai";
		case 23: tempstr = "Estiðkai";
		case 24: tempstr = "Lenkiðkai";
		case 25: tempstr = "Èekiðkai";
		case 26: tempstr = "Bulgariðkai";
		case 27: tempstr = "Arabiðkai";
		case 28: tempstr = "Suomiðkaii";
		case 29: tempstr = "Portugaliðkai";
		case 30: tempstr = "Kroatiðkai";
		case 31: tempstr = "Belgiðkai";
		case 32: tempstr = "Meksikietiðkai";
		case 33: tempstr = "Domininkietiðkai";
		case 34: tempstr = "Indiiðkai";		
    }
    new virt = GetPlayerVirtualWorld( playerid );
    new intt = GetPlayerInterior( playerid );
    foreach(Player,i)
    {
        if(GetOriginType(i) == GetOriginType(playerid))
            format(string,256,"%s sako %s: %s",GetPlayerNameEx(playerid),tempstr,text);
        else if(GetOriginType(playerid) == -1)
            format(string,256,"%s sako: %s",GetPlayerNameEx(playerid),text);
        else
            format(string,256,"%s sako %s: Neþinoma kalba",GetPlayerNameEx(playerid),tempstr);
        if(PlayerToPlayer( 11, playerid, i ) && virt == GetPlayerVirtualWorld( playerid ) && intt == GetPlayerInterior( playerid ))
            SendChatMessage(i,COLOR_FADE1,string);
    }
}
stock AdminLog( mysqlid, givemysqlid, text[] )
{
    new string[ 512 ];
    format( string, sizeof(string), "INSERT INTO adminlog (Kuris,Kam,Ka) VALUES (%d,%d,'%s')", mysqlid, givemysqlid, text);
    mysql_pquery(DbHandle,  string );
    return 1;
}
stock ActionLog( mysqlid, text[] )
{
    new string[ 512 ];
    format( string, sizeof(string), "INSERT INTO actionlog (Kas,Veiksmas) VALUES (%d,'%s')", mysqlid, text );
    mysql_pquery(DbHandle,  string );
    return 1;
}
stock CJLog( mysqlid, vehicleid, text[] )
{
    new string[ 512 ];
    format( string, sizeof(string), "INSERT INTO cjlog (Kas,VehicleID,Veiksmas) VALUES (%d,%d,'%s')", mysqlid, vehicleid, text );
    mysql_pquery(DbHandle,  string );
    return 1;
}
stock VehicleHasWindows( model )
{
    if ( IsVehicleBike( model ) || !VehicleHasEngine( model ) )
        return false;
    switch ( model )
    {
        case 424, 429, 430, 432, 439, 446, 452, 453, 454, 457, 471, 472, 473,
             480, 484, 485, 486, 493, 530, 531, 533, 536, 539, 555, 567, 568,
             571, 572, 575, 595:
        return false;
    }
    return true;
}

stock
    IsAirVehicle( model )
{
    switch ( model )
    {
        case 592, 577, 511, 512, 593, 520, 553, 476, 519, 460, 513, 548, 425, 417, 487, 488, 497, 563, 447, 467: return true;
    }

    return false;
}

stock IsVehicleBike( model )
{
    switch ( model )
    {
        case 581, 462, 521, 463, 522, 461, 448, 471, 468, 481, 523, 586, 509, 510:
        return true;
    }
    return false;
}

stock IsVehicleTaxed(model)
{
    if(IsVehicleBike(model))
        return false;
    else 
        return true;
}

stock GetTrailerPullingVehicle(vehicleid)
{
    if(!IsValidVehicle(vehicleid))  
        return INVALID_VEHICLE_ID;
  
    for(new i = 1; i < MAX_VEHICLES; i++)
    {
        if(!IsValidVehicle(i))
            continue;
        if(GetVehicleTrailer(i) == vehicleid)
            return i;
    }
    return INVALID_VEHICLE_ID;
}
stock IsVehicleTrailer( model )
{
    switch ( model )
    {
        case 435, 450, 584, 591:
        return true;
    }
    return false;
}

stock IsPlayerAtFishBoat ( playerid )
{
    new idcar = INVALID_VEHICLE_ID;
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        idcar = GetPlayerVehicleID( playerid );
    else
        idcar = GetNearestVehicle( playerid, 10.0 );
    if ( idcar == INVALID_VEHICLE_ID )
        return INVALID_VEHICLE_ID;
    switch ( GetVehicleModel( idcar ) )
    {
        case 473, 453, 454, 493, 484:
        return idcar;
    }
    return INVALID_VEHICLE_ID;
}

stock IsVehicleTrucker( model )
{
    switch ( model )
    {
        case 530, 600, 543, 605, 422, 478, 554, 413, 459, 482, 440, 498, 609, 499, 414, 456, 455, 578, 443, 428, 403, 514, 515:
        return true;
    }
    return false;
}
stock IsWeaponHasAmmo( model )
{
    switch ( model )
    {
        case 0..15,19..21,44..47:
        return false;
    }
    return true;
}
stock VehicleHasEngine( model )
{
    switch ( model )
    {
        case 509, 481, 510:
        return false;
    }
    return true;
}
stock IsAPlane( model )
{
    switch ( model )
    {
        case 592, 577, 511, 512, 593, 520, 553, 476, 519, 460, 513, 548, 425,
             417, 487, 488, 497, 563, 447, 469:
        return true;
    }
    return false;
}
stock IsABoat( model )
{
    switch ( model )
    {
        case 472, 473, 493, 595, 484, 430, 453, 452, 446, 454:
            return true;
    }
    return false;
}
stock GetJobName(jobid)
{
    new txt[ 56 ];
    format( txt, 56, "%s", pJobs[ jobid ][ Name ] );
    return txt;
}
stock GetPlayerRangName( playerid )
{
    new rtext[ 30 ],
        pfaction = PlayerFaction( playerid );
    switch( pInfo[ playerid ][ pRank ] )
    {
        case 1: format(rtext, 126, "%s", fInfo[pfaction][fRank1]);
        case 2: format(rtext, 126, "%s", fInfo[pfaction][fRank2]);
        case 3: format(rtext, 126, "%s", fInfo[pfaction][fRank3]);
        case 4: format(rtext, 126, "%s", fInfo[pfaction][fRank4]);
        case 5: format(rtext, 126, "%s", fInfo[pfaction][fRank5]);
        case 6: format(rtext, 126, "%s", fInfo[pfaction][fRank6]);
        case 7: format(rtext, 126, "%s", fInfo[pfaction][fRank7]);
        case 8: format(rtext, 126, "%s", fInfo[pfaction][fRank8]);
        case 9: format(rtext, 126, "%s", fInfo[pfaction][fRank9]);
        case 10: format(rtext, 126, "%s", fInfo[pfaction][fRank10]);
        case 11: format(rtext, 126, "%s", fInfo[pfaction][fRank11]);
        case 12: format(rtext, 126, "%s", fInfo[pfaction][fRank12]);
        case 13: format(rtext, 126, "%s", fInfo[pfaction][fRank13]);
        default: rtext = "Joks";
    }
    return rtext;
}
stock ShowStats( giveplayerid, playerid )
{
        new string[ 180 ],
            spawnplace[ 256 ],
            nextexp = ( pInfo[ playerid ][ pLevel ] + 1 ) * 4,
            rankstr[32], 
            hunger[16];
        
        switch ( pInfo[ playerid ][ pSpawn ] )
        {
            case 0: spawnplace = "Idlewood Pizza Stack";
            case 1: spawnplace = "Nomuojamas/nuosavas namas";
            case 2: spawnplace = "Frakcijos vieta.";
            case 3: spawnplace = "Verslas";
            case 4: spawnplace = "Los Santos Unity Station";
            default: spawnplace = "Idlewood Pizza Stack";
        }        
        if(pInfo[ playerid ][ pJob ] == JOB_TRUCKER) // Nes furistai ant tiek geresni uþ kitus.
        {
            new hours = pInfo[ playerid ][ pJobHours ];
            if(hours >= 48)
                rankstr = "Profesionalus vairuotojas";
            else if(hours >= 32)
                rankstr = "Vairuotojas";
            else if(hours >= 24)
                rankstr = "Vairuotojas-Mokinys";
            else if(hours >= 12) 
                rankstr = "Profesionalus kurjeris";
            else
                rankstr = "Kurjeris-Mokinys";
        }  
        else 
            format(rankstr, sizeof(rankstr),"%d/%d",
                    pInfo[playerid][pJobLevel], pInfo[ playerid ][ pJobSkill ]);

        if(pInfo[ playerid ][ pHunger ] < 0)
            hunger = "Persivalgæs";
        else if(pInfo[ playerid ][ pHunger ] < 10)
            hunger = "Sotus";
        else if(pInfo[ playerid ][ pHunger ] < 15)
            hunger = "Alkanas";
        else
            hunger = "Labai alkanas";


		format           ( string, sizeof(string), "|__________________________________%s__________________________________|", 
		GetName(playerid));  
		SendClientMessage( giveplayerid, COLOR_GREEN, string );
		format           ( string, sizeof(string), "|VEIKËJAS| Lygis:[%d] Praþaista valandø:[%d] Patirties taðkai:[%d/%d] Amþius:[%d] Lytis:[%s] Tautybë:[%s]" ,
		pInfo[playerid][pLevel],pInfo[playerid][pOnTime],pInfo[playerid][pExp],nextexp,pInfo[playerid][pAge],pInfo[playerid][pSex],pInfo[playerid][pOrigin]);
		SendClientMessage( giveplayerid, COLOR_FADE1, string);
		format           ( string, sizeof(string), "|VEIKËJAS| Telefonas:[%d] Mirèiø skaièius:[%d] Liga:[%s] Alkis:[%s]" ,
		pInfo[playerid][pPhone],pInfo[playerid][pDeaths],Ligos[pInfo[playerid][pLiga]], hunger);
		SendClientMessage( giveplayerid, COLOR_FADE2, string);		
		format           ( string, sizeof(string), "|VEIKËJAS| Remëjo lygis:[%d] Áspëjimai:[%d] Atsiradimas:[%s] Gyvybës:[%d] Jëga:[%d]" ,
		pInfo[playerid][pDonator],pInfo[playerid][pWarn],spawnplace,100+ pInfo[ playerid ][ pHealthLevel ] * 3, pInfo[ playerid ][ pStrengthLevel ]);	
		SendClientMessage( giveplayerid, COLOR_FADE1, string);		
		format           ( string, sizeof(string), "|FINANSAI| Grynieji pinigai:[%d$] Banko sàskaitoje:[%d$] Padëtas indëlis:[%d$] Palûkanø procentas: 0.5% " ,
		PlayerMoney[ playerid ],pInfo[playerid][pBank],pInfo[ playerid ][ pSavings ]);
		SendClientMessage( giveplayerid, COLOR_FADE2, string);		
		format           ( string, sizeof(string), "|DARBAS| Dirba:[%s] Kontraktas:[%d] Rangas darbe:[%s] Patirties taðkai darbe:[%d]" ,
		GetJobName(pInfo[playerid][pJob]),pInfo[playerid][pJobContr], rankstr,(( pInfo[ playerid ][ pJobLevel ] +1 ) * 100));	
		SendClientMessage( giveplayerid, COLOR_FADE1, string);		
		format           ( string, sizeof(string), "|FRAKCIJA| Frakcijos pavadinimas:[%s (ID%d)] Rangas frakcijoje: [Nr.%d, %s]" ,
		fInfo[ PlayerFaction( playerid ) ][ fName ],pInfo[ playerid ][ pMember ], pInfo[ playerid ][ pRank ], GetPlayerRangName( playerid ));
		SendClientMessage( giveplayerid, COLOR_FADE2, string);
        format           ( string, sizeof(string), "|PRIKLAUSOMYBË| Heroinas:[%d] Amfetaminas:[%d] Kokainas:[%d] Metamfetaminas[%d] Ekstazi:[%d]",
		pInfo[ playerid ][ pHeroineAddict ], pInfo[ playerid ][ pAmfaAddict ], pInfo[ playerid ][ pCocaineAddict ], pInfo[ playerid ][ pMetaAmfaineAddict ], pInfo[ playerid ][ pExtazyAddict ] );
        SendClientMessage( giveplayerid, COLOR_FADE1, string );
        format           ( string, sizeof(string), "|PRIKLAUSOMYBË| PCP:[%d] Krekas:[%d] Opiumas:[%d]",
		pInfo[ playerid ][ pPCPAddict ], pInfo[ playerid ][ pCrackAddict ], pInfo[ playerid ][ pOpiumAddict ] );
        SendClientMessage( giveplayerid, COLOR_FADE2, string );		
		format           ( string, sizeof(string), "|ADMINISTRACIJA| Int:[%d], VirtW[%d], Administratoriaus lygis:[%d]", 
		GetPlayerInterior(playerid),GetPlayerVirtualWorld(playerid),pInfo[playerid][pAdmin]);
		if( pInfo[giveplayerid][pAdmin] > 0 )		
		SendClientMessage( giveplayerid, COLOR_WHITE, string);
		format           ( string, sizeof(string), "--------------------------------------------%s--------------------------------------------|", 
		GetName(playerid));  
		SendClientMessage( giveplayerid, COLOR_GREEN, string );
        return 1;
}

stock ShowPlayerInfoText( playerid )
{
    PlayerTextDrawShow( playerid, Greitis[ playerid ] );
    return 1;
}
stock HidePlayerInfoText( playerid )
{
    PlayerTextDrawHide( playerid, Greitis[ playerid ] );
    return 1;
}
stock ShowInfoText( playerid, text[ ], time)
{
    PlayerTextDrawShow     ( playerid, InfoText[ playerid ] );
    PlayerTextDrawSetString( playerid, InfoText[ playerid ], text );
    if(InfoTextTimer[ playerid ] != -1)
        KillTimer(InfoTextTimer[ playerid ]);
    InfoTextTimer[ playerid ] = SetTimerEx             ( "HideInfoText", time, false, "d", playerid );
    return 1;
}

FUNKCIJA:HideInfoText( playerid )
{
    PlayerTextDrawHide( playerid, InfoText[ playerid ] );
    InfoTextTimer[ playerid ] = -1;
    return 1;
}

stock Jail(kas[],playerid,time, kodel[])
{
    new string[ 216 ],
        name[ MAX_PLAYER_NAME ],
        ip[ 16 ];

    GetPlayerName(playerid,name,MAX_PLAYER_NAME);

    foreach(Player,i)
    {
        if( !strcmp(kas,GetName(i),true) )
        {
            format(string,216, "INSERT INTO `nuobaudos` (Kas, Ka, Kam, Priezastis) VALUES('%d', 'uþdarë á kalëjimá ', '%d', '%s')", pInfo[ i ][ pMySQLID ], pInfo[ playerid ][ pMySQLID ], kodel);
            mysql_pquery(DbHandle, string);
            break;
        }
    }

    format                ( string, 126, "AdmCmd Administratorius %s pasodino á kalëjimà %s, %d minutëms.", kas, name, time);
    SendClientMessageToAll( COLOR_LIGHTRED, string );
    format                ( string, 126, "AdmCmd Nurodytà prieþastis: %s ",kodel);
    SendClientMessageToAll( COLOR_LIGHTRED, string );
    pInfo[ playerid ][ pJailTime ] = time*60 ;
    pInfo[ playerid ][ pJail     ] = 1;
    Data_SetPlayerLocation(playerid, "ooc_jail");
    if( time > 0 )
        ResetPlayerWeapons   ( playerid );

    GetPlayerIp(playerid,ip,16);

    MySQLCheckConnection();
    SaveAccount( playerid );
    return 1;
}
stock NearPhone( playerid )
{
    if( GetPVarInt ( playerid, "NearPhone" ) )
        return 0;
    if ( PlayerToPoint( 5.0, playerid, 281.7844,1000.8417,2119.1150 ) ||
         PlayerToPoint( 5.0, playerid, 281.7772,1003.5189,2119.1150 ) ||
         PlayerToPoint( 5.0, playerid, 281.7768,1006.3833,2119.1150 ) ||
         PlayerToPoint( 5.0, playerid, 44.4012,1219.5900,19.0292 ) ||
		 PlayerToPoint( 5.0, playerid, 2069.4824,-1767.1677,13.5625) ||
		 PlayerToPoint( 5.0, playerid, 2069.4824,-1767.1677,13.5625) ||
	  	 PlayerToPoint( 5.0, playerid, 1809.4171,-1598.1709,13.5469) ||
		 PlayerToPoint( 5.0, playerid, 1807.5339,-1599.3356,13.5469) ||
	 	 PlayerToPoint( 5.0, playerid, 1805.8998,-1600.7174,13.5469) ||
	   	 PlayerToPoint( 5.0, playerid, 1711.2419,-1605.1455,13.5469) ||
		 PlayerToPoint( 5.0, playerid, 1542.4297,-1684.7871,13.5545) ||
		 PlayerToPoint( 5.0, playerid, 1522.2264,-1830.7876,13.5469) ||
		 PlayerToPoint( 5.0, playerid, 2166.6946,-1155.4084,24.8679) ||
		 PlayerToPoint( 5.0, playerid, 1771.3378,-1543.3586,9.4434 ) ||		 
         PlayerToPoint( 5.0, playerid, -22.9650,1075.2723,19.7422 ) )
         return 1;
    else return 0;
}
stock NearBankomat( playerid )
{
    if ( PlayerToPoint( 5.0, playerid, -796.7485400,1501.4931600,21.5664000 ) ||
         PlayerToPoint( 5.0, playerid, -638.9351800,1444.8444800,12.6069600 ) ||
         PlayerToPoint( 5.0, playerid, -181.5487,1027.2559,19.7344 ) ||
		 PlayerToPoint( 5.0, playerid, 2068.71, -1769.29, 13.20 ) ||
         PlayerToPoint( 5.0, playerid, 2139.42, -1163.94, 23.62 ) ||
         PlayerToPoint( 5.0, playerid, 2405.95, -1548.69, 23.81 ) ||		 
         PlayerToPoint( 5.0, playerid, -96.5025,1189.8512,19.7422 ) )
         return 1;
    else return 0;
}
stock PayLog( Kas, Ivykis, Kam, Kiek )
{
    new string[ 128 ],
        Tipas[ 64 ];

    switch ( Ivykis )
    {
        case 1: Tipas = "Nusipirko namà ";
        case 2: Tipas = "Nusipirko bizná";
        case 3: Tipas = "Nusipirko tr. priemonæ";
        case 4: Tipas = "Pardavë tr. priemonæ";
        case 5: Tipas = "Pardavë bizná";
        case 6: Tipas = "Pardavë namà ";
        case 7: Tipas = "Sumokëjo (/pay) pinigø";
        case 8: Tipas = "Gavo (/pay) pinigø";
        case 9: Tipas = "Gautas valandos atlyginimas";
        case 10: Tipas = "Gavo uþ nuomà.";
        case 11: Tipas = "Sumokëjo áeidamas á bizná";
        case 12: Tipas = "Pirko garaþà";
        case 13: Tipas = "Pardavë garaþà";
        case 14: Tipas = "Gavo pavedimà (/transfer)";
        case 15: Tipas = "Pervedë pinigus (/transfer)";
        case 16: Tipas = "Sunaikino tr. priemonæ.";
        case 17: Tipas = "Pasiimë pinigus ið namo banko";
        case 18: Tipas = "Pasiimë pinigus ið biznio banko";
        case 19: Tipas = "Padëjo pinigus á namo banká ";
        case 20: Tipas = "Padëjo pinigus á biznio banká ";
    }
    format( string, sizeof(string), "INSERT INTO paylog (Kas,Ivykis,Kam,Suma) VALUES (%d,'%s',%d,%d)", Kas, Tipas, Kam, Kiek );
    mysql_pquery(DbHandle,  string );
    return 1;
}
stock NarkLog( Kas, Ivykis, Kam, Ka[ ], Kiek )
{
    new string[ 128 ],
        Tipas[ 64 ];

    switch ( Ivykis )
    {
        case 1: Tipas = "Padëjo á namà ";
        case 2: Tipas = "Pasiimë ið namo";
        case 3: Tipas = "Padëjo á bagaþinà";
        case 4: Tipas = "Pasiimë ið bagaþinës";
        case 5: Tipas = "Gavo ið þaidëjo";
        case 6: Tipas = "Davë þaidëjui";
        case 7: Tipas = "Padëjo á garaþo inventoriø";
        case 8: Tipas = "Pasiimë ið garaþo inventoriaus";
    }
    format( string, sizeof(string), "INSERT INTO narklog (Kas,Ka,Kiek,Kam,Priezastis) VALUES (%d,'%s',%d,%d,'%s')", Kas, Ka, Kiek, Kam, Tipas );
    mysql_pquery(DbHandle,  string );
    return 1;
}
stock GunLog( Kas, Ivykis, Kam, Ka[ ], Kiek )
{
    new string[ 128 ],
        Tipas[ 64 ];

    switch ( Ivykis )
    {
        case 1: Tipas = "Padëjo á namà ";
        case 2: Tipas = "Pasiimë ið namo";
        case 3: Tipas = "Padëjo á bagaþinà";
        case 4: Tipas = "Pasiimë ið bagaþinës";
        case 5: Tipas = "Gavo ið þaidëjo";
        case 6: Tipas = "Davë þaidëjui";
        case 7: Tipas = "Padëjo á garaþo inventoriø";
        case 8: Tipas = "Pasiimë ið garaþo inventoriaus";
    }
    format( string, sizeof(string), "INSERT INTO gunlog (Kas,Ka,Kiek,Kam,Priezastis) VALUES (%d,'%s',%d,%d,'%s')", Kas, Ka, Kiek, Kam, Tipas );
    mysql_pquery(DbHandle,  string );
    return 1;
}
stock SetPlayerCheckPointEx( playerid, type, Float:x, Float:y, Float:z, Float:a )
{
    if( Checkpoint[ playerid ] == CHECKPOINT_NONE )
    {
        SetPVarFloat(playerid, "CPx", x);
        SetPVarFloat(playerid, "CPy", y);
        SetPVarFloat(playerid, "CPz", z);
        SetPlayerCheckpoint( playerid, x, y, z, a);
        Checkpoint[ playerid ] = type;
    }
    return 1;
}
stock SetPlayerRaceCheckPointEx( playerid, cptype, type, Float:x, Float:y, Float:z, Float:nextx, Float:nexty, Float:nextz, Float:size )
{
    SetPlayerRaceCheckpoint( playerid, type, x, y, z, nextx, nexty, nextz, size );
    Checkpoint[ playerid ] = cptype;
    return 1;
}
stock setLicenseCp( playerid )
{
    switch( GetPVarInt( playerid, "LIC_TYPE" ) )
    {

//Automobilio ir motociklo licenzijos laikymo kordinatës
        case 1,2:
        {
            switch( GetPVarInt( playerid, "LIC_CP" ) )
            {
				case 1: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2433.3464,-1475.4110,23.5458,5.0);
				case 2: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2474.5378,-1447.1062,24.6292,5.0);
				case 3: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2551.2375,-1446.5909,32.9943,5.0);
				case 4: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2623.5039,-1446.4851,30.9974,5.0);
				case 5: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2644.4197,-1420.3839,29.9973,5.0);
				case 6: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2675.4060,-1443.1221,30.0867,5.0);
				case 7: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2706.2893,-1509.9299,30.0624,5.0);
				case 8: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2765.7788,-1491.7843,28.2176,5.0);
				case 9: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2857.5083,-1490.9799,10.4573,5.0);
				case 10: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2878.6841,-1421.1472,10.5704,5.0);
				case 11: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2821.7412,-1385.2881,17.8054,5.0);
				case 12: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2799.2200,-1298.7750,39.4824,5.0);
				case 13: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2747.9302,-1255.6283,59.1255,5.0);
				case 14: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2611.9409,-1253.9144,47.9993,5.0);
				case 15: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2464.1138,-1254.3789,24.4127,5.0);
				case 16: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2397.5059,-1254.5380,23.5399,5.0);
				case 17: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2369.0769,-1284.1478,23.5522,5.0);
				case 18: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2316.9075,-1298.2368,23.7711,5.0);
				case 19: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2301.8547,-1364.8926,23.5720,5.0);
				case 20: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2244.6155,-1380.9020,23.5498,5.0);
				case 21: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2211.2725,-1426.3003,23.5350,5.0);
				case 22: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2210.4849,-1475.2710,23.5340,5.0);
				case 23: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2210.2141,-1523.9452,23.5441,5.0);
				case 24: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2199.3867,-1623.4713,15.6714,5.0);
				case 25: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2174.0693,-1633.8223,14.3178,5.0);
				case 26: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2122.5835,-1616.0321,13.1031,5.0);
				case 27: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2080.0620,-1654.7314,13.1068,5.0);
				case 28: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2079.6543,-1706.7753,13.1066,5.0);
				case 29: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2079.6130,-1735.2004,13.1029,5.0);
				case 30: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2096.4258,-1754.0223,13.1176,5.0);
				case 31: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2126.2566,-1754.7616,13.1226,5.0);
				case 32: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2168.0786,-1754.4491,13.0959,5.0);
				case 33: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2254.0505,-1733.6403,13.0988,5.0);
				case 34: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2333.9773,-1734.3068,13.0989,5.0);
				case 35: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2405.4519,-1734.4344,13.1003,5.0);
				case 36: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2433.1086,-1642.9390,26.9986,5.0);
				case 37: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2433.3088,-1603.4298,25.7429,5.0);
				case 38: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 2433.5308,-1559.5063,23.5441,5.0);
            }
        }

//Skraidymo licenzijos laikymo kordinatës
        case 3:
        {
            switch( GetPVarInt( playerid, "LIC_CP" ) )
            {
				 case 1: SetPlayerRaceCheckPointEx( playerid, CHECKPOINT_LIC, 3,1918.3333,-2257.5476,19.3346,1916.1844,-2306.5242,78.6446,10.0 );
				 case 2: SetPlayerRaceCheckPointEx( playerid, CHECKPOINT_LIC, 3,1916.1844,-2306.5242,78.6446,1701.5432,-2387.9390,113.0942, 10.0 );
				 case 3: SetPlayerRaceCheckPointEx( playerid, CHECKPOINT_LIC, 3,1701.5432,-2387.9390,113.0942,1447.6058,-2242.4688,144.6308, 10.0 );
				 case 4: SetPlayerRaceCheckPointEx( playerid, CHECKPOINT_LIC, 3,1447.6058,-2242.4688,144.6308,1210.0662,-2004.8344,152.9503, 10.0 );
				 case 5: SetPlayerRaceCheckPointEx( playerid, CHECKPOINT_LIC, 3,1210.0662,-2004.8344,152.9503,925.8694,-1798.6184,136.2259, 10.0 );
				 case 6: SetPlayerRaceCheckPointEx( playerid, CHECKPOINT_LIC, 3,925.8694,-1798.6184,136.2259,535.4799,-1650.8319,122.6211, 10.0 );
				 case 7: SetPlayerRaceCheckPointEx( playerid, CHECKPOINT_LIC, 3,535.4799,-1650.8319,122.6211,20.3207,-1320.7156,146.6390, 10.0 );
				 case 8: SetPlayerRaceCheckPointEx( playerid, CHECKPOINT_LIC, 3,20.3207,-1320.7156,146.6390,-209.3477,-1445.8248,147.5437, 10.0 );
				 case 9: SetPlayerRaceCheckPointEx( playerid, CHECKPOINT_LIC, 3,-209.3477,-1445.8248,147.5437,75.2898,-2016.5239,123.6778, 10.0 );
				 case 10: SetPlayerRaceCheckPointEx( playerid, CHECKPOINT_LIC, 3,75.2898,-2016.5239,123.6778,370.7771,-2128.4263,143.4955, 10.0 );
				 case 11: SetPlayerRaceCheckPointEx( playerid, CHECKPOINT_LIC, 3,370.7771,-2128.4263,143.4955,943.4516,-2188.8318,165.2468, 10.0 );
				 case 12: SetPlayerRaceCheckPointEx( playerid, CHECKPOINT_LIC, 3,943.4516,-2188.8318,165.2468,1463.1583,-2273.5215,140.7639, 10.0 );
				 case 13: SetPlayerRaceCheckPointEx( playerid, CHECKPOINT_LIC, 3,1463.1583,-2273.5215,140.7639,1930.7386,-2248.5745,14.9643, 10.0 );
				 case 14: SetPlayerRaceCheckPointEx( playerid, CHECKPOINT_LIC, 3,1930.7386,-2248.5745,14.9643,1930.7386,-2248.5745,14.9643, 10.0 );
            }
        }

//Laivo licenzijos laikymo kordinatës
        case 4:
        {
            switch( GetPVarInt( playerid, "LIC_CP" ) )
            {
				case 1: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 722.9761,-1601.5739,-0.0674,5.0); //
				case 2: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 723.0297,-1878.1135,-0.2829,5.0); //
				case 3: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 605.8445,-2010.0400,-0.4840,5.0); //
				case 4: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 327.2888,-2103.7786,-0.1991,5.0); //
				case 5: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 73.2563,-1763.0634,0.0182,5.0); //
				case 6: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 75.2143,-1400.7008,-0.1708,5.0); //
				case 7: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 32.8657,-1430.4677,-0.2938,5.0); //
				case 8: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 7.8134,-1695.4635,-0.5832,5.0); //
				case 9: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 103.3241,-1971.6035,-0.5250,5.0); //
				case 10: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 302.8342,-1927.3613,-0.2275,5.0); //
				case 11: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 375.8572,-2117.1875,-0.0151,5.0); //
				case 12: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 678.6392,-2024.4448,-0.3480,5.0); //
				case 13: SetPlayerCheckPointEx( playerid, CHECKPOINT_LIC, 718.8523,-1628.1936,-0.1787,5.0); //
            }
        }
    }
    return 1;
}

stock FactionID( mysqlid )
{
    foreach(Faction,id)
    {
        if ( fInfo[ id ][ fID ] == mysqlid )
        return id;
    }
    return 0;
}
stock PlayerFaction( playerid )
{
    foreach(Faction,id)
    {
        if ( pInfo[ playerid ][ pMember ] == fInfo[ id ][ fID ] )
        return id;
    }
    return 0;
}
stock savePlayerNotes( playerid, slot )
{
    new string[ 126 ],
        string2[ 126 ],
        rows,
        ministr[ 8 ],
        Cache:result;

    format     ( string, 126, "SELECT slot FROM notes WHERE owner = %d AND slot = %d", pInfo[ playerid ][ pMySQLID ], slot );
    result = mysql_query(DbHandle,  string );
    rows = cache_get_row_count();

    if ( !rows )
    {
        format           ( ministr, 8, "NOTE_%d", slot );
        GetPVarString    ( playerid, ministr, string2, 126 );
        format           ( ministr, 8, "NOTE2_%d", slot );
        format           ( string2, sizeof(string2), "%s/%d", string2, GetPVarInt ( playerid, ministr ) );
        format     ( string, 200,"INSERT INTO notes (owner,slot,note) VALUES (%d,%d,'%s')", pInfo[ playerid ][ pMySQLID ], slot, string2 );
        mysql_query(DbHandle,  string, false);
    }
    else
    {
        format           ( ministr, 8, "NOTE_%d", slot );
        GetPVarString    ( playerid, ministr, string2, 126 );
        format           ( ministr, 8, "NOTE2_%d", slot );
        format           ( string2, sizeof(string2), "%s/%d", string2, GetPVarInt ( playerid, ministr ) );
        format     ( string, 200,"UPDATE notes SET note = '%s' WHERE owner = %d AND slot = %d", string2, pInfo[ playerid ][ pMySQLID ], slot );
        mysql_query(DbHandle,  string, false);
    }
    cache_delete(result);
    return 1;
}
stock LoadGarbage()
{
    new index = 0, Float:pos[6], misssionLocation[32];

    new Cache:result = mysql_query(DbHandle, "SELECT * FROM `garbage_positions`");

    for(new i = 0; i < cache_get_row_count(); i++)
    {
        if(index >= MAX_GARBAGE_CANS)
        {
            printf("KLAIDA. Duomenø bazëje yra daugiau ðiukðliø(%d) nei leidþia limitas(" #MAX_GARBAGE_CANS ")", cache_get_row_count());
            break;
        }
        GarbageInfo[ index ][ gModel ] = cache_get_field_content_int(i, "model_id");
        pos[ 0 ] = cache_get_field_content_float(i, "pos_x");
        pos[ 1 ] = cache_get_field_content_float(i, "pos_y");
        pos[ 2 ] = cache_get_field_content_float(i, "pos_z");
        pos[ 3 ] = cache_get_field_content_float(i, "rot_x");
        pos[ 4 ] = cache_get_field_content_float(i, "rot_y");
        pos[ 5 ] = cache_get_field_content_float(i, "rot_z");
        cache_get_field_content(i, "mission_location", misssionLocation);
        GarbageInfo[ index ][ gObjectId ] = CreateDynamicObject(GarbageInfo[ index ][ gModel ], pos[0], pos[1], pos[2], pos[3], pos[4], pos[5]);

        if(!strcmp(misssionLocation, "Rodeo", true))
            GarbageInfo[ index ][ gMission ] = TRASH_MISSION_MONTGOMERY;
        else if(!strcmp(misssionLocation, "Market", true))
            GarbageInfo[ index ][ gMission ] = TRASH_MISSION_DILIMORE;
        else if(!strcmp(misssionLocation, "Mulholand", true))
            GarbageInfo[ index ][ gMission ] = TRASH_MISSION_POLOMINO_CREEK;
		else if(!strcmp(misssionLocation, "Jefferson", true))
            GarbageInfo[ index ][ gMission ] = TRASH_MISSION_JEFFERSON;
        else if(!strcmp(misssionLocation, "Idlewood", true))
            GarbageInfo[ index ][ gMission ] = TRASH_MISSION_IDLEWOOD;

        index++;
    }
    cache_delete(result);
    printf("Serveryje yra sukurta %d siuksliu konteineriai.", index);
}

stock LoadIndustries()
{
    new industryCount;
    new Cache:result = mysql_query(DbHandle, "SELECT * FROM industries");
    for(new i = 0; i < cache_get_row_count(); i++)
    {
        Industries[ industryCount ][ Id ] = cache_get_field_content_int(i, "id");
        cache_get_field_content(i, "name",  Industries[ industryCount ][ Name ], DbHandle, MAX_INDUSTRY_NAME);
        Industries[ industryCount ][ PosX ] = cache_get_field_content_float(i, "x");
        Industries[ industryCount ][ PosY ] = cache_get_field_content_float(i, "y");
        Industries[ industryCount ][ PosZ ] = cache_get_field_content_float(i, "z");

        Itter_Add(IndustryIterator, industryCount);
        Industries[ industryCount ][ IsBuyingCargo ] = true;
        industryCount++;
    }
    cache_delete(result);
    printf("Serveryje yra sukurtos %d kompanijos.",industryCount);

    // Tuo paèiu ir Laivo objektus sukuriam.
    ShipInfo[ ObjectIDs ][ 0 ] =  CreateDynamicObject(5160, 2829.95313, -2479.57031, 5.26560,   0.00000, 0.00000, 270.00000);
    ShipInfo[ ObjectIDs ][ 1 ] =  CreateDynamicObject(5156, 2838.03906, -2423.88281, 10.96090,   0.00000, 0.00000, 270.00000);
    ShipInfo[ ObjectIDs ][ 2 ] =  CreateDynamicObject(3724, 2838.19067, -2407.12109, 29.31250,   0.00000, 0.00000, 270.00000);
    ShipInfo[ ObjectIDs ][ 3 ] =  CreateDynamicObject(5167, 2838.03125, -2371.95313, 7.29690,   0.00000, 0.00000, 270.00000);
    ShipInfo[ ObjectIDs ][ 4 ] =  CreateDynamicObject(5166, 2829.95313, -2479.57031, 5.26560,   0.00000, 0.00000, 270.00000);
    ShipInfo[ ObjectIDs ][ 5 ] =  CreateDynamicObject(3724, 2838.21411, -2489.00000, 29.31250,   0.00000, 0.00000, 90.00000);
    ShipInfo[ ObjectIDs ][ 6 ] =  CreateDynamicObject(5155, 2838.02344, -2358.47656, 21.31250,   0.00000, 0.00000, 270.00000);
    ShipInfo[ ObjectIDs ][ 7 ] =  CreateDynamicObject(5158, 2837.77344, -2334.47656, 11.99220,   0.00000, 0.00000, 0.00000);
    ShipInfo[ ObjectIDs ][ 8 ] =  CreateDynamicObject(5154, 2838.14063, -2447.84375, 15.75000,   0.00000, 0.00000, 270.00000);
    ShipInfo[ ObjectIDs ][ 9 ] =  CreateDynamicObject(5157, 2838.03906, -2532.77344, 17.02340,   0.00000, 0.00000, 270.00000);
    ShipInfo[ ObjectIDs ][ 10 ] =  CreateDynamicObject(5165, 2838.03125, -2520.18750, 18.41406,   0.00000, 0.00000, 0.00000);
}


stock UpdateIndustryInfo(index)
{
    if(IsValidDynamic3DTextLabel(Industries[ index ][ Label ]))
        DestroyDynamic3DTextLabel(Industries [ index ][ Label ]);
	
	if(!IsValidDynamicPickup(Industries [ index ][ Pickup ]))
		Industries[ index ][ Pickup ] = CreateDynamicPickup(1318, 1, Industries[ index ][ PosX ], Industries[ index ][ PosY ], Industries [ index ][ PosZ ]);
	
    new string[512];
    format(string,sizeof(string),"{CC0000}%s\n\n", Industries[ index ][ Name ]);
    foreach(CommodityIterator, i)
    {
        if(Commodities[ i ][ IndustryId ] == Industries [ index ][ Id ]
            && !Commodities[ i ][ IsBusinessCommodity ])
		{
			new E_COMMODITY_SELL_BUY_STATUS:isBuying  = Commodities[ i ][ SellBuyStatus ];
            format(string, sizeof(string),"%s\n\n{00CC00}[%s]{FFFFFF}%s\nKaina %d / vieneta\nSandelyje yra: %d / %d\n",
                string, 
				(isBuying == Buying) ? ("Perka") : ("Parduoda"),
                GetCargoName(Commodities [ i ][ CargoId ]), 
				Commodities[ i ][ Price ],
				Commodities[ i ][ CurrentStock ],
				GetCargoLimit(Commodities [ i ][ CargoId ] ));
		}
	}
    Industries[ index ][ Label ] = CreateDynamic3DTextLabel(string, COLOR_WHITE, Industries[ index ][ PosX ], Industries[ index ][ PosY ], Industries[ index ][ PosZ ], 40.0);
    return 1;
}

stock LoadTruckerCargo()
{
    new cargoCount = 0;
    new Cache:result = mysql_query(DbHandle, "SELECT * FROM trucker_cargo");
    for(new i = 0; i < cache_get_row_count(); i++)
    {
        if(cargoCount >= sizeof TruckerCargo)
        {
            printf("KLAIDA. Lenteleje 'trucker_cargo' yra daugiau prekiu(%d) nei leidziama(%d)", cache_get_row_count(), sizeof TruckerCargo);
            break;
        }
        TruckerCargo[ cargoCount ][ Id ] = cache_get_field_content_int(i, "id");
        cache_get_field_content(i, "name", TruckerCargo[ cargoCount ][ Name ], DbHandle, MAX_TRUCKER_CARGO_NAME);
        TruckerCargo[ cargoCount ][ Limit ] = cache_get_field_content_int(i, "limit");
        TruckerCargo[ cargoCount ][ Production ] = cache_get_field_content_int(i, "production");
        TruckerCargo[ cargoCount ][ Consumption ] = cache_get_field_content_int(i, "consumption");
        TruckerCargo[ cargoCount ][ Slot ] = cache_get_field_content_int(i, "slot");
        TruckerCargo[ cargoCount ][ Type ] = cache_get_field_content_int(i, "type");
        Itter_Add(TruckerCargoIterator, cargoCount);
        cargoCount++;
    }
    cache_delete(result);
    printf("Serveryje yra %d furistu kroviniai.",cargoCount);
}
stock LoadCommodities()
{
    new commodityCount,
        industryId, cargoId, buysellstatus[8],curentStock, type[9], price,
        Cache:result;
    result = mysql_query(DbHandle, "SELECT * FROM commodities");
    for(new i = 0; i < cache_get_row_count(); i++)
    {
        if(commodityCount >= sizeof Commodities)
        {
            printf("KLAIDA. Lenteleje 'commodities' yra daugiau prekiu(%d) nei leidziama(%d)", cache_get_row_count(), sizeof Commodities);
            break;
        }
        industryId = cache_get_field_content_int(i, "industry_id");
        cargoId = cache_get_field_content_int(i, "cargo_id");
        cache_get_field_content(i, "sell_buy_status", buysellstatus);
        curentStock = cache_get_field_content_int(i, "current_stock");
        cache_get_field_content(i, "type", type);
        price = cache_get_field_content_int(i, "price");

        Commodities[ commodityCount ][ IndustryId ] = industryId;
        Commodities[ commodityCount ][ CargoId ] = cargoId;
        Commodities[ commodityCount ][ CurrentStock ] = curentStock;
        Commodities[ commodityCount ][ SellBuyStatus ] = (!strcmp(buysellstatus,"Buying")) ? (Buying) : (Selling);
        Commodities[ commodityCount ][ Price ] = price;
        if(!strcmp(type, "Business",true))
            Commodities[ commodityCount ][ IsBusinessCommodity ] = true;
        Itter_Add(CommodityIterator, commodityCount);
        commodityCount++;
    }
	cache_delete(result);
    printf("Serveryje yra %d parduodamu/perkamu prekiu.",commodityCount);
}
stock LoadVehicleShops()
{
    new buffer[128], shopCount = 0, ticks = GetTickCount(), Cache:result;
    result = mysql_query(DbHandle, "SELECT * FROM vehicle_shops");
    for(new i = 0; i < cache_get_row_count(); i++)
    {
        if(shopCount >= MAX_VEHICLE_SHOPS)
        {
            printf("KLAIDA. Lenteleje 'vehicle_shops' yra daugiau parduotuviu(%d) nei leidziama(" #MAX_VEHICLE_SHOPS ")", cache_get_row_count());
            break;
        }

        VehicleShops[ shopCount ][ Id ] = cache_get_field_content_int(i, "id");
        cache_get_field_content(i, "name", VehicleShops[ shopCount ][ Name ], DbHandle, MAX_VEHICLE_SHOP_NAME);
        VehicleShops[ shopCount ][ PosX ] = cache_get_field_content_float(i, "x");
        VehicleShops[ shopCount ][ PosY ] = cache_get_field_content_float(i, "y");
        VehicleShops[ shopCount ][ PosZ ] = cache_get_field_content_float(i, "z");
        
        Itter_Add(VehicleShopIterator, shopCount);
        
        format(buffer,sizeof(buffer), "%s\nParduodamø trnasporto priemoniø sàraðas\nKomanda: {FFFFFF}/v buy",
            VehicleShops[ shopCount ][ Name ]);
        
        VehicleShops[ shopCount ][ Label ] = CreateDynamic3DTextLabel(buffer, COLOR_NEWS, 
            VehicleShops[ shopCount ][ PosX ],
            VehicleShops[ shopCount ][ PosY ],
            VehicleShops[ shopCount ][ PosZ ],
            7.0,  INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0, -1, 15.0
        );

        shopCount++;
    }
    cache_delete(result);

    
    new id, model, price, vehicleCount = 0;
    result = mysql_query(DbHandle, "SELECT * FROM vehicle_shop_vehicles ORDER BY price ASC");
    for(new k = 0; k < cache_get_row_count(); k++)
    {
        id = cache_get_field_content_int(k, "shop_id");
        model = cache_get_field_content_int(k, "model");
        price = cache_get_field_content_int(k, "price");

        // Pasitaiko blogai ávestø modeliø, mes jø nenroim.
        if(model < 400 || model > 611)
            continue;

        foreach(VehicleShopIterator, i)
            if(VehicleShops[ i ][ Id ] == id)
            {
                for(new j = 0; j < MAX_VEHICLE_SHOP_VEHICLES; j++)
                {
                    // Jei indekse j, jau yra kokia masina. Jis musu nedomina.
                    if(VehicleShops[ i ][ VehicleModels ][ j ])
                        continue;
                    VehicleShops[ i ][ VehicleModels ][ j ] = model;
                    VehicleShops[ i ][ VehiclePrices ][ j ] = price;
                    break;
                }
                vehicleCount++;
                break;
            }
    }
    cache_delete(result);

    printf("Pakrauti %d maðinø turgûs ir %d transporoto priemonës. Tai uþtruko %d MS", shopCount, vehicleCount, GetTickCount() - ticks);
}



stock loadPlayerNotes( playerid )
{
    new string[ 126 ],
        result[ 128 ],
        number,
        slot,
        ministr[ 8 ],
        Cache:r;

    format     ( string, 126, "SELECT slot,note FROM notes WHERE owner = %d", pInfo[ playerid ][ pMySQLID ] );
    r = mysql_query(DbHandle,  string );
    
    for(new i = 0; i < cache_get_row_count(); i++)
    {
        slot = cache_get_field_content_int(i, "slot");
        cache_get_field_content(i, "note", result);
        sscanf( result, "p</>s[128]d", string, number);

        format       ( ministr, 8, "NOTE_%d", slot );
        SetPVarString( playerid, ministr, string );
        format       ( ministr, 8, "NOTE2_%d", slot );
        SetPVarInt   ( playerid, ministr, number );
    }
    
    cache_delete(r);
    return 1;
}
stock nullVehicle( vehicleid )
{
    Engine[ vehicleid ] = false;
    VGaraze[ vehicleid ] = false;
    VehicleFish[ vehicleid ] = 0;

    if( IsValidDynamic3DTextLabel( Units [ vehicleid ] ) )
        DestroyDynamic3DTextLabel( Units [ vehicleid ] );

    strmid( cInfo[ vehicleid ][ cName    ], "None" , 0, 24, 24 );
    strmid( cInfo[ vehicleid ][ cNumbers ], "None" , 0, 24, 24 );

    cInfo[ vehicleid ][ cOwner     ] = 0;
    cInfo[ vehicleid ][ cID        ] = 0;
    cInfo[ vehicleid ][ cModel     ] = 0;
    cInfo[ vehicleid ][ cSpawn     ][ 0 ] = 0;
    cInfo[ vehicleid ][ cSpawn     ][ 1 ] = 0;
    cInfo[ vehicleid ][ cSpawn     ][ 2 ] = 0;
    cInfo[ vehicleid ][ cSpawn     ][ 3 ] = 0;
    cInfo[ vehicleid ][ cColor     ][ 0 ] = 0;
    cInfo[ vehicleid ][ cColor     ][ 1 ] = 0;
    cInfo[ vehicleid ][ cLock      ] = 0;
    cInfo[ vehicleid ][ cFuel      ] = 0;
    cInfo[ vehicleid ][ cFaction   ] = 0;
    cInfo[ vehicleid ][ cWheels    ] = 0;
    cInfo[ vehicleid ][ cTuning    ] = 0;
    cInfo[ vehicleid ][ cInsurance ] = 0;
    cInfo[ vehicleid ][ cDuzimai   ] = 0;
    cInfo[ vehicleid ][ cLockType  ] = 0;
    cInfo[ vehicleid ][ cAlarm     ] = 0;
    cInfo[ vehicleid ][ cTicket    ] = 0;
    cInfo[ vehicleid ][ cHidraulik ] = 0;
    cInfo[ vehicleid ][ cDub       ] = 0;
    cInfo[ vehicleid ][ cKM        ] = 0.0;
    cInfo[ vehicleid ][ cVirtWorld ] = 0;
    for( new slot = 0; slot < MAX_TRUNK_SLOTS; slot ++)
    {
        cInfo[ vehicleid ][ cTrunkWeapon ][ slot ] = 0;
        cInfo[ vehicleid ][ cTrunkAmmo   ][ slot ] = 0;
        cInfo[ vehicleid ][ cTrunkItemDurability ][ slot ] = 0;
        cInfo[ vehicleid ][ cTrunkItemContent ][ slot ] = 0;
    } 

    for(new i = 0; i < MAX_TRUCKER_CARGO_OBJECTS; i++)
    {
        if(cInfo[ vehicleid ][ objectai ][ i ] != -1)
            DestroyObject(cInfo[ vehicleid ][ objectai ][ i ]);
        cInfo[ vehicleid ][ objectai ][ i ] = -1;
    }

    /* Krovinii */
    for(new i = 0; i <  sizeof VehicleCargo[]; i++)
    {
        VehicleCargo[ vehicleid ][ i ][ CargoId ] = 0;
        VehicleCargo[ vehicleid ][ i ][ Amount ] = 0;
    }
    return 1;
}
stock VehicleEngine(vehicleid, param)
{
    new engine, lights, alarm, doors, bonnet, boot, objective;

    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(vehicleid, param, lights, alarm, doors, bonnet, boot, objective);
}
stock VehicleAlarm(vehicleid, param)
{
    new engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(vehicleid, engine, lights, param, doors, bonnet, boot, objective);
}
stock GetVehicleName( model )
{
    new str [ 24 ];
    format( str, 24, "%s", aVehicleNames[ model - 400 ] ) ;
    return str;
}
stock GetVehicleFuelTank( model )
    return vBakas[ model - 400 ];

stock GetVehicleTrunkSlots( model )
    return vSlotai[ model - 400 ];

/*
stock GetVehicleCargoLimit(model)
    return vSlotai3[ model - 400 ];
*/
//Sutvarkom kick,ban ir t.t cmds
/*forward _Kick ( playerid );
public _Kick ( playerid ) Kick ( playerid );
#define Kick(%0) SetTimerEx ( "_Kick", 1000, 0, "d", %0 )*/
FUNKCIJA:KicknPlayer( playerid )
{
    Kick( playerid );
    return true;
}

#define INVALID_3D_TEXT Text3D:-1
CMD:ame( playerid, params[ ] )
{
    new
        result[ 128 ];

    if ( sscanf( params, "s[128]", result ) ) return SendClientMessage( playerid, COLOR_RED, "/ame [veiksmas]" );
    else if ( strlen ( result ) > 120 ) SendClientMessage( playerid, COLOR_GREY, "Nedaugiau 120 simboliø." );
    else
    {
        format(szMessage, sizeof(szMessage), "%s %s", GetPlayerNameEx( playerid), params);
        SetPlayerChatBubble( playerid, szMessage, COLOR_PURPLE, 20, 10000 );
        format( szMessage, sizeof(szMessage),"> %s", szMessage );
        SendClientMessage( playerid, COLOR_PURPLE, szMessage );
        if ( pInfo[ playerid ][ pJob ] == JOB_JACKER && ( LaikoTipas[playerid] == 5 || LaikoTipas[playerid] == 6 ) )
            ActionLog( pInfo[ playerid ][ pMySQLID ], szMessage );
    }

    return true;
}

stock TeleportPlayerToCoord( playerid, Float:x, Float:y, Float:z )
{
    // Funkcija: TeleportPlayerToCoord( playerid, Float:x, Float:y, Float:z )
    // Nuteleportuos þaidëjá  á tam tikrá  koordinatà

    if ( GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
        SetVehiclePos( GetPlayerVehicleID( playerid ), x, y, z );
    else
        SetPlayerPos( playerid, x, y, z );
}

CMD:badge( playerid, params[ ] )
{
    #pragma unused params
    if (pInfo[playerid][pMember] == 2)
    {
            SetPlayerAttachedObject(playerid, 6,19347,16,0.071999,-0.112999,0.036999,115.699981,-2.099976,-36.599925);
            EditAttachedObject(playerid, 6);
            SendClientMessage( playerid, COLOR_POLICE,"[LSPD] Dabar nusistatykite norimà pozicijà þenkleliui," );
            SendClientMessage( playerid, COLOR_RED,"[LSPD] Norëdami paðalinti þenklelá naudokita komandà: /rbadge." );
    }
    else
        SendClientMessage( playerid, COLOR_RED,"Jûs neesate policininkas.");
    return true;

}

CMD:rbadge( playerid, params[] )
{
    #pragma unused params
    if (pInfo[playerid][pMember] == 2)
    {
        SendClientMessage( playerid, COLOR_POLICE,"[LSPD] Þenklelis buvo paðalintas");
        RemovePlayerAttachedObject( playerid, 6 );
    }
    else
        SendClientMessage( playerid, COLOR_LIGHTRED,"Klaida, negalite naudoti komandos nebûdami pareigûnø.");
    return true;

}


CMD:vest( playerid, params[ ] )
{
    #pragma unused params
    if ( UsePDCMD( playerid ) == 0 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Klaida, negalite atlikti ðio veiksmo nedirbdami policijos departamente." );
    if(!PDJOBPlace(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, negalite persirengti nebødamas persirengimo kabinoje/kambaryje.");
    new
        Float:armour;
    GetPlayerArmour( playerid, armour );
    if( armour > 0 )
    {
        SendClientMessage( playerid, COLOR_POLICE,"[LSPD] Neperðaunama liemenë buvo nuimta." );
        SetPlayerArmour( playerid, 0 );
        RemovePlayerAttachedObject( playerid, 5 );
    }
    else
    {
        SendClientMessage( playerid, COLOR_POLICE,"[LSPD] Neperðaunama liemenë buvo uþdëta." );
        SetPlayerArmour( playerid, 100 );
        SetPlayerAttachedObject( playerid, 5, 19142, 1, 0.1,  0.05, 0.0,  0.0, 0.0, 0.0 );
        EditAttachedObject( playerid, 5 );
    }
    return 1;
}

public OnLookupComplete(playerid)
{
    if(IsProxyUser(playerid))
        KickPlayer( "AC", playerid, "Proxy" );
}

CMD:blindfold(playerid, params[])
{
    new targetid,
        string[ 128 ],
        invindex = -1;

    for(new i = 0; i < GetPlayerItemCount(playerid); i++)
        if(IsItemBlindfold(GetPlayerItemAtIndex(playerid, i)) && !IsPlayerWearingItem(playerid, GetPlayerItemAtIndex(playerid, i)))
        {
            invindex = i;
            break;
        }

    if(invindex == -1)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Klaida, jûs neturite skarelës arba jà naudojate pats.");

    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Niekam negalite atriðti/uþriðti raiðèio kai jûsø rankos surakintos.");

    if(sscanf(params, "u", targetid))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Teisingas komandos naudojimas /blindfold [Þaidëjo ID/Dalis vardo]");

    if(!IsPlayerConnected(targetid))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Tokio þaidëjo nëra!");

    if(!IsPlayerInRangeOfPlayer(playerid, targetid, 5.0))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Þaidëjas yra per toli.");


    if(IsBlindfolded[ targetid ])
    {
        format(string, sizeof(string), "atriða akiø raiðtá nuo %s veido", GetPlayerNameEx(targetid));
        cmd_me(playerid, string);
        TextDrawHideForPlayer(targetid, BlindfoldTextdraw);
        SetCameraBehindPlayer(targetid);
        IsBlindfolded[ targetid ] = false;
    }
    else 
    {
        format(string, sizeof(string), "%s nori jums ant akiø uþriðti raiðá. Per já nieko nematysite. Raðykite /accept blindfold %d", GetPlayerNameEx(playerid), playerid);
        SendClientMessage(targetid, COLOR_NEWS, string);
        format(string, sizeof(string), "Veikëjas %s gavo praðymà leisti uþriðti jam raiðtá ant akiø, palaukite kol veikëjas atsakys.", GetPlayerNameEx(targetid));
        SendClientMessage(playerid, COLOR_NEWS, string);

        Offer[ targetid ][ 8 ] = playerid;
    }
    return 1;
}

CMD:mask( playerid, params[ ] )
{   
    #pragma unused params
    new string[ 64 ],
        bool:found;
    if ( PlayerFaction( playerid ) != 1 && pInfo[ playerid ][ pDonator ] <= 1 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: kauke galite naudoti tik nuo 2 rëmëjo lygio arba turi bûti PD" );

    foreach(Player, x)
    {
        if(pInfo[ x ][ pAdmin ] >= 1 && AdminDuty[ x ])
        {
            found = true;
            break;
        }
    }

    if(pInfo[playerid][pMask] == 1)
    {
        if ( !found ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Perspëjimas: kauke galite naudoti tik tada kai yra administratoriø" );
        format      ( string, sizeof(string), "* %s uþsimauna  kaukæ.", GetPlayerNameEx( playerid ));
        ProxDetector( 20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        pInfo[ playerid ][ pMask ] = 0;
        foreach(Player,i)
        {
            ShowPlayerNameTagForPlayer(i, playerid, pInfo[playerid][pMask]);
        }
        return 1;
    }
    else
    {
        format      ( string, sizeof(string), "* %s nusimauna  kaukæ.", GetPlayerNameEx( playerid ) );
        ProxDetector( 20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        pInfo[ playerid ][ pMask ] = 1;
        foreach(Player,i)
        {
            ShowPlayerNameTagForPlayer(i, playerid, pInfo[playerid][pMask]);
        }
        return 1;
    }
}


public OnQueryError(errorid, error[], callback[], query[], connectionHandle)
{
    new hour, minute, second, 
        File:file = fopen("mysql_errlog.txt", io_append),
        string[64];
    gettime(hour, minute, second);
    if(!file)
        return 0;

    format(string, sizeof(string),"[%d.%d.%d]", hour, minute ,second);
    fwrite(file, string);
    format(string, sizeof(string),"Error id: %d. ",errorid);
    fwrite(file, string);
    fwrite(file, "Error: ");
    fwrite(file, error);
    fwrite(file, ". Query: ");
    fwrite(file, query);
    fwrite(file, "\r\n");
    fclose(file);
    return 1;
}

forward OnSQLConnectionLost();
public OnSQLConnectionLost()
{
    printf("SQL connection lost");
    new string[40];
    SendAdminMessage(0xFF0000FF, "Dëmesio. Dingo ryðys su duomenø baze. Jei ðios þinutës tæsis, imkitës veiksmø.");
    format(string, sizeof(string),"Bandoma prisijungti vël: %d", mysql_reconnect());
    SendAdminMessage(0xFF0000FF, string);
}